
build/lora328.elf:     формат файла elf32-avr

Розділи:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001da  00800100  00006928  000069bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000029b  008002da  008002da  00006b96  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00006b96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00006be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a108  00000000  00000000  00007180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b56  00000000  00000000  00011288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000369d  00000000  00000000  00012dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000121c  00000000  00000000  0001647c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ea1  00000000  00000000  00017698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f0e  00000000  00000000  00019539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000658  00000000  00000000  00020447  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизасемблювання розділу .text:

00000000 <__vectors>:
       0:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__ctors_end>
       4:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_1>
       8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
       c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      10:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      14:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_5>
      18:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      1c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      20:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      24:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      28:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      2c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      30:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      34:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      38:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      3c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      40:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_16>
      44:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      48:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      4c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      50:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_20>
      54:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      58:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      5c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      60:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      64:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      68:	1c 1c       	adc	r1, r12
      6a:	22 1c       	adc	r2, r2
      6c:	d2 1c       	adc	r13, r2
      6e:	9f 1c       	adc	r9, r15
      70:	96 1c       	adc	r9, r6
      72:	f8 1c       	adc	r15, r8
      74:	d1 1d       	adc	r29, r1
      76:	d1 1d       	adc	r29, r1
      78:	d1 1d       	adc	r29, r1
      7a:	d1 1d       	adc	r29, r1
      7c:	d1 1d       	adc	r29, r1
      7e:	d1 1d       	adc	r29, r1
      80:	d1 1d       	adc	r29, r1
      82:	d1 1d       	adc	r29, r1
      84:	d1 1d       	adc	r29, r1
      86:	3c 1d       	adc	r19, r12
      88:	5a 1d       	adc	r21, r10

0000008a <__trampolines_end>:
      8a:	c6 a5       	ldd	r28, Z+46	; 0x2e
      8c:	63 63       	ori	r22, 0x33	; 51
      8e:	f8 84       	ldd	r15, Y+8	; 0x08
      90:	7c 7c       	andi	r23, 0xCC	; 204
      92:	ee 99       	sbic	0x1d, 6	; 29
      94:	77 77       	andi	r23, 0x77	; 119
      96:	f6 8d       	ldd	r31, Z+30	; 0x1e
      98:	7b 7b       	andi	r23, 0xBB	; 187
      9a:	ff 0d       	add	r31, r15
      9c:	f2 f2       	brmi	.-68     	; 0x5a <__SREG__+0x1b>
      9e:	d6 bd       	out	0x26, r29	; 38
      a0:	6b 6b       	ori	r22, 0xBB	; 187
      a2:	de b1       	in	r29, 0x0e	; 14
      a4:	6f 6f       	ori	r22, 0xFF	; 255
      a6:	91 54       	subi	r25, 0x41	; 65
      a8:	c5 c5       	rjmp	.+2954   	; 0xc34 <__stack+0x335>
      aa:	60 50       	subi	r22, 0x00	; 0
      ac:	30 30       	cpi	r19, 0x00	; 0
      ae:	02 03       	mulsu	r16, r18
      b0:	01 01       	movw	r0, r2
      b2:	ce a9       	ldd	r28, Y+54	; 0x36
      b4:	67 67       	ori	r22, 0x77	; 119
      b6:	56 7d       	andi	r21, 0xD6	; 214
      b8:	2b 2b       	or	r18, r27
      ba:	e7 19       	sub	r30, r7
      bc:	fe fe       	.word	0xfefe	; ????
      be:	b5 62       	ori	r27, 0x25	; 37
      c0:	d7 d7       	rcall	.+4014   	; 0x1070 <constant_table_AES_E1+0x3e6>
      c2:	4d e6       	ldi	r20, 0x6D	; 109
      c4:	ab ab       	std	Y+51, r26	; 0x33
      c6:	ec 9a       	sbi	0x1d, 4	; 29
      c8:	76 76       	andi	r23, 0x66	; 102
      ca:	8f 45       	sbci	r24, 0x5F	; 95
      cc:	ca ca       	rjmp	.-2668   	; 0xfffff662 <__eeprom_end+0xff7ef662>
      ce:	1f 9d       	mul	r17, r15
      d0:	82 82       	std	Z+2, r8	; 0x02
      d2:	89 40       	sbci	r24, 0x09	; 9
      d4:	c9 c9       	rjmp	.-3182   	; 0xfffff468 <__eeprom_end+0xff7ef468>
      d6:	fa 87       	std	Y+10, r31	; 0x0a
      d8:	7d 7d       	andi	r23, 0xDD	; 221
      da:	ef 15       	cp	r30, r15
      dc:	fa fa       	.word	0xfafa	; ????
      de:	b2 eb       	ldi	r27, 0xB2	; 178
      e0:	59 59       	subi	r21, 0x99	; 153
      e2:	8e c9       	rjmp	.-3300   	; 0xfffff400 <__eeprom_end+0xff7ef400>
      e4:	47 47       	sbci	r20, 0x77	; 119
      e6:	fb 0b       	sbc	r31, r27
      e8:	f0 f0       	brcs	.+60     	; 0x126 <__trampolines_end+0x9c>
      ea:	41 ec       	ldi	r20, 0xC1	; 193
      ec:	ad ad       	ldd	r26, Y+61	; 0x3d
      ee:	b3 67       	ori	r27, 0x73	; 115
      f0:	d4 d4       	rcall	.+2472   	; 0xa9a <__stack+0x19b>
      f2:	5f fd       	.word	0xfd5f	; ????
      f4:	a2 a2       	std	Z+34, r10	; 0x22
      f6:	45 ea       	ldi	r20, 0xA5	; 165
      f8:	af af       	std	Y+63, r26	; 0x3f
      fa:	23 bf       	out	0x33, r18	; 51
      fc:	9c 9c       	mul	r9, r12
      fe:	53 f7       	brvc	.-44     	; 0xd4 <__trampolines_end+0x4a>
     100:	a4 a4       	ldd	r10, Z+44	; 0x2c
     102:	e4 96       	adiw	r28, 0x34	; 52
     104:	72 72       	andi	r23, 0x22	; 34
     106:	9b 5b       	subi	r25, 0xBB	; 187
     108:	c0 c0       	rjmp	.+384    	; 0x28a <__trampolines_end+0x200>
     10a:	75 c2       	rjmp	.+1258   	; 0x5f6 <constant_table_AES_E3+0x16c>
     10c:	b7 b7       	in	r27, 0x37	; 55
     10e:	e1 1c       	adc	r14, r1
     110:	fd fd       	.word	0xfdfd	; ????
     112:	3d ae       	std	Y+61, r3	; 0x3d
     114:	93 93       	.word	0x9393	; ????
     116:	4c 6a       	ori	r20, 0xAC	; 172
     118:	26 26       	eor	r2, r22
     11a:	6c 5a       	subi	r22, 0xAC	; 172
     11c:	36 36       	cpi	r19, 0x66	; 102
     11e:	7e 41       	sbci	r23, 0x1E	; 30
     120:	3f 3f       	cpi	r19, 0xFF	; 255
     122:	f5 02       	muls	r31, r21
     124:	f7 f7       	brid	.-4      	; 0x122 <__trampolines_end+0x98>
     126:	83 4f       	sbci	r24, 0xF3	; 243
     128:	cc cc       	rjmp	.-1640   	; 0xfffffac2 <__eeprom_end+0xff7efac2>
     12a:	68 5c       	subi	r22, 0xC8	; 200
     12c:	34 34       	cpi	r19, 0x44	; 68
     12e:	51 f4       	brne	.+20     	; 0x144 <__trampolines_end+0xba>
     130:	a5 a5       	ldd	r26, Z+45	; 0x2d
     132:	d1 34       	cpi	r29, 0x41	; 65
     134:	e5 e5       	ldi	r30, 0x55	; 85
     136:	f9 08       	sbc	r15, r9
     138:	f1 f1       	breq	.+124    	; 0x1b6 <__trampolines_end+0x12c>
     13a:	e2 93       	st	-Z, r30	; не визначено
     13c:	71 71       	andi	r23, 0x11	; 17
     13e:	ab 73       	andi	r26, 0x3B	; 59
     140:	d8 d8       	rcall	.-3664   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
     142:	62 53       	subi	r22, 0x32	; 50
     144:	31 31       	cpi	r19, 0x11	; 17
     146:	2a 3f       	cpi	r18, 0xFA	; 250
     148:	15 15       	cp	r17, r5
     14a:	08 0c       	add	r0, r8
     14c:	04 04       	cpc	r0, r4
     14e:	95 52       	subi	r25, 0x25	; 37
     150:	c7 c7       	rjmp	.+3982   	; 0x10e0 <constant_table_AES_S+0x56>
     152:	46 65       	ori	r20, 0x56	; 86
     154:	23 23       	and	r18, r19
     156:	9d 5e       	subi	r25, 0xED	; 237
     158:	c3 c3       	rjmp	.+1926   	; 0x8e0 <constant_table_AES_E2+0x56>
     15a:	30 28       	or	r3, r0
     15c:	18 18       	sub	r1, r8
     15e:	37 a1       	ldd	r19, Z+39	; 0x27
     160:	96 96       	adiw	r26, 0x26	; 38
     162:	0a 0f       	add	r16, r26
     164:	05 05       	cpc	r16, r5
     166:	2f b5       	in	r18, 0x2f	; 47
     168:	9a 9a       	sbi	0x13, 2	; 19
     16a:	0e 09       	sbc	r16, r14
     16c:	07 07       	cpc	r16, r23
     16e:	24 36       	cpi	r18, 0x64	; 100
     170:	12 12       	cpse	r1, r18
     172:	1b 9b       	sbis	0x03, 3	; 3
     174:	80 80       	ld	r8, Z
     176:	df 3d       	cpi	r29, 0xDF	; 223
     178:	e2 e2       	ldi	r30, 0x22	; 34
     17a:	cd 26       	eor	r12, r29
     17c:	eb eb       	ldi	r30, 0xBB	; 187
     17e:	4e 69       	ori	r20, 0x9E	; 158
     180:	27 27       	eor	r18, r23
     182:	7f cd       	rjmp	.-1282   	; 0xfffffc82 <__eeprom_end+0xff7efc82>
     184:	b2 b2       	in	r11, 0x12	; 18
     186:	ea 9f       	mul	r30, r26
     188:	75 75       	andi	r23, 0x55	; 85
     18a:	12 1b       	sub	r17, r18
     18c:	09 09       	sbc	r16, r9
     18e:	1d 9e       	mul	r1, r29
     190:	83 83       	std	Z+3, r24	; 0x03
     192:	58 74       	andi	r21, 0x48	; 72
     194:	2c 2c       	mov	r2, r12
     196:	34 2e       	mov	r3, r20
     198:	1a 1a       	sub	r1, r26
     19a:	36 2d       	mov	r19, r6
     19c:	1b 1b       	sub	r17, r27
     19e:	dc b2       	in	r13, 0x1c	; 28
     1a0:	6e 6e       	ori	r22, 0xEE	; 238
     1a2:	b4 ee       	ldi	r27, 0xE4	; 228
     1a4:	5a 5a       	subi	r21, 0xAA	; 170
     1a6:	5b fb       	.word	0xfb5b	; ????
     1a8:	a0 a0       	ldd	r10, Z+32	; 0x20
     1aa:	a4 f6       	brge	.-88     	; 0x154 <__trampolines_end+0xca>
     1ac:	52 52       	subi	r21, 0x22	; 34
     1ae:	76 4d       	sbci	r23, 0xD6	; 214
     1b0:	3b 3b       	cpi	r19, 0xBB	; 187
     1b2:	b7 61       	ori	r27, 0x17	; 23
     1b4:	d6 d6       	rcall	.+3500   	; 0xf62 <constant_table_AES_E1+0x2d8>
     1b6:	7d ce       	rjmp	.-774    	; 0xfffffeb2 <__eeprom_end+0xff7efeb2>
     1b8:	b3 b3       	in	r27, 0x13	; 19
     1ba:	52 7b       	andi	r21, 0xB2	; 178
     1bc:	29 29       	or	r18, r9
     1be:	dd 3e       	cpi	r29, 0xED	; 237
     1c0:	e3 e3       	ldi	r30, 0x33	; 51
     1c2:	5e 71       	andi	r21, 0x1E	; 30
     1c4:	2f 2f       	mov	r18, r31
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	84 84       	ldd	r8, Z+12	; 0x0c
     1ca:	a6 f5       	brtc	.+104    	; 0x234 <__trampolines_end+0x1aa>
     1cc:	53 53       	subi	r21, 0x33	; 51
     1ce:	b9 68       	ori	r27, 0x89	; 137
     1d0:	d1 d1       	rcall	.+930    	; 0x574 <constant_table_AES_E3+0xea>
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	c1 2c       	mov	r12, r1
     1d8:	ed ed       	ldi	r30, 0xDD	; 221
     1da:	40 60       	ori	r20, 0x00	; 0
     1dc:	20 20       	and	r2, r0
     1de:	e3 1f       	adc	r30, r19
     1e0:	fc fc       	.word	0xfcfc	; ????
     1e2:	79 c8       	rjmp	.-3854   	; 0xfffff2d6 <__eeprom_end+0xff7ef2d6>
     1e4:	b1 b1       	in	r27, 0x01	; 1
     1e6:	b6 ed       	ldi	r27, 0xD6	; 214
     1e8:	5b 5b       	subi	r21, 0xBB	; 187
     1ea:	d4 be       	out	0x34, r13	; 52
     1ec:	6a 6a       	ori	r22, 0xAA	; 170
     1ee:	8d 46       	sbci	r24, 0x6D	; 109
     1f0:	cb cb       	rjmp	.-2154   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     1f2:	67 d9       	rcall	.-3378   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     1f4:	be be       	out	0x3e, r11	; 62
     1f6:	72 4b       	sbci	r23, 0xB2	; 178
     1f8:	39 39       	cpi	r19, 0x99	; 153
     1fa:	94 de       	rcall	.-728    	; 0xffffff24 <__eeprom_end+0xff7eff24>
     1fc:	4a 4a       	sbci	r20, 0xAA	; 170
     1fe:	98 d4       	rcall	.+2352   	; 0xb30 <__stack+0x231>
     200:	4c 4c       	sbci	r20, 0xCC	; 204
     202:	b0 e8       	ldi	r27, 0x80	; 128
     204:	58 58       	subi	r21, 0x88	; 136
     206:	85 4a       	sbci	r24, 0xA5	; 165
     208:	cf cf       	rjmp	.-98     	; 0x1a8 <__trampolines_end+0x11e>
     20a:	bb 6b       	ori	r27, 0xBB	; 187
     20c:	d0 d0       	rcall	.+416    	; 0x3ae <__trampolines_end+0x324>
     20e:	c5 2a       	or	r12, r21
     210:	ef ef       	ldi	r30, 0xFF	; 255
     212:	4f e5       	ldi	r20, 0x5F	; 95
     214:	aa aa       	std	Y+50, r10	; 0x32
     216:	ed 16       	cp	r14, r29
     218:	fb fb       	.word	0xfbfb	; ????
     21a:	86 c5       	rjmp	.+2828   	; 0xd28 <constant_table_AES_E1+0x9e>
     21c:	43 43       	sbci	r20, 0x33	; 51
     21e:	9a d7       	rcall	.+3892   	; 0x1154 <constant_table_AES_S+0xca>
     220:	4d 4d       	sbci	r20, 0xDD	; 221
     222:	66 55       	subi	r22, 0x56	; 86
     224:	33 33       	cpi	r19, 0x33	; 51
     226:	11 94       	neg	r1
     228:	85 85       	ldd	r24, Z+13	; 0x0d
     22a:	8a cf       	rjmp	.-236    	; 0x140 <__trampolines_end+0xb6>
     22c:	45 45       	sbci	r20, 0x55	; 85
     22e:	e9 10       	cpse	r14, r9
     230:	f9 f9       	.word	0xf9f9	; ????
     232:	04 06       	cpc	r0, r20
     234:	02 02       	muls	r16, r18
     236:	fe 81       	ldd	r31, Y+6	; 0x06
     238:	7f 7f       	andi	r23, 0xFF	; 255
     23a:	a0 f0       	brcs	.+40     	; 0x264 <__trampolines_end+0x1da>
     23c:	50 50       	subi	r21, 0x00	; 0
     23e:	78 44       	sbci	r23, 0x48	; 72
     240:	3c 3c       	cpi	r19, 0xCC	; 204
     242:	25 ba       	out	0x15, r2	; 21
     244:	9f 9f       	mul	r25, r31
     246:	4b e3       	ldi	r20, 0x3B	; 59
     248:	a8 a8       	ldd	r10, Y+48	; 0x30
     24a:	a2 f3       	brmi	.-24     	; 0x234 <__trampolines_end+0x1aa>
     24c:	51 51       	subi	r21, 0x11	; 17
     24e:	5d fe       	.word	0xfe5d	; ????
     250:	a3 a3       	std	Z+35, r26	; 0x23
     252:	80 c0       	rjmp	.+256    	; 0x354 <__trampolines_end+0x2ca>
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	05 8a       	std	Z+21, r0	; 0x15
     258:	8f 8f       	std	Y+31, r24	; 0x1f
     25a:	3f ad       	ldd	r19, Y+63	; 0x3f
     25c:	92 92       	st	-Z, r9
     25e:	21 bc       	out	0x21, r2	; 33
     260:	9d 9d       	mul	r25, r13
     262:	70 48       	sbci	r23, 0x80	; 128
     264:	38 38       	cpi	r19, 0x88	; 136
     266:	f1 04       	cpc	r15, r1
     268:	f5 f5       	brhc	.+124    	; 0x2e6 <__trampolines_end+0x25c>
     26a:	63 df       	rcall	.-314    	; 0x132 <__trampolines_end+0xa8>
     26c:	bc bc       	out	0x2c, r11	; 44
     26e:	77 c1       	rjmp	.+750    	; 0x55e <constant_table_AES_E3+0xd4>
     270:	b6 b6       	in	r11, 0x36	; 54
     272:	af 75       	andi	r26, 0x5F	; 95
     274:	da da       	rcall	.-2636   	; 0xfffff82a <__eeprom_end+0xff7ef82a>
     276:	42 63       	ori	r20, 0x32	; 50
     278:	21 21       	and	r18, r1
     27a:	20 30       	cpi	r18, 0x00	; 0
     27c:	10 10       	cpse	r1, r0
     27e:	e5 1a       	sub	r14, r21
     280:	ff ff       	.word	0xffff	; ????
     282:	fd 0e       	add	r15, r29
     284:	f3 f3       	brvs	.-4      	; 0x282 <__trampolines_end+0x1f8>
     286:	bf 6d       	ori	r27, 0xDF	; 223
     288:	d2 d2       	rcall	.+1444   	; 0x82e <constant_table_AES_E3+0x3a4>
     28a:	81 4c       	sbci	r24, 0xC1	; 193
     28c:	cd cd       	rjmp	.-1126   	; 0xfffffe28 <__eeprom_end+0xff7efe28>
     28e:	18 14       	cp	r1, r8
     290:	0c 0c       	add	r0, r12
     292:	26 35       	cpi	r18, 0x56	; 86
     294:	13 13       	cpse	r17, r19
     296:	c3 2f       	mov	r28, r19
     298:	ec ec       	ldi	r30, 0xCC	; 204
     29a:	be e1       	ldi	r27, 0x1E	; 30
     29c:	5f 5f       	subi	r21, 0xFF	; 255
     29e:	35 a2       	std	Z+37, r3	; 0x25
     2a0:	97 97       	sbiw	r26, 0x27	; 39
     2a2:	88 cc       	rjmp	.-1776   	; 0xfffffbb4 <__eeprom_end+0xff7efbb4>
     2a4:	44 44       	sbci	r20, 0x44	; 68
     2a6:	2e 39       	cpi	r18, 0x9E	; 158
     2a8:	17 17       	cp	r17, r23
     2aa:	93 57       	subi	r25, 0x73	; 115
     2ac:	c4 c4       	rjmp	.+2440   	; 0xc36 <__stack+0x337>
     2ae:	55 f2       	brhs	.-108    	; 0x244 <__trampolines_end+0x1ba>
     2b0:	a7 a7       	std	Z+47, r26	; 0x2f
     2b2:	fc 82       	std	Y+4, r15	; 0x04
     2b4:	7e 7e       	andi	r23, 0xEE	; 238
     2b6:	7a 47       	sbci	r23, 0x7A	; 122
     2b8:	3d 3d       	cpi	r19, 0xDD	; 221
     2ba:	c8 ac       	ldd	r12, Y+56	; 0x38
     2bc:	64 64       	ori	r22, 0x44	; 68
     2be:	ba e7       	ldi	r27, 0x7A	; 122
     2c0:	5d 5d       	subi	r21, 0xDD	; 221
     2c2:	32 2b       	or	r19, r18
     2c4:	19 19       	sub	r17, r9
     2c6:	e6 95       	lsr	r30
     2c8:	73 73       	andi	r23, 0x33	; 51
     2ca:	c0 a0       	ldd	r12, Z+32	; 0x20
     2cc:	60 60       	ori	r22, 0x00	; 0
     2ce:	19 98       	cbi	0x03, 1	; 3
     2d0:	81 81       	ldd	r24, Z+1	; 0x01
     2d2:	9e d1       	rcall	.+828    	; 0x610 <constant_table_AES_E3+0x186>
     2d4:	4f 4f       	sbci	r20, 0xFF	; 255
     2d6:	a3 7f       	andi	r26, 0xF3	; 243
     2d8:	dc dc       	rcall	.-1608   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     2da:	44 66       	ori	r20, 0x64	; 100
     2dc:	22 22       	and	r2, r18
     2de:	54 7e       	andi	r21, 0xE4	; 228
     2e0:	2a 2a       	or	r2, r26
     2e2:	3b ab       	std	Y+51, r19	; 0x33
     2e4:	90 90 0b 83 	lds	r9, 0x830B	; 0x80830b <__bss_end+0x7d96>
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	8c ca       	rjmp	.-2792   	; 0xfffff804 <__eeprom_end+0xff7ef804>
     2ec:	46 46       	sbci	r20, 0x66	; 102
     2ee:	c7 29       	or	r28, r7
     2f0:	ee ee       	ldi	r30, 0xEE	; 238
     2f2:	6b d3       	rcall	.+1750   	; 0x9ca <__stack+0xcb>
     2f4:	b8 b8       	out	0x08, r11	; 8
     2f6:	28 3c       	cpi	r18, 0xC8	; 200
     2f8:	14 14       	cp	r1, r4
     2fa:	a7 79       	andi	r26, 0x97	; 151
     2fc:	de de       	rcall	.-580    	; 0xba <__trampolines_end+0x30>
     2fe:	bc e2       	ldi	r27, 0x2C	; 44
     300:	5e 5e       	subi	r21, 0xEE	; 238
     302:	16 1d       	adc	r17, r6
     304:	0b 0b       	sbc	r16, r27
     306:	ad 76       	andi	r26, 0x6D	; 109
     308:	db db       	rcall	.-2122   	; 0xfffffac0 <__eeprom_end+0xff7efac0>
     30a:	db 3b       	cpi	r29, 0xBB	; 187
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	64 56       	subi	r22, 0x64	; 100
     310:	32 32       	cpi	r19, 0x22	; 34
     312:	74 4e       	sbci	r23, 0xE4	; 228
     314:	3a 3a       	cpi	r19, 0xAA	; 170
     316:	14 1e       	adc	r1, r20
     318:	0a 0a       	sbc	r0, r26
     31a:	92 db       	rcall	.-2268   	; 0xfffffa40 <__eeprom_end+0xff7efa40>
     31c:	49 49       	sbci	r20, 0x99	; 153
     31e:	0c 0a       	sbc	r0, r28
     320:	06 06       	cpc	r0, r22
     322:	48 6c       	ori	r20, 0xC8	; 200
     324:	24 24       	eor	r2, r4
     326:	b8 e4       	ldi	r27, 0x48	; 72
     328:	5c 5c       	subi	r21, 0xCC	; 204
     32a:	9f 5d       	subi	r25, 0xDF	; 223
     32c:	c2 c2       	rjmp	.+1412   	; 0x8b2 <constant_table_AES_E2+0x28>
     32e:	bd 6e       	ori	r27, 0xED	; 237
     330:	d3 d3       	rcall	.+1958   	; 0xad8 <__stack+0x1d9>
     332:	43 ef       	ldi	r20, 0xF3	; 243
     334:	ac ac       	ldd	r10, Y+60	; 0x3c
     336:	c4 a6       	std	Z+44, r12	; 0x2c
     338:	62 62       	ori	r22, 0x22	; 34
     33a:	39 a8       	ldd	r3, Y+49	; 0x31
     33c:	91 91       	ld	r25, Z+
     33e:	31 a4       	ldd	r3, Z+41	; 0x29
     340:	95 95       	asr	r25
     342:	d3 37       	cpi	r29, 0x73	; 115
     344:	e4 e4       	ldi	r30, 0x44	; 68
     346:	f2 8b       	std	Z+18, r31	; 0x12
     348:	79 79       	andi	r23, 0x99	; 153
     34a:	d5 32       	cpi	r29, 0x25	; 37
     34c:	e7 e7       	ldi	r30, 0x77	; 119
     34e:	8b 43       	sbci	r24, 0x3B	; 59
     350:	c8 c8       	rjmp	.-3696   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     352:	6e 59       	subi	r22, 0x9E	; 158
     354:	37 37       	cpi	r19, 0x77	; 119
     356:	da b7       	in	r29, 0x3a	; 58
     358:	6d 6d       	ori	r22, 0xDD	; 221
     35a:	01 8c       	ldd	r0, Z+25	; 0x19
     35c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     35e:	b1 64       	ori	r27, 0x41	; 65
     360:	d5 d5       	rcall	.+2986   	; 0xf0c <constant_table_AES_E1+0x282>
     362:	9c d2       	rcall	.+1336   	; 0x89c <constant_table_AES_E2+0x12>
     364:	4e 4e       	sbci	r20, 0xEE	; 238
     366:	49 e0       	ldi	r20, 0x09	; 9
     368:	a9 a9       	ldd	r26, Y+49	; 0x31
     36a:	d8 b4       	in	r13, 0x28	; 40
     36c:	6c 6c       	ori	r22, 0xCC	; 204
     36e:	ac fa       	.word	0xfaac	; ????
     370:	56 56       	subi	r21, 0x66	; 102
     372:	f3 07       	cpc	r31, r19
     374:	f4 f4       	brge	.+60     	; 0x3b2 <__trampolines_end+0x328>
     376:	cf 25       	eor	r28, r15
     378:	ea ea       	ldi	r30, 0xAA	; 170
     37a:	ca af       	std	Y+58, r28	; 0x3a
     37c:	65 65       	ori	r22, 0x55	; 85
     37e:	f4 8e       	std	Z+28, r15	; 0x1c
     380:	7a 7a       	andi	r23, 0xAA	; 170
     382:	47 e9       	ldi	r20, 0x97	; 151
     384:	ae ae       	std	Y+62, r10	; 0x3e
     386:	10 18       	sub	r1, r0
     388:	08 08       	sbc	r0, r8
     38a:	6f d5       	rcall	.+2782   	; 0xe6a <constant_table_AES_E1+0x1e0>
     38c:	ba ba       	out	0x1a, r11	; 26
     38e:	f0 88       	ldd	r15, Z+16	; 0x10
     390:	78 78       	andi	r23, 0x88	; 136
     392:	4a 6f       	ori	r20, 0xFA	; 250
     394:	25 25       	eor	r18, r5
     396:	5c 72       	andi	r21, 0x2C	; 44
     398:	2e 2e       	mov	r2, r30
     39a:	38 24       	eor	r3, r8
     39c:	1c 1c       	adc	r1, r12
     39e:	57 f1       	brie	.+84     	; 0x3f4 <__trampolines_end+0x36a>
     3a0:	a6 a6       	std	Z+46, r10	; 0x2e
     3a2:	73 c7       	rjmp	.+3814   	; 0x128a <initfunc+0x38>
     3a4:	b4 b4       	in	r11, 0x24	; 36
     3a6:	97 51       	subi	r25, 0x17	; 23
     3a8:	c6 c6       	rjmp	.+3468   	; 0x1136 <constant_table_AES_S+0xac>
     3aa:	cb 23       	and	r28, r27
     3ac:	e8 e8       	ldi	r30, 0x88	; 136
     3ae:	a1 7c       	andi	r26, 0xC1	; 193
     3b0:	dd dd       	rcall	.-1094   	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     3b2:	e8 9c       	mul	r14, r8
     3b4:	74 74       	andi	r23, 0x44	; 68
     3b6:	3e 21       	and	r19, r14
     3b8:	1f 1f       	adc	r17, r31
     3ba:	96 dd       	rcall	.-1236   	; 0xfffffee8 <__eeprom_end+0xff7efee8>
     3bc:	4b 4b       	sbci	r20, 0xBB	; 187
     3be:	61 dc       	rcall	.-1854   	; 0xfffffc82 <__eeprom_end+0xff7efc82>
     3c0:	bd bd       	out	0x2d, r27	; 45
     3c2:	0d 86       	std	Y+13, r0	; 0x0d
     3c4:	8b 8b       	std	Y+19, r24	; 0x13
     3c6:	0f 85       	ldd	r16, Y+15	; 0x0f
     3c8:	8a 8a       	std	Y+18, r8	; 0x12
     3ca:	e0 90 70 70 	lds	r14, 0x7070	; 0x807070 <__bss_end+0x6afb>
     3ce:	7c 42       	sbci	r23, 0x2C	; 44
     3d0:	3e 3e       	cpi	r19, 0xEE	; 238
     3d2:	71 c4       	rjmp	.+2274   	; 0xcb6 <constant_table_AES_E1+0x2c>
     3d4:	b5 b5       	in	r27, 0x25	; 37
     3d6:	cc aa       	std	Y+52, r12	; 0x34
     3d8:	66 66       	ori	r22, 0x66	; 102
     3da:	90 d8       	rcall	.-3808   	; 0xfffff4fc <__eeprom_end+0xff7ef4fc>
     3dc:	48 48       	sbci	r20, 0x88	; 136
     3de:	06 05       	cpc	r16, r6
     3e0:	03 03       	mulsu	r16, r19
     3e2:	f7 01       	movw	r30, r14
     3e4:	f6 f6       	brtc	.-68     	; 0x3a2 <__trampolines_end+0x318>
     3e6:	1c 12       	cpse	r1, r28
     3e8:	0e 0e       	add	r0, r30
     3ea:	c2 a3       	std	Z+34, r28	; 0x22
     3ec:	61 61       	ori	r22, 0x11	; 17
     3ee:	6a 5f       	subi	r22, 0xFA	; 250
     3f0:	35 35       	cpi	r19, 0x55	; 85
     3f2:	ae f9       	.word	0xf9ae	; ????
     3f4:	57 57       	subi	r21, 0x77	; 119
     3f6:	69 d0       	rcall	.+210    	; 0x4ca <constant_table_AES_E3+0x40>
     3f8:	b9 b9       	out	0x09, r27	; 9
     3fa:	17 91       	elpm	r17, Z+
     3fc:	86 86       	std	Z+14, r8	; 0x0e
     3fe:	99 58       	subi	r25, 0x89	; 137
     400:	c1 c1       	rjmp	.+898    	; 0x784 <constant_table_AES_E3+0x2fa>
     402:	3a 27       	eor	r19, r26
     404:	1d 1d       	adc	r17, r13
     406:	27 b9       	out	0x07, r18	; 7
     408:	9e 9e       	mul	r9, r30
     40a:	d9 38       	cpi	r29, 0x89	; 137
     40c:	e1 e1       	ldi	r30, 0x11	; 17
     40e:	eb 13       	cpse	r30, r27
     410:	f8 f8       	.word	0xf8f8	; ????
     412:	2b b3       	in	r18, 0x1b	; 27
     414:	98 98       	cbi	0x13, 0	; 19
     416:	22 33       	cpi	r18, 0x32	; 50
     418:	11 11       	cpse	r17, r1
     41a:	d2 bb       	out	0x12, r29	; 18
     41c:	69 69       	ori	r22, 0x99	; 153
     41e:	a9 70       	andi	r26, 0x09	; 9
     420:	d9 d9       	rcall	.-3150   	; 0xfffff7d4 <__eeprom_end+0xff7ef7d4>
     422:	07 89       	ldd	r16, Z+23	; 0x17
     424:	8e 8e       	std	Y+30, r8	; 0x1e
     426:	33 a7       	std	Z+43, r19	; 0x2b
     428:	94 94       	.word	0x9494	; ????
     42a:	2d b6       	in	r2, 0x3d	; 61
     42c:	9b 9b       	sbis	0x13, 3	; 19
     42e:	3c 22       	and	r3, r28
     430:	1e 1e       	adc	r1, r30
     432:	15 92       	las	Z, r1
     434:	87 87       	std	Z+15, r24	; 0x0f
     436:	c9 20       	and	r12, r9
     438:	e9 e9       	ldi	r30, 0x99	; 153
     43a:	87 49       	sbci	r24, 0x97	; 151
     43c:	ce ce       	rjmp	.-612    	; 0x1da <__trampolines_end+0x150>
     43e:	aa ff       	.word	0xffaa	; ????
     440:	55 55       	subi	r21, 0x55	; 85
     442:	50 78       	andi	r21, 0x80	; 128
     444:	28 28       	or	r2, r8
     446:	a5 7a       	andi	r26, 0xA5	; 165
     448:	df df       	rcall	.-66     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     44a:	03 8f       	std	Z+27, r16	; 0x1b
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	59 f8       	.word	0xf859	; ????
     450:	a1 a1       	ldd	r26, Z+33	; 0x21
     452:	09 80       	ldd	r0, Y+1	; 0x01
     454:	89 89       	ldd	r24, Y+17	; 0x11
     456:	1a 17       	cp	r17, r26
     458:	0d 0d       	add	r16, r13
     45a:	65 da       	rcall	.-2870   	; 0xfffff926 <__eeprom_end+0xff7ef926>
     45c:	bf bf       	out	0x3f, r27	; 63
     45e:	d7 31       	cpi	r29, 0x17	; 23
     460:	e6 e6       	ldi	r30, 0x66	; 102
     462:	84 c6       	rjmp	.+3336   	; 0x116c <constant_table_AES_S+0xe2>
     464:	42 42       	sbci	r20, 0x22	; 34
     466:	d0 b8       	out	0x00, r13	; 0
     468:	68 68       	ori	r22, 0x88	; 136
     46a:	82 c3       	rjmp	.+1796   	; 0xb70 <__stack+0x271>
     46c:	41 41       	sbci	r20, 0x11	; 17
     46e:	29 b0       	in	r2, 0x09	; 9
     470:	99 99       	sbic	0x13, 1	; 19
     472:	5a 77       	andi	r21, 0x7A	; 122
     474:	2d 2d       	mov	r18, r13
     476:	1e 11       	cpse	r17, r14
     478:	0f 0f       	add	r16, r31
     47a:	7b cb       	rjmp	.-2314   	; 0xfffffb72 <__eeprom_end+0xff7efb72>
     47c:	b0 b0       	in	r11, 0x00	; 0
     47e:	a8 fc       	.word	0xfca8	; ????
     480:	54 54       	subi	r21, 0x44	; 68
     482:	6d d6       	rcall	.+3290   	; 0x115e <constant_table_AES_S+0xd4>
     484:	bb bb       	out	0x1b, r27	; 27
     486:	2c 3a       	cpi	r18, 0xAC	; 172
     488:	16 16       	cp	r1, r22

0000048a <constant_table_AES_E3>:
     48a:	63 c6 a5 63 7c f8 84 7c 77 ee 99 77 7b f6 8d 7b     c..c|..|w..w{..{
     49a:	f2 ff 0d f2 6b d6 bd 6b 6f de b1 6f c5 91 54 c5     ....k..ko..o..T.
     4aa:	30 60 50 30 01 02 03 01 67 ce a9 67 2b 56 7d 2b     0`P0....g..g+V}+
     4ba:	fe e7 19 fe d7 b5 62 d7 ab 4d e6 ab 76 ec 9a 76     ......b..M..v..v
     4ca:	ca 8f 45 ca 82 1f 9d 82 c9 89 40 c9 7d fa 87 7d     ..E.......@.}..}
     4da:	fa ef 15 fa 59 b2 eb 59 47 8e c9 47 f0 fb 0b f0     ....Y..YG..G....
     4ea:	ad 41 ec ad d4 b3 67 d4 a2 5f fd a2 af 45 ea af     .A....g.._...E..
     4fa:	9c 23 bf 9c a4 53 f7 a4 72 e4 96 72 c0 9b 5b c0     .#...S..r..r..[.
     50a:	b7 75 c2 b7 fd e1 1c fd 93 3d ae 93 26 4c 6a 26     .u.......=..&Lj&
     51a:	36 6c 5a 36 3f 7e 41 3f f7 f5 02 f7 cc 83 4f cc     6lZ6?~A?......O.
     52a:	34 68 5c 34 a5 51 f4 a5 e5 d1 34 e5 f1 f9 08 f1     4h\4.Q....4.....
     53a:	71 e2 93 71 d8 ab 73 d8 31 62 53 31 15 2a 3f 15     q..q..s.1bS1.*?.
     54a:	04 08 0c 04 c7 95 52 c7 23 46 65 23 c3 9d 5e c3     ......R.#Fe#..^.
     55a:	18 30 28 18 96 37 a1 96 05 0a 0f 05 9a 2f b5 9a     .0(..7......./..
     56a:	07 0e 09 07 12 24 36 12 80 1b 9b 80 e2 df 3d e2     .....$6.......=.
     57a:	eb cd 26 eb 27 4e 69 27 b2 7f cd b2 75 ea 9f 75     ..&.'Ni'....u..u
     58a:	09 12 1b 09 83 1d 9e 83 2c 58 74 2c 1a 34 2e 1a     ........,Xt,.4..
     59a:	1b 36 2d 1b 6e dc b2 6e 5a b4 ee 5a a0 5b fb a0     .6-.n..nZ..Z.[..
     5aa:	52 a4 f6 52 3b 76 4d 3b d6 b7 61 d6 b3 7d ce b3     R..R;vM;..a..}..
     5ba:	29 52 7b 29 e3 dd 3e e3 2f 5e 71 2f 84 13 97 84     )R{)..>./^q/....
     5ca:	53 a6 f5 53 d1 b9 68 d1 00 00 00 00 ed c1 2c ed     S..S..h.......,.
     5da:	20 40 60 20 fc e3 1f fc b1 79 c8 b1 5b b6 ed 5b      @` .....y..[..[
     5ea:	6a d4 be 6a cb 8d 46 cb be 67 d9 be 39 72 4b 39     j..j..F..g..9rK9
     5fa:	4a 94 de 4a 4c 98 d4 4c 58 b0 e8 58 cf 85 4a cf     J..JL..LX..X..J.
     60a:	d0 bb 6b d0 ef c5 2a ef aa 4f e5 aa fb ed 16 fb     ..k...*..O......
     61a:	43 86 c5 43 4d 9a d7 4d 33 66 55 33 85 11 94 85     C..CM..M3fU3....
     62a:	45 8a cf 45 f9 e9 10 f9 02 04 06 02 7f fe 81 7f     E..E............
     63a:	50 a0 f0 50 3c 78 44 3c 9f 25 ba 9f a8 4b e3 a8     P..P<xD<.%...K..
     64a:	51 a2 f3 51 a3 5d fe a3 40 80 c0 40 8f 05 8a 8f     Q..Q.]..@..@....
     65a:	92 3f ad 92 9d 21 bc 9d 38 70 48 38 f5 f1 04 f5     .?...!..8pH8....
     66a:	bc 63 df bc b6 77 c1 b6 da af 75 da 21 42 63 21     .c...w....u.!Bc!
     67a:	10 20 30 10 ff e5 1a ff f3 fd 0e f3 d2 bf 6d d2     . 0...........m.
     68a:	cd 81 4c cd 0c 18 14 0c 13 26 35 13 ec c3 2f ec     ..L......&5.../.
     69a:	5f be e1 5f 97 35 a2 97 44 88 cc 44 17 2e 39 17     _.._.5..D..D..9.
     6aa:	c4 93 57 c4 a7 55 f2 a7 7e fc 82 7e 3d 7a 47 3d     ..W..U..~..~=zG=
     6ba:	64 c8 ac 64 5d ba e7 5d 19 32 2b 19 73 e6 95 73     d..d]..].2+.s..s
     6ca:	60 c0 a0 60 81 19 98 81 4f 9e d1 4f dc a3 7f dc     `..`....O..O....
     6da:	22 44 66 22 2a 54 7e 2a 90 3b ab 90 88 0b 83 88     "Df"*T~*.;......
     6ea:	46 8c ca 46 ee c7 29 ee b8 6b d3 b8 14 28 3c 14     F..F..)..k...(<.
     6fa:	de a7 79 de 5e bc e2 5e 0b 16 1d 0b db ad 76 db     ..y.^..^......v.
     70a:	e0 db 3b e0 32 64 56 32 3a 74 4e 3a 0a 14 1e 0a     ..;.2dV2:tN:....
     71a:	49 92 db 49 06 0c 0a 06 24 48 6c 24 5c b8 e4 5c     I..I....$Hl$\..\
     72a:	c2 9f 5d c2 d3 bd 6e d3 ac 43 ef ac 62 c4 a6 62     ..]...n..C..b..b
     73a:	91 39 a8 91 95 31 a4 95 e4 d3 37 e4 79 f2 8b 79     .9...1....7.y..y
     74a:	e7 d5 32 e7 c8 8b 43 c8 37 6e 59 37 6d da b7 6d     ..2...C.7nY7m..m
     75a:	8d 01 8c 8d d5 b1 64 d5 4e 9c d2 4e a9 49 e0 a9     ......d.N..N.I..
     76a:	6c d8 b4 6c 56 ac fa 56 f4 f3 07 f4 ea cf 25 ea     l..lV..V......%.
     77a:	65 ca af 65 7a f4 8e 7a ae 47 e9 ae 08 10 18 08     e..ez..z.G......
     78a:	ba 6f d5 ba 78 f0 88 78 25 4a 6f 25 2e 5c 72 2e     .o..x..x%Jo%.\r.
     79a:	1c 38 24 1c a6 57 f1 a6 b4 73 c7 b4 c6 97 51 c6     .8$..W...s....Q.
     7aa:	e8 cb 23 e8 dd a1 7c dd 74 e8 9c 74 1f 3e 21 1f     ..#...|.t..t.>!.
     7ba:	4b 96 dd 4b bd 61 dc bd 8b 0d 86 8b 8a 0f 85 8a     K..K.a..........
     7ca:	70 e0 90 70 3e 7c 42 3e b5 71 c4 b5 66 cc aa 66     p..p>|B>.q..f..f
     7da:	48 90 d8 48 03 06 05 03 f6 f7 01 f6 0e 1c 12 0e     H..H............
     7ea:	61 c2 a3 61 35 6a 5f 35 57 ae f9 57 b9 69 d0 b9     a..a5j_5W..W.i..
     7fa:	86 17 91 86 c1 99 58 c1 1d 3a 27 1d 9e 27 b9 9e     ......X..:'..'..
     80a:	e1 d9 38 e1 f8 eb 13 f8 98 2b b3 98 11 22 33 11     ..8......+..."3.
     81a:	69 d2 bb 69 d9 a9 70 d9 8e 07 89 8e 94 33 a7 94     i..i..p......3..
     82a:	9b 2d b6 9b 1e 3c 22 1e 87 15 92 87 e9 c9 20 e9     .-...<"....... .
     83a:	ce 87 49 ce 55 aa ff 55 28 50 78 28 df a5 7a df     ..I.U..U(Px(..z.
     84a:	8c 03 8f 8c a1 59 f8 a1 89 09 80 89 0d 1a 17 0d     .....Y..........
     85a:	bf 65 da bf e6 d7 31 e6 42 84 c6 42 68 d0 b8 68     .e....1.B..Bh..h
     86a:	41 82 c3 41 99 29 b0 99 2d 5a 77 2d 0f 1e 11 0f     A..A.)..-Zw-....
     87a:	b0 7b cb b0 54 a8 fc 54 bb 6d d6 bb 16 2c 3a 16     .{..T..T.m...,:.

0000088a <constant_table_AES_E2>:
     88a:	63 63 c6 a5 7c 7c f8 84 77 77 ee 99 7b 7b f6 8d     cc..||..ww..{{..
     89a:	f2 f2 ff 0d 6b 6b d6 bd 6f 6f de b1 c5 c5 91 54     ....kk..oo.....T
     8aa:	30 30 60 50 01 01 02 03 67 67 ce a9 2b 2b 56 7d     00`P....gg..++V}
     8ba:	fe fe e7 19 d7 d7 b5 62 ab ab 4d e6 76 76 ec 9a     .......b..M.vv..
     8ca:	ca ca 8f 45 82 82 1f 9d c9 c9 89 40 7d 7d fa 87     ...E.......@}}..
     8da:	fa fa ef 15 59 59 b2 eb 47 47 8e c9 f0 f0 fb 0b     ....YY..GG......
     8ea:	ad ad 41 ec d4 d4 b3 67 a2 a2 5f fd af af 45 ea     ..A....g.._...E.
     8fa:	9c 9c 23 bf a4 a4 53 f7 72 72 e4 96 c0 c0 9b 5b     ..#...S.rr.....[
     90a:	b7 b7 75 c2 fd fd e1 1c 93 93 3d ae 26 26 4c 6a     ..u.......=.&&Lj
     91a:	36 36 6c 5a 3f 3f 7e 41 f7 f7 f5 02 cc cc 83 4f     66lZ??~A.......O
     92a:	34 34 68 5c a5 a5 51 f4 e5 e5 d1 34 f1 f1 f9 08     44h\..Q....4....
     93a:	71 71 e2 93 d8 d8 ab 73 31 31 62 53 15 15 2a 3f     qq.....s11bS..*?
     94a:	04 04 08 0c c7 c7 95 52 23 23 46 65 c3 c3 9d 5e     .......R##Fe...^
     95a:	18 18 30 28 96 96 37 a1 05 05 0a 0f 9a 9a 2f b5     ..0(..7......./.
     96a:	07 07 0e 09 12 12 24 36 80 80 1b 9b e2 e2 df 3d     ......$6.......=
     97a:	eb eb cd 26 27 27 4e 69 b2 b2 7f cd 75 75 ea 9f     ...&''Ni....uu..
     98a:	09 09 12 1b 83 83 1d 9e 2c 2c 58 74 1a 1a 34 2e     ........,,Xt..4.
     99a:	1b 1b 36 2d 6e 6e dc b2 5a 5a b4 ee a0 a0 5b fb     ..6-nn..ZZ....[.
     9aa:	52 52 a4 f6 3b 3b 76 4d d6 d6 b7 61 b3 b3 7d ce     RR..;;vM...a..}.
     9ba:	29 29 52 7b e3 e3 dd 3e 2f 2f 5e 71 84 84 13 97     ))R{...>//^q....
     9ca:	53 53 a6 f5 d1 d1 b9 68 00 00 00 00 ed ed c1 2c     SS.....h.......,
     9da:	20 20 40 60 fc fc e3 1f b1 b1 79 c8 5b 5b b6 ed       @`......y.[[..
     9ea:	6a 6a d4 be cb cb 8d 46 be be 67 d9 39 39 72 4b     jj.....F..g.99rK
     9fa:	4a 4a 94 de 4c 4c 98 d4 58 58 b0 e8 cf cf 85 4a     JJ..LL..XX.....J
     a0a:	d0 d0 bb 6b ef ef c5 2a aa aa 4f e5 fb fb ed 16     ...k...*..O.....
     a1a:	43 43 86 c5 4d 4d 9a d7 33 33 66 55 85 85 11 94     CC..MM..33fU....
     a2a:	45 45 8a cf f9 f9 e9 10 02 02 04 06 7f 7f fe 81     EE..............
     a3a:	50 50 a0 f0 3c 3c 78 44 9f 9f 25 ba a8 a8 4b e3     PP..<<xD..%...K.
     a4a:	51 51 a2 f3 a3 a3 5d fe 40 40 80 c0 8f 8f 05 8a     QQ....].@@......
     a5a:	92 92 3f ad 9d 9d 21 bc 38 38 70 48 f5 f5 f1 04     ..?...!.88pH....
     a6a:	bc bc 63 df b6 b6 77 c1 da da af 75 21 21 42 63     ..c...w....u!!Bc
     a7a:	10 10 20 30 ff ff e5 1a f3 f3 fd 0e d2 d2 bf 6d     .. 0...........m
     a8a:	cd cd 81 4c 0c 0c 18 14 13 13 26 35 ec ec c3 2f     ...L......&5.../
     a9a:	5f 5f be e1 97 97 35 a2 44 44 88 cc 17 17 2e 39     __....5.DD.....9
     aaa:	c4 c4 93 57 a7 a7 55 f2 7e 7e fc 82 3d 3d 7a 47     ...W..U.~~..==zG
     aba:	64 64 c8 ac 5d 5d ba e7 19 19 32 2b 73 73 e6 95     dd..]]....2+ss..
     aca:	60 60 c0 a0 81 81 19 98 4f 4f 9e d1 dc dc a3 7f     ``......OO......
     ada:	22 22 44 66 2a 2a 54 7e 90 90 3b ab 88 88 0b 83     ""Df**T~..;.....
     aea:	46 46 8c ca ee ee c7 29 b8 b8 6b d3 14 14 28 3c     FF.....)..k...(<
     afa:	de de a7 79 5e 5e bc e2 0b 0b 16 1d db db ad 76     ...y^^.........v
     b0a:	e0 e0 db 3b 32 32 64 56 3a 3a 74 4e 0a 0a 14 1e     ...;22dV::tN....
     b1a:	49 49 92 db 06 06 0c 0a 24 24 48 6c 5c 5c b8 e4     II......$$Hl\\..
     b2a:	c2 c2 9f 5d d3 d3 bd 6e ac ac 43 ef 62 62 c4 a6     ...]...n..C.bb..
     b3a:	91 91 39 a8 95 95 31 a4 e4 e4 d3 37 79 79 f2 8b     ..9...1....7yy..
     b4a:	e7 e7 d5 32 c8 c8 8b 43 37 37 6e 59 6d 6d da b7     ...2...C77nYmm..
     b5a:	8d 8d 01 8c d5 d5 b1 64 4e 4e 9c d2 a9 a9 49 e0     .......dNN....I.
     b6a:	6c 6c d8 b4 56 56 ac fa f4 f4 f3 07 ea ea cf 25     ll..VV.........%
     b7a:	65 65 ca af 7a 7a f4 8e ae ae 47 e9 08 08 10 18     ee..zz....G.....
     b8a:	ba ba 6f d5 78 78 f0 88 25 25 4a 6f 2e 2e 5c 72     ..o.xx..%%Jo..\r
     b9a:	1c 1c 38 24 a6 a6 57 f1 b4 b4 73 c7 c6 c6 97 51     ..8$..W...s....Q
     baa:	e8 e8 cb 23 dd dd a1 7c 74 74 e8 9c 1f 1f 3e 21     ...#...|tt....>!
     bba:	4b 4b 96 dd bd bd 61 dc 8b 8b 0d 86 8a 8a 0f 85     KK....a.........
     bca:	70 70 e0 90 3e 3e 7c 42 b5 b5 71 c4 66 66 cc aa     pp..>>|B..q.ff..
     bda:	48 48 90 d8 03 03 06 05 f6 f6 f7 01 0e 0e 1c 12     HH..............
     bea:	61 61 c2 a3 35 35 6a 5f 57 57 ae f9 b9 b9 69 d0     aa..55j_WW....i.
     bfa:	86 86 17 91 c1 c1 99 58 1d 1d 3a 27 9e 9e 27 b9     .......X..:'..'.
     c0a:	e1 e1 d9 38 f8 f8 eb 13 98 98 2b b3 11 11 22 33     ...8......+..."3
     c1a:	69 69 d2 bb d9 d9 a9 70 8e 8e 07 89 94 94 33 a7     ii.....p......3.
     c2a:	9b 9b 2d b6 1e 1e 3c 22 87 87 15 92 e9 e9 c9 20     ..-...<"....... 
     c3a:	ce ce 87 49 55 55 aa ff 28 28 50 78 df df a5 7a     ...IUU..((Px...z
     c4a:	8c 8c 03 8f a1 a1 59 f8 89 89 09 80 0d 0d 1a 17     ......Y.........
     c5a:	bf bf 65 da e6 e6 d7 31 42 42 84 c6 68 68 d0 b8     ..e....1BB..hh..
     c6a:	41 41 82 c3 99 99 29 b0 2d 2d 5a 77 0f 0f 1e 11     AA....).--Zw....
     c7a:	b0 b0 7b cb 54 54 a8 fc bb bb 6d d6 16 16 2c 3a     ..{.TT....m...,:

00000c8a <constant_table_AES_E1>:
     c8a:	a5 63 63 c6 84 7c 7c f8 99 77 77 ee 8d 7b 7b f6     .cc..||..ww..{{.
     c9a:	0d f2 f2 ff bd 6b 6b d6 b1 6f 6f de 54 c5 c5 91     .....kk..oo.T...
     caa:	50 30 30 60 03 01 01 02 a9 67 67 ce 7d 2b 2b 56     P00`.....gg.}++V
     cba:	19 fe fe e7 62 d7 d7 b5 e6 ab ab 4d 9a 76 76 ec     ....b......M.vv.
     cca:	45 ca ca 8f 9d 82 82 1f 40 c9 c9 89 87 7d 7d fa     E.......@....}}.
     cda:	15 fa fa ef eb 59 59 b2 c9 47 47 8e 0b f0 f0 fb     .....YY..GG.....
     cea:	ec ad ad 41 67 d4 d4 b3 fd a2 a2 5f ea af af 45     ...Ag......_...E
     cfa:	bf 9c 9c 23 f7 a4 a4 53 96 72 72 e4 5b c0 c0 9b     ...#...S.rr.[...
     d0a:	c2 b7 b7 75 1c fd fd e1 ae 93 93 3d 6a 26 26 4c     ...u.......=j&&L
     d1a:	5a 36 36 6c 41 3f 3f 7e 02 f7 f7 f5 4f cc cc 83     Z66lA??~....O...
     d2a:	5c 34 34 68 f4 a5 a5 51 34 e5 e5 d1 08 f1 f1 f9     \44h...Q4.......
     d3a:	93 71 71 e2 73 d8 d8 ab 53 31 31 62 3f 15 15 2a     .qq.s...S11b?..*
     d4a:	0c 04 04 08 52 c7 c7 95 65 23 23 46 5e c3 c3 9d     ....R...e##F^...
     d5a:	28 18 18 30 a1 96 96 37 0f 05 05 0a b5 9a 9a 2f     (..0...7......./
     d6a:	09 07 07 0e 36 12 12 24 9b 80 80 1b 3d e2 e2 df     ....6..$....=...
     d7a:	26 eb eb cd 69 27 27 4e cd b2 b2 7f 9f 75 75 ea     &...i''N.....uu.
     d8a:	1b 09 09 12 9e 83 83 1d 74 2c 2c 58 2e 1a 1a 34     ........t,,X...4
     d9a:	2d 1b 1b 36 b2 6e 6e dc ee 5a 5a b4 fb a0 a0 5b     -..6.nn..ZZ....[
     daa:	f6 52 52 a4 4d 3b 3b 76 61 d6 d6 b7 ce b3 b3 7d     .RR.M;;va......}
     dba:	7b 29 29 52 3e e3 e3 dd 71 2f 2f 5e 97 84 84 13     {))R>...q//^....
     dca:	f5 53 53 a6 68 d1 d1 b9 00 00 00 00 2c ed ed c1     .SS.h.......,...
     dda:	60 20 20 40 1f fc fc e3 c8 b1 b1 79 ed 5b 5b b6     `  @.......y.[[.
     dea:	be 6a 6a d4 46 cb cb 8d d9 be be 67 4b 39 39 72     .jj.F......gK99r
     dfa:	de 4a 4a 94 d4 4c 4c 98 e8 58 58 b0 4a cf cf 85     .JJ..LL..XX.J...
     e0a:	6b d0 d0 bb 2a ef ef c5 e5 aa aa 4f 16 fb fb ed     k...*......O....
     e1a:	c5 43 43 86 d7 4d 4d 9a 55 33 33 66 94 85 85 11     .CC..MM.U33f....
     e2a:	cf 45 45 8a 10 f9 f9 e9 06 02 02 04 81 7f 7f fe     .EE.............
     e3a:	f0 50 50 a0 44 3c 3c 78 ba 9f 9f 25 e3 a8 a8 4b     .PP.D<<x...%...K
     e4a:	f3 51 51 a2 fe a3 a3 5d c0 40 40 80 8a 8f 8f 05     .QQ....].@@.....
     e5a:	ad 92 92 3f bc 9d 9d 21 48 38 38 70 04 f5 f5 f1     ...?...!H88p....
     e6a:	df bc bc 63 c1 b6 b6 77 75 da da af 63 21 21 42     ...c...wu...c!!B
     e7a:	30 10 10 20 1a ff ff e5 0e f3 f3 fd 6d d2 d2 bf     0.. ........m...
     e8a:	4c cd cd 81 14 0c 0c 18 35 13 13 26 2f ec ec c3     L.......5..&/...
     e9a:	e1 5f 5f be a2 97 97 35 cc 44 44 88 39 17 17 2e     .__....5.DD.9...
     eaa:	57 c4 c4 93 f2 a7 a7 55 82 7e 7e fc 47 3d 3d 7a     W......U.~~.G==z
     eba:	ac 64 64 c8 e7 5d 5d ba 2b 19 19 32 95 73 73 e6     .dd..]].+..2.ss.
     eca:	a0 60 60 c0 98 81 81 19 d1 4f 4f 9e 7f dc dc a3     .``......OO.....
     eda:	66 22 22 44 7e 2a 2a 54 ab 90 90 3b 83 88 88 0b     f""D~**T...;....
     eea:	ca 46 46 8c 29 ee ee c7 d3 b8 b8 6b 3c 14 14 28     .FF.)......k<..(
     efa:	79 de de a7 e2 5e 5e bc 1d 0b 0b 16 76 db db ad     y....^^.....v...
     f0a:	3b e0 e0 db 56 32 32 64 4e 3a 3a 74 1e 0a 0a 14     ;...V22dN::t....
     f1a:	db 49 49 92 0a 06 06 0c 6c 24 24 48 e4 5c 5c b8     .II.....l$$H.\\.
     f2a:	5d c2 c2 9f 6e d3 d3 bd ef ac ac 43 a6 62 62 c4     ]...n......C.bb.
     f3a:	a8 91 91 39 a4 95 95 31 37 e4 e4 d3 8b 79 79 f2     ...9...17....yy.
     f4a:	32 e7 e7 d5 43 c8 c8 8b 59 37 37 6e b7 6d 6d da     2...C...Y77n.mm.
     f5a:	8c 8d 8d 01 64 d5 d5 b1 d2 4e 4e 9c e0 a9 a9 49     ....d....NN....I
     f6a:	b4 6c 6c d8 fa 56 56 ac 07 f4 f4 f3 25 ea ea cf     .ll..VV.....%...
     f7a:	af 65 65 ca 8e 7a 7a f4 e9 ae ae 47 18 08 08 10     .ee..zz....G....
     f8a:	d5 ba ba 6f 88 78 78 f0 6f 25 25 4a 72 2e 2e 5c     ...o.xx.o%%Jr..\
     f9a:	24 1c 1c 38 f1 a6 a6 57 c7 b4 b4 73 51 c6 c6 97     $..8...W...sQ...
     faa:	23 e8 e8 cb 7c dd dd a1 9c 74 74 e8 21 1f 1f 3e     #...|....tt.!..>
     fba:	dd 4b 4b 96 dc bd bd 61 86 8b 8b 0d 85 8a 8a 0f     .KK....a........
     fca:	90 70 70 e0 42 3e 3e 7c c4 b5 b5 71 aa 66 66 cc     .pp.B>>|...q.ff.
     fda:	d8 48 48 90 05 03 03 06 01 f6 f6 f7 12 0e 0e 1c     .HH.............
     fea:	a3 61 61 c2 5f 35 35 6a f9 57 57 ae d0 b9 b9 69     .aa._55j.WW....i
     ffa:	91 86 86 17 58 c1 c1 99 27 1d 1d 3a b9 9e 9e 27     ....X...'..:...'
    100a:	38 e1 e1 d9 13 f8 f8 eb b3 98 98 2b 33 11 11 22     8..........+3.."
    101a:	bb 69 69 d2 70 d9 d9 a9 89 8e 8e 07 a7 94 94 33     .ii.p..........3
    102a:	b6 9b 9b 2d 22 1e 1e 3c 92 87 87 15 20 e9 e9 c9     ...-"..<.... ...
    103a:	49 ce ce 87 ff 55 55 aa 78 28 28 50 7a df df a5     I....UU.x((Pz...
    104a:	8f 8c 8c 03 f8 a1 a1 59 80 89 89 09 17 0d 0d 1a     .......Y........
    105a:	da bf bf 65 31 e6 e6 d7 c6 42 42 84 b8 68 68 d0     ...e1....BB..hh.
    106a:	c3 41 41 82 b0 99 99 29 77 2d 2d 5a 11 0f 0f 1e     .AA....)w--Z....
    107a:	cb b0 b0 7b fc 54 54 a8 d6 bb bb 6d 3a 16 16 2c     ...{.TT....m:..,

0000108a <constant_table_AES_S>:
    108a:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
    109a:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
    10aa:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
    10ba:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
    10ca:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
    10da:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
    10ea:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
    10fa:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
    110a:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
    111a:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
    112a:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
    113a:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
    114a:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
    115a:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
    116a:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
    117a:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

0000118a <constant_table_AES_RCON>:
    118a:	00 00 00 01 00 00 00 02 00 00 00 04 00 00 00 08     ................
    119a:	00 00 00 10 00 00 00 20 00 00 00 40 00 00 00 80     ....... ...@....
    11aa:	00 00 00 1b 00 00 00 36                             .......6

000011b2 <__ctors_end>:
    11b2:	11 24       	eor	r1, r1
    11b4:	1f be       	out	0x3f, r1	; 63
    11b6:	cf ef       	ldi	r28, 0xFF	; 255
    11b8:	d8 e0       	ldi	r29, 0x08	; 8
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	cd bf       	out	0x3d, r28	; 61

000011be <__do_copy_data>:
    11be:	12 e0       	ldi	r17, 0x02	; 2
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b1 e0       	ldi	r27, 0x01	; 1
    11c4:	e8 e2       	ldi	r30, 0x28	; 40
    11c6:	f9 e6       	ldi	r31, 0x69	; 105
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <__do_copy_data+0x10>
    11ca:	05 90       	lpm	r0, Z+
    11cc:	0d 92       	st	X+, r0
    11ce:	aa 3d       	cpi	r26, 0xDA	; 218
    11d0:	b1 07       	cpc	r27, r17
    11d2:	d9 f7       	brne	.-10     	; 0x11ca <__do_copy_data+0xc>

000011d4 <__do_clear_bss>:
    11d4:	25 e0       	ldi	r18, 0x05	; 5
    11d6:	aa ed       	ldi	r26, 0xDA	; 218
    11d8:	b2 e0       	ldi	r27, 0x02	; 2
    11da:	01 c0       	rjmp	.+2      	; 0x11de <.do_clear_bss_start>

000011dc <.do_clear_bss_loop>:
    11dc:	1d 92       	st	X+, r1

000011de <.do_clear_bss_start>:
    11de:	a5 37       	cpi	r26, 0x75	; 117
    11e0:	b2 07       	cpc	r27, r18
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <.do_clear_bss_loop>
    11e4:	0e 94 16 0a 	call	0x142c	; 0x142c <main>
    11e8:	0c 94 92 34 	jmp	0x6924	; 0x6924 <_exit>

000011ec <__bad_interrupt>:
    11ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011f0 <tikfunc>:

osjob_t tikjob;

static void tikfunc(osjob_t* j)
{
	if (LED_PORT & (1 << LED_PIN)) 
    11f0:	41 9b       	sbis	0x08, 1	; 8
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <tikfunc+0x8>
	{
		LED_PORT &= ~(1 << LED_PIN);
    11f4:	41 98       	cbi	0x08, 1	; 8
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <tikfunc+0xa>
	}
	else LED_PORT |= (1 << LED_PIN);
    11f8:	41 9a       	sbi	0x08, 1	; 8
	/* _delay_ms(1000); */
	/* os_setCallback(&tikjob, tikfunc); */
	/* printf("Ticks: %lu\r\n", hal_ticks()); */
	os_setTimedCallback(&tikjob, os_getTime() + sec2osticks(1), tikfunc);
    11fa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    11fe:	ab 01       	movw	r20, r22
    1200:	bc 01       	movw	r22, r24
    1202:	4e 5e       	subi	r20, 0xEE	; 238
    1204:	55 48       	sbci	r21, 0x85	; 133
    1206:	6f 4f       	sbci	r22, 0xFF	; 255
    1208:	7f 4f       	sbci	r23, 0xFF	; 255
    120a:	28 ef       	ldi	r18, 0xF8	; 248
    120c:	38 e0       	ldi	r19, 0x08	; 8
    120e:	8d e0       	ldi	r24, 0x0D	; 13
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>

00001216 <reportfunc>:
}

static osjob_t reportjob;

// report sensor value every minute
static void reportfunc (osjob_t* j) {
    1216:	cf 93       	push	r28
    1218:	df 93       	push	r29
    121a:	ec 01       	movw	r28, r24
	  // read sensor
	    u2_t val = readsensor();
	    // prepare and schedule data for transmission
	    LMIC.frame[0] = val << 8;
    121c:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <LMIC+0x141>
	    LMIC.frame[1] = val;
    1220:	8a ea       	ldi	r24, 0xAA	; 170
    1222:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <LMIC+0x142>
	    LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed)
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	42 e0       	ldi	r20, 0x02	; 2
    122a:	6a e5       	ldi	r22, 0x5A	; 90
    122c:	74 e0       	ldi	r23, 0x04	; 4
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	0e 94 aa 29 	call	0x5354	; 0x5354 <LMIC_setTxData2>
		/* usart_putstr("Report.\r\n"); */
	    os_setTimedCallback(j, os_getTime()+sec2osticks(5), reportfunc);
    1234:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    1238:	ab 01       	movw	r20, r22
    123a:	bc 01       	movw	r22, r24
    123c:	46 5a       	subi	r20, 0xA6	; 166
    123e:	5d 49       	sbci	r21, 0x9D	; 157
    1240:	6d 4f       	sbci	r22, 0xFD	; 253
    1242:	7f 4f       	sbci	r23, 0xFF	; 255
    1244:	2b e0       	ldi	r18, 0x0B	; 11
    1246:	39 e0       	ldi	r19, 0x09	; 9
    1248:	ce 01       	movw	r24, r28
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
	    // prepare and schedule data for transmission
	    LMIC.frame[0] = val << 8;
	    LMIC.frame[1] = val;
	    LMIC_setTxData2(1, LMIC.frame, 2, 0); // (port 1, 2 bytes, unconfirmed)
		/* usart_putstr("Report.\r\n"); */
	    os_setTimedCallback(j, os_getTime()+sec2osticks(5), reportfunc);
    124e:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>

00001252 <initfunc>:
}

static void initfunc (osjob_t* j) {
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	a0 97       	sbiw	r28, 0x20	; 32
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	6c 01       	movw	r12, r24
	LMIC_reset();
    1274:	0e 94 29 29 	call	0x5252	; 0x5252 <LMIC_reset>
	// start joining
	LMIC_startJoining();
    1278:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...

	//   ABP
	uint8_t appskey[sizeof(APPSKEY)];
	uint8_t nwkskey[sizeof(NWKSKEY)];
	memcpy(appskey, APPSKEY, sizeof(APPSKEY));
    127c:	80 e1       	ldi	r24, 0x10	; 16
    127e:	ed ee       	ldi	r30, 0xED	; 237
    1280:	f1 e0       	ldi	r31, 0x01	; 1
    1282:	de 01       	movw	r26, r28
    1284:	51 96       	adiw	r26, 0x11	; 17
    1286:	01 90       	ld	r0, Z+
    1288:	0d 92       	st	X+, r0
    128a:	8a 95       	dec	r24
    128c:	e1 f7       	brne	.-8      	; 0x1286 <initfunc+0x34>
	memcpy(nwkskey, NWKSKEY, sizeof(NWKSKEY));
    128e:	80 e1       	ldi	r24, 0x10	; 16
    1290:	ed ef       	ldi	r30, 0xFD	; 253
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	de 01       	movw	r26, r28
    1296:	11 96       	adiw	r26, 0x01	; 1
    1298:	01 90       	ld	r0, Z+
    129a:	0d 92       	st	X+, r0
    129c:	8a 95       	dec	r24
    129e:	e1 f7       	brne	.-8      	; 0x1298 <initfunc+0x46>
	LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
    12a0:	ce 01       	movw	r24, r28
    12a2:	41 96       	adiw	r24, 0x11	; 17
    12a4:	7c 01       	movw	r14, r24
    12a6:	8e 01       	movw	r16, r28
    12a8:	0f 5f       	subi	r16, 0xFF	; 255
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	2f ed       	ldi	r18, 0xDF	; 223
    12ae:	31 e1       	ldi	r19, 0x11	; 17
    12b0:	41 e0       	ldi	r20, 0x01	; 1
    12b2:	56 e2       	ldi	r21, 0x26	; 38
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 dd 29 	call	0x53ba	; 0x53ba <LMIC_setSession>

	LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    12c0:	01 e0       	ldi	r16, 0x01	; 1
    12c2:	2f e3       	ldi	r18, 0x3F	; 63
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 ea       	ldi	r20, 0xA0	; 160
    12c8:	57 e2       	ldi	r21, 0x27	; 39
    12ca:	6e eb       	ldi	r22, 0xBE	; 190
    12cc:	73 e3       	ldi	r23, 0x33	; 51
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(1, 868300000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
    12d4:	2f e7       	ldi	r18, 0x7F	; 127
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 ee       	ldi	r20, 0xE0	; 224
    12da:	54 e3       	ldi	r21, 0x34	; 52
    12dc:	61 ec       	ldi	r22, 0xC1	; 193
    12de:	73 e3       	ldi	r23, 0x33	; 51
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(2, 868500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    12e6:	2f e3       	ldi	r18, 0x3F	; 63
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	52 e4       	ldi	r21, 0x42	; 66
    12ee:	64 ec       	ldi	r22, 0xC4	; 196
    12f0:	73 e3       	ldi	r23, 0x33	; 51
    12f2:	82 e0       	ldi	r24, 0x02	; 2
    12f4:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(3, 867100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    12f8:	2f e3       	ldi	r18, 0x3F	; 63
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e6       	ldi	r20, 0x60	; 96
    12fe:	55 ee       	ldi	r21, 0xE5	; 229
    1300:	6e ea       	ldi	r22, 0xAE	; 174
    1302:	73 e3       	ldi	r23, 0x33	; 51
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(4, 867300000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    130a:	2f e3       	ldi	r18, 0x3F	; 63
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 ea       	ldi	r20, 0xA0	; 160
    1310:	52 ef       	ldi	r21, 0xF2	; 242
    1312:	61 eb       	ldi	r22, 0xB1	; 177
    1314:	73 e3       	ldi	r23, 0x33	; 51
    1316:	84 e0       	ldi	r24, 0x04	; 4
    1318:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(5, 867500000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    131c:	2f e3       	ldi	r18, 0x3F	; 63
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 ee       	ldi	r20, 0xE0	; 224
    1322:	5f ef       	ldi	r21, 0xFF	; 255
    1324:	64 eb       	ldi	r22, 0xB4	; 180
    1326:	73 e3       	ldi	r23, 0x33	; 51
    1328:	85 e0       	ldi	r24, 0x05	; 5
    132a:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    132e:	2f e3       	ldi	r18, 0x3F	; 63
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	40 e2       	ldi	r20, 0x20	; 32
    1334:	5d e0       	ldi	r21, 0x0D	; 13
    1336:	68 eb       	ldi	r22, 0xB8	; 184
    1338:	73 e3       	ldi	r23, 0x33	; 51
    133a:	86 e0       	ldi	r24, 0x06	; 6
    133c:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    1340:	2f e3       	ldi	r18, 0x3F	; 63
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e6       	ldi	r20, 0x60	; 96
    1346:	5a e1       	ldi	r21, 0x1A	; 26
    1348:	6b eb       	ldi	r22, 0xBB	; 187
    134a:	73 e3       	ldi	r23, 0x33	; 51
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
	LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
    1352:	00 e0       	ldi	r16, 0x00	; 0
    1354:	20 e8       	ldi	r18, 0x80	; 128
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	56 ed       	ldi	r21, 0xD6	; 214
    135c:	68 ec       	ldi	r22, 0xC8	; 200
    135e:	73 e3       	ldi	r23, 0x33	; 51
    1360:	88 e0       	ldi	r24, 0x08	; 8
    1362:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>

	// Disable link check validation
	LMIC_setLinkCheckMode(0);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 1b 2a 	call	0x5436	; 0x5436 <LMIC_setLinkCheckMode>
	// TTN uses SF9 for its RX2 window.
	LMIC.dn2Dr = DR_SF9;
    136c:	83 e0       	ldi	r24, 0x03	; 3
    136e:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <LMIC+0x124>
	// Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
	LMIC_setDrTxpow(DR_SF7,14);
    1372:	6e e0       	ldi	r22, 0x0E	; 14
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	0e 94 18 29 	call	0x5230	; 0x5230 <LMIC_setDrTxpow>

	os_setTimedCallback(j, os_getTime(), reportfunc);
    137a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    137e:	ab 01       	movw	r20, r22
    1380:	bc 01       	movw	r22, r24
    1382:	2b e0       	ldi	r18, 0x0B	; 11
    1384:	39 e0       	ldi	r19, 0x09	; 9
    1386:	c6 01       	movw	r24, r12
    1388:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <os_setTimedCallback>
}
    138c:	a0 96       	adiw	r28, 0x20	; 32
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
    13a4:	df 90       	pop	r13
    13a6:	cf 90       	pop	r12
    13a8:	08 95       	ret

000013aa <os_getArtEui>:
static  u1_t NWKSKEY[16] = { 0x70, 0x9A, 0x66, 0x6B, 0x26, 0x11, 0x1E, 0x90, 0xDD, 0xD3, 0x7F, 0x4E, 0x59, 0x69, 0x73, 0xB2 };
static  u1_t APPSKEY[16] = { 0x9E, 0x3B, 0x6E, 0x84, 0x0D, 0xCE, 0xCA, 0x5E, 0x68, 0x85, 0x9B, 0xB9, 0xD0, 0x00, 0x10, 0xEB };
static  u4_t DEVADDR = 0x260111DF;

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
    13aa:	dc 01       	movw	r26, r24
    memcpy(buf, APPEUI, 8);
    13ac:	98 e0       	ldi	r25, 0x08	; 8
    13ae:	e5 e2       	ldi	r30, 0x25	; 37
    13b0:	f2 e0       	ldi	r31, 0x02	; 2
    13b2:	01 90       	ld	r0, Z+
    13b4:	0d 92       	st	X+, r0
    13b6:	9a 95       	dec	r25
    13b8:	e1 f7       	brne	.-8      	; 0x13b2 <os_getArtEui+0x8>
    13ba:	08 95       	ret

000013bc <os_getDevEui>:
}

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
    13bc:	dc 01       	movw	r26, r24
    memcpy(buf, DEVEUI, 8);
    13be:	98 e0       	ldi	r25, 0x08	; 8
    13c0:	ed e1       	ldi	r30, 0x1D	; 29
    13c2:	f2 e0       	ldi	r31, 0x02	; 2
    13c4:	01 90       	ld	r0, Z+
    13c6:	0d 92       	st	X+, r0
    13c8:	9a 95       	dec	r25
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <os_getDevEui+0x8>
    13cc:	08 95       	ret

000013ce <os_getDevKey>:
}

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
    13ce:	dc 01       	movw	r26, r24
    memcpy(buf, DEVKEY, 16);
    13d0:	90 e1       	ldi	r25, 0x10	; 16
    13d2:	ed e0       	ldi	r30, 0x0D	; 13
    13d4:	f2 e0       	ldi	r31, 0x02	; 2
    13d6:	01 90       	ld	r0, Z+
    13d8:	0d 92       	st	X+, r0
    13da:	9a 95       	dec	r25
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <os_getDevKey+0x8>
    13de:	08 95       	ret

000013e0 <readsensor>:
}

u2_t readsensor(){
	u2_t value = 0xAA;    /// read from evrything ...make your own sensor
	return value;
}
    13e0:	8a ea       	ldi	r24, 0xAA	; 170
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <debug_event>:
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    usart_putstr((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
    13e6:	82 31       	cpi	r24, 0x12	; 18
    13e8:	91 05       	cpc	r25, r1
    13ea:	40 f4       	brcc	.+16     	; 0x13fc <debug_event+0x16>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	fc 01       	movw	r30, r24
    13f2:	e7 53       	subi	r30, 0x37	; 55
    13f4:	fe 4f       	sbci	r31, 0xFE	; 254
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <debug_event+0x1a>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart_putstr>
    usart_putchar('\r');
    1404:	8d e0       	ldi	r24, 0x0D	; 13
    1406:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <usart_putchar>
    usart_putchar('\n');
    140a:	8a e0       	ldi	r24, 0x0A	; 10
    140c:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <usart_putchar>

00001410 <onEvent>:
}

void onEvent(ev_t ev)
{
    1410:	cf 93       	push	r28
    1412:	c8 2f       	mov	r28, r24
	debug_event(ev);
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <debug_event>
	switch(ev) {
    141a:	c6 30       	cpi	r28, 0x06	; 6
    141c:	29 f4       	brne	.+10     	; 0x1428 <onEvent+0x18>
			/* usart_putstr("try joining\r\n"); */
			break;
		case EV_JOINED:
			/* debug_led(1); */
			// kick-off periodic sensor job
			reportfunc(&reportjob);
    141e:	8a ed       	ldi	r24, 0xDA	; 218
    1420:	92 e0       	ldi	r25, 0x02	; 2
			break;
		default:
			/* usart_putstr("Unknown event\r\n"); */
			break;
	}
}
    1422:	cf 91       	pop	r28
			/* usart_putstr("try joining\r\n"); */
			break;
		case EV_JOINED:
			/* debug_led(1); */
			// kick-off periodic sensor job
			reportfunc(&reportjob);
    1424:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <reportfunc>
			break;
		default:
			/* usart_putstr("Unknown event\r\n"); */
			break;
	}
}
    1428:	cf 91       	pop	r28
    142a:	08 95       	ret

0000142c <main>:



int main(void)
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	28 97       	sbiw	r28, 0x08	; 8
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
	osjob_t initjob;
	os_init();
    1440:	0e 94 94 0c 	call	0x1928	; 0x1928 <os_init>
	usart_putstr("Hello from node.\r\n");
    1444:	8b e0       	ldi	r24, 0x0B	; 11
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart_putstr>
	os_setCallback(&tikjob, tikfunc);
    144c:	68 ef       	ldi	r22, 0xF8	; 248
    144e:	78 e0       	ldi	r23, 0x08	; 8
    1450:	8d e0       	ldi	r24, 0x0D	; 13
    1452:	93 e0       	ldi	r25, 0x03	; 3
    1454:	0e 94 b6 0c 	call	0x196c	; 0x196c <os_setCallback>
	os_setCallback(&initjob, initfunc);
    1458:	69 e2       	ldi	r22, 0x29	; 41
    145a:	79 e0       	ldi	r23, 0x09	; 9
    145c:	ce 01       	movw	r24, r28
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	0e 94 b6 0c 	call	0x196c	; 0x196c <os_setCallback>
	os_runloop();
    1464:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <os_runloop>
    1468:	ff cf       	rjmp	.-2      	; 0x1468 <main+0x3c>

0000146a <printchar>:
	}
	return 0;
}

static void printchar(char **str, int c)
{
    146a:	fc 01       	movw	r30, r24
    146c:	86 2f       	mov	r24, r22
	/* extern int putchar(int c); */
	
	if (str) {
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	49 f0       	breq	.+18     	; 0x1484 <printchar+0x1a>
		**str = c;
    1472:	a0 81       	ld	r26, Z
    1474:	b1 81       	ldd	r27, Z+1	; 0x01
    1476:	6c 93       	st	X, r22
		++(*str);
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	80 83       	st	Z, r24
    1482:	08 95       	ret
#include <stdarg.h>
#include "printf-stdarg.h"

int __io_putchar(int ch)
{
	usart_putchar(ch);
    1484:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <usart_putchar>

00001488 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
    1488:	8f 92       	push	r8
    148a:	9f 92       	push	r9
    148c:	af 92       	push	r10
    148e:	bf 92       	push	r11
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	4c 01       	movw	r8, r24
    14a2:	8b 01       	movw	r16, r22
    14a4:	ea 01       	movw	r28, r20
	register int pc = 0, padchar = ' ';

	if (width > 0) {
    14a6:	1c 16       	cp	r1, r28
    14a8:	1d 06       	cpc	r1, r29
    14aa:	ac f4       	brge	.+42     	; 0x14d6 <prints+0x4e>
    14ac:	fb 01       	movw	r30, r22
    14ae:	cf 01       	movw	r24, r30
    14b0:	80 1b       	sub	r24, r16
    14b2:	91 0b       	sbc	r25, r17
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
    14b4:	31 91       	ld	r19, Z+
    14b6:	31 11       	cpse	r19, r1
    14b8:	fa cf       	rjmp	.-12     	; 0x14ae <prints+0x26>
		if (len >= width) width = 0;
    14ba:	8c 17       	cp	r24, r28
    14bc:	9d 07       	cpc	r25, r29
    14be:	1c f4       	brge	.+6      	; 0x14c6 <prints+0x3e>
		else width -= len;
    14c0:	c8 1b       	sub	r28, r24
    14c2:	d9 0b       	sbc	r29, r25
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <prints+0x42>

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
    14c6:	c0 e0       	ldi	r28, 0x00	; 0
    14c8:	d0 e0       	ldi	r29, 0x00	; 0
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
    14ca:	21 ff       	sbrs	r18, 1
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <prints+0x4e>
    14ce:	90 e3       	ldi	r25, 0x30	; 48
    14d0:	a9 2e       	mov	r10, r25
    14d2:	b1 2c       	mov	r11, r1
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <prints+0x54>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
    14d6:	80 e2       	ldi	r24, 0x20	; 32
    14d8:	a8 2e       	mov	r10, r24
    14da:	b1 2c       	mov	r11, r1
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
    14dc:	20 fd       	sbrc	r18, 0
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <prints+0x80>
    14e0:	7e 01       	movw	r14, r28
		for ( ; width > 0; --width) {
    14e2:	1e 14       	cp	r1, r14
    14e4:	1f 04       	cpc	r1, r15
    14e6:	44 f4       	brge	.+16     	; 0x14f8 <prints+0x70>
			printchar (out, padchar);
    14e8:	b5 01       	movw	r22, r10
    14ea:	c4 01       	movw	r24, r8
    14ec:	0e 94 35 0a 	call	0x146a	; 0x146a <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	e8 1a       	sub	r14, r24
    14f4:	f1 08       	sbc	r15, r1
    14f6:	f5 cf       	rjmp	.-22     	; 0x14e2 <prints+0x5a>
    14f8:	7e 01       	movw	r14, r28
    14fa:	d7 ff       	sbrs	r29, 7
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <prints+0x7a>
    14fe:	e1 2c       	mov	r14, r1
    1500:	f1 2c       	mov	r15, r1
    1502:	ce 19       	sub	r28, r14
    1504:	df 09       	sbc	r29, r15
    1506:	02 c0       	rjmp	.+4      	; 0x150c <prints+0x84>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
    1508:	e1 2c       	mov	r14, r1
    150a:	f1 2c       	mov	r15, r1
    150c:	e0 1a       	sub	r14, r16
    150e:	f1 0a       	sbc	r15, r17
    1510:	67 01       	movw	r12, r14
    1512:	c0 0e       	add	r12, r16
    1514:	d1 1e       	adc	r13, r17
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
    1516:	f8 01       	movw	r30, r16
    1518:	61 91       	ld	r22, Z+
    151a:	8f 01       	movw	r16, r30
    151c:	66 23       	and	r22, r22
    151e:	39 f0       	breq	.+14     	; 0x152e <prints+0xa6>
		printchar (out, *string);
    1520:	06 2e       	mov	r0, r22
    1522:	00 0c       	add	r0, r0
    1524:	77 0b       	sbc	r23, r23
    1526:	c4 01       	movw	r24, r8
    1528:	0e 94 35 0a 	call	0x146a	; 0x146a <printchar>
    152c:	f1 cf       	rjmp	.-30     	; 0x1510 <prints+0x88>
    152e:	8e 01       	movw	r16, r28
		++pc;
	}
	for ( ; width > 0; --width) {
    1530:	10 16       	cp	r1, r16
    1532:	11 06       	cpc	r1, r17
    1534:	3c f4       	brge	.+14     	; 0x1544 <prints+0xbc>
		printchar (out, padchar);
    1536:	b5 01       	movw	r22, r10
    1538:	c4 01       	movw	r24, r8
    153a:	0e 94 35 0a 	call	0x146a	; 0x146a <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
    153e:	01 50       	subi	r16, 0x01	; 1
    1540:	11 09       	sbc	r17, r1
    1542:	f6 cf       	rjmp	.-20     	; 0x1530 <prints+0xa8>
		printchar (out, padchar);
		++pc;
	}

	return pc;
    1544:	ce 01       	movw	r24, r28
    1546:	d7 ff       	sbrs	r29, 7
    1548:	02 c0       	rjmp	.+4      	; 0x154e <prints+0xc6>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
}
    154e:	8c 0d       	add	r24, r12
    1550:	9d 1d       	adc	r25, r13
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	08 95       	ret

0000156c <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
    156c:	6f 92       	push	r6
    156e:	7f 92       	push	r7
    1570:	8f 92       	push	r8
    1572:	9f 92       	push	r9
    1574:	af 92       	push	r10
    1576:	bf 92       	push	r11
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
    1584:	cf 93       	push	r28
    1586:	df 93       	push	r29
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	2c 97       	sbiw	r28, 0x0c	; 12
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	5c 01       	movw	r10, r24
    159a:	4a 01       	movw	r8, r20
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
    159c:	fb 01       	movw	r30, r22

	if (i == 0) {
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	61 f4       	brne	.+24     	; 0x15ba <printi+0x4e>
		print_buf[0] = '0';
    15a2:	80 e3       	ldi	r24, 0x30	; 48
    15a4:	89 83       	std	Y+1, r24	; 0x01
		print_buf[1] = '\0';
    15a6:	1a 82       	std	Y+2, r1	; 0x02
		return prints (out, print_buf, width, pad);
    15a8:	97 01       	movw	r18, r14
    15aa:	a8 01       	movw	r20, r16
    15ac:	be 01       	movw	r22, r28
    15ae:	6f 5f       	subi	r22, 0xFF	; 255
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	c5 01       	movw	r24, r10
    15b4:	0e 94 44 0a 	call	0x1488	; 0x1488 <prints>
    15b8:	4c c0       	rjmp	.+152    	; 0x1652 <printi+0xe6>
	}

	if (sg && b == 10 && i < 0) {
    15ba:	23 2b       	or	r18, r19
    15bc:	59 f0       	breq	.+22     	; 0x15d4 <printi+0x68>
    15be:	4a 30       	cpi	r20, 0x0A	; 10
    15c0:	51 05       	cpc	r21, r1
    15c2:	41 f4       	brne	.+16     	; 0x15d4 <printi+0x68>
    15c4:	77 ff       	sbrs	r23, 7
    15c6:	06 c0       	rjmp	.+12     	; 0x15d4 <printi+0x68>
		neg = 1;
		u = -i;
    15c8:	f1 95       	neg	r31
    15ca:	e1 95       	neg	r30
    15cc:	f1 09       	sbc	r31, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
    15ce:	21 e0       	ldi	r18, 0x01	; 1
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <printi+0x6c>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
    15d8:	1c 86       	std	Y+12, r1	; 0x0c
	if (sg && b == 10 && i < 0) {
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
    15da:	3e 01       	movw	r6, r28
    15dc:	ac e0       	ldi	r26, 0x0C	; 12
    15de:	6a 0e       	add	r6, r26
    15e0:	71 1c       	adc	r7, r1
	*s = '\0';

	while (u) {
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
    15e2:	ba e3       	ldi	r27, 0x3A	; 58
    15e4:	cb 1a       	sub	r12, r27
    15e6:	d1 08       	sbc	r13, r1
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	99 f0       	breq	.+38     	; 0x1612 <printi+0xa6>
		t = u % b;
    15ec:	cf 01       	movw	r24, r30
    15ee:	b4 01       	movw	r22, r8
    15f0:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodhi4>
		if( t >= 10 )
    15f4:	8a 30       	cpi	r24, 0x0A	; 10
    15f6:	91 05       	cpc	r25, r1
    15f8:	14 f0       	brlt	.+4      	; 0x15fe <printi+0x92>
			t += letbase - '0' - 10;
    15fa:	8c 0d       	add	r24, r12
    15fc:	9d 1d       	adc	r25, r13
		*--s = t + '0';
    15fe:	80 5d       	subi	r24, 0xD0	; 208
    1600:	d3 01       	movw	r26, r6
    1602:	8e 93       	st	-X, r24
    1604:	3d 01       	movw	r6, r26
		u /= b;
    1606:	cf 01       	movw	r24, r30
    1608:	b4 01       	movw	r22, r8
    160a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodhi4>
    160e:	fb 01       	movw	r30, r22
    1610:	eb cf       	rjmp	.-42     	; 0x15e8 <printi+0x7c>
	}

	if (neg) {
    1612:	23 2b       	or	r18, r19
    1614:	a1 f0       	breq	.+40     	; 0x163e <printi+0xd2>
		if( width && (pad & PAD_ZERO) ) {
    1616:	01 15       	cp	r16, r1
    1618:	11 05       	cpc	r17, r1
    161a:	69 f0       	breq	.+26     	; 0x1636 <printi+0xca>
    161c:	e1 fe       	sbrs	r14, 1
    161e:	0b c0       	rjmp	.+22     	; 0x1636 <printi+0xca>
			printchar (out, '-');
    1620:	6d e2       	ldi	r22, 0x2D	; 45
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	c5 01       	movw	r24, r10
    1626:	0e 94 35 0a 	call	0x146a	; 0x146a <printchar>
			++pc;
			--width;
    162a:	01 50       	subi	r16, 0x01	; 1
    162c:	11 09       	sbc	r17, r1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
    162e:	cc 24       	eor	r12, r12
    1630:	c3 94       	inc	r12
    1632:	d1 2c       	mov	r13, r1
			--width;
    1634:	06 c0       	rjmp	.+12     	; 0x1642 <printi+0xd6>
		}
		else {
			*--s = '-';
    1636:	f3 01       	movw	r30, r6
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	82 93       	st	-Z, r24
    163c:	3f 01       	movw	r6, r30

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
    163e:	c1 2c       	mov	r12, r1
    1640:	d1 2c       	mov	r13, r1
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
    1642:	97 01       	movw	r18, r14
    1644:	a8 01       	movw	r20, r16
    1646:	b3 01       	movw	r22, r6
    1648:	c5 01       	movw	r24, r10
    164a:	0e 94 44 0a 	call	0x1488	; 0x1488 <prints>
    164e:	8c 0d       	add	r24, r12
    1650:	9d 1d       	adc	r25, r13
}
    1652:	2c 96       	adiw	r28, 0x0c	; 12
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	bf 90       	pop	r11
    1670:	af 90       	pop	r10
    1672:	9f 90       	pop	r9
    1674:	8f 90       	pop	r8
    1676:	7f 90       	pop	r7
    1678:	6f 90       	pop	r6
    167a:	08 95       	ret

0000167c <print>:

static int print( char **out, const char *format, va_list args )
{
    167c:	3f 92       	push	r3
    167e:	4f 92       	push	r4
    1680:	5f 92       	push	r5
    1682:	6f 92       	push	r6
    1684:	7f 92       	push	r7
    1686:	8f 92       	push	r8
    1688:	9f 92       	push	r9
    168a:	af 92       	push	r10
    168c:	bf 92       	push	r11
    168e:	cf 92       	push	r12
    1690:	df 92       	push	r13
    1692:	ef 92       	push	r14
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <print+0x24>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	3c 01       	movw	r6, r24
    16a6:	4b 01       	movw	r8, r22
    16a8:	6a 01       	movw	r12, r20
	register int width, pad;
	register int pc = 0;
    16aa:	a1 2c       	mov	r10, r1
    16ac:	b1 2c       	mov	r11, r1
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
    16ae:	5a e0       	ldi	r21, 0x0A	; 10
    16b0:	35 2e       	mov	r3, r21
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
    16b2:	d4 01       	movw	r26, r8
    16b4:	8c 91       	ld	r24, X
    16b6:	88 23       	and	r24, r24
    16b8:	51 f0       	breq	.+20     	; 0x16ce <print+0x52>
		if (*format == '%') {
    16ba:	85 32       	cpi	r24, 0x25	; 37
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <print+0x44>
    16be:	a6 c0       	rjmp	.+332    	; 0x180c <print+0x190>
			++format;
    16c0:	f4 01       	movw	r30, r8
    16c2:	31 96       	adiw	r30, 0x01	; 1
			width = pad = 0;
			if (*format == '\0') break;
    16c4:	d4 01       	movw	r26, r8
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	8c 91       	ld	r24, X
    16ca:	81 11       	cpse	r24, r1
    16cc:	09 c0       	rjmp	.+18     	; 0x16e0 <print+0x64>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
    16ce:	61 14       	cp	r6, r1
    16d0:	71 04       	cpc	r7, r1
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <print+0x5a>
    16d4:	aa c0       	rjmp	.+340    	; 0x182a <print+0x1ae>
    16d6:	d3 01       	movw	r26, r6
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	10 82       	st	Z, r1
    16de:	a5 c0       	rjmp	.+330    	; 0x182a <print+0x1ae>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
    16e0:	85 32       	cpi	r24, 0x25	; 37
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <print+0x6a>
    16e4:	92 c0       	rjmp	.+292    	; 0x180a <print+0x18e>
			if (*format == '-') {
    16e6:	8d 32       	cpi	r24, 0x2D	; 45
    16e8:	31 f4       	brne	.+12     	; 0x16f6 <print+0x7a>
				++format;
    16ea:	f4 01       	movw	r30, r8
    16ec:	32 96       	adiw	r30, 0x02	; 2
				pad = PAD_RIGHT;
    16ee:	ee 24       	eor	r14, r14
    16f0:	e3 94       	inc	r14
    16f2:	f1 2c       	mov	r15, r1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <print+0x7e>
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
    16f6:	e1 2c       	mov	r14, r1
    16f8:	f1 2c       	mov	r15, r1
    16fa:	9f 01       	movw	r18, r30
    16fc:	2f 5f       	subi	r18, 0xFF	; 255
    16fe:	3f 4f       	sbci	r19, 0xFF	; 255
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
    1700:	80 81       	ld	r24, Z
    1702:	80 33       	cpi	r24, 0x30	; 48
    1704:	21 f4       	brne	.+8      	; 0x170e <print+0x92>
				++format;
				pad |= PAD_ZERO;
    1706:	68 94       	set
    1708:	e1 f8       	bld	r14, 1
    170a:	f9 01       	movw	r30, r18
    170c:	f6 cf       	rjmp	.-20     	; 0x16fa <print+0x7e>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
    170e:	00 e0       	ldi	r16, 0x00	; 0
    1710:	10 e0       	ldi	r17, 0x00	; 0
    1712:	4f 01       	movw	r8, r30
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
    1714:	40 81       	ld	r20, Z
    1716:	31 96       	adiw	r30, 0x01	; 1
    1718:	80 ed       	ldi	r24, 0xD0	; 208
    171a:	84 0f       	add	r24, r20
    171c:	8a 30       	cpi	r24, 0x0A	; 10
    171e:	68 f4       	brcc	.+26     	; 0x173a <print+0xbe>
				width *= 10;
    1720:	30 9e       	mul	r3, r16
    1722:	c0 01       	movw	r24, r0
    1724:	31 9e       	mul	r3, r17
    1726:	90 0d       	add	r25, r0
    1728:	11 24       	eor	r1, r1
				width += *format - '0';
    172a:	04 2f       	mov	r16, r20
    172c:	44 0f       	add	r20, r20
    172e:	11 0b       	sbc	r17, r17
    1730:	00 53       	subi	r16, 0x30	; 48
    1732:	11 09       	sbc	r17, r1
    1734:	08 0f       	add	r16, r24
    1736:	19 1f       	adc	r17, r25
    1738:	ec cf       	rjmp	.-40     	; 0x1712 <print+0x96>
			}
			if( *format == 's' ) {
    173a:	43 37       	cpi	r20, 0x73	; 115
    173c:	79 f4       	brne	.+30     	; 0x175c <print+0xe0>
				register char *s = (char *)va_arg( args, int );
    173e:	26 01       	movw	r4, r12
    1740:	b2 e0       	ldi	r27, 0x02	; 2
    1742:	4b 0e       	add	r4, r27
    1744:	51 1c       	adc	r5, r1
    1746:	f6 01       	movw	r30, r12
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
				pc += prints (out, s?s:"(null)", width, pad);
    174c:	61 15       	cp	r22, r1
    174e:	71 05       	cpc	r23, r1
    1750:	11 f4       	brne	.+4      	; 0x1756 <print+0xda>
    1752:	6d e2       	ldi	r22, 0x2D	; 45
    1754:	72 e0       	ldi	r23, 0x02	; 2
    1756:	97 01       	movw	r18, r14
    1758:	a8 01       	movw	r20, r16
    175a:	53 c0       	rjmp	.+166    	; 0x1802 <print+0x186>
				continue;
			}
			if( *format == 'd' ) {
    175c:	44 36       	cpi	r20, 0x64	; 100
    175e:	a9 f4       	brne	.+42     	; 0x178a <print+0x10e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
    1760:	26 01       	movw	r4, r12
    1762:	f2 e0       	ldi	r31, 0x02	; 2
    1764:	4f 0e       	add	r4, r31
    1766:	51 1c       	adc	r5, r1
    1768:	d6 01       	movw	r26, r12
    176a:	6d 91       	ld	r22, X+
    176c:	7c 91       	ld	r23, X
    176e:	31 e6       	ldi	r19, 0x61	; 97
    1770:	c3 2e       	mov	r12, r19
    1772:	d1 2c       	mov	r13, r1
    1774:	21 e0       	ldi	r18, 0x01	; 1
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a e0       	ldi	r20, 0x0A	; 10
    177a:	50 e0       	ldi	r21, 0x00	; 0
    177c:	c3 01       	movw	r24, r6
    177e:	0e 94 b6 0a 	call	0x156c	; 0x156c <printi>
    1782:	a8 0e       	add	r10, r24
    1784:	b9 1e       	adc	r11, r25
    1786:	62 01       	movw	r12, r4
				continue;
    1788:	4c c0       	rjmp	.+152    	; 0x1822 <print+0x1a6>
			}
			if( *format == 'x' ) {
    178a:	48 37       	cpi	r20, 0x78	; 120
    178c:	59 f4       	brne	.+22     	; 0x17a4 <print+0x128>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
    178e:	26 01       	movw	r4, r12
    1790:	b2 e0       	ldi	r27, 0x02	; 2
    1792:	4b 0e       	add	r4, r27
    1794:	51 1c       	adc	r5, r1
    1796:	f6 01       	movw	r30, r12
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	21 e6       	ldi	r18, 0x61	; 97
    179e:	c2 2e       	mov	r12, r18
    17a0:	d1 2c       	mov	r13, r1
    17a2:	0c c0       	rjmp	.+24     	; 0x17bc <print+0x140>
				continue;
			}
			if( *format == 'X' ) {
    17a4:	48 35       	cpi	r20, 0x58	; 88
    17a6:	79 f4       	brne	.+30     	; 0x17c6 <print+0x14a>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    17a8:	26 01       	movw	r4, r12
    17aa:	f2 e0       	ldi	r31, 0x02	; 2
    17ac:	4f 0e       	add	r4, r31
    17ae:	51 1c       	adc	r5, r1
    17b0:	d6 01       	movw	r26, r12
    17b2:	6d 91       	ld	r22, X+
    17b4:	7c 91       	ld	r23, X
    17b6:	91 e4       	ldi	r25, 0x41	; 65
    17b8:	c9 2e       	mov	r12, r25
    17ba:	d1 2c       	mov	r13, r1
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e1       	ldi	r20, 0x10	; 16
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	db cf       	rjmp	.-74     	; 0x177c <print+0x100>
				continue;
			}
			if( *format == 'u' ) {
    17c6:	45 37       	cpi	r20, 0x75	; 117
    17c8:	69 f4       	brne	.+26     	; 0x17e4 <print+0x168>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
    17ca:	26 01       	movw	r4, r12
    17cc:	b2 e0       	ldi	r27, 0x02	; 2
    17ce:	4b 0e       	add	r4, r27
    17d0:	51 1c       	adc	r5, r1
    17d2:	f6 01       	movw	r30, r12
    17d4:	60 81       	ld	r22, Z
    17d6:	71 81       	ldd	r23, Z+1	; 0x01
    17d8:	81 e6       	ldi	r24, 0x61	; 97
    17da:	c8 2e       	mov	r12, r24
    17dc:	d1 2c       	mov	r13, r1
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	ca cf       	rjmp	.-108    	; 0x1778 <print+0xfc>
				continue;
			}
			if( *format == 'c' ) {
    17e4:	43 36       	cpi	r20, 0x63	; 99
    17e6:	e9 f4       	brne	.+58     	; 0x1822 <print+0x1a6>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
    17e8:	26 01       	movw	r4, r12
    17ea:	f2 e0       	ldi	r31, 0x02	; 2
    17ec:	4f 0e       	add	r4, r31
    17ee:	51 1c       	adc	r5, r1
    17f0:	d6 01       	movw	r26, r12
    17f2:	8c 91       	ld	r24, X
    17f4:	89 83       	std	Y+1, r24	; 0x01
				scr[1] = '\0';
    17f6:	1a 82       	std	Y+2, r1	; 0x02
				pc += prints (out, scr, width, pad);
    17f8:	97 01       	movw	r18, r14
    17fa:	a8 01       	movw	r20, r16
    17fc:	be 01       	movw	r22, r28
    17fe:	6f 5f       	subi	r22, 0xFF	; 255
    1800:	7f 4f       	sbci	r23, 0xFF	; 255
    1802:	c3 01       	movw	r24, r6
    1804:	0e 94 44 0a 	call	0x1488	; 0x1488 <prints>
    1808:	bc cf       	rjmp	.-136    	; 0x1782 <print+0x106>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
    180a:	4f 01       	movw	r8, r30
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
    180c:	f4 01       	movw	r30, r8
    180e:	60 81       	ld	r22, Z
    1810:	06 2e       	mov	r0, r22
    1812:	00 0c       	add	r0, r0
    1814:	77 0b       	sbc	r23, r23
    1816:	c3 01       	movw	r24, r6
    1818:	0e 94 35 0a 	call	0x146a	; 0x146a <printchar>
			++pc;
    181c:	ff ef       	ldi	r31, 0xFF	; 255
    181e:	af 1a       	sub	r10, r31
    1820:	bf 0a       	sbc	r11, r31
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	88 1a       	sub	r8, r24
    1826:	98 0a       	sbc	r9, r24
    1828:	44 cf       	rjmp	.-376    	; 0x16b2 <print+0x36>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
    182a:	c5 01       	movw	r24, r10
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	08 95       	ret

00001854 <__io_putchar>:
#include <stdarg.h>
#include "printf-stdarg.h"

int __io_putchar(int ch)
{
	usart_putchar(ch);
    1854:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <usart_putchar>
	return 0;
}
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	08 95       	ret

0000185e <_write>:

int _write(int file, char *ptr, int len)
{
    185e:	ef 92       	push	r14
    1860:	ff 92       	push	r15
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	cf 93       	push	r28
    1868:	df 93       	push	r29
    186a:	8b 01       	movw	r16, r22
    186c:	7a 01       	movw	r14, r20
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
    186e:	eb 01       	movw	r28, r22
    1870:	ce 01       	movw	r24, r28
    1872:	80 1b       	sub	r24, r16
    1874:	91 0b       	sbc	r25, r17
    1876:	8e 15       	cp	r24, r14
    1878:	9f 05       	cpc	r25, r15
    187a:	24 f4       	brge	.+8      	; 0x1884 <_write+0x26>
#include <stdarg.h>
#include "printf-stdarg.h"

int __io_putchar(int ch)
{
	usart_putchar(ch);
    187c:	89 91       	ld	r24, Y+
    187e:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <usart_putchar>
    1882:	f6 cf       	rjmp	.-20     	; 0x1870 <_write+0x12>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
	{
		__io_putchar(*ptr++);
	}
	return 0;
}
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	08 95       	ret

00001896 <printf>:
	va_end( args );
	return pc;
}

int printf(const char *format, ...)
{
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	ae 01       	movw	r20, r28
    18a0:	4b 5f       	subi	r20, 0xFB	; 251
    18a2:	5f 4f       	sbci	r21, 0xFF	; 255
    18a4:	fa 01       	movw	r30, r20
    18a6:	61 91       	ld	r22, Z+
    18a8:	71 91       	ld	r23, Z+
    18aa:	af 01       	movw	r20, r30
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 3e 0b 	call	0x167c	; 0x167c <print>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <sprintf>:

int sprintf(char *out, const char *format, ...)
{
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
        va_list args;
        
        va_start( args, format );
        return print( &out, format, args );
    18c2:	ae 01       	movw	r20, r28
    18c4:	47 5f       	subi	r20, 0xF7	; 247
    18c6:	5f 4f       	sbci	r21, 0xFF	; 255
    18c8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ca:	78 85       	ldd	r23, Y+8	; 0x08
    18cc:	ce 01       	movw	r24, r28
    18ce:	05 96       	adiw	r24, 0x05	; 5
    18d0:	0e 94 3e 0b 	call	0x167c	; 0x167c <print>
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <snprintf>:


int snprintf( char *buf, unsigned int count, const char *format, ... )
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
        va_list args;
        
        ( void ) count;
        
        va_start( args, format );
        return print( &buf, format, args );
    18e2:	ae 01       	movw	r20, r28
    18e4:	45 5f       	subi	r20, 0xF5	; 245
    18e6:	5f 4f       	sbci	r21, 0xFF	; 255
    18e8:	69 85       	ldd	r22, Y+9	; 0x09
    18ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    18ec:	ce 01       	movw	r24, r28
    18ee:	05 96       	adiw	r24, 0x05	; 5
    18f0:	0e 94 3e 0b 	call	0x167c	; 0x167c <print>
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <unlinkjob>:
    return hal_ticks();
}

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    18fa:	fc 01       	movw	r30, r24
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	21 15       	cp	r18, r1
    1902:	31 05       	cpc	r19, r1
    1904:	71 f0       	breq	.+28     	; 0x1922 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
    1906:	26 17       	cp	r18, r22
    1908:	37 07       	cpc	r19, r23
    190a:	49 f4       	brne	.+18     	; 0x191e <unlinkjob+0x24>
            *pnext = job->next;
    190c:	fb 01       	movw	r30, r22
    190e:	20 81       	ld	r18, Z
    1910:	31 81       	ldd	r19, Z+1	; 0x01
    1912:	fc 01       	movw	r30, r24
    1914:	31 83       	std	Z+1, r19	; 0x01
    1916:	20 83       	st	Z, r18
            return 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	08 95       	ret
    return hal_ticks();
}

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    191e:	c9 01       	movw	r24, r18
    1920:	ec cf       	rjmp	.-40     	; 0x18fa <unlinkjob>
        if(*pnext == job) { // unlink
            *pnext = job->next;
            return 1;
        }
    }
    return 0;
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
}
    1926:	08 95       	ret

00001928 <os_init>:
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
    memset(&OS, 0x00, sizeof(OS));
    1928:	84 e0       	ldi	r24, 0x04	; 4
    192a:	e2 ee       	ldi	r30, 0xE2	; 226
    192c:	f2 e0       	ldi	r31, 0x02	; 2
    192e:	df 01       	movw	r26, r30
    1930:	1d 92       	st	X+, r1
    1932:	8a 95       	dec	r24
    1934:	e9 f7       	brne	.-6      	; 0x1930 <os_init+0x8>
    hal_init();
    1936:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <hal_init>
    radio_init();
    193a:	0e 94 48 11 	call	0x2290	; 0x2290 <radio_init>
    LMIC_init();
    193e:	0c 94 7a 29 	jmp	0x52f4	; 0x52f4 <LMIC_init>

00001942 <os_getTime>:
}

ostime_t os_getTime () {
    return hal_ticks();
    1942:	0c 94 24 0e 	jmp	0x1c48	; 0x1c48 <hal_ticks>

00001946 <os_clearCallback>:
    }
    return 0;
}

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ec 01       	movw	r28, r24
    hal_disableIRQs();
    194c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job); 
    1950:	be 01       	movw	r22, r28
    1952:	82 ee       	ldi	r24, 0xE2	; 226
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <unlinkjob>
	unlinkjob(&OS.runnablejobs, job);
    195a:	be 01       	movw	r22, r28
    195c:	84 ee       	ldi	r24, 0xE4	; 228
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <unlinkjob>
    hal_enableIRQs();
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
// clear scheduled job
void os_clearCallback (osjob_t* job) {
    hal_disableIRQs();
    unlinkjob(&OS.scheduledjobs, job); 
	unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
    1968:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <hal_enableIRQs>

0000196c <os_setCallback>:
}

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	ec 01       	movw	r28, r24
    1976:	8b 01       	movw	r16, r22
    osjob_t** pnext;
    hal_disableIRQs();
    1978:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
    197c:	be 01       	movw	r22, r28
    197e:	84 ee       	ldi	r24, 0xE4	; 228
    1980:	92 e0       	ldi	r25, 0x02	; 2
    1982:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <unlinkjob>
    // fill-in job
    job->func = cb;
    1986:	1f 83       	std	Y+7, r17	; 0x07
    1988:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    198a:	19 82       	std	Y+1, r1	; 0x01
    198c:	18 82       	st	Y, r1
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    198e:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <OS+0x2>
    1992:	f0 91 e5 02 	lds	r31, 0x02E5	; 0x8002e5 <OS+0x3>
    1996:	a4 ee       	ldi	r26, 0xE4	; 228
    1998:	b2 e0       	ldi	r27, 0x02	; 2
    199a:	30 97       	sbiw	r30, 0x00	; 0
    199c:	29 f0       	breq	.+10     	; 0x19a8 <os_setCallback+0x3c>
    199e:	df 01       	movw	r26, r30
    19a0:	01 90       	ld	r0, Z+
    19a2:	f0 81       	ld	r31, Z
    19a4:	e0 2d       	mov	r30, r0
    19a6:	f9 cf       	rjmp	.-14     	; 0x199a <os_setCallback+0x2e>
    *pnext = job;
    19a8:	cd 93       	st	X+, r28
    19aa:	dc 93       	st	X, r29
    hal_enableIRQs();
}
    19ac:	df 91       	pop	r29
    19ae:	cf 91       	pop	r28
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    job->func = cb;
    job->next = NULL;
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    *pnext = job;
    hal_enableIRQs();
    19b4:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <hal_enableIRQs>

000019b8 <os_setTimedCallback>:
}

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	ec 01       	movw	r28, r24
    19ca:	6a 01       	movw	r12, r20
    19cc:	7b 01       	movw	r14, r22
    19ce:	89 01       	movw	r16, r18
    osjob_t** pnext;
    hal_disableIRQs();
    19d0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
    19d4:	be 01       	movw	r22, r28
    19d6:	82 ee       	ldi	r24, 0xE2	; 226
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <unlinkjob>
    // fill-in job
    job->deadline = time;
    19de:	ca 82       	std	Y+2, r12	; 0x02
    19e0:	db 82       	std	Y+3, r13	; 0x03
    19e2:	ec 82       	std	Y+4, r14	; 0x04
    19e4:	fd 82       	std	Y+5, r15	; 0x05
    job->func = cb;
    19e6:	1f 83       	std	Y+7, r17	; 0x07
    19e8:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    19ec:	18 82       	st	Y, r1
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    19ee:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <OS>
    19f2:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <OS+0x1>
    19f6:	22 ee       	ldi	r18, 0xE2	; 226
    19f8:	32 e0       	ldi	r19, 0x02	; 2
    19fa:	30 97       	sbiw	r30, 0x00	; 0
    19fc:	a9 f0       	breq	.+42     	; 0x1a28 <os_setTimedCallback+0x70>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	a4 81       	ldd	r26, Z+4	; 0x04
    1a04:	b5 81       	ldd	r27, Z+5	; 0x05
    1a06:	8c 19       	sub	r24, r12
    1a08:	9d 09       	sbc	r25, r13
    1a0a:	ae 09       	sbc	r26, r14
    1a0c:	bf 09       	sbc	r27, r15
    1a0e:	18 16       	cp	r1, r24
    1a10:	19 06       	cpc	r1, r25
    1a12:	1a 06       	cpc	r1, r26
    1a14:	1b 06       	cpc	r1, r27
    1a16:	1c f4       	brge	.+6      	; 0x1a1e <os_setTimedCallback+0x66>
            // enqueue before next element and stop
            job->next = *pnext;
    1a18:	f9 83       	std	Y+1, r31	; 0x01
    1a1a:	e8 83       	st	Y, r30
            break;
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <os_setTimedCallback+0x70>
    // fill-in job
    job->deadline = time;
    job->func = cb;
    job->next = NULL;
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    1a1e:	9f 01       	movw	r18, r30
    1a20:	01 90       	ld	r0, Z+
    1a22:	f0 81       	ld	r31, Z
    1a24:	e0 2d       	mov	r30, r0
    1a26:	e9 cf       	rjmp	.-46     	; 0x19fa <os_setTimedCallback+0x42>
            // enqueue before next element and stop
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    1a28:	f9 01       	movw	r30, r18
    1a2a:	d1 83       	std	Z+1, r29	; 0x01
    1a2c:	c0 83       	st	Z, r28
    hal_enableIRQs();
}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    hal_enableIRQs();
    1a3e:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <hal_enableIRQs>

00001a42 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
	while(1) {
        osjob_t* j = NULL;
        hal_disableIRQs();
    1a42:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
    1a46:	c0 91 e4 02 	lds	r28, 0x02E4	; 0x8002e4 <OS+0x2>
    1a4a:	d0 91 e5 02 	lds	r29, 0x02E5	; 0x8002e5 <OS+0x3>
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <os_runloop+0x1e>
            j = OS.runnablejobs;
            OS.runnablejobs = j->next;
    1a52:	88 81       	ld	r24, Y
    1a54:	99 81       	ldd	r25, Y+1	; 0x01
    1a56:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <OS+0x3>
    1a5a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <OS+0x2>
    1a5e:	1b c0       	rjmp	.+54     	; 0x1a96 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
    1a60:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <OS>
    1a64:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <OS+0x1>
    1a68:	30 97       	sbiw	r30, 0x00	; 0
    1a6a:	99 f0       	breq	.+38     	; 0x1a92 <os_runloop+0x50>
    1a6c:	62 81       	ldd	r22, Z+2	; 0x02
    1a6e:	73 81       	ldd	r23, Z+3	; 0x03
    1a70:	84 81       	ldd	r24, Z+4	; 0x04
    1a72:	95 81       	ldd	r25, Z+5	; 0x05
    1a74:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <hal_checkTimer>
    1a78:	89 2b       	or	r24, r25
    1a7a:	59 f0       	breq	.+22     	; 0x1a92 <os_runloop+0x50>
            j = OS.scheduledjobs;
    1a7c:	c0 91 e2 02 	lds	r28, 0x02E2	; 0x8002e2 <OS>
    1a80:	d0 91 e3 02 	lds	r29, 0x02E3	; 0x8002e3 <OS+0x1>
            OS.scheduledjobs = j->next;
    1a84:	88 81       	ld	r24, Y
    1a86:	99 81       	ldd	r25, Y+1	; 0x01
    1a88:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <OS+0x1>
    1a8c:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <OS>
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
    1a92:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <hal_sleep>
        }
        hal_enableIRQs();
    1a96:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <hal_enableIRQs>
        if(j) { // run job callback
    1a9a:	20 97       	sbiw	r28, 0x00	; 0
    1a9c:	91 f2       	breq	.-92     	; 0x1a42 <os_runloop>
            j->func(j);
    1a9e:	ee 81       	ldd	r30, Y+6	; 0x06
    1aa0:	ff 81       	ldd	r31, Y+7	; 0x07
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	09 95       	icall
    1aa6:	cd cf       	rjmp	.-102    	; 0x1a42 <os_runloop>

00001aa8 <usart_init>:
/* 	return 0; */
/* } */

void usart_init(void)
{
	cli();
    1aa8:	f8 94       	cli
	//Set baudrate
	UBRR0L = (uint8_t)(BAUD_PRESCALLE & 0xFF);
    1aaa:	8c e0       	ldi	r24, 0x0C	; 12
    1aac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(BAUD_PRESCALLE >> 8);
    1ab0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	//Enable TX
	UCSR0B |= (1 << TXEN0);
    1ab4:	e1 ec       	ldi	r30, 0xC1	; 193
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 60       	ori	r24, 0x08	; 8
    1abc:	80 83       	st	Z, r24
	//Enable RX
	UCSR0B |= (1 << RXEN0);
    1abe:	80 81       	ld	r24, Z
    1ac0:	80 61       	ori	r24, 0x10	; 16
    1ac2:	80 83       	st	Z, r24
	//Enable TX interrupt
	UCSR0B |= (1 << TXCIE0);
    1ac4:	80 81       	ld	r24, Z
    1ac6:	80 64       	ori	r24, 0x40	; 64
    1ac8:	80 83       	st	Z, r24
	//Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1aca:	e2 ec       	ldi	r30, 0xC2	; 194
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	86 60       	ori	r24, 0x06	; 6
    1ad2:	80 83       	st	Z, r24
	/* stdout = &mystdout; */
	sei();
    1ad4:	78 94       	sei
    1ad6:	08 95       	ret

00001ad8 <usart_putchar>:
}

void usart_putchar(uint8_t ch)
{
	if (bit_is_set(UCSR0A, UDRE0) && tx_countbuffer == 0) 
    1ad8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1adc:	95 ff       	sbrs	r25, 5
    1ade:	07 c0       	rjmp	.+14     	; 0x1aee <usart_putchar+0x16>
    1ae0:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <tx_countbuffer>
    1ae4:	91 11       	cpse	r25, r1
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <usart_putchar+0x16>
		UDR0 = ch;
    1ae8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    1aec:	08 95       	ret
	else if (tx_countbuffer < USART_RX_BUFFER_SIZE) 
    1aee:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <tx_countbuffer>
    1af2:	94 31       	cpi	r25, 0x14	; 20
    1af4:	b0 f4       	brcc	.+44     	; 0x1b22 <usart_putchar+0x4a>
	{
		tx_countbuffer++;
    1af6:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <tx_countbuffer>
    1afa:	9f 5f       	subi	r25, 0xFF	; 255
    1afc:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <tx_countbuffer>
		usart_tx_buffer[tx_headbuffer] = ch;
    1b00:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <tx_headbuffer>
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	e7 51       	subi	r30, 0x17	; 23
    1b08:	fd 4f       	sbci	r31, 0xFD	; 253
    1b0a:	80 83       	st	Z, r24
		tx_headbuffer++;
    1b0c:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <tx_headbuffer>
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <tx_headbuffer>
		if(tx_headbuffer == USART_TX_BUFFER_SIZE)
    1b16:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <tx_headbuffer>
    1b1a:	84 31       	cpi	r24, 0x14	; 20
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <usart_putchar+0x4a>
			tx_headbuffer = 0;
    1b1e:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <tx_headbuffer>
    1b22:	08 95       	ret

00001b24 <usart_putstr>:
	}
}

void usart_putstr(char* str)
{
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
	while (*str) 
    1b2a:	89 91       	ld	r24, Y+
    1b2c:	88 23       	and	r24, r24
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <usart_putstr+0x12>
	{
		usart_putchar(*str);
    1b30:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <usart_putchar>
    1b34:	fa cf       	rjmp	.-12     	; 0x1b2a <usart_putstr+0x6>
		str++;
	}
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	08 95       	ret

00001b3c <spi_init>:

void spi_init(void)
{
	NSS_DDR |= (1 << NSS_PIN);//Port out
    1b3c:	22 9a       	sbi	0x04, 2	; 4
	SPI_DDR |= (1 << SPI_MOSI) | (1 << SPI_SCK);
    1b3e:	84 b1       	in	r24, 0x04	; 4
    1b40:	88 62       	ori	r24, 0x28	; 40
    1b42:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << SPI_MISO);
    1b44:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI, mode master, boud f_osc/16
    1b46:	8c b5       	in	r24, 0x2c	; 44
    1b48:	81 65       	ori	r24, 0x51	; 81
    1b4a:	8c bd       	out	0x2c, r24	; 44
    1b4c:	08 95       	ret

00001b4e <hal_init>:
}

void hal_init (void)
{
	LED_DDR |= (1 << LED_PIN);
    1b4e:	39 9a       	sbi	0x07, 1	; 7
	LED_PORT &= ~(1 << LED_PIN);
    1b50:	41 98       	cbi	0x08, 1	; 8
	usart_init();
    1b52:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <usart_init>
	spi_init();
    1b56:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <spi_init>
	//Set timer1 
	TCCR0B = (1 << CS02); //Set clock source clkio/256
    1b5a:	84 e0       	ldi	r24, 0x04	; 4
    1b5c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); //Enable overflow interrupt
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	//Int0
	EICRA |= (1 << ISC01) | ( 1 << ISC00);// Int0 rising edge
    1b64:	e9 e6       	ldi	r30, 0x69	; 105
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	83 60       	ori	r24, 0x03	; 3
    1b6c:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); //Enable interrupt int0
    1b6e:	e8 9a       	sbi	0x1d, 0	; 29
	//Int PCI
	DDRD &= ~(1 << PORTD5);
    1b70:	55 98       	cbi	0x0a, 5	; 10
	PORTD &= ~(1 << PORTD5);
    1b72:	5d 98       	cbi	0x0b, 5	; 11
	PCICR |= (1 << PCIE2);
    1b74:	e8 e6       	ldi	r30, 0x68	; 104
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	84 60       	ori	r24, 0x04	; 4
    1b7c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT2);
    1b7e:	eb e6       	ldi	r30, 0x6B	; 107
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	80 83       	st	Z, r24
	set_sleep_mode(SLEEP_MODE_IDLE);
    1b88:	83 b7       	in	r24, 0x33	; 51
    1b8a:	81 7f       	andi	r24, 0xF1	; 241
    1b8c:	83 bf       	out	0x33, r24	; 51
	sei();
    1b8e:	78 94       	sei
    1b90:	08 95       	ret

00001b92 <hal_pin_nss>:
/*
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	11 f4       	brne	.+4      	; 0x1b9a <hal_pin_nss+0x8>
		NSS_PORT |= (1 << NSS_PIN);
    1b96:	2a 9a       	sbi	0x05, 2	; 5
    1b98:	08 95       	ret
	else NSS_PORT &= ~(1 << NSS_PIN);
    1b9a:	2a 98       	cbi	0x05, 2	; 5
    1b9c:	08 95       	ret

00001b9e <hal_pin_rxtx>:
}

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val)
{
    1b9e:	08 95       	ret

00001ba0 <hal_pin_rst>:
/*
 * control radio RST pin (0=low, 1=high, 2=floating)
 */
void hal_pin_rst (u1_t val)
{
	if (val == 0 || val == 1) 
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	38 f4       	brcc	.+14     	; 0x1bb2 <hal_pin_rst+0x12>
	{
		RST_DDR |= (1 << RST_PIN);//Port out
    1ba4:	21 9a       	sbi	0x04, 1	; 4
		if (val == 1) 
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <hal_pin_rst+0xe>
			RST_PORT |= (1 << RST_PIN);
    1baa:	29 9a       	sbi	0x05, 1	; 5
    1bac:	08 95       	ret
		else RST_PORT &= ~(1 << RST_PIN);
    1bae:	29 98       	cbi	0x05, 1	; 5
    1bb0:	08 95       	ret
	}
	else RST_DDR &= ~(1 << RST_PIN);//floating
    1bb2:	21 98       	cbi	0x04, 1	; 4
    1bb4:	08 95       	ret

00001bb6 <hal_spi>:
 *   - read byte and return value
 */
u1_t hal_spi (u1_t outval)
{
	u1_t ret;
	SPDR = outval;
    1bb6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
    1bb8:	0d b4       	in	r0, 0x2d	; 45
    1bba:	07 fe       	sbrs	r0, 7
    1bbc:	fd cf       	rjmp	.-6      	; 0x1bb8 <hal_spi+0x2>
		ret = SPDR;
    1bbe:	8e b5       	in	r24, 0x2e	; 46
	return ret;
}
    1bc0:	08 95       	ret

00001bc2 <hal_spi_write>:
    }
	hal_pin_nss(1);
}

void hal_spi_write(u1_t cmd, const u1_t* buf, size_t len)
{
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	f8 2e       	mov	r15, r24
    1bce:	eb 01       	movw	r28, r22
    1bd0:	8a 01       	movw	r16, r20
		ret = SPDR;
	return ret;
}
static void hal_spi_trx(u1_t cmd, u1_t* buf, size_t len, bit_t is_read) 
{
	hal_pin_nss(0);
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
	hal_spi(cmd);
    1bd8:	8f 2d       	mov	r24, r15
    1bda:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    1bde:	0c 0f       	add	r16, r28
    1be0:	1d 1f       	adc	r17, r29
    for (; len > 0; --len, ++buf) {
    1be2:	c0 17       	cp	r28, r16
    1be4:	d1 07       	cpc	r29, r17
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <hal_spi_write+0x2e>
        u1_t data = is_read ? 0x00 : *buf;
        data = hal_spi(data);
    1be8:	89 91       	ld	r24, Y+
    1bea:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    1bee:	f9 cf       	rjmp	.-14     	; 0x1be2 <hal_spi_write+0x20>
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
		NSS_PORT |= (1 << NSS_PIN);
    1bf0:	2a 9a       	sbi	0x05, 2	; 5
}

void hal_spi_write(u1_t cmd, const u1_t* buf, size_t len)
{
	hal_spi_trx(cmd, (u1_t*)buf, len, 0);
}
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	08 95       	ret

00001bfe <hal_spi_read>:

void hal_spi_read(u1_t cmd, u1_t* buf, size_t len)
{
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	f8 2e       	mov	r15, r24
    1c0a:	eb 01       	movw	r28, r22
    1c0c:	8a 01       	movw	r16, r20
		ret = SPDR;
	return ret;
}
static void hal_spi_trx(u1_t cmd, u1_t* buf, size_t len, bit_t is_read) 
{
	hal_pin_nss(0);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
	hal_spi(cmd);
    1c14:	8f 2d       	mov	r24, r15
    1c16:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    1c1a:	0c 0f       	add	r16, r28
    1c1c:	1d 1f       	adc	r17, r29
    for (; len > 0; --len, ++buf) {
    1c1e:	c0 17       	cp	r28, r16
    1c20:	d1 07       	cpc	r29, r17
    1c22:	29 f0       	breq	.+10     	; 0x1c2e <hal_spi_read+0x30>
        u1_t data = is_read ? 0x00 : *buf;
        data = hal_spi(data);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
        if (is_read)
            *buf = data;
    1c2a:	89 93       	st	Y+, r24
    1c2c:	f8 cf       	rjmp	.-16     	; 0x1c1e <hal_spi_read+0x20>
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
		NSS_PORT |= (1 << NSS_PIN);
    1c2e:	2a 9a       	sbi	0x05, 2	; 5
}

void hal_spi_read(u1_t cmd, u1_t* buf, size_t len)
{
	hal_spi_trx(cmd, buf, len, 1);
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	08 95       	ret

00001c3c <hal_disableIRQs>:

void hal_disableIRQs (void)
{
	cli();
    1c3c:	f8 94       	cli
    1c3e:	08 95       	ret

00001c40 <hal_enableIRQs>:
}

void hal_enableIRQs (void)
{
	sei();
    1c40:	78 94       	sei
    1c42:	08 95       	ret

00001c44 <hal_sleep>:
}

void hal_sleep (void)
{
	asm("sleep");
    1c44:	88 95       	sleep
    1c46:	08 95       	ret

00001c48 <hal_ticks>:
}

u4_t hal_ticks (void)
{
	cli();
    1c48:	f8 94       	cli
	u4_t t = hal_time;
    1c4a:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <hal_time>
    1c4e:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <hal_time+0x1>
    1c52:	a0 91 17 03 	lds	r26, 0x0317	; 0x800317 <hal_time+0x2>
    1c56:	b0 91 18 03 	lds	r27, 0x0318	; 0x800318 <hal_time+0x3>
	u1_t cnt = TCNT0;
    1c5a:	26 b5       	in	r18, 0x26	; 38
	sei();
    1c5c:	78 94       	sei
	return (t << 8) | cnt;
    1c5e:	ba 2f       	mov	r27, r26
    1c60:	a9 2f       	mov	r26, r25
    1c62:	98 2f       	mov	r25, r24
    1c64:	88 27       	eor	r24, r24
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	62 2b       	or	r22, r18
}
    1c6c:	08 95       	ret

00001c6e <hal_waitUntil>:
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    return (u2_t)d;
}

void hal_waitUntil (u4_t time)
{
    1c6e:	cf 92       	push	r12
    1c70:	df 92       	push	r13
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	6b 01       	movw	r12, r22
    1c78:	7c 01       	movw	r14, r24
}


// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
    u4_t t = hal_ticks();
    1c7a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <hal_ticks>
    s4_t d = time - t;
    1c7e:	a7 01       	movw	r20, r14
    1c80:	96 01       	movw	r18, r12
    1c82:	26 1b       	sub	r18, r22
    1c84:	37 0b       	sbc	r19, r23
    1c86:	48 0b       	sbc	r20, r24
    1c88:	59 0b       	sbc	r21, r25
    1c8a:	da 01       	movw	r26, r20
    1c8c:	c9 01       	movw	r24, r18
    if( d<=0 ) return 0;    // in the past
    1c8e:	12 16       	cp	r1, r18
    1c90:	13 06       	cpc	r1, r19
    1c92:	14 06       	cpc	r1, r20
    1c94:	15 06       	cpc	r1, r21
    1c96:	5c f4       	brge	.+22     	; 0x1cae <hal_waitUntil+0x40>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    1c98:	ad 01       	movw	r20, r26
    1c9a:	77 27       	eor	r23, r23
    1c9c:	57 fd       	sbrc	r21, 7
    1c9e:	70 95       	com	r23
    1ca0:	67 2f       	mov	r22, r23
    1ca2:	45 2b       	or	r20, r21
    1ca4:	46 2b       	or	r20, r22
    1ca6:	47 2b       	or	r20, r23
    1ca8:	41 f7       	brne	.-48     	; 0x1c7a <hal_waitUntil+0xc>
    return (u2_t)d;
}

void hal_waitUntil (u4_t time)
{
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
    1caa:	89 2b       	or	r24, r25
    1cac:	31 f7       	brne	.-52     	; 0x1c7a <hal_waitUntil+0xc>
}
    1cae:	ff 90       	pop	r15
    1cb0:	ef 90       	pop	r14
    1cb2:	df 90       	pop	r13
    1cb4:	cf 90       	pop	r12
    1cb6:	08 95       	ret

00001cb8 <hal_checkTimer>:

u2_t hal_checkTimer (u4_t targettime)
{
    1cb8:	cf 92       	push	r12
    1cba:	df 92       	push	r13
    1cbc:	ef 92       	push	r14
    1cbe:	ff 92       	push	r15
    1cc0:	0f 93       	push	r16
    1cc2:	1f 93       	push	r17
    1cc4:	6b 01       	movw	r12, r22
    1cc6:	7c 01       	movw	r14, r24
}


// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
    u4_t t = hal_ticks();
    1cc8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <hal_ticks>
    s4_t d = time - t;
    1ccc:	97 01       	movw	r18, r14
    1cce:	86 01       	movw	r16, r12
    1cd0:	06 1b       	sub	r16, r22
    1cd2:	17 0b       	sbc	r17, r23
    1cd4:	28 0b       	sbc	r18, r24
    1cd6:	39 0b       	sbc	r19, r25
    if( d<=0 ) return 0;    // in the past
    1cd8:	10 16       	cp	r1, r16
    1cda:	11 06       	cpc	r1, r17
    1cdc:	12 06       	cpc	r1, r18
    1cde:	13 06       	cpc	r1, r19
    1ce0:	84 f4       	brge	.+32     	; 0x1d02 <hal_checkTimer+0x4a>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	bb 27       	eor	r27, r27
    1ce6:	97 fd       	sbrc	r25, 7
    1ce8:	b0 95       	com	r27
    1cea:	ab 2f       	mov	r26, r27
    1cec:	89 2b       	or	r24, r25
    1cee:	8a 2b       	or	r24, r26
    1cf0:	8b 2b       	or	r24, r27
    1cf2:	49 f4       	brne	.+18     	; 0x1d06 <hal_checkTimer+0x4e>

u2_t hal_checkTimer (u4_t targettime)
{
	u2_t dt;
	if((dt = deltaticks(targettime)) < 5)
		return 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	05 30       	cpi	r16, 0x05	; 5
    1cfa:	11 05       	cpc	r17, r1
    1cfc:	30 f0       	brcs	.+12     	; 0x1d0a <hal_checkTimer+0x52>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <hal_checkTimer+0x52>
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <hal_checkTimer+0x50>
	else return 0;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
}
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	df 90       	pop	r13
    1d14:	cf 90       	pop	r12
    1d16:	08 95       	ret

00001d18 <hal_failed>:
    1d18:	08 95       	ret

00001d1a <hal_deep_sleep>:
{

}

void hal_deep_sleep (u2_t ticks)
{
    1d1a:	08 95       	ret

00001d1c <hal_deep_sleep4ever>:

}

void hal_deep_sleep4ever (void)
{
    1d1c:	08 95       	ret

00001d1e <__vector_16>:

}

ISR(TIMER0_OVF_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	8f 93       	push	r24
    1d2a:	9f 93       	push	r25
    1d2c:	af 93       	push	r26
    1d2e:	bf 93       	push	r27
	hal_time++;
    1d30:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <hal_time>
    1d34:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <hal_time+0x1>
    1d38:	a0 91 17 03 	lds	r26, 0x0317	; 0x800317 <hal_time+0x2>
    1d3c:	b0 91 18 03 	lds	r27, 0x0318	; 0x800318 <hal_time+0x3>
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	a1 1d       	adc	r26, r1
    1d44:	b1 1d       	adc	r27, r1
    1d46:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <hal_time>
    1d4a:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <hal_time+0x1>
    1d4e:	a0 93 17 03 	sts	0x0317, r26	; 0x800317 <hal_time+0x2>
    1d52:	b0 93 18 03 	sts	0x0318, r27	; 0x800318 <hal_time+0x3>
}
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	0f 90       	pop	r0
    1d64:	1f 90       	pop	r1
    1d66:	18 95       	reti

00001d68 <__vector_20>:

ISR(USART_TX_vect)
{
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	8f 93       	push	r24
    1d74:	ef 93       	push	r30
    1d76:	ff 93       	push	r31
	if (tx_countbuffer) 
    1d78:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <tx_countbuffer>
    1d7c:	88 23       	and	r24, r24
    1d7e:	c1 f0       	breq	.+48     	; 0x1db0 <__vector_20+0x48>
	{
		UDR0 = usart_tx_buffer[tx_tailbuffer];
    1d80:	e0 91 e8 02 	lds	r30, 0x02E8	; 0x8002e8 <tx_tailbuffer>
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	e7 51       	subi	r30, 0x17	; 23
    1d88:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		tx_countbuffer--;
    1d90:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <tx_countbuffer>
    1d94:	81 50       	subi	r24, 0x01	; 1
    1d96:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <tx_countbuffer>
		tx_tailbuffer++;
    1d9a:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <tx_tailbuffer>
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <tx_tailbuffer>
		if(tx_tailbuffer == USART_TX_BUFFER_SIZE)
    1da4:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <tx_tailbuffer>
    1da8:	84 31       	cpi	r24, 0x14	; 20
    1daa:	11 f4       	brne	.+4      	; 0x1db0 <__vector_20+0x48>
			tx_tailbuffer = 0;
    1dac:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <tx_tailbuffer>
	}
}
    1db0:	ff 91       	pop	r31
    1db2:	ef 91       	pop	r30
    1db4:	8f 91       	pop	r24
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <__vector_1>:

extern void radio_irq_handler(u1_t dio);

ISR(INT0_vect)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
	/* usart_putstr("Int0\r\n"); */
	radio_irq_handler(0);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <radio_irq_handler>
}
    1de8:	ff 91       	pop	r31
    1dea:	ef 91       	pop	r30
    1dec:	bf 91       	pop	r27
    1dee:	af 91       	pop	r26
    1df0:	9f 91       	pop	r25
    1df2:	8f 91       	pop	r24
    1df4:	7f 91       	pop	r23
    1df6:	6f 91       	pop	r22
    1df8:	5f 91       	pop	r21
    1dfa:	4f 91       	pop	r20
    1dfc:	3f 91       	pop	r19
    1dfe:	2f 91       	pop	r18
    1e00:	0f 90       	pop	r0
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	0f 90       	pop	r0
    1e06:	1f 90       	pop	r1
    1e08:	18 95       	reti

00001e0a <__vector_5>:

ISR(PCINT2_vect)
{
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	11 24       	eor	r1, r1
    1e14:	2f 93       	push	r18
    1e16:	3f 93       	push	r19
    1e18:	4f 93       	push	r20
    1e1a:	5f 93       	push	r21
    1e1c:	6f 93       	push	r22
    1e1e:	7f 93       	push	r23
    1e20:	8f 93       	push	r24
    1e22:	9f 93       	push	r25
    1e24:	af 93       	push	r26
    1e26:	bf 93       	push	r27
    1e28:	ef 93       	push	r30
    1e2a:	ff 93       	push	r31
	usart_putstr("Int1\r\n");
    1e2c:	84 e3       	ldi	r24, 0x34	; 52
    1e2e:	92 e0       	ldi	r25, 0x02	; 2
    1e30:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart_putstr>
	if(PIND & (1 << PORTD5))
    1e34:	4d 9b       	sbis	0x09, 5	; 9
    1e36:	03 c0       	rjmp	.+6      	; 0x1e3e <__vector_5+0x34>
		radio_irq_handler(1);
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <radio_irq_handler>
}
    1e3e:	ff 91       	pop	r31
    1e40:	ef 91       	pop	r30
    1e42:	bf 91       	pop	r27
    1e44:	af 91       	pop	r26
    1e46:	9f 91       	pop	r25
    1e48:	8f 91       	pop	r24
    1e4a:	7f 91       	pop	r23
    1e4c:	6f 91       	pop	r22
    1e4e:	5f 91       	pop	r21
    1e50:	4f 91       	pop	r20
    1e52:	3f 91       	pop	r19
    1e54:	2f 91       	pop	r18
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0f 90       	pop	r0
    1e5c:	1f 90       	pop	r1
    1e5e:	18 95       	reti

00001e60 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	d8 2f       	mov	r29, r24
    1e66:	c6 2f       	mov	r28, r22
    hal_pin_nss(0);
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
    hal_spi(addr | 0x80);
    1e6e:	8d 2f       	mov	r24, r29
    1e70:	80 68       	ori	r24, 0x80	; 128
    1e72:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    hal_spi(data);
    1e76:	8c 2f       	mov	r24, r28
    1e78:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    hal_pin_nss(1);
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
}
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28

static void writeReg (u1_t addr, u1_t data ) {
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    hal_spi(data);
    hal_pin_nss(1);
    1e82:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <hal_pin_nss>

00001e86 <configLoraModem>:
#endif
    writeReg(RegOpMode, u);
}

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    sf_t sf = getSf(LMIC.rps);
    1e8a:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    1e8e:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <LMIC+0xf>
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    1e92:	d8 2f       	mov	r29, r24
    1e94:	d7 70       	andi	r29, 0x07	; 7

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;

        switch (getBw(LMIC.rps)) {
    1e96:	53 e0       	ldi	r21, 0x03	; 3
    1e98:	96 95       	lsr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	5a 95       	dec	r21
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <configLoraModem+0x12>
    1ea0:	83 70       	andi	r24, 0x03	; 3
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	29 f0       	breq	.+10     	; 0x1eb0 <configLoraModem+0x2a>
    1ea6:	50 f0       	brcs	.+20     	; 0x1ebc <configLoraModem+0x36>
    1ea8:	82 30       	cpi	r24, 0x02	; 2
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <configLoraModem+0x2e>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
    1eac:	80 e9       	ldi	r24, 0x90	; 144
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <configLoraModem+0x38>
#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;

        switch (getBw(LMIC.rps)) {
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
    1eb0:	80 e8       	ldi	r24, 0x80	; 128
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <configLoraModem+0x38>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
    1eb4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
    sf_t sf = getSf(LMIC.rps);

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <configLoraModem+0x38>

        switch (getBw(LMIC.rps)) {
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
    1ebc:	80 e7       	ldi	r24, 0x70	; 112
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
        }
        switch( getCr(LMIC.rps) ) {
    1ebe:	60 91 27 03 	lds	r22, 0x0327	; 0x800327 <LMIC+0xe>
    1ec2:	70 91 28 03 	lds	r23, 0x0328	; 0x800328 <LMIC+0xf>
    1ec6:	9b 01       	movw	r18, r22
    1ec8:	45 e0       	ldi	r20, 0x05	; 5
    1eca:	36 95       	lsr	r19
    1ecc:	27 95       	ror	r18
    1ece:	4a 95       	dec	r20
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <configLoraModem+0x44>
    1ed2:	23 70       	andi	r18, 0x03	; 3
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
    1ed4:	c8 2f       	mov	r28, r24
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
        }
        switch( getCr(LMIC.rps) ) {
    1ed6:	22 30       	cpi	r18, 0x02	; 2
    1ed8:	41 f0       	breq	.+16     	; 0x1eea <configLoraModem+0x64>
    1eda:	23 30       	cpi	r18, 0x03	; 3
    1edc:	41 f0       	breq	.+16     	; 0x1eee <configLoraModem+0x68>
    1ede:	21 30       	cpi	r18, 0x01	; 1
    1ee0:	11 f0       	breq	.+4      	; 0x1ee6 <configLoraModem+0x60>
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
    1ee2:	c2 60       	ori	r28, 0x02	; 2
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <configLoraModem+0x6a>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
    1ee6:	c4 60       	ori	r28, 0x04	; 4
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <configLoraModem+0x6a>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
    1eea:	c6 60       	ori	r28, 0x06	; 6
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <configLoraModem+0x6a>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
    1eee:	c8 60       	ori	r28, 0x08	; 8
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
    1ef0:	67 2f       	mov	r22, r23
    1ef2:	77 27       	eor	r23, r23
        default:
            ASSERT(0);
        }

        if (getIh(LMIC.rps)) {
    1ef4:	61 15       	cp	r22, r1
    1ef6:	71 05       	cpc	r23, r1
    1ef8:	21 f0       	breq	.+8      	; 0x1f02 <configLoraModem+0x7c>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
    1efa:	c1 60       	ori	r28, 0x01	; 1
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
    1efc:	82 e2       	ldi	r24, 0x22	; 34
    1efe:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
    1f02:	6c 2f       	mov	r22, r28
    1f04:	8d e1       	ldi	r24, 0x1D	; 29
    1f06:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
    1f0a:	6d 2f       	mov	r22, r29
    1f0c:	62 95       	swap	r22
    1f0e:	60 7f       	andi	r22, 0xF0	; 240
    1f10:	60 5a       	subi	r22, 0xA0	; 160
        if (getNocrc(LMIC.rps) == 0) {
    1f12:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    1f16:	87 ff       	sbrs	r24, 7
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
    1f18:	64 60       	ori	r22, 0x04	; 4
        }
        writeReg(LORARegModemConfig2, mc2);
    1f1a:	8e e1       	ldi	r24, 0x1E	; 30
    1f1c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
    1f20:	d5 50       	subi	r29, 0x05	; 5
    1f22:	d2 30       	cpi	r29, 0x02	; 2
    1f24:	68 f4       	brcc	.+26     	; 0x1f40 <configLoraModem+0xba>
    1f26:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    1f2a:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <LMIC+0xf>
    1f2e:	23 e0       	ldi	r18, 0x03	; 3
    1f30:	96 95       	lsr	r25
    1f32:	87 95       	ror	r24
    1f34:	2a 95       	dec	r18
    1f36:	e1 f7       	brne	.-8      	; 0x1f30 <configLoraModem+0xaa>
    1f38:	83 70       	andi	r24, 0x03	; 3
    1f3a:	11 f4       	brne	.+4      	; 0x1f40 <configLoraModem+0xba>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
    1f3c:	6c e0       	ldi	r22, 0x0C	; 12
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <configLoraModem+0xbc>
        if (getNocrc(LMIC.rps) == 0) {
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
        }
        writeReg(LORARegModemConfig2, mc2);
        
        mc3 = SX1276_MC3_AGCAUTO;
    1f40:	64 e0       	ldi	r22, 0x04	; 4
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
        }
        writeReg(LORARegModemConfig3, mc3);
    1f42:	86 e2       	ldi	r24, 0x26	; 38
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
        
        mc3 = SX1276_MC3_AGCAUTO;
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
        }
        writeReg(LORARegModemConfig3, mc3);
    1f48:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <writeReg>

00001f4c <configChannel>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}

static void configChannel () {
    1f4c:	af 92       	push	r10
    1f4e:	bf 92       	push	r11
    1f50:	cf 92       	push	r12
    1f52:	df 92       	push	r13
    1f54:	ef 92       	push	r14
    1f56:	ff 92       	push	r15
    1f58:	0f 93       	push	r16
    1f5a:	1f 93       	push	r17
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
    1f60:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <LMIC+0x8>
    1f64:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <LMIC+0x9>
    1f68:	a0 91 23 03 	lds	r26, 0x0323	; 0x800323 <LMIC+0xa>
    1f6c:	b0 91 24 03 	lds	r27, 0x0324	; 0x800324 <LMIC+0xb>
    1f70:	9c 01       	movw	r18, r24
    1f72:	ad 01       	movw	r20, r26
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	03 e1       	ldi	r16, 0x13	; 19
    1f7e:	0e 94 30 34 	call	0x6860	; 0x6860 <__ashldi3>
    1f82:	a1 2c       	mov	r10, r1
    1f84:	e8 e4       	ldi	r30, 0x48	; 72
    1f86:	be 2e       	mov	r11, r30
    1f88:	f8 ee       	ldi	r31, 0xE8	; 232
    1f8a:	cf 2e       	mov	r12, r31
    1f8c:	dd 24       	eor	r13, r13
    1f8e:	d3 94       	inc	r13
    1f90:	e1 2c       	mov	r14, r1
    1f92:	f1 2c       	mov	r15, r1
    1f94:	00 e0       	ldi	r16, 0x00	; 0
    1f96:	10 e0       	ldi	r17, 0x00	; 0
    1f98:	0e 94 8c 33 	call	0x6718	; 0x6718 <__udivdi3>
    1f9c:	c2 2f       	mov	r28, r18
    1f9e:	b3 2e       	mov	r11, r19
    1fa0:	6a 01       	movw	r12, r20
    1fa2:	7b 01       	movw	r14, r22
    1fa4:	18 2f       	mov	r17, r24
    1fa6:	d9 2f       	mov	r29, r25
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
    1fa8:	00 e1       	ldi	r16, 0x10	; 16
    1faa:	0e 94 4b 34 	call	0x6896	; 0x6896 <__lshrdi3>
    1fae:	62 2f       	mov	r22, r18
    1fb0:	86 e0       	ldi	r24, 0x06	; 6
    1fb2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
    1fb6:	2c 2f       	mov	r18, r28
    1fb8:	3b 2d       	mov	r19, r11
    1fba:	a6 01       	movw	r20, r12
    1fbc:	b7 01       	movw	r22, r14
    1fbe:	81 2f       	mov	r24, r17
    1fc0:	9d 2f       	mov	r25, r29
    1fc2:	08 e0       	ldi	r16, 0x08	; 8
    1fc4:	0e 94 4b 34 	call	0x6896	; 0x6896 <__lshrdi3>
    1fc8:	62 2f       	mov	r22, r18
    1fca:	87 e0       	ldi	r24, 0x07	; 7
    1fcc:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
    1fd0:	6c 2f       	mov	r22, r28
    1fd2:	88 e0       	ldi	r24, 0x08	; 8
}
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	df 90       	pop	r13
    1fe2:	cf 90       	pop	r12
    1fe4:	bf 90       	pop	r11
    1fe6:	af 90       	pop	r10
static void configChannel () {
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
    1fe8:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <writeReg>

00001fec <readReg>:
    hal_spi(addr | 0x80);
    hal_spi(data);
    hal_pin_nss(1);
}

static u1_t readReg (u1_t addr) {
    1fec:	cf 93       	push	r28
    1fee:	c8 2f       	mov	r28, r24
    hal_pin_nss(0);
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
    hal_spi(addr & 0x7F);
    1ff6:	8c 2f       	mov	r24, r28
    1ff8:	8f 77       	andi	r24, 0x7F	; 127
    1ffa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    u1_t val = hal_spi(0x00);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    2004:	c8 2f       	mov	r28, r24
    hal_pin_nss(1);
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
    return val;
}
    200c:	8c 2f       	mov	r24, r28
    200e:	cf 91       	pop	r28
    2010:	08 95       	ret

00002012 <opmode>:
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
}

static void opmode (u1_t mode) {
    2012:	cf 93       	push	r28
    2014:	c8 2f       	mov	r28, r24
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    201c:	88 7f       	andi	r24, 0xF8	; 248
    201e:	68 2f       	mov	r22, r24
    2020:	6c 2b       	or	r22, r28
    2022:	81 e0       	ldi	r24, 0x01	; 1
}
    2024:	cf 91       	pop	r28
    }
    hal_pin_nss(1);
}

static void opmode (u1_t mode) {
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
    2026:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <writeReg>

0000202a <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
    202a:	cf 93       	push	r28
    202c:	c8 2f       	mov	r28, r24
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    202e:	68 e8       	ldi	r22, 0x88	; 136
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
    // select LoRa modem (from sleep mode)
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    203c:	87 ff       	sbrs	r24, 7
    203e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
    2048:	c2 30       	cpi	r28, 0x02	; 2
    204a:	49 f4       	brne	.+18     	; 0x205e <rxlora+0x34>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
    204c:	6a e0       	ldi	r22, 0x0A	; 10
    204e:	8d e1       	ldi	r24, 0x1D	; 29
    2050:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
    2054:	60 e7       	ldi	r22, 0x70	; 112
    2056:	8e e1       	ldi	r24, 0x1E	; 30
    2058:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <rxlora+0x3c>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
    205e:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <configLoraModem>
        // configure frequency
        configChannel();
    2062:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
    2066:	61 e2       	ldi	r22, 0x21	; 33
    2068:	8c e0       	ldi	r24, 0x0C	; 12
    206a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
    206e:	60 e4       	ldi	r22, 0x40	; 64
    2070:	83 e2       	ldi	r24, 0x23	; 35
    2072:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
    2076:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <LMIC+0x19b>
    207a:	88 23       	and	r24, r24
    207c:	31 f0       	breq	.+12     	; 0x208a <rxlora+0x60>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
    207e:	83 e3       	ldi	r24, 0x33	; 51
    2080:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2084:	68 2f       	mov	r22, r24
    2086:	6f 7b       	andi	r22, 0xBF	; 191
    2088:	05 c0       	rjmp	.+10     	; 0x2094 <rxlora+0x6a>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
    208a:	83 e3       	ldi	r24, 0x33	; 51
    208c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2090:	68 2f       	mov	r22, r24
    2092:	60 64       	ori	r22, 0x40	; 64
    2094:	83 e3       	ldi	r24, 0x33	; 51
    2096:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
    209a:	60 91 29 03 	lds	r22, 0x0329	; 0x800329 <LMIC+0x10>
    209e:	8f e1       	ldi	r24, 0x1F	; 31
    20a0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    20a4:	64 e3       	ldi	r22, 0x34	; 52
    20a6:	89 e3       	ldi	r24, 0x39	; 57
    20a8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
    20ac:	60 ec       	ldi	r22, 0xC0	; 192
    20ae:	80 e4       	ldi	r24, 0x40	; 64
    20b0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    20b4:	6f ef       	ldi	r22, 0xFF	; 255
    20b6:	82 e1       	ldi	r24, 0x12	; 18
    20b8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
    20bc:	ec 2f       	mov	r30, r28
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	e7 5b       	subi	r30, 0xB7	; 183
    20c2:	fd 4f       	sbci	r31, 0xFD	; 253
    20c4:	60 81       	ld	r22, Z
    20c6:	60 95       	com	r22
    20c8:	81 e1       	ldi	r24, 0x11	; 17
    20ca:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
    20d4:	c1 11       	cpse	r28, r1
    20d6:	0c c0       	rjmp	.+24     	; 0x20f0 <rxlora+0xc6>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    20d8:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <LMIC+0x4>
    20dc:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <LMIC+0x5>
    20e0:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <LMIC+0x6>
    20e4:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <LMIC+0x7>
    20e8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
    20ec:	86 e0       	ldi	r24, 0x06	; 6
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <rxlora+0xc8>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    20f0:	85 e0       	ldi	r24, 0x05	; 5
    }
}
    20f2:	cf 91       	pop	r28
    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
        opmode(OPMODE_RX_SINGLE);
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    20f4:	0c 94 09 10 	jmp	0x2012	; 0x2012 <opmode>

000020f8 <configPower>:


static void configPower () {
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
    20f8:	60 91 2b 03 	lds	r22, 0x032B	; 0x80032b <LMIC+0x12>
    if(pw >= 17) {
    20fc:	61 31       	cpi	r22, 0x11	; 17
    20fe:	24 f4       	brge	.+8      	; 0x2108 <configPower+0x10>
        pw = 15;
    } else if(pw < 2) {
    2100:	62 30       	cpi	r22, 0x02	; 2
    2102:	1c f4       	brge	.+6      	; 0x210a <configPower+0x12>
        pw = 2;
    2104:	62 e0       	ldi	r22, 0x02	; 2
    2106:	01 c0       	rjmp	.+2      	; 0x210a <configPower+0x12>
static void configPower () {
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
    if(pw >= 17) {
        pw = 15;
    2108:	6f e0       	ldi	r22, 0x0F	; 15
    } else if(pw < 2) {
        pw = 2;
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
    210a:	6f 70       	andi	r22, 0x0F	; 15
    210c:	60 68       	ori	r22, 0x80	; 128
    210e:	89 e0       	ldi	r24, 0x09	; 9
    2110:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
    2114:	8a e5       	ldi	r24, 0x5A	; 90
    2116:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    211a:	68 2f       	mov	r22, r24
    211c:	64 60       	ori	r22, 0x04	; 4
    211e:	8a e5       	ldi	r24, 0x5A	; 90
    2120:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <writeReg>

00002124 <startrx>:
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    opmode(OPMODE_RX); // no single rx mode available in FSK
}

static void startrx (u1_t rxmode) {
    2124:	cf 93       	push	r28
    2126:	c8 2f       	mov	r28, r24
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    212e:	87 70       	andi	r24, 0x07	; 7
    2130:	11 f0       	breq	.+4      	; 0x2136 <startrx+0x12>
    2132:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    2136:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    213a:	87 70       	andi	r24, 0x07	; 7
    213c:	09 f0       	breq	.+2      	; 0x2140 <startrx+0x1c>
    213e:	67 c0       	rjmp	.+206    	; 0x220e <startrx+0xea>
    }
}

static void rxfsk (u1_t rxmode) {
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
    2140:	c1 11       	cpse	r28, r1
    2142:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
static void opmodeFSK() {
    u1_t u = 0;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    2146:	68 e0       	ldi	r22, 0x08	; 8
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2154:	87 fd       	sbrc	r24, 7
    2156:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    // configure frequency
    configChannel();
    2160:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
    2164:	61 e2       	ldi	r22, 0x21	; 33
    2166:	8c e0       	ldi	r24, 0x0C	; 12
    2168:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
    216c:	6e e1       	ldi	r22, 0x1E	; 30
    216e:	8d e0       	ldi	r24, 0x0D	; 13
    2170:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
    2174:	6b e0       	ldi	r22, 0x0B	; 11
    2176:	82 e1       	ldi	r24, 0x12	; 18
    2178:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
    217c:	62 e1       	ldi	r22, 0x12	; 18
    217e:	83 e1       	ldi	r24, 0x13	; 19
    2180:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
    2184:	6a ea       	ldi	r22, 0xAA	; 170
    2186:	8f e1       	ldi	r24, 0x1F	; 31
    2188:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
    218c:	62 e1       	ldi	r22, 0x12	; 18
    218e:	87 e2       	ldi	r24, 0x27	; 39
    2190:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
    2194:	68 ed       	ldi	r22, 0xD8	; 216
    2196:	80 e3       	ldi	r24, 0x30	; 48
    2198:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
    219c:	60 e4       	ldi	r22, 0x40	; 64
    219e:	81 e3       	ldi	r24, 0x31	; 49
    21a0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
    21a4:	61 ec       	ldi	r22, 0xC1	; 193
    21a6:	88 e2       	ldi	r24, 0x28	; 40
    21a8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    21ac:	64 e9       	ldi	r22, 0x94	; 148
    21ae:	89 e2       	ldi	r24, 0x29	; 41
    21b0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    21b4:	61 ec       	ldi	r22, 0xC1	; 193
    21b6:	8a e2       	ldi	r24, 0x2A	; 42
    21b8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
    21bc:	6f ef       	ldi	r22, 0xFF	; 255
    21be:	81 e2       	ldi	r24, 0x21	; 33
    21c0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    21cc:	60 e8       	ldi	r22, 0x80	; 128
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    21d4:	61 e0       	ldi	r22, 0x01	; 1
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    21dc:	69 e9       	ldi	r22, 0x99	; 153
    21de:	85 e0       	ldi	r24, 0x05	; 5
    21e0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
    21e4:	68 e3       	ldi	r22, 0x38	; 56
    21e6:	80 e4       	ldi	r24, 0x40	; 64
    21e8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    21f2:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <LMIC+0x4>
    21f6:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <LMIC+0x5>
    21fa:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <LMIC+0x6>
    21fe:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <LMIC+0x7>
    2202:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
    2206:	85 e0       	ldi	r24, 0x05	; 5
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
    2208:	cf 91       	pop	r28
    // enable antenna switch for RX
    hal_pin_rxtx(0);
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    opmode(OPMODE_RX); // no single rx mode available in FSK
    220a:	0c 94 09 10 	jmp	0x2012	; 0x2012 <opmode>
static void startrx (u1_t rxmode) {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    if(getSf(LMIC.rps) == FSK) { // FSK modem
        rxfsk(rxmode);
    } else { // LoRa modem
        rxlora(rxmode);
    220e:	8c 2f       	mov	r24, r28
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
    2210:	cf 91       	pop	r28
static void startrx (u1_t rxmode) {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    if(getSf(LMIC.rps) == FSK) { // FSK modem
        rxfsk(rxmode);
    } else { // LoRa modem
        rxlora(rxmode);
    2212:	0c 94 15 10 	jmp	0x202a	; 0x202a <rxlora>

00002216 <readBuf.constprop.0>:
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
}

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    2216:	0f 93       	push	r16
    2218:	1f 93       	push	r17
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	d8 2f       	mov	r29, r24
    hal_pin_nss(0);
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
    hal_spi(addr & 0x7F);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    222c:	0a e5       	ldi	r16, 0x5A	; 90
    222e:	14 e0       	ldi	r17, 0x04	; 4
    for (u1_t i=0; i<len; i++) {
    2230:	c0 e0       	ldi	r28, 0x00	; 0
    2232:	cd 17       	cp	r28, r29
    2234:	41 f0       	breq	.+16     	; 0x2246 <readBuf.constprop.0+0x30>
        buf[i] = hal_spi(0x00);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    223c:	f8 01       	movw	r30, r16
    223e:	81 93       	st	Z+, r24
    2240:	8f 01       	movw	r16, r30
}

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    hal_pin_nss(0);
    hal_spi(addr & 0x7F);
    for (u1_t i=0; i<len; i++) {
    2242:	cf 5f       	subi	r28, 0xFF	; 255
    2244:	f6 cf       	rjmp	.-20     	; 0x2232 <readBuf.constprop.0+0x1c>
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
    2246:	81 e0       	ldi	r24, 0x01	; 1
}
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    hal_pin_nss(0);
    hal_spi(addr & 0x7F);
    for (u1_t i=0; i<len; i++) {
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
    2250:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <hal_pin_nss>

00002254 <writeBuf.constprop.1>:
    u1_t val = hal_spi(0x00);
    hal_pin_nss(1);
    return val;
}

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
    225c:	d8 2f       	mov	r29, r24
    hal_pin_nss(0);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <hal_pin_nss>
    hal_spi(addr | 0x80);
    2264:	80 e8       	ldi	r24, 0x80	; 128
    2266:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
    226a:	0a e5       	ldi	r16, 0x5A	; 90
    226c:	14 e0       	ldi	r17, 0x04	; 4
    for (u1_t i=0; i<len; i++) {
    226e:	c0 e0       	ldi	r28, 0x00	; 0
    2270:	cd 17       	cp	r28, r29
    2272:	39 f0       	breq	.+14     	; 0x2282 <writeBuf.constprop.1+0x2e>
        hal_spi(buf[i]);
    2274:	f8 01       	movw	r30, r16
    2276:	81 91       	ld	r24, Z+
    2278:	8f 01       	movw	r16, r30
    227a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <hal_spi>
}

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    for (u1_t i=0; i<len; i++) {
    227e:	cf 5f       	subi	r28, 0xFF	; 255
    2280:	f7 cf       	rjmp	.-18     	; 0x2270 <writeBuf.constprop.1+0x1c>
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
    2282:	81 e0       	ldi	r24, 0x01	; 1
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    for (u1_t i=0; i<len; i++) {
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
    228c:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <hal_pin_nss>

00002290 <radio_init>:
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}

// get random seed from wideband noise rssi
void radio_init () {
    2290:	af 92       	push	r10
    2292:	bf 92       	push	r11
    2294:	cf 92       	push	r12
    2296:	df 92       	push	r13
    2298:	ef 92       	push	r14
    229a:	ff 92       	push	r15
    229c:	1f 93       	push	r17
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
    hal_disableIRQs();
    22a2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
    22ac:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    22b0:	61 5e       	subi	r22, 0xE1	; 225
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	8f 4f       	sbci	r24, 0xFF	; 255
    22b6:	9f 4f       	sbci	r25, 0xFF	; 255
    22b8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
    22c2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    22c6:	64 56       	subi	r22, 0x64	; 100
    22c8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ca:	8f 4f       	sbci	r24, 0xFF	; 255
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
    22d8:	82 e4       	ldi	r24, 0x42	; 66
    22da:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
    22de:	82 31       	cpi	r24, 0x12	; 18
    22e0:	11 f0       	breq	.+4      	; 0x22e6 <radio_init+0x56>
    22e2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	0e 94 15 10 	call	0x202a	; 0x202a <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    22f2:	87 70       	andi	r24, 0x07	; 7
    22f4:	85 30       	cpi	r24, 0x05	; 5
    22f6:	d1 f7       	brne	.-12     	; 0x22ec <radio_init+0x5c>
    22f8:	cd ef       	ldi	r28, 0xFD	; 253
    22fa:	d2 e0       	ldi	r29, 0x02	; 2
    22fc:	9c e0       	ldi	r25, 0x0C	; 12
    22fe:	a9 2e       	mov	r10, r25
    2300:	93 e0       	ldi	r25, 0x03	; 3
    2302:	b9 2e       	mov	r11, r25
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}

// get random seed from wideband noise rssi
void radio_init () {
    2304:	88 e0       	ldi	r24, 0x08	; 8
    2306:	e8 2e       	mov	r14, r24
    2308:	f1 2c       	mov	r15, r1
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
        for(int j=0; j<8; j++) {
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
    230a:	8c e2       	ldi	r24, 0x2C	; 44
    230c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2310:	18 2f       	mov	r17, r24
    2312:	11 70       	andi	r17, 0x01	; 1
    2314:	8c e2       	ldi	r24, 0x2C	; 44
    2316:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    231a:	21 2f       	mov	r18, r17
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	80 fb       	bst	r24, 0
    2320:	cc 24       	eor	r12, r12
    2322:	c0 f8       	bld	r12, 0
    2324:	d1 2c       	mov	r13, r1
    2326:	2c 15       	cp	r18, r12
    2328:	3d 05       	cpc	r19, r13
    232a:	79 f3       	breq	.-34     	; 0x230a <radio_init+0x7a>
            randbuf[i] = (randbuf[i] << 1) | b;
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 0f       	add	r24, r24
    2330:	18 2b       	or	r17, r24
    2332:	19 83       	std	Y+1, r17	; 0x01
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	e8 1a       	sub	r14, r24
    2338:	f1 08       	sbc	r15, r1
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
        for(int j=0; j<8; j++) {
    233a:	39 f7       	brne	.-50     	; 0x230a <radio_init+0x7a>
    233c:	21 96       	adiw	r28, 0x01	; 1
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
    233e:	ac 16       	cp	r10, r28
    2340:	bd 06       	cpc	r11, r29
    2342:	01 f7       	brne	.-64     	; 0x2304 <radio_init+0x74>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
            randbuf[i] = (randbuf[i] << 1) | b;
        }
    }
    randbuf[0] = 16; // set initial index
    2344:	80 e1       	ldi	r24, 0x10	; 16
    2346:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <randbuf>
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>

    hal_enableIRQs();
}
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	1f 91       	pop	r17
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);

    hal_enableIRQs();
    2362:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <hal_enableIRQs>

00002366 <radio_rand1>:
}

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
    2366:	cf 93       	push	r28
    u1_t i = randbuf[0];
    2368:	c0 91 fd 02 	lds	r28, 0x02FD	; 0x8002fd <randbuf>
    ASSERT( i != 0 );
    236c:	c1 11       	cpse	r28, r1
    236e:	03 c0       	rjmp	.+6      	; 0x2376 <radio_rand1+0x10>
    2370:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    2374:	0a c0       	rjmp	.+20     	; 0x238a <radio_rand1+0x24>
    if( i==16 ) {
    2376:	c0 31       	cpi	r28, 0x10	; 16
    2378:	41 f4       	brne	.+16     	; 0x238a <radio_rand1+0x24>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
    237a:	40 e1       	ldi	r20, 0x10	; 16
    237c:	50 e0       	ldi	r21, 0x00	; 0
    237e:	6d ef       	ldi	r22, 0xFD	; 253
    2380:	72 e0       	ldi	r23, 0x02	; 2
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
        i = 0;
    2388:	c0 e0       	ldi	r28, 0x00	; 0
    }
    u1_t v = randbuf[i++];
    238a:	ec 2f       	mov	r30, r28
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	e3 50       	subi	r30, 0x03	; 3
    2390:	fd 4f       	sbci	r31, 0xFD	; 253
    2392:	80 81       	ld	r24, Z
    randbuf[0] = i;
    2394:	cf 5f       	subi	r28, 0xFF	; 255
    2396:	c0 93 fd 02 	sts	0x02FD, r28	; 0x8002fd <randbuf>
    return v;
}
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret

0000239e <radio_rssi>:

u1_t radio_rssi () {
    239e:	cf 93       	push	r28
    hal_disableIRQs();
    23a0:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
    u1_t r = readReg(LORARegRssiValue);
    23a4:	8b e1       	ldi	r24, 0x1B	; 27
    23a6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    23aa:	c8 2f       	mov	r28, r24
    hal_enableIRQs();
    23ac:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <hal_enableIRQs>
    return r;
}
    23b0:	8c 2f       	mov	r24, r28
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	cf 93       	push	r28
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
    23c0:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    23c4:	6b 01       	movw	r12, r22
    23c6:	7c 01       	movw	r14, r24
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    23ce:	87 ff       	sbrs	r24, 7
    23d0:	65 c0       	rjmp	.+202    	; 0x249c <radio_irq_handler+0xe6>
        u1_t flags = readReg(LORARegIrqFlags);
    23d2:	82 e1       	ldi	r24, 0x12	; 18
    23d4:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
        if( flags & IRQ_LORA_TXDONE_MASK ) {
    23d8:	83 ff       	sbrs	r24, 3
    23da:	0e c0       	rjmp	.+28     	; 0x23f8 <radio_irq_handler+0x42>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	c8 1a       	sub	r12, r24
    23e0:	d1 08       	sbc	r13, r1
    23e2:	e1 08       	sbc	r14, r1
    23e4:	f1 08       	sbc	r15, r1
    23e6:	c0 92 19 03 	sts	0x0319, r12	; 0x800319 <LMIC>
    23ea:	d0 92 1a 03 	sts	0x031A, r13	; 0x80031a <LMIC+0x1>
    23ee:	e0 92 1b 03 	sts	0x031B, r14	; 0x80031b <LMIC+0x2>
    23f2:	f0 92 1c 03 	sts	0x031C, r15	; 0x80031c <LMIC+0x3>
    23f6:	49 c0       	rjmp	.+146    	; 0x248a <radio_irq_handler+0xd4>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
    23f8:	86 ff       	sbrs	r24, 6
    23fa:	44 c0       	rjmp	.+136    	; 0x2484 <radio_irq_handler+0xce>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
    23fc:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    2400:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <LMIC+0xf>
    2404:	9c 01       	movw	r18, r24
    2406:	93 e0       	ldi	r25, 0x03	; 3
    2408:	36 95       	lsr	r19
    240a:	27 95       	ror	r18
    240c:	9a 95       	dec	r25
    240e:	e1 f7       	brne	.-8      	; 0x2408 <radio_irq_handler+0x52>
    2410:	23 70       	andi	r18, 0x03	; 3
    2412:	69 f4       	brne	.+26     	; 0x242e <radio_irq_handler+0x78>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
    2414:	87 70       	andi	r24, 0x07	; 7
    2416:	e8 2f       	mov	r30, r24
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	ee 0f       	add	r30, r30
    241c:	ff 1f       	adc	r31, r31
    241e:	e5 5c       	subi	r30, 0xC5	; 197
    2420:	fd 4f       	sbci	r31, 0xFD	; 253
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	c8 1a       	sub	r12, r24
    2428:	d9 0a       	sbc	r13, r25
    242a:	e1 08       	sbc	r14, r1
    242c:	f1 08       	sbc	r15, r1
            }
            LMIC.rxtime = now;
    242e:	c0 92 1d 03 	sts	0x031D, r12	; 0x80031d <LMIC+0x4>
    2432:	d0 92 1e 03 	sts	0x031E, r13	; 0x80031e <LMIC+0x5>
    2436:	e0 92 1f 03 	sts	0x031F, r14	; 0x80031f <LMIC+0x6>
    243a:	f0 92 20 03 	sts	0x0320, r15	; 0x800320 <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
    243e:	8d e1       	ldi	r24, 0x1D	; 29
    2440:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2444:	82 ff       	sbrs	r24, 2
    2446:	02 c0       	rjmp	.+4      	; 0x244c <radio_irq_handler+0x96>
    2448:	82 e2       	ldi	r24, 0x22	; 34
    244a:	01 c0       	rjmp	.+2      	; 0x244e <radio_irq_handler+0x98>
    244c:	83 e1       	ldi	r24, 0x13	; 19
    244e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2452:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <LMIC+0x140>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
    2456:	80 e1       	ldi	r24, 0x10	; 16
    2458:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    245c:	68 2f       	mov	r22, r24
    245e:	8d e0       	ldi	r24, 0x0D	; 13
    2460:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    2464:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    2468:	0e 94 0b 11 	call	0x2216	; 0x2216 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
    246c:	89 e1       	ldi	r24, 0x19	; 25
    246e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2472:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <LMIC+0xd>
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
    2476:	8a e1       	ldi	r24, 0x1A	; 26
    2478:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    247c:	8d 53       	subi	r24, 0x3D	; 61
    247e:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <LMIC+0xc>
    2482:	03 c0       	rjmp	.+6      	; 0x248a <radio_irq_handler+0xd4>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
    2484:	87 fd       	sbrc	r24, 7
            // indicate timeout
            LMIC.dataLen = 0;
    2486:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
    248a:	6f ef       	ldi	r22, 0xFF	; 255
    248c:	81 e1       	ldi	r24, 0x11	; 17
    248e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
    2492:	6f ef       	ldi	r22, 0xFF	; 255
    2494:	82 e1       	ldi	r24, 0x12	; 18
    2496:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    249a:	2e c0       	rjmp	.+92     	; 0x24f8 <radio_irq_handler+0x142>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
    249c:	8e e3       	ldi	r24, 0x3E	; 62
    249e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    24a2:	c8 2f       	mov	r28, r24
        u1_t flags2 = readReg(FSKRegIrqFlags2);
    24a4:	8f e3       	ldi	r24, 0x3F	; 63
    24a6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
    24aa:	83 ff       	sbrs	r24, 3
    24ac:	09 c0       	rjmp	.+18     	; 0x24c0 <radio_irq_handler+0x10a>
            // save exact tx time
            LMIC.txend = now;
    24ae:	c0 92 19 03 	sts	0x0319, r12	; 0x800319 <LMIC>
    24b2:	d0 92 1a 03 	sts	0x031A, r13	; 0x80031a <LMIC+0x1>
    24b6:	e0 92 1b 03 	sts	0x031B, r14	; 0x80031b <LMIC+0x2>
    24ba:	f0 92 1c 03 	sts	0x031C, r15	; 0x80031c <LMIC+0x3>
    24be:	1c c0       	rjmp	.+56     	; 0x24f8 <radio_irq_handler+0x142>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
    24c0:	82 ff       	sbrs	r24, 2
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <radio_irq_handler+0x136>
            // save exact rx time
            LMIC.rxtime = now;
    24c4:	c0 92 1d 03 	sts	0x031D, r12	; 0x80031d <LMIC+0x4>
    24c8:	d0 92 1e 03 	sts	0x031E, r13	; 0x80031e <LMIC+0x5>
    24cc:	e0 92 1f 03 	sts	0x031F, r14	; 0x80031f <LMIC+0x6>
    24d0:	f0 92 20 03 	sts	0x0320, r15	; 0x800320 <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
    24d4:	82 e3       	ldi	r24, 0x32	; 50
    24d6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    24da:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <LMIC+0x140>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    24de:	0e 94 0b 11 	call	0x2216	; 0x2216 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
    24e2:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <LMIC+0xd>
            LMIC.rssi = 0; // determine rssi
    24e6:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <LMIC+0xc>
    24ea:	06 c0       	rjmp	.+12     	; 0x24f8 <radio_irq_handler+0x142>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
    24ec:	c2 ff       	sbrs	r28, 2
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <radio_irq_handler+0x140>
            // indicate timeout
            LMIC.dataLen = 0;
    24f0:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <radio_irq_handler+0x142>
    24f6:	ff cf       	rjmp	.-2      	; 0x24f6 <radio_irq_handler+0x140>
        } else {
            while(1);
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    24fe:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <LMIC+0x19>
    2502:	70 91 33 03 	lds	r23, 0x0333	; 0x800333 <LMIC+0x1a>
    2506:	8c e2       	ldi	r24, 0x2C	; 44
    2508:	93 e0       	ldi	r25, 0x03	; 3
#endif /* ! CFG_TxContinuousMode */
}
    250a:	cf 91       	pop	r28
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    2514:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <os_setCallback>

00002518 <os_radio>:
#endif /* ! CFG_TxContinuousMode */
}

void os_radio (u1_t mode) {
    2518:	cf 93       	push	r28
    251a:	c8 2f       	mov	r28, r24
    hal_disableIRQs();
    251c:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <hal_disableIRQs>
    switch (mode) {
    2520:	c1 30       	cpi	r28, 0x01	; 1
    2522:	59 f0       	breq	.+22     	; 0x253a <os_radio+0x22>
    2524:	40 f0       	brcs	.+16     	; 0x2536 <os_radio+0x1e>
    2526:	c2 30       	cpi	r28, 0x02	; 2
    2528:	09 f4       	brne	.+2      	; 0x252c <os_radio+0x14>
    252a:	a7 c0       	rjmp	.+334    	; 0x267a <os_radio+0x162>
    252c:	c3 30       	cpi	r28, 0x03	; 3
    252e:	09 f0       	breq	.+2      	; 0x2532 <os_radio+0x1a>
    2530:	a7 c0       	rjmp	.+334    	; 0x2680 <os_radio+0x168>
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	a3 c0       	rjmp	.+326    	; 0x267c <os_radio+0x164>
void os_radio (u1_t mode) {
    hal_disableIRQs();
    switch (mode) {
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	65 c0       	rjmp	.+202    	; 0x2604 <os_radio+0xec>
    opmode(OPMODE_TX);
}

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2540:	87 70       	andi	r24, 0x07	; 7
    2542:	11 f0       	breq	.+4      	; 0x2548 <os_radio+0x30>
    2544:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    2548:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    254c:	87 70       	andi	r24, 0x07	; 7
    254e:	09 f0       	breq	.+2      	; 0x2552 <os_radio+0x3a>
    2550:	5c c0       	rjmp	.+184    	; 0x260a <os_radio+0xf2>
#endif /* CFG_sx1272_radio */
}

static void txfsk () {
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
    2552:	60 e1       	ldi	r22, 0x10	; 16
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2560:	80 31       	cpi	r24, 0x10	; 16
    2562:	11 f0       	breq	.+4      	; 0x2568 <os_radio+0x50>
    2564:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    256e:	62 e0       	ldi	r22, 0x02	; 2
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    2576:	60 e8       	ldi	r22, 0x80	; 128
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	84 e0       	ldi	r24, 0x04	; 4
    2582:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    2586:	69 e9       	ldi	r22, 0x99	; 153
    2588:	85 e0       	ldi	r24, 0x05	; 5
    258a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	85 e2       	ldi	r24, 0x25	; 37
    2592:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
    2596:	65 e0       	ldi	r22, 0x05	; 5
    2598:	86 e2       	ldi	r24, 0x26	; 38
    259a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
    259e:	62 e1       	ldi	r22, 0x12	; 18
    25a0:	87 e2       	ldi	r24, 0x27	; 39
    25a2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
    25a6:	60 ed       	ldi	r22, 0xD0	; 208
    25a8:	80 e3       	ldi	r24, 0x30	; 48
    25aa:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
    25ae:	60 e4       	ldi	r22, 0x40	; 64
    25b0:	81 e3       	ldi	r24, 0x31	; 49
    25b2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
    25b6:	61 ec       	ldi	r22, 0xC1	; 193
    25b8:	88 e2       	ldi	r24, 0x28	; 40
    25ba:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    25be:	64 e9       	ldi	r22, 0x94	; 148
    25c0:	89 e2       	ldi	r24, 0x29	; 41
    25c2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    25c6:	61 ec       	ldi	r22, 0xC1	; 193
    25c8:	8a e2       	ldi	r24, 0x2A	; 42
    25ca:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // configure frequency
    configChannel();
    25ce:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <configChannel>
    // configure output power
    configPower();
    25d2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
    25d6:	64 e3       	ldi	r22, 0x34	; 52
    25d8:	80 e4       	ldi	r24, 0x40	; 64
    25da:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
    25de:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <LMIC+0x140>
    25e2:	6f 5f       	subi	r22, 0xFF	; 255
    25e4:	82 e3       	ldi	r24, 0x32	; 50
    25e6:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
    25ea:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <LMIC+0x140>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    25f4:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    25f8:	0e 94 2a 11 	call	0x2254	; 0x2254 <writeBuf.constprop.1>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    2608:	3b c0       	rjmp	.+118    	; 0x2680 <os_radio+0x168>
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    260a:	68 e8       	ldi	r22, 0x88	; 136
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

static void txlora () {
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2618:	87 ff       	sbrs	r24, 7
    261a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 09 10 	call	0x2012	; 0x2012 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
    2624:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <configLoraModem>
    // configure frequency
    configChannel();
    2628:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
    262c:	8a e0       	ldi	r24, 0x0A	; 10
    262e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <readReg>
    2632:	80 7f       	andi	r24, 0xF0	; 240
    2634:	68 2f       	mov	r22, r24
    2636:	68 60       	ori	r22, 0x08	; 8
    2638:	8a e0       	ldi	r24, 0x0A	; 10
    263a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    configPower();
    263e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    2642:	64 e3       	ldi	r22, 0x34	; 52
    2644:	89 e3       	ldi	r24, 0x39	; 57
    2646:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
    264a:	60 ef       	ldi	r22, 0xF0	; 240
    264c:	80 e4       	ldi	r24, 0x40	; 64
    264e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    2652:	6f ef       	ldi	r22, 0xFF	; 255
    2654:	82 e1       	ldi	r24, 0x12	; 18
    2656:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
    265a:	67 ef       	ldi	r22, 0xF7	; 247
    265c:	81 e1       	ldi	r24, 0x11	; 17
    265e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	8e e0       	ldi	r24, 0x0E	; 14
    2666:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	8d e0       	ldi	r24, 0x0D	; 13
    266e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
    2672:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <LMIC+0x140>
    2676:	82 e2       	ldi	r24, 0x22	; 34
    2678:	bb cf       	rjmp	.-138    	; 0x25f0 <os_radio+0xd8>
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
        break;
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
    267a:	80 e0       	ldi	r24, 0x00	; 0
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    267c:	0e 94 92 10 	call	0x2124	; 0x2124 <startrx>
        break;
    }
    hal_enableIRQs();
}
    2680:	cf 91       	pop	r28
      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
        break;
    }
    hal_enableIRQs();
    2682:	0c 94 20 0e 	jmp	0x1c40	; 0x1c40 <hal_enableIRQs>

00002686 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
    2686:	4f 92       	push	r4
    2688:	5f 92       	push	r5
    268a:	6f 92       	push	r6
    268c:	7f 92       	push	r7
    268e:	8f 92       	push	r8
    2690:	9f 92       	push	r9
    2692:	af 92       	push	r10
    2694:	bf 92       	push	r11
    2696:	cf 92       	push	r12
    2698:	df 92       	push	r13
    269a:	ef 92       	push	r14
    269c:	ff 92       	push	r15
    269e:	e6 2f       	mov	r30, r22
    26a0:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <LMIC+0xae>
    26a4:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <LMIC+0xaf>
    26a8:	80 90 c9 03 	lds	r8, 0x03C9	; 0x8003c9 <LMIC+0xb0>
    26ac:	90 90 ca 03 	lds	r9, 0x03CA	; 0x8003ca <LMIC+0xb1>
    ostime_t rxoff, err;
    if( secs==0 ) {
    26b0:	81 11       	cpse	r24, r1
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <calcRxWindow+0x40>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
    26b4:	6d 01       	movw	r12, r26
    26b6:	bb 0f       	add	r27, r27
    26b8:	ee 08       	sbc	r14, r14
    26ba:	ff 08       	sbc	r15, r15
        err = LMIC.lastDriftDiff;
    26bc:	09 2c       	mov	r0, r9
    26be:	00 0c       	add	r0, r0
    26c0:	aa 08       	sbc	r10, r10
    26c2:	bb 08       	sbc	r11, r11
    26c4:	1a c0       	rjmp	.+52     	; 0x26fa <calcRxWindow+0x74>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
    26c6:	48 2f       	mov	r20, r24
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	9a 01       	movw	r18, r20
    26cc:	0e 94 bb 32 	call	0x6576	; 0x6576 <__usmulhisi3>
    26d0:	6b 01       	movw	r12, r22
    26d2:	7c 01       	movw	r14, r24
    26d4:	87 e0       	ldi	r24, 0x07	; 7
    26d6:	f5 94       	asr	r15
    26d8:	e7 94       	ror	r14
    26da:	d7 94       	ror	r13
    26dc:	c7 94       	ror	r12
    26de:	8a 95       	dec	r24
    26e0:	d1 f7       	brne	.-12     	; 0x26d6 <calcRxWindow+0x50>
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
    26e2:	d4 01       	movw	r26, r8
    26e4:	0e 94 bb 32 	call	0x6576	; 0x6576 <__usmulhisi3>
    26e8:	4b 01       	movw	r8, r22
    26ea:	5c 01       	movw	r10, r24
    26ec:	97 e0       	ldi	r25, 0x07	; 7
    26ee:	b5 94       	asr	r11
    26f0:	a7 94       	ror	r10
    26f2:	97 94       	ror	r9
    26f4:	87 94       	ror	r8
    26f6:	9a 95       	dec	r25
    26f8:	d1 f7       	brne	.-12     	; 0x26ee <calcRxWindow+0x68>
    }
    u1_t rxsyms = MINRX_SYMS;
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
    26fa:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <LMIC+0xb2>
    26fe:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <LMIC+0xb3>
    2702:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <LMIC+0x12a>
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
    2706:	84 e0       	ldi	r24, 0x04	; 4
    2708:	e8 9f       	mul	r30, r24
    270a:	f0 01       	movw	r30, r0
    270c:	11 24       	eor	r1, r1
    270e:	e4 58       	subi	r30, 0x84	; 132
    2710:	fd 4f       	sbci	r31, 0xFD	; 253
    2712:	40 80       	ld	r4, Z
    2714:	51 80       	ldd	r5, Z+1	; 0x01
    2716:	62 80       	ldd	r6, Z+2	; 0x02
    2718:	73 80       	ldd	r7, Z+3	; 0x03
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	0e 94 bb 32 	call	0x6576	; 0x6576 <__usmulhisi3>
    2720:	68 0d       	add	r22, r8
    2722:	79 1d       	adc	r23, r9
    2724:	8a 1d       	adc	r24, r10
    2726:	9b 1d       	adc	r25, r11
    2728:	a3 01       	movw	r20, r6
    272a:	92 01       	movw	r18, r4
    272c:	0e 94 80 32 	call	0x6500	; 0x6500 <__divmodsi4>
    2730:	2b 5f       	subi	r18, 0xFB	; 251
    2732:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <LMIC+0x10>

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
    2736:	ad ef       	ldi	r26, 0xFD	; 253
    2738:	bf ef       	ldi	r27, 0xFF	; 255
    273a:	a3 01       	movw	r20, r6
    273c:	92 01       	movw	r18, r4
    273e:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <__mulohisi3>
    2742:	6c 0d       	add	r22, r12
    2744:	7d 1d       	adc	r23, r13
    2746:	8e 1d       	adc	r24, r14
    2748:	9f 1d       	adc	r25, r15
}
    274a:	ff 90       	pop	r15
    274c:	ef 90       	pop	r14
    274e:	df 90       	pop	r13
    2750:	cf 90       	pop	r12
    2752:	bf 90       	pop	r11
    2754:	af 90       	pop	r10
    2756:	9f 90       	pop	r9
    2758:	8f 90       	pop	r8
    275a:	7f 90       	pop	r7
    275c:	6f 90       	pop	r6
    275e:	5f 90       	pop	r5
    2760:	4f 90       	pop	r4
    2762:	08 95       	ret

00002764 <setBcnRxParams>:
        }
    } while(1);
}


static void setBcnRxParams (void) {
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    LMIC.dataLen = 0;
    2768:	c9 e1       	ldi	r28, 0x19	; 25
    276a:	d3 e0       	ldi	r29, 0x03	; 3
    276c:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
    2770:	e0 91 9a 04 	lds	r30, 0x049A	; 0x80049a <LMIC+0x181>
    2774:	84 e0       	ldi	r24, 0x04	; 4
    2776:	e8 9f       	mul	r30, r24
    2778:	f0 01       	movw	r30, r0
    277a:	11 24       	eor	r1, r1
    277c:	e7 5e       	subi	r30, 0xE7	; 231
    277e:	fc 4f       	sbci	r31, 0xFC	; 252
    2780:	83 ad       	ldd	r24, Z+59	; 0x3b
    2782:	94 ad       	ldd	r25, Z+60	; 0x3c
    2784:	a5 ad       	ldd	r26, Z+61	; 0x3d
    2786:	b6 ad       	ldd	r27, Z+62	; 0x3e
    2788:	8c 7f       	andi	r24, 0xFC	; 252
    278a:	88 87       	std	Y+8, r24	; 0x08
    278c:	99 87       	std	Y+9, r25	; 0x09
    278e:	aa 87       	std	Y+10, r26	; 0x0a
    2790:	bb 87       	std	Y+11, r27	; 0x0b
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
    2792:	83 e8       	ldi	r24, 0x83	; 131
    2794:	91 e1       	ldi	r25, 0x11	; 17
    2796:	9f 87       	std	Y+15, r25	; 0x0f
    2798:	8e 87       	std	Y+14, r24	; 0x0e
}
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	08 95       	ret

000027a0 <stateJustJoined>:
    LMIC_startJoining();
    reportEvent(EV_RESET);
}

static void stateJustJoined (void) {
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
    27a0:	10 92 2e 04 	sts	0x042E, r1	; 0x80042e <LMIC+0x115>
    27a4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <LMIC+0x116>
    27a8:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <LMIC+0x117>
    27ac:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <LMIC+0x118>
    27b0:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <LMIC+0x111>
    27b4:	10 92 2b 04 	sts	0x042B, r1	; 0x80042b <LMIC+0x112>
    27b8:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <LMIC+0x113>
    27bc:	10 92 2d 04 	sts	0x042D, r1	; 0x80042d <LMIC+0x114>
    LMIC.rejoinCnt   = 0;
    27c0:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <LMIC+0xad>
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
    27c4:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <LMIC+0x11f>
    27c8:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <LMIC+0x11e>
    27cc:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <LMIC+0x11b>
    27d0:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <LMIC+0x119>
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
    27d4:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <LMIC+0x122>
    27d8:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <LMIC+0x123>
    27dc:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <LMIC+0x129>
    27e0:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <LMIC+0x121>
    LMIC.pingSetAns  = 0;
    27e4:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <LMIC+0x12c>
    LMIC.upRepeat    = 0;
    27e8:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <LMIC+0xa9>
    LMIC.adrAckReq   = LINK_CHECK_INIT;
    27ec:	84 ef       	ldi	r24, 0xF4	; 244
    27ee:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <LMIC+0x11a>
    LMIC.dn2Dr       = DR_DNW2;
    27f2:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <LMIC+0x124>
    LMIC.dn2Freq     = FREQ_DNW2;
    27f6:	88 e0       	ldi	r24, 0x08	; 8
    27f8:	96 ee       	ldi	r25, 0xE6	; 230
    27fa:	a3 ed       	ldi	r26, 0xD3	; 211
    27fc:	b3 e3       	ldi	r27, 0x33	; 51
    27fe:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <LMIC+0x125>
    2802:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <LMIC+0x126>
    2806:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <LMIC+0x127>
    280a:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <LMIC+0x128>
    LMIC.bcnChnl     = CHNL_BCN;
    280e:	25 e0       	ldi	r18, 0x05	; 5
    2810:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <LMIC+0x181>
    LMIC.ping.freq   = FREQ_PING;
    2814:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <LMIC+0x139>
    2818:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <LMIC+0x13a>
    281c:	a0 93 54 04 	sts	0x0454, r26	; 0x800454 <LMIC+0x13b>
    2820:	b0 93 55 04 	sts	0x0455, r27	; 0x800455 <LMIC+0x13c>
    LMIC.ping.dr     = DR_PING;
    2824:	83 e0       	ldi	r24, 0x03	; 3
    2826:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <LMIC+0x12d>
    282a:	08 95       	ret

0000282c <rndDelay>:
    rxsched->rxsyms = LMIC.rxsyms;
    goto again;
}


static ostime_t rndDelay (u1_t secSpan) {
    282c:	cf 92       	push	r12
    282e:	df 92       	push	r13
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	d8 2f       	mov	r29, r24
    u2_t r = os_getRndU2();
    283a:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    283e:	c8 2f       	mov	r28, r24
    2840:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    2844:	2c 2f       	mov	r18, r28
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	32 2f       	mov	r19, r18
    284a:	22 27       	eor	r18, r18
    284c:	28 2b       	or	r18, r24
    ostime_t delay = r;
    if( delay > OSTICKS_PER_SEC )
    284e:	23 31       	cpi	r18, 0x13	; 19
    2850:	8a e7       	ldi	r24, 0x7A	; 122
    2852:	38 07       	cpc	r19, r24
    2854:	10 f4       	brcc	.+4      	; 0x285a <rndDelay+0x2e>
}


static ostime_t rndDelay (u1_t secSpan) {
    u2_t r = os_getRndU2();
    ostime_t delay = r;
    2856:	69 01       	movw	r12, r18
    2858:	06 c0       	rjmp	.+12     	; 0x2866 <rndDelay+0x3a>
    if( delay > OSTICKS_PER_SEC )
        delay = r % (u2_t)OSTICKS_PER_SEC;
    285a:	c9 01       	movw	r24, r18
    285c:	62 e1       	ldi	r22, 0x12	; 18
    285e:	7a e7       	ldi	r23, 0x7A	; 122
    2860:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodhi4>
    2864:	6c 01       	movw	r12, r24
    2866:	e1 2c       	mov	r14, r1
    2868:	f1 2c       	mov	r15, r1
    if( secSpan > 0 )
    286a:	dd 23       	and	r29, r29
    286c:	c1 f0       	breq	.+48     	; 0x289e <rndDelay+0x72>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
    286e:	c9 01       	movw	r24, r18
    2870:	99 27       	eor	r25, r25
    2872:	6d 2f       	mov	r22, r29
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <__divmodhi4>
    287a:	ac 01       	movw	r20, r24
    287c:	22 e1       	ldi	r18, 0x12	; 18
    287e:	3a e7       	ldi	r19, 0x7A	; 122
    2880:	42 9f       	mul	r20, r18
    2882:	c0 01       	movw	r24, r0
    2884:	43 9f       	mul	r20, r19
    2886:	90 0d       	add	r25, r0
    2888:	52 9f       	mul	r21, r18
    288a:	90 0d       	add	r25, r0
    288c:	11 24       	eor	r1, r1
    288e:	09 2e       	mov	r0, r25
    2890:	00 0c       	add	r0, r0
    2892:	aa 0b       	sbc	r26, r26
    2894:	bb 0b       	sbc	r27, r27
    2896:	c8 0e       	add	r12, r24
    2898:	d9 1e       	adc	r13, r25
    289a:	ea 1e       	adc	r14, r26
    289c:	fb 1e       	adc	r15, r27
    return delay;
}
    289e:	c7 01       	movw	r24, r14
    28a0:	b6 01       	movw	r22, r12
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	ff 90       	pop	r15
    28a8:	ef 90       	pop	r14
    28aa:	df 90       	pop	r13
    28ac:	cf 90       	pop	r12
    28ae:	08 95       	ret

000028b0 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
    28b0:	cf 92       	push	r12
    28b2:	df 92       	push	r13
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	6b 01       	movw	r12, r22
    28ba:	7c 01       	movw	r14, r24
    28bc:	84 2f       	mov	r24, r20
    reftime += rndDelay(secSpan);
    28be:	0e 94 16 14 	call	0x282c	; 0x282c <rndDelay>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8c 0d       	add	r24, r12
    28c8:	9d 1d       	adc	r25, r13
    28ca:	ae 1d       	adc	r26, r14
    28cc:	bf 1d       	adc	r27, r15
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
    28ce:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <LMIC+0x9e>
    28d2:	22 23       	and	r18, r18
    28d4:	99 f0       	breq	.+38     	; 0x28fc <txDelay+0x4c>
    28d6:	c0 90 b8 03 	lds	r12, 0x03B8	; 0x8003b8 <LMIC+0x9f>
    28da:	d0 90 b9 03 	lds	r13, 0x03B9	; 0x8003b9 <LMIC+0xa0>
    28de:	e0 90 ba 03 	lds	r14, 0x03BA	; 0x8003ba <LMIC+0xa1>
    28e2:	f0 90 bb 03 	lds	r15, 0x03BB	; 0x8003bb <LMIC+0xa2>
    28e6:	9c 01       	movw	r18, r24
    28e8:	ad 01       	movw	r20, r26
    28ea:	2c 19       	sub	r18, r12
    28ec:	3d 09       	sbc	r19, r13
    28ee:	4e 09       	sbc	r20, r14
    28f0:	5f 09       	sbc	r21, r15
    28f2:	12 16       	cp	r1, r18
    28f4:	13 06       	cpc	r1, r19
    28f6:	14 06       	cpc	r1, r20
    28f8:	15 06       	cpc	r1, r21
    28fa:	8c f4       	brge	.+34     	; 0x291e <txDelay+0x6e>
        LMIC.globalDutyAvail = reftime;
    28fc:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <LMIC+0x9f>
    2900:	90 93 b9 03 	sts	0x03B9, r25	; 0x8003b9 <LMIC+0xa0>
    2904:	a0 93 ba 03 	sts	0x03BA, r26	; 0x8003ba <LMIC+0xa1>
    2908:	b0 93 bb 03 	sts	0x03BB, r27	; 0x8003bb <LMIC+0xa2>
        LMIC.opmode |= OP_RNDTX;
    290c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    2910:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    2914:	91 60       	ori	r25, 0x01	; 1
    2916:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    291a:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    }
}
    291e:	ff 90       	pop	r15
    2920:	ef 90       	pop	r14
    2922:	df 90       	pop	r13
    2924:	cf 90       	pop	r12
    2926:	08 95       	ret

00002928 <schedRx2>:
    LMIC.dataLen = 0;
    os_radio(RADIO_RX);
}


static void schedRx2 (ostime_t delay, osjobcb_t func) {
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	6b 01       	movw	r12, r22
    293a:	7c 01       	movw	r14, r24
    293c:	fa 01       	movw	r30, r20
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    293e:	c9 e1       	ldi	r28, 0x19	; 25
    2940:	d3 e0       	ldi	r29, 0x03	; 3
    2942:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <LMIC+0x124>
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	a8 9f       	mul	r26, r24
    294a:	d0 01       	movw	r26, r0
    294c:	11 24       	eor	r1, r1
    294e:	a4 58       	subi	r26, 0x84	; 132
    2950:	bd 4f       	sbci	r27, 0xFD	; 253
    2952:	2d 91       	ld	r18, X+
    2954:	3d 91       	ld	r19, X+
    2956:	4d 91       	ld	r20, X+
    2958:	5c 91       	ld	r21, X
    295a:	a3 e0       	ldi	r26, 0x03	; 3
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    2962:	08 81       	ld	r16, Y
    2964:	19 81       	ldd	r17, Y+1	; 0x01
    2966:	2a 81       	ldd	r18, Y+2	; 0x02
    2968:	3b 81       	ldd	r19, Y+3	; 0x03
    296a:	c0 0e       	add	r12, r16
    296c:	d1 1e       	adc	r13, r17
    296e:	e2 1e       	adc	r14, r18
    2970:	f3 1e       	adc	r15, r19
    2972:	ab 01       	movw	r20, r22
    2974:	bc 01       	movw	r22, r24
    2976:	4c 0d       	add	r20, r12
    2978:	5d 1d       	adc	r21, r13
    297a:	6e 1d       	adc	r22, r14
    297c:	7f 1d       	adc	r23, r15
    297e:	4c 83       	std	Y+4, r20	; 0x04
    2980:	5d 83       	std	Y+5, r21	; 0x05
    2982:	6e 83       	std	Y+6, r22	; 0x06
    2984:	7f 83       	std	Y+7, r23	; 0x07
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    2986:	4e 53       	subi	r20, 0x3E	; 62
    2988:	51 09       	sbc	r21, r1
    298a:	61 09       	sbc	r22, r1
    298c:	71 09       	sbc	r23, r1
    298e:	9f 01       	movw	r18, r30
    2990:	8c e2       	ldi	r24, 0x2C	; 44
    2992:	93 e0       	ldi	r25, 0x03	; 3
}
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	ef 90       	pop	r14
    29a0:	df 90       	pop	r13
    29a2:	cf 90       	pop	r12


static void schedRx2 (ostime_t delay, osjobcb_t func) {
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    29a4:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>

000029a8 <startRxBcn>:
    reportEvent(ev);
}


static void startRxBcn (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
    29a8:	8c e2       	ldi	r24, 0x2C	; 44
    29aa:	95 e2       	ldi	r25, 0x25	; 37
    29ac:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    29b0:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
    os_radio(RADIO_RX);
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>

000029ba <startRxPing>:
}


static void startRxPing (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
    29ba:	89 e0       	ldi	r24, 0x09	; 9
    29bc:	98 e2       	ldi	r25, 0x28	; 40
    29be:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    29c2:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
    os_radio(RADIO_RX);
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>

000029cc <setupRx1>:
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
}

static void setupRx1 (osjobcb_t func) {
    LMIC.txrxFlags = TXRX_DNW1;
    29cc:	e9 e1       	ldi	r30, 0x19	; 25
    29ce:	f3 e0       	ldi	r31, 0x03	; 3
    29d0:	21 e0       	ldi	r18, 0x01	; 1
    29d2:	20 93 57 04 	sts	0x0457, r18	; 0x800457 <LMIC+0x13e>
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
    29d6:	26 85       	ldd	r18, Z+14	; 0x0e
    29d8:	37 85       	ldd	r19, Z+15	; 0x0f
    29da:	20 68       	ori	r18, 0x80	; 128
    29dc:	37 87       	std	Z+15, r19	; 0x0f
    29de:	26 87       	std	Z+14, r18	; 0x0e
    LMIC.dataLen = 0;
    29e0:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    LMIC.osjob.func = func;
    29e4:	92 8f       	std	Z+26, r25	; 0x1a
    29e6:	81 8f       	std	Z+25, r24	; 0x19
    os_radio(RADIO_RX);
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>

000029ee <setupRx1DnData>:
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
}


static void setupRx1DnData (xref2osjob_t osjob) {
    setupRx1(FUNC_ADDR(processRx1DnData));
    29ee:	83 ec       	ldi	r24, 0xC3	; 195
    29f0:	98 e2       	ldi	r25, 0x28	; 40
    29f2:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <setupRx1>

000029f6 <setupRx1Jacc>:
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
}


static void setupRx1Jacc (xref2osjob_t osjob) {
    setupRx1(FUNC_ADDR(processRx1Jacc));
    29f6:	88 ee       	ldi	r24, 0xE8	; 232
    29f8:	97 e2       	ldi	r25, 0x27	; 39
    29fa:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <setupRx1>

000029fe <setupRx2>:
// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
    LMIC.txrxFlags = TXRX_DNW2;
    29fe:	a9 e1       	ldi	r26, 0x19	; 25
    2a00:	b3 e0       	ldi	r27, 0x03	; 3
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    2a08:	e0 91 3d 04 	lds	r30, 0x043D	; 0x80043d <LMIC+0x124>
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	e5 53       	subi	r30, 0x35	; 53
    2a10:	fd 4f       	sbci	r31, 0xFD	; 253
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
    2a12:	81 81       	ldd	r24, Z+1	; 0x01
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	8f 77       	andi	r24, 0x7F	; 127
    2a18:	80 68       	ori	r24, 0x80	; 128
    2a1a:	1f 96       	adiw	r26, 0x0f	; 15
    2a1c:	9c 93       	st	X, r25
    2a1e:	8e 93       	st	-X, r24
    2a20:	1e 97       	sbiw	r26, 0x0e	; 14
    LMIC.freq = LMIC.dn2Freq;
    2a22:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <LMIC+0x125>
    2a26:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <LMIC+0x126>
    2a2a:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <LMIC+0x127>
    2a2e:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <LMIC+0x128>
    2a32:	18 96       	adiw	r26, 0x08	; 8
    2a34:	4d 93       	st	X+, r20
    2a36:	5d 93       	st	X+, r21
    2a38:	6d 93       	st	X+, r22
    2a3a:	7c 93       	st	X, r23
    2a3c:	1b 97       	sbiw	r26, 0x0b	; 11
    LMIC.dataLen = 0;
    2a3e:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    os_radio(RADIO_RX);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>

00002a48 <setupRx2DnData>:
    processDnData();
}


static void setupRx2DnData (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
    2a48:	88 ed       	ldi	r24, 0xD8	; 216
    2a4a:	98 e2       	ldi	r25, 0x28	; 40
    2a4c:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    2a50:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
    setupRx2();
    2a54:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <setupRx2>

00002a58 <setupRx2Jacc>:
    processJoinAccept();
}


static void setupRx2Jacc (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
    2a58:	89 ef       	ldi	r24, 0xF9	; 249
    2a5a:	97 e2       	ldi	r25, 0x27	; 39
    2a5c:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    2a60:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
    setupRx2();
    2a64:	0c 94 ff 14 	jmp	0x29fe	; 0x29fe <setupRx2>

00002a68 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
    2a68:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <LMIC+0x10d>
    2a6c:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <LMIC+0x10e>
    2a70:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <LMIC+0x10f>
    2a74:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <LMIC+0x110>
    2a78:	89 2b       	or	r24, r25
    2a7a:	8a 2b       	or	r24, r26
    2a7c:	8b 2b       	or	r24, r27
    2a7e:	19 f0       	breq	.+6      	; 0x2a86 <startScan+0x1e>
    2a80:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    2a84:	82 fd       	sbrc	r24, 2
    2a86:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
    2a8a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    2a8e:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    2a92:	86 fd       	sbrc	r24, 6
    2a94:	2f c0       	rjmp	.+94     	; 0x2af4 <startScan+0x8c>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
    2a96:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <LMIC+0x18d>
    2a9a:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <LMIC+0x119>
    2a9e:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <LMIC+0x13d>
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
    2aa2:	8e 77       	andi	r24, 0x7E	; 126
    2aa4:	81 60       	ori	r24, 0x01	; 1
    2aa6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    2aaa:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    setBcnRxParams();
    2aae:	0e 94 b2 13 	call	0x2764	; 0x2764 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
    2ab2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    2ab6:	ab 01       	movw	r20, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	4e 5e       	subi	r20, 0xEE	; 238
    2abc:	5c 47       	sbci	r21, 0x7C	; 124
    2abe:	62 4c       	sbci	r22, 0xC2	; 194
    2ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac2:	40 93 a0 04 	sts	0x04A0, r20	; 0x8004a0 <LMIC+0x187>
    2ac6:	50 93 a1 04 	sts	0x04A1, r21	; 0x8004a1 <LMIC+0x188>
    2aca:	60 93 a2 04 	sts	0x04A2, r22	; 0x8004a2 <LMIC+0x189>
    2ace:	70 93 a3 04 	sts	0x04A3, r23	; 0x8004a3 <LMIC+0x18a>
    2ad2:	40 93 1d 03 	sts	0x031D, r20	; 0x80031d <LMIC+0x4>
    2ad6:	50 93 1e 03 	sts	0x031E, r21	; 0x80031e <LMIC+0x5>
    2ada:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <LMIC+0x6>
    2ade:	70 93 20 03 	sts	0x0320, r23	; 0x800320 <LMIC+0x7>
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
    2ae2:	2b ec       	ldi	r18, 0xCB	; 203
    2ae4:	34 e2       	ldi	r19, 0x24	; 36
    2ae6:	8c e2       	ldi	r24, 0x2C	; 44
    2ae8:	93 e0       	ldi	r25, 0x03	; 3
    2aea:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <os_setTimedCallback>
    os_radio(RADIO_RXON);
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>
    2af4:	08 95       	ret

00002af6 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
    2afa:	90 e4       	ldi	r25, 0x40	; 64
    2afc:	e4 e5       	ldi	r30, 0x54	; 84
    2afe:	f3 e0       	ldi	r31, 0x03	; 3
    2b00:	df 01       	movw	r26, r30
    2b02:	1d 92       	st	X+, r1
    2b04:	9a 95       	dec	r25
    2b06:	e9 f7       	brne	.-6      	; 0x2b02 <initDefaultChannels+0xc>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
    2b08:	90 e2       	ldi	r25, 0x20	; 32
    2b0a:	e4 e9       	ldi	r30, 0x94	; 148
    2b0c:	f3 e0       	ldi	r31, 0x03	; 3
    2b0e:	df 01       	movw	r26, r30
    2b10:	29 2f       	mov	r18, r25
    2b12:	1d 92       	st	X+, r1
    2b14:	2a 95       	dec	r18
    2b16:	e9 f7       	brne	.-6      	; 0x2b12 <initDefaultChannels+0x1c>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
    2b18:	e4 e3       	ldi	r30, 0x34	; 52
    2b1a:	f3 e0       	ldi	r31, 0x03	; 3
    2b1c:	df 01       	movw	r26, r30
    2b1e:	1d 92       	st	X+, r1
    2b20:	9a 95       	dec	r25
    2b22:	e9 f7       	brne	.-6      	; 0x2b1e <initDefaultChannels+0x28>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    2b24:	2f e3       	ldi	r18, 0x3F	; 63
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <LMIC+0x9c>
    2b2c:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <LMIC+0x9b>
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    2b30:	81 11       	cpse	r24, r1
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <initDefaultChannels+0x42>
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	01 c0       	rjmp	.+2      	; 0x2b3a <initDefaultChannels+0x44>
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	c4 e5       	ldi	r28, 0x54	; 84
    2b3c:	d3 e0       	ldi	r29, 0x03	; 3
    2b3e:	a4 e9       	ldi	r26, 0x94	; 148
    2b40:	b3 e0       	ldi	r27, 0x03	; 3
    2b42:	96 e0       	ldi	r25, 0x06	; 6
    2b44:	98 0f       	add	r25, r24
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
    2b46:	2f e3       	ldi	r18, 0x3F	; 63
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
    2b4a:	44 e0       	ldi	r20, 0x04	; 4
    2b4c:	84 9f       	mul	r24, r20
    2b4e:	f0 01       	movw	r30, r0
    2b50:	11 24       	eor	r1, r1
    2b52:	e4 5b       	subi	r30, 0xB4	; 180
    2b54:	fd 4f       	sbci	r31, 0xFD	; 253
    2b56:	40 81       	ld	r20, Z
    2b58:	51 81       	ldd	r21, Z+1	; 0x01
    2b5a:	62 81       	ldd	r22, Z+2	; 0x02
    2b5c:	73 81       	ldd	r23, Z+3	; 0x03
    2b5e:	49 93       	st	Y+, r20
    2b60:	59 93       	st	Y+, r21
    2b62:	69 93       	st	Y+, r22
    2b64:	79 93       	st	Y+, r23
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
    2b66:	2d 93       	st	X+, r18
    2b68:	3d 93       	st	X+, r19
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
    2b6a:	8f 5f       	subi	r24, 0xFF	; 255
    2b6c:	89 13       	cpse	r24, r25
    2b6e:	ed cf       	rjmp	.-38     	; 0x2b4a <initDefaultChannels+0x54>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
    2b70:	88 ee       	ldi	r24, 0xE8	; 232
    2b72:	93 e0       	ldi	r25, 0x03	; 3
    2b74:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <LMIC+0x1c>
    2b78:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <LMIC+0x1b>
    LMIC.bands[BAND_MILLI].txpow    = 14;
    2b7c:	ce e0       	ldi	r28, 0x0E	; 14
    2b7e:	c0 93 36 03 	sts	0x0336, r28	; 0x800336 <LMIC+0x1d>
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    2b82:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    2b86:	8f 70       	andi	r24, 0x0F	; 15
    2b88:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <LMIC+0x1e>
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
    2b8c:	84 e6       	ldi	r24, 0x64	; 100
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <LMIC+0x24>
    2b94:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <LMIC+0x23>
    LMIC.bands[BAND_CENTI].txpow    = 14;
    2b98:	c0 93 3e 03 	sts	0x033E, r28	; 0x80033e <LMIC+0x25>
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    2b9c:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    2ba0:	8f 70       	andi	r24, 0x0F	; 15
    2ba2:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <LMIC+0x26>
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    2ba6:	8a e0       	ldi	r24, 0x0A	; 10
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <LMIC+0x2c>
    2bae:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <LMIC+0x2b>
    LMIC.bands[BAND_DECI ].txpow    = 27;
    2bb2:	8b e1       	ldi	r24, 0x1B	; 27
    2bb4:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <LMIC+0x2d>
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    2bb8:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    2bbc:	8f 70       	andi	r24, 0x0F	; 15
    2bbe:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <LMIC+0x2e>
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
    2bc2:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    2bc6:	60 93 48 03 	sts	0x0348, r22	; 0x800348 <LMIC+0x2f>
    2bca:	70 93 49 03 	sts	0x0349, r23	; 0x800349 <LMIC+0x30>
    2bce:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <LMIC+0x31>
    2bd2:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <LMIC+0x32>
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    LMIC.bands[BAND_DECI ].txpow    = 27;
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    2bd6:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <LMIC+0x27>
    2bda:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <LMIC+0x28>
    2bde:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <LMIC+0x29>
    2be2:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <LMIC+0x2a>
    LMIC.bands[BAND_CENTI].txpow    = 14;
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    LMIC.bands[BAND_DECI ].txpow    = 27;
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_MILLI].avail = 
    2be6:	60 93 38 03 	sts	0x0338, r22	; 0x800338 <LMIC+0x1f>
    2bea:	70 93 39 03 	sts	0x0339, r23	; 0x800339 <LMIC+0x20>
    2bee:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <LMIC+0x21>
    2bf2:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <LMIC+0x22>
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}
    2bf6:	df 91       	pop	r29
    2bf8:	cf 91       	pop	r28
    2bfa:	08 95       	ret

00002bfc <setDrTxpow.isra.1>:
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
    2bfc:	60 38       	cpi	r22, 0x80	; 128
    2bfe:	11 f0       	breq	.+4      	; 0x2c04 <setDrTxpow.isra.1+0x8>
        LMIC.adrTxPow = pow;
    2c00:	60 93 c3 03 	sts	0x03C3, r22	; 0x8003c3 <LMIC+0xaa>
    if( LMIC.datarate != dr ) {
    2c04:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <LMIC+0xab>
    2c08:	98 17       	cp	r25, r24
    2c0a:	59 f0       	breq	.+22     	; 0x2c22 <setDrTxpow.isra.1+0x26>
        LMIC.datarate = dr;
    2c0c:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <LMIC+0xab>
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
    2c10:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    2c14:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    2c18:	98 60       	ori	r25, 0x08	; 8
    2c1a:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    2c1e:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    2c22:	08 95       	ret

00002c24 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    2c24:	87 70       	andi	r24, 0x07	; 7
    2c26:	08 95       	ret

00002c28 <setSf>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
    2c28:	88 7f       	andi	r24, 0xF8	; 248
    2c2a:	86 2b       	or	r24, r22
    2c2c:	08 95       	ret

00002c2e <getBw>:
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
    2c2e:	23 e0       	ldi	r18, 0x03	; 3
    2c30:	96 95       	lsr	r25
    2c32:	87 95       	ror	r24
    2c34:	2a 95       	dec	r18
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <getBw+0x2>
    2c38:	83 70       	andi	r24, 0x03	; 3
    2c3a:	08 95       	ret

00002c3c <setBw>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
    2c3c:	87 7e       	andi	r24, 0xE7	; 231
    2c3e:	28 e0       	ldi	r18, 0x08	; 8
    2c40:	62 9f       	mul	r22, r18
    2c42:	b0 01       	movw	r22, r0
    2c44:	11 24       	eor	r1, r1
    2c46:	86 2b       	or	r24, r22
    2c48:	97 2b       	or	r25, r23
    2c4a:	08 95       	ret

00002c4c <getCr>:
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
    2c4c:	25 e0       	ldi	r18, 0x05	; 5
    2c4e:	96 95       	lsr	r25
    2c50:	87 95       	ror	r24
    2c52:	2a 95       	dec	r18
    2c54:	e1 f7       	brne	.-8      	; 0x2c4e <getCr+0x2>
    2c56:	83 70       	andi	r24, 0x03	; 3
    2c58:	08 95       	ret

00002c5a <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
    2c5a:	8f 79       	andi	r24, 0x9F	; 159
    2c5c:	20 e2       	ldi	r18, 0x20	; 32
    2c5e:	62 9f       	mul	r22, r18
    2c60:	b0 01       	movw	r22, r0
    2c62:	11 24       	eor	r1, r1
    2c64:	86 2b       	or	r24, r22
    2c66:	97 2b       	or	r25, r23
    2c68:	08 95       	ret

00002c6a <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
    2c6a:	87 fb       	bst	r24, 7
    2c6c:	88 27       	eor	r24, r24
    2c6e:	80 f9       	bld	r24, 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	08 95       	ret

00002c74 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
    2c74:	8f 77       	andi	r24, 0x7F	; 127
    2c76:	76 95       	lsr	r23
    2c78:	76 2f       	mov	r23, r22
    2c7a:	66 27       	eor	r22, r22
    2c7c:	77 95       	ror	r23
    2c7e:	67 95       	ror	r22
    2c80:	86 2b       	or	r24, r22
    2c82:	97 2b       	or	r25, r23
    2c84:	08 95       	ret

00002c86 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
    2c86:	89 2f       	mov	r24, r25
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	08 95       	ret

00002c8c <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	36 2f       	mov	r19, r22
    2c92:	a9 01       	movw	r20, r18
    2c94:	48 2b       	or	r20, r24
    2c96:	ca 01       	movw	r24, r20
    2c98:	08 95       	ret

00002c9a <makeRps>:
inline rps_t makeRps (sf_t sf, bw_t bw, cr_t cr, int ih, int nocrc) {
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    return sf | (bw<<3) | (cr<<5) | (nocrc?(1<<7):0) | ((ih&0xFF)<<8);
    2c9e:	e8 2f       	mov	r30, r24
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	88 e0       	ldi	r24, 0x08	; 8
    2ca4:	68 9f       	mul	r22, r24
    2ca6:	b0 01       	movw	r22, r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	80 e2       	ldi	r24, 0x20	; 32
    2cac:	48 9f       	mul	r20, r24
    2cae:	a0 01       	movw	r20, r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	01 2b       	or	r16, r17
    2cb4:	19 f4       	brne	.+6      	; 0x2cbc <makeRps+0x22>
    2cb6:	a0 e0       	ldi	r26, 0x00	; 0
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	02 c0       	rjmp	.+4      	; 0x2cc0 <makeRps+0x26>
    2cbc:	a0 e8       	ldi	r26, 0x80	; 128
    2cbe:	b0 e0       	ldi	r27, 0x00	; 0
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	92 2f       	mov	r25, r18
    2cc6:	84 2b       	or	r24, r20
    2cc8:	95 2b       	or	r25, r21
    2cca:	8e 2b       	or	r24, r30
    2ccc:	9f 2b       	or	r25, r31
    2cce:	86 2b       	or	r24, r22
    2cd0:	97 2b       	or	r25, r23
}
    2cd2:	8a 2b       	or	r24, r26
    2cd4:	9b 2b       	or	r25, r27
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <sameSfBw>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }
    2cdc:	86 27       	eor	r24, r22
    2cde:	97 27       	eor	r25, r23
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	6f 71       	andi	r22, 0x1F	; 31
    2ce4:	77 27       	eor	r23, r23
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	67 2b       	or	r22, r23
    2cec:	11 f0       	breq	.+4      	; 0x2cf2 <sameSfBw+0x16>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	08 95       	ret

00002cf4 <updr2rps>:

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    2cf4:	e8 2f       	mov	r30, r24
    2cf6:	f0 e0       	ldi	r31, 0x00	; 0
    2cf8:	e5 53       	subi	r30, 0x35	; 53
    2cfa:	fd 4f       	sbci	r31, 0xFD	; 253
    2cfc:	81 81       	ldd	r24, Z+1	; 0x01
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	08 95       	ret

00002d02 <dndr2rps>:
    2d02:	e8 2f       	mov	r30, r24
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	e5 53       	subi	r30, 0x35	; 53
    2d08:	fd 4f       	sbci	r31, 0xFD	; 253
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
    2d0a:	81 81       	ldd	r24, Z+1	; 0x01
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	8f 77       	andi	r24, 0x7F	; 127
    2d10:	80 68       	ori	r24, 0x80	; 128
    2d12:	08 95       	ret

00002d14 <isFasterDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
    2d14:	21 e0       	ldi	r18, 0x01	; 1
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	68 17       	cp	r22, r24
    2d1a:	10 f0       	brcs	.+4      	; 0x2d20 <isFasterDR+0xc>
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	c9 01       	movw	r24, r18
    2d22:	08 95       	ret

00002d24 <isSlowerDR>:
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
    2d24:	21 e0       	ldi	r18, 0x01	; 1
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	86 17       	cp	r24, r22
    2d2a:	10 f0       	brcs	.+4      	; 0x2d30 <isSlowerDR+0xc>
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	c9 01       	movw	r24, r18
    2d32:	08 95       	ret

00002d34 <incDR>:
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
    2d34:	e8 2f       	mov	r30, r24
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	e5 53       	subi	r30, 0x35	; 53
    2d3a:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3c:	92 81       	ldd	r25, Z+2	; 0x02
    2d3e:	9f 3f       	cpi	r25, 0xFF	; 255
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <incDR+0x10>
    2d42:	8f 5f       	subi	r24, 0xFF	; 255
    2d44:	08 95       	ret

00002d46 <decDR>:
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    2d46:	e8 2f       	mov	r30, r24
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	e5 53       	subi	r30, 0x35	; 53
    2d4c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d4e:	90 81       	ld	r25, Z
    2d50:	9f 3f       	cpi	r25, 0xFF	; 255
    2d52:	09 f0       	breq	.+2      	; 0x2d56 <decDR+0x10>
    2d54:	81 50       	subi	r24, 0x01	; 1
    2d56:	08 95       	ret

00002d58 <assertDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
    2d58:	e8 2f       	mov	r30, r24
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	e5 53       	subi	r30, 0x35	; 53
    2d5e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	9f 3f       	cpi	r25, 0xFF	; 255
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <assertDR+0x10>
    2d66:	85 e0       	ldi	r24, 0x05	; 5
    2d68:	08 95       	ret

00002d6a <validDR>:
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
    2d6a:	e8 2f       	mov	r30, r24
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	e5 53       	subi	r30, 0x35	; 53
    2d70:	fd 4f       	sbci	r31, 0xFD	; 253
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	9f 3f       	cpi	r25, 0xFF	; 255
    2d78:	09 f4       	brne	.+2      	; 0x2d7c <validDR+0x12>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	08 95       	ret

00002d7e <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    2d7e:	61 50       	subi	r22, 0x01	; 1
    2d80:	48 f0       	brcs	.+18     	; 0x2d94 <lowerDR+0x16>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    2d82:	e8 2f       	mov	r30, r24
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	e5 53       	subi	r30, 0x35	; 53
    2d88:	fd 4f       	sbci	r31, 0xFD	; 253
    2d8a:	90 81       	ld	r25, Z
    2d8c:	9f 3f       	cpi	r25, 0xFF	; 255
    2d8e:	b9 f3       	breq	.-18     	; 0x2d7e <lowerDR>
    2d90:	81 50       	subi	r24, 0x01	; 1
    2d92:	f5 cf       	rjmp	.-22     	; 0x2d7e <lowerDR>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    2d94:	08 95       	ret

00002d96 <os_rlsbf2>:
#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
    return (u2_t)(buf[0] | (buf[1]<<8));
}
    2d96:	fc 01       	movw	r30, r24
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	08 95       	ret

00002d9e <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
    2d9e:	fc 01       	movw	r30, r24
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
    2da0:	22 81       	ldd	r18, Z+2	; 0x02
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	cb 01       	movw	r24, r22
    2da8:	77 0f       	add	r23, r23
    2daa:	aa 0b       	sbc	r26, r26
    2dac:	bb 0b       	sbc	r27, r27
    2dae:	a2 2b       	or	r26, r18
    2db0:	23 81       	ldd	r18, Z+3	; 0x03
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	92 2b       	or	r25, r18
}
    2db8:	08 95       	ret

00002dba <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
    2dba:	0f 93       	push	r16
    2dbc:	1f 93       	push	r17
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    2dc4:	27 2f       	mov	r18, r23
    2dc6:	38 2f       	mov	r19, r24
    2dc8:	49 2f       	mov	r20, r25
    2dca:	55 27       	eor	r21, r21
    2dcc:	a4 e6       	ldi	r26, 0x64	; 100
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
    2dd4:	8b 01       	movw	r16, r22
    2dd6:	9c 01       	movw	r18, r24
    2dd8:	00 5c       	subi	r16, 0xC0	; 192
    2dda:	15 45       	sbci	r17, 0x55	; 85
    2ddc:	20 47       	sbci	r18, 0x70	; 112
    2dde:	33 43       	sbci	r19, 0x33	; 51
    2de0:	01 3c       	cpi	r16, 0xC1	; 193
    2de2:	1f 4c       	sbci	r17, 0xCF	; 207
    2de4:	2a 46       	sbci	r18, 0x6A	; 106
    2de6:	31 05       	cpc	r19, r1
    2de8:	18 f0       	brcs	.+6      	; 0x2df0 <convFreq+0x36>
        freq = 0;
    2dea:	60 e0       	ldi	r22, 0x00	; 0
    2dec:	70 e0       	ldi	r23, 0x00	; 0
    2dee:	cb 01       	movw	r24, r22
    return freq;
}
    2df0:	1f 91       	pop	r17
    2df2:	0f 91       	pop	r16
    2df4:	08 95       	ret

00002df6 <os_rmsbf4>:
}
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
    2df6:	0f 93       	push	r16
    2df8:	1f 93       	push	r17
    2dfa:	fc 01       	movw	r30, r24
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
    2dfc:	21 81       	ldd	r18, Z+1	; 0x01
    2dfe:	60 81       	ld	r22, Z
    2e00:	86 2f       	mov	r24, r22
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	b8 2f       	mov	r27, r24
    2e0a:	aa 27       	eor	r26, r26
    2e0c:	99 27       	eor	r25, r25
    2e0e:	88 27       	eor	r24, r24
    2e10:	ac 01       	movw	r20, r24
    2e12:	bd 01       	movw	r22, r26
    2e14:	62 2b       	or	r22, r18
    2e16:	82 81       	ldd	r24, Z+2	; 0x02
    2e18:	93 81       	ldd	r25, Z+3	; 0x03
    2e1a:	98 27       	eor	r25, r24
    2e1c:	89 27       	eor	r24, r25
    2e1e:	98 27       	eor	r25, r24
    2e20:	09 2e       	mov	r0, r25
    2e22:	00 0c       	add	r0, r0
    2e24:	aa 0b       	sbc	r26, r26
    2e26:	bb 0b       	sbc	r27, r27
    2e28:	8a 01       	movw	r16, r20
    2e2a:	9b 01       	movw	r18, r22
    2e2c:	08 2b       	or	r16, r24
    2e2e:	19 2b       	or	r17, r25
    2e30:	2a 2b       	or	r18, r26
    2e32:	3b 2b       	or	r19, r27
    2e34:	c9 01       	movw	r24, r18
    2e36:	b8 01       	movw	r22, r16
}
    2e38:	1f 91       	pop	r17
    2e3a:	0f 91       	pop	r16
    2e3c:	08 95       	ret

00002e3e <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    2e3e:	fc 01       	movw	r30, r24
    2e40:	60 83       	st	Z, r22
    buf[1] = v>>8;
    2e42:	71 83       	std	Z+1, r23	; 0x01
    2e44:	08 95       	ret

00002e46 <os_wlsbf4>:
}
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
    2e46:	fc 01       	movw	r30, r24
    buf[0] = v;
    2e48:	40 83       	st	Z, r20
    buf[1] = v>>8;
    2e4a:	51 83       	std	Z+1, r21	; 0x01
    buf[2] = v>>16;
    2e4c:	62 83       	std	Z+2, r22	; 0x02
    buf[3] = v>>24;
    2e4e:	73 83       	std	Z+3, r23	; 0x03
    2e50:	08 95       	ret

00002e52 <aes_cipher.part.2>:
    os_getDevKey(AESkey);
    os_aes(AES_ENC, pdu, len);
}


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
    2e52:	4f 92       	push	r4
    2e54:	5f 92       	push	r5
    2e56:	6f 92       	push	r6
    2e58:	7f 92       	push	r7
    2e5a:	af 92       	push	r10
    2e5c:	bf 92       	push	r11
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
    2e6e:	ec 01       	movw	r28, r24
    2e70:	28 01       	movw	r4, r16
    2e72:	39 01       	movw	r6, r18
    if( len <= 0 )
        return;
    os_clearMem(AESaux, 16);
    2e74:	80 e1       	ldi	r24, 0x10	; 16
    2e76:	e5 e6       	ldi	r30, 0x65	; 101
    2e78:	f5 e0       	ldi	r31, 0x05	; 5
    2e7a:	df 01       	movw	r26, r30
    2e7c:	1d 92       	st	X+, r1
    2e7e:	8a 95       	dec	r24
    2e80:	e9 f7       	brne	.-6      	; 0x2e7c <aes_cipher.part.2+0x2a>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <AESAUX+0xf>
    2e88:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <AESAUX>
    AESaux[5] = dndir?1:0;
    2e8c:	ef 28       	or	r14, r15
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <aes_cipher.part.2+0x40>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <AESAUX+0x5>
    os_wlsbf4(AESaux+ 6,devaddr);
    2e96:	8b e6       	ldi	r24, 0x6B	; 107
    2e98:	95 e0       	ldi	r25, 0x05	; 5
    2e9a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    2e9e:	b3 01       	movw	r22, r6
    2ea0:	a2 01       	movw	r20, r4
    2ea2:	8f e6       	ldi	r24, 0x6F	; 111
    2ea4:	95 e0       	ldi	r25, 0x05	; 5
    2ea6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
    2eaa:	80 e1       	ldi	r24, 0x10	; 16
    2eac:	fe 01       	movw	r30, r28
    2eae:	a5 eb       	ldi	r26, 0xB5	; 181
    2eb0:	b4 e0       	ldi	r27, 0x04	; 4
    2eb2:	01 90       	ld	r0, Z+
    2eb4:	0d 92       	st	X+, r0
    2eb6:	8a 95       	dec	r24
    2eb8:	e1 f7       	brne	.-8      	; 0x2eb2 <aes_cipher.part.2+0x60>
    os_aes(AES_CTR, payload, len);
    2eba:	a5 01       	movw	r20, r10
    2ebc:	b6 01       	movw	r22, r12
    2ebe:	84 e0       	ldi	r24, 0x04	; 4
}
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	7f 90       	pop	r7
    2ed6:	6f 90       	pop	r6
    2ed8:	5f 90       	pop	r5
    2eda:	4f 90       	pop	r4
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
    AESaux[5] = dndir?1:0;
    os_wlsbf4(AESaux+ 6,devaddr);
    os_wlsbf4(AESaux+10,seqno);
    os_copyMem(AESkey,key,16);
    os_aes(AES_CTR, payload, len);
    2edc:	0c 94 31 2a 	jmp	0x5462	; 0x5462 <os_aes>

00002ee0 <rxschedInit.constprop.10>:
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
}


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
    2ee0:	8f 92       	push	r8
    2ee2:	9f 92       	push	r9
    2ee4:	af 92       	push	r10
    2ee6:	bf 92       	push	r11
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	0f 93       	push	r16
    2ef2:	1f 93       	push	r17
    2ef4:	cf 93       	push	r28
    os_clearMem(AESkey,16);
    2ef6:	80 e1       	ldi	r24, 0x10	; 16
    2ef8:	e5 eb       	ldi	r30, 0xB5	; 181
    2efa:	f4 e0       	ldi	r31, 0x04	; 4
    2efc:	df 01       	movw	r26, r30
    2efe:	1d 92       	st	X+, r1
    2f00:	8a 95       	dec	r24
    2f02:	e9 f7       	brne	.-6      	; 0x2efe <rxschedInit.constprop.10+0x1e>
    os_clearMem(LMIC.frame+8,8);
    2f04:	88 e0       	ldi	r24, 0x08	; 8
    2f06:	e2 e6       	ldi	r30, 0x62	; 98
    2f08:	f4 e0       	ldi	r31, 0x04	; 4
    2f0a:	df 01       	movw	r26, r30
    2f0c:	1d 92       	st	X+, r1
    2f0e:	8a 95       	dec	r24
    2f10:	e9 f7       	brne	.-6      	; 0x2f0c <rxschedInit.constprop.10+0x2c>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
    2f12:	40 91 a7 04 	lds	r20, 0x04A7	; 0x8004a7 <LMIC+0x18e>
    2f16:	50 91 a8 04 	lds	r21, 0x04A8	; 0x8004a8 <LMIC+0x18f>
    2f1a:	60 91 a9 04 	lds	r22, 0x04A9	; 0x8004a9 <LMIC+0x190>
    2f1e:	70 91 aa 04 	lds	r23, 0x04AA	; 0x8004aa <LMIC+0x191>
    2f22:	8a e5       	ldi	r24, 0x5A	; 90
    2f24:	94 e0       	ldi	r25, 0x04	; 4
    2f26:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
    2f2a:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    2f2e:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    2f32:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    2f36:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>
    2f3a:	8e e5       	ldi	r24, 0x5E	; 94
    2f3c:	94 e0       	ldi	r25, 0x04	; 4
    2f3e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
    2f42:	40 e1       	ldi	r20, 0x10	; 16
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	6a e5       	ldi	r22, 0x5A	; 90
    2f48:	74 e0       	ldi	r23, 0x04	; 4
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    u1_t intvExp = rxsched->intvExp;
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
    2f50:	c0 91 47 04 	lds	r28, 0x0447	; 0x800447 <LMIC+0x12e>
    rxsched->rxbase = (LMIC.bcninfo.txtime +
                       BCN_RESERVE_osticks +
    2f54:	87 e0       	ldi	r24, 0x07	; 7
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	8c 1b       	sub	r24, r28
    2f5a:	91 09       	sbc	r25, r1
    2f5c:	4f ef       	ldi	r20, 0xFF	; 255
    2f5e:	5f e0       	ldi	r21, 0x0F	; 15
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <rxschedInit.constprop.10+0x86>
    2f62:	55 95       	asr	r21
    2f64:	47 95       	ror	r20
    2f66:	8a 95       	dec	r24
    2f68:	e2 f7       	brpl	.-8      	; 0x2f62 <rxschedInit.constprop.10+0x82>
    2f6a:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <LMIC+0x141>
    2f6e:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <LMIC+0x142>
    2f72:	48 23       	and	r20, r24
    2f74:	59 23       	and	r21, r25
    2f76:	8c e1       	ldi	r24, 0x1C	; 28
    2f78:	a8 2e       	mov	r10, r24
    2f7a:	9e e4       	ldi	r25, 0x4E	; 78
    2f7c:	b9 2e       	mov	r11, r25
    2f7e:	2e e0       	ldi	r18, 0x0E	; 14
    2f80:	c2 2e       	mov	r12, r18
    2f82:	d1 2c       	mov	r13, r1
    2f84:	e1 2c       	mov	r14, r1
    2f86:	f1 2c       	mov	r15, r1
    2f88:	00 e0       	ldi	r16, 0x00	; 0
    2f8a:	10 e0       	ldi	r17, 0x00	; 0
    2f8c:	9a 01       	movw	r18, r20
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	60 e0       	ldi	r22, 0x00	; 0
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__muldi3>
    2f9e:	e8 ee       	ldi	r30, 0xE8	; 232
    2fa0:	ae 2e       	mov	r10, r30
    2fa2:	f3 e0       	ldi	r31, 0x03	; 3
    2fa4:	bf 2e       	mov	r11, r31
    2fa6:	c1 2c       	mov	r12, r1
    2fa8:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divdi3>
    2fac:	49 01       	movw	r8, r18
    2fae:	5a 01       	movw	r10, r20
    2fb0:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <LMIC+0x187>
    2fb4:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LMIC+0x188>
    2fb8:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <LMIC+0x189>
    2fbc:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    2fc0:	86 53       	subi	r24, 0x36	; 54
    2fc2:	9d 4f       	sbci	r25, 0xFD	; 253
    2fc4:	ae 4f       	sbci	r26, 0xFE	; 254
    2fc6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fc8:	88 0e       	add	r8, r24
    2fca:	99 1e       	adc	r9, r25
    2fcc:	aa 1e       	adc	r10, r26
    2fce:	bb 1e       	adc	r11, r27
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
    os_aes(AES_ENC,LMIC.frame,16);
    u1_t intvExp = rxsched->intvExp;
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
    rxsched->rxbase = (LMIC.bcninfo.txtime +
    2fd0:	80 92 4a 04 	sts	0x044A, r8	; 0x80044a <LMIC+0x131>
    2fd4:	90 92 4b 04 	sts	0x044B, r9	; 0x80044b <LMIC+0x132>
    2fd8:	a0 92 4c 04 	sts	0x044C, r10	; 0x80044c <LMIC+0x133>
    2fdc:	b0 92 4d 04 	sts	0x044D, r11	; 0x80044d <LMIC+0x134>
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
    rxsched->slot   = 0;
    2fe0:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <LMIC+0x12f>
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	01 c0       	rjmp	.+2      	; 0x2fec <rxschedInit.constprop.10+0x10c>
    2fea:	88 0f       	add	r24, r24
    2fec:	ca 95       	dec	r28
    2fee:	ea f7       	brpl	.-6      	; 0x2fea <rxschedInit.constprop.10+0x10a>
    2ff0:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <LMIC+0x12d>
    2ff4:	8e 5f       	subi	r24, 0xFE	; 254
    2ff6:	0e 94 43 13 	call	0x2686	; 0x2686 <calcRxWindow>
    2ffa:	86 1a       	sub	r8, r22
    2ffc:	97 0a       	sbc	r9, r23
    2ffe:	a8 0a       	sbc	r10, r24
    3000:	b9 0a       	sbc	r11, r25
    3002:	80 92 4e 04 	sts	0x044E, r8	; 0x80044e <LMIC+0x135>
    3006:	90 92 4f 04 	sts	0x044F, r9	; 0x80044f <LMIC+0x136>
    300a:	a0 92 50 04 	sts	0x0450, r10	; 0x800450 <LMIC+0x137>
    300e:	b0 92 51 04 	sts	0x0451, r11	; 0x800451 <LMIC+0x138>
    rxsched->rxsyms = LMIC.rxsyms;
    3012:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <LMIC+0x10>
    3016:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <LMIC+0x130>
}
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	ff 90       	pop	r15
    3022:	ef 90       	pop	r14
    3024:	df 90       	pop	r13
    3026:	cf 90       	pop	r12
    3028:	bf 90       	pop	r11
    302a:	af 90       	pop	r10
    302c:	9f 90       	pop	r9
    302e:	8f 90       	pop	r8
    3030:	08 95       	ret

00003032 <txDone>:
    os_radio(RADIO_RX);
}


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
    3032:	8f 92       	push	r8
    3034:	9f 92       	push	r9
    3036:	af 92       	push	r10
    3038:	bf 92       	push	r11
    303a:	cf 92       	push	r12
    303c:	df 92       	push	r13
    303e:	ef 92       	push	r14
    3040:	ff 92       	push	r15
    3042:	cf 93       	push	r28
    3044:	df 93       	push	r29
    3046:	4b 01       	movw	r8, r22
    3048:	5c 01       	movw	r10, r24
    304a:	ea 01       	movw	r28, r20
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
    304c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3050:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3054:	82 70       	andi	r24, 0x02	; 2
    3056:	96 70       	andi	r25, 0x06	; 6
    3058:	82 30       	cpi	r24, 0x02	; 2
    305a:	94 40       	sbci	r25, 0x04	; 4
    305c:	59 f4       	brne	.+22     	; 0x3074 <txDone+0x42>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
    305e:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <rxschedInit.constprop.10>
        LMIC.opmode |= OP_PINGINI;
    3062:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3066:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    306a:	92 60       	ori	r25, 0x02	; 2
    306c:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    3070:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
    3074:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <LMIC+0x10>
    3078:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <LMIC>
    307c:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <LMIC+0x1>
    3080:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <LMIC+0x2>
    3084:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <LMIC+0x3>
    3088:	87 30       	cpi	r24, 0x07	; 7
    308a:	99 f4       	brne	.+38     	; 0x30b2 <txDone+0x80>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
    308c:	c8 0c       	add	r12, r8
    308e:	d9 1c       	adc	r13, r9
    3090:	ea 1c       	adc	r14, r10
    3092:	fb 1c       	adc	r15, r11
    3094:	85 e0       	ldi	r24, 0x05	; 5
    3096:	c8 1a       	sub	r12, r24
    3098:	d1 08       	sbc	r13, r1
    309a:	e1 08       	sbc	r14, r1
    309c:	f1 08       	sbc	r15, r1
    309e:	c0 92 1d 03 	sts	0x031D, r12	; 0x80031d <LMIC+0x4>
    30a2:	d0 92 1e 03 	sts	0x031E, r13	; 0x80031e <LMIC+0x5>
    30a6:	e0 92 1f 03 	sts	0x031F, r14	; 0x80031f <LMIC+0x6>
    30aa:	f0 92 20 03 	sts	0x0320, r15	; 0x800320 <LMIC+0x7>
        LMIC.rxsyms = RXLEN_FSK;
    30ae:	88 e0       	ldi	r24, 0x08	; 8
    30b0:	23 c0       	rjmp	.+70     	; 0x30f8 <txDone+0xc6>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
    30b2:	e0 91 2a 03 	lds	r30, 0x032A	; 0x80032a <LMIC+0x11>
    30b6:	24 e0       	ldi	r18, 0x04	; 4
    30b8:	e2 9f       	mul	r30, r18
    30ba:	f0 01       	movw	r30, r0
    30bc:	11 24       	eor	r1, r1
    30be:	e4 58       	subi	r30, 0x84	; 132
    30c0:	fd 4f       	sbci	r31, 0xFD	; 253
    30c2:	20 81       	ld	r18, Z
    30c4:	31 81       	ldd	r19, Z+1	; 0x01
    30c6:	42 81       	ldd	r20, Z+2	; 0x02
    30c8:	53 81       	ldd	r21, Z+3	; 0x03
    30ca:	a3 e0       	ldi	r26, 0x03	; 3
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    30d2:	c8 0c       	add	r12, r8
    30d4:	d9 1c       	adc	r13, r9
    30d6:	ea 1c       	adc	r14, r10
    30d8:	fb 1c       	adc	r15, r11
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8c 0d       	add	r24, r12
    30e0:	9d 1d       	adc	r25, r13
    30e2:	ae 1d       	adc	r26, r14
    30e4:	bf 1d       	adc	r27, r15
    30e6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <LMIC+0x4>
    30ea:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <LMIC+0x5>
    30ee:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <LMIC+0x6>
    30f2:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <LMIC+0x7>
        LMIC.rxsyms = MINRX_SYMS;
    30f6:	85 e0       	ldi	r24, 0x05	; 5
    30f8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <LMIC+0x10>
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    30fc:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <LMIC+0x4>
    3100:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <LMIC+0x5>
    3104:	60 91 1f 03 	lds	r22, 0x031F	; 0x80031f <LMIC+0x6>
    3108:	70 91 20 03 	lds	r23, 0x0320	; 0x800320 <LMIC+0x7>
    310c:	4e 53       	subi	r20, 0x3E	; 62
    310e:	51 09       	sbc	r21, r1
    3110:	61 09       	sbc	r22, r1
    3112:	71 09       	sbc	r23, r1
    3114:	9e 01       	movw	r18, r28
    3116:	8c e2       	ldi	r24, 0x2C	; 44
    3118:	93 e0       	ldi	r25, 0x03	; 3
}
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	ff 90       	pop	r15
    3120:	ef 90       	pop	r14
    3122:	df 90       	pop	r13
    3124:	cf 90       	pop	r12
    3126:	bf 90       	pop	r11
    3128:	af 90       	pop	r10
    312a:	9f 90       	pop	r9
    312c:	8f 90       	pop	r8
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
        LMIC.rxsyms = MINRX_SYMS;
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    312e:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>

00003132 <updataDone>:
    setupRx1(FUNC_ADDR(processRx1DnData));
}


static void updataDone (xref2osjob_t osjob) {
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
    3132:	20 91 35 04 	lds	r18, 0x0435	; 0x800435 <LMIC+0x11c>
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	a2 e1       	ldi	r26, 0x12	; 18
    313a:	ba e7       	ldi	r27, 0x7A	; 122
    313c:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    3140:	47 ef       	ldi	r20, 0xF7	; 247
    3142:	54 e1       	ldi	r21, 0x14	; 20
    3144:	0c 94 19 18 	jmp	0x3032	; 0x3032 <txDone>

00003148 <jreqDone>:
    setupRx1(FUNC_ADDR(processRx1Jacc));
}


static void jreqDone (xref2osjob_t osjob) {
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
    3148:	4b ef       	ldi	r20, 0xFB	; 251
    314a:	54 e1       	ldi	r21, 0x14	; 20
    314c:	6a e5       	ldi	r22, 0x5A	; 90
    314e:	72 e6       	ldi	r23, 0x62	; 98
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0c 94 19 18 	jmp	0x3032	; 0x3032 <txDone>

00003158 <os_wmsbf4>:
    buf[3] = v>>24;
}
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
    3158:	fc 01       	movw	r30, r24
    buf[3] = v;
    315a:	43 83       	std	Z+3, r20	; 0x03
    buf[2] = v>>8;
    315c:	52 83       	std	Z+2, r21	; 0x02
    buf[1] = v>>16;
    315e:	61 83       	std	Z+1, r22	; 0x01
    buf[0] = v>>24;
    3160:	70 83       	st	Z, r23
    3162:	08 95       	ret

00003164 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
    return MCMD_DEVS_BATT_NOINFO;
}
    3164:	8f ef       	ldi	r24, 0xFF	; 255
    3166:	08 95       	ret

00003168 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
    3168:	fc 01       	movw	r30, r24
    316a:	68 0f       	add	r22, r24
    316c:	79 1f       	adc	r23, r25
    u2_t remainder = 0;
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    u2_t polynomial = 0x1021;
    for( uint i = 0; i < len; i++ ) {
    3172:	e6 17       	cp	r30, r22
    3174:	f7 07       	cpc	r31, r23
    3176:	91 f0       	breq	.+36     	; 0x319c <os_crc16+0x34>
        remainder ^= data[i] << 8;
    3178:	21 91       	ld	r18, Z+
    317a:	92 27       	eor	r25, r18
    317c:	28 e0       	ldi	r18, 0x08	; 8
    317e:	ac 01       	movw	r20, r24
    3180:	44 0f       	add	r20, r20
    3182:	55 1f       	adc	r21, r21
        for( u1_t bit = 8; bit > 0; bit--) {
            if( (remainder & 0x8000) )
    3184:	97 ff       	sbrs	r25, 7
    3186:	06 c0       	rjmp	.+12     	; 0x3194 <os_crc16+0x2c>
                remainder = (remainder << 1) ^ polynomial;
    3188:	ca 01       	movw	r24, r20
    318a:	31 e2       	ldi	r19, 0x21	; 33
    318c:	83 27       	eor	r24, r19
    318e:	30 e1       	ldi	r19, 0x10	; 16
    3190:	93 27       	eor	r25, r19
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <os_crc16+0x2e>
            else 
                remainder <<= 1;
    3194:	ca 01       	movw	r24, r20
    3196:	21 50       	subi	r18, 0x01	; 1
u2_t os_crc16 (xref2u1_t data, uint len) {
    u2_t remainder = 0;
    u2_t polynomial = 0x1021;
    for( uint i = 0; i < len; i++ ) {
        remainder ^= data[i] << 8;
        for( u1_t bit = 8; bit > 0; bit--) {
    3198:	91 f7       	brne	.-28     	; 0x317e <os_crc16+0x16>
    319a:	eb cf       	rjmp	.-42     	; 0x3172 <os_crc16+0xa>
            else 
                remainder <<= 1;
        }
    }
    return remainder;
}
    319c:	08 95       	ret

0000319e <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	cf 93       	push	r28
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
    31a4:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    31a8:	81 31       	cpi	r24, 0x11	; 17
    31aa:	11 f0       	breq	.+4      	; 0x31b0 <decodeBeacon+0x12>
    31ac:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    xref2u1_t d = LMIC.frame;
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
    31b0:	67 e0       	ldi	r22, 0x07	; 7
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	8a e5       	ldi	r24, 0x5A	; 90
    31b6:	94 e0       	ldi	r25, 0x04	; 4
    31b8:	0e 94 b4 18 	call	0x3168	; 0x3168 <os_crc16>

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
    xref2u1_t d = LMIC.frame;
    if(
    31bc:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <LMIC+0x148>
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	99 27       	eor	r25, r25
    31c4:	28 17       	cp	r18, r24
    31c6:	39 07       	cpc	r19, r25
    31c8:	09 f0       	breq	.+2      	; 0x31cc <decodeBeacon+0x2e>
    31ca:	81 c0       	rjmp	.+258    	; 0x32ce <decodeBeacon+0x130>
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
    31cc:	8a e5       	ldi	r24, 0x5A	; 90
    31ce:	94 e0       	ldi	r25, 0x04	; 4
    31d0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    if( bcnnetid != LMIC.netid )
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	bb 27       	eor	r27, r27
    31da:	00 91 bc 03 	lds	r16, 0x03BC	; 0x8003bc <LMIC+0xa3>
    31de:	10 91 bd 03 	lds	r17, 0x03BD	; 0x8003bd <LMIC+0xa4>
    31e2:	20 91 be 03 	lds	r18, 0x03BE	; 0x8003be <LMIC+0xa5>
    31e6:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <LMIC+0xa6>
    31ea:	80 17       	cp	r24, r16
    31ec:	91 07       	cpc	r25, r17
    31ee:	a2 07       	cpc	r26, r18
    31f0:	b3 07       	cpc	r27, r19
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <decodeBeacon+0x58>
    31f4:	6f c0       	rjmp	.+222    	; 0x32d4 <decodeBeacon+0x136>
        return -1;  // not the beacon we're looking for

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
    31f6:	c0 91 a6 04 	lds	r28, 0x04A6	; 0x8004a6 <LMIC+0x18d>
    31fa:	cc 7f       	andi	r28, 0xFC	; 252
    31fc:	c0 93 a6 04 	sts	0x04A6, r28	; 0x8004a6 <LMIC+0x18d>
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
    3200:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <LMIC+0xd>
    3204:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <LMIC+0x18c>
    LMIC.bcninfo.rssi   = LMIC.rssi;
    3208:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <LMIC+0xc>
    320c:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <LMIC+0x18b>
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
    3210:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <LMIC+0x4>
    3214:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <LMIC+0x5>
    3218:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <LMIC+0x6>
    321c:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <LMIC+0x7>
    3220:	80 5a       	subi	r24, 0xA0	; 160
    3222:	91 41       	sbci	r25, 0x11	; 17
    3224:	a1 09       	sbc	r26, r1
    3226:	b1 09       	sbc	r27, r1
    3228:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <LMIC+0x187>
    322c:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <LMIC+0x188>
    3230:	a0 93 a2 04 	sts	0x04A2, r26	; 0x8004a2 <LMIC+0x189>
    3234:	b0 93 a3 04 	sts	0x04A3, r27	; 0x8004a3 <LMIC+0x18a>
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
    3238:	8d e5       	ldi	r24, 0x5D	; 93
    323a:	94 e0       	ldi	r25, 0x04	; 4
    323c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    3240:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <LMIC+0x18e>
    3244:	70 93 a8 04 	sts	0x04A8, r23	; 0x8004a8 <LMIC+0x18f>
    3248:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <LMIC+0x190>
    324c:	90 93 aa 04 	sts	0x04AA, r25	; 0x8004aa <LMIC+0x191>
    LMIC.bcninfo.flags |= BCN_PARTIAL;
    3250:	8c 2f       	mov	r24, r28
    3252:	81 60       	ori	r24, 0x01	; 1
    3254:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <LMIC+0x18d>
    3258:	00 91 69 04 	lds	r16, 0x0469	; 0x800469 <LMIC+0x150>
    325c:	10 91 6a 04 	lds	r17, 0x046A	; 0x80046a <LMIC+0x151>

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
    3260:	6f e0       	ldi	r22, 0x0F	; 15
    3262:	70 e0       	ldi	r23, 0x00	; 0
    3264:	8a e5       	ldi	r24, 0x5A	; 90
    3266:	94 e0       	ldi	r25, 0x04	; 4
    3268:	0e 94 b4 18 	call	0x3168	; 0x3168 <os_crc16>
    326c:	80 17       	cp	r24, r16
    326e:	91 07       	cpc	r25, r17
    3270:	a1 f5       	brne	.+104    	; 0x32da <decodeBeacon+0x13c>
        return 1;
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
    3272:	82 e6       	ldi	r24, 0x62	; 98
    3274:	94 e0       	ldi	r25, 0x04	; 4
    3276:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    327a:	bb 27       	eor	r27, r27
    327c:	97 fd       	sbrc	r25, 7
    327e:	ba 95       	dec	r27
    3280:	a9 2f       	mov	r26, r25
    3282:	98 2f       	mov	r25, r24
    3284:	87 2f       	mov	r24, r23
    3286:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <LMIC+0x193>
    328a:	90 93 ad 04 	sts	0x04AD, r25	; 0x8004ad <LMIC+0x194>
    328e:	a0 93 ae 04 	sts	0x04AE, r26	; 0x8004ae <LMIC+0x195>
    3292:	b0 93 af 04 	sts	0x04AF, r27	; 0x8004af <LMIC+0x196>
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
    3296:	85 e6       	ldi	r24, 0x65	; 101
    3298:	94 e0       	ldi	r25, 0x04	; 4
    329a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    329e:	bb 27       	eor	r27, r27
    32a0:	97 fd       	sbrc	r25, 7
    32a2:	ba 95       	dec	r27
    32a4:	a9 2f       	mov	r26, r25
    32a6:	98 2f       	mov	r25, r24
    32a8:	87 2f       	mov	r24, r23
    32aa:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <LMIC+0x197>
    32ae:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <LMIC+0x198>
    32b2:	a0 93 b2 04 	sts	0x04B2, r26	; 0x8004b2 <LMIC+0x199>
    32b6:	b0 93 b3 04 	sts	0x04B3, r27	; 0x8004b3 <LMIC+0x19a>
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
    32ba:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <LMIC+0x149>
    32be:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <LMIC+0x192>
    LMIC.bcninfo.flags |= BCN_FULL;
    32c2:	c3 60       	ori	r28, 0x03	; 3
    32c4:	c0 93 a6 04 	sts	0x04A6, r28	; 0x8004a6 <LMIC+0x18d>
    return 2;
    32c8:	82 e0       	ldi	r24, 0x02	; 2
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	08 c0       	rjmp	.+16     	; 0x32de <decodeBeacon+0x140>
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <decodeBeacon+0x140>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
    if( bcnnetid != LMIC.netid )
        return -1;  // not the beacon we're looking for
    32d4:	8f ef       	ldi	r24, 0xFF	; 255
    32d6:	9f ef       	ldi	r25, 0xFF	; 255
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <decodeBeacon+0x140>
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
    LMIC.bcninfo.flags |= BCN_PARTIAL;

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
        return 1;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
    LMIC.bcninfo.flags |= BCN_FULL;
    return 2;
}
    32de:	cf 91       	pop	r28
    32e0:	1f 91       	pop	r17
    32e2:	0f 91       	pop	r16
    32e4:	08 95       	ret

000032e6 <getSensitivity>:
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
    32e6:	28 2f       	mov	r18, r24
    32e8:	27 70       	andi	r18, 0x07	; 7
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	43 e0       	ldi	r20, 0x03	; 3
    32ee:	96 95       	lsr	r25
    32f0:	87 95       	ror	r24
    32f2:	4a 95       	dec	r20
    32f4:	e1 f7       	brne	.-8      	; 0x32ee <getSensitivity+0x8>
    32f6:	83 70       	andi	r24, 0x03	; 3
    32f8:	f9 01       	movw	r30, r18
    32fa:	ee 0f       	add	r30, r30
    32fc:	ff 1f       	adc	r31, r31
    32fe:	e2 0f       	add	r30, r18
    3300:	f3 1f       	adc	r31, r19
    3302:	ea 55       	subi	r30, 0x5A	; 90
    3304:	fd 4f       	sbci	r31, 0xFD	; 253
    3306:	e8 0f       	add	r30, r24
    3308:	f1 1d       	adc	r31, r1
    330a:	80 81       	ld	r24, Z
    330c:	90 e0       	ldi	r25, 0x00	; 0
}
    330e:	8d 58       	subi	r24, 0x8D	; 141
    3310:	91 09       	sbc	r25, r1
    3312:	08 95       	ret

00003314 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	fc 01       	movw	r30, r24
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    331e:	38 2f       	mov	r19, r24
    3320:	37 70       	andi	r19, 0x07	; 7
    3322:	a6 2f       	mov	r26, r22
    3324:	b0 e0       	ldi	r27, 0x00	; 0
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
    if( sf == FSK ) {
    3326:	31 f4       	brne	.+12     	; 0x3334 <calcAirTime+0x20>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
    3328:	1b 96       	adiw	r26, 0x0b	; 11
    332a:	25 e0       	ldi	r18, 0x05	; 5
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	0e 94 bb 32 	call	0x6576	; 0x6576 <__usmulhisi3>
    3332:	8b c0       	rjmp	.+278    	; 0x344a <calcAirTime+0x136>
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
    }
    u1_t sfx = 4*(sf+(7-SF7));
    3334:	63 2f       	mov	r22, r19
    3336:	66 0f       	add	r22, r22
    3338:	66 0f       	add	r22, r22
    333a:	68 5e       	subi	r22, 0xE8	; 232
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
    333c:	35 30       	cpi	r19, 0x05	; 5
    333e:	10 f4       	brcc	.+4      	; 0x3344 <calcAirTime+0x30>
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	01 c0       	rjmp	.+2      	; 0x3346 <calcAirTime+0x32>
    3344:	28 e0       	ldi	r18, 0x08	; 8
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
    3346:	13 e0       	ldi	r17, 0x03	; 3
    3348:	aa 0f       	add	r26, r26
    334a:	bb 1f       	adc	r27, r27
    334c:	1a 95       	dec	r17
    334e:	e1 f7       	brne	.-8      	; 0x3348 <calcAirTime+0x34>
    3350:	cd 01       	movw	r24, r26
    3352:	86 1b       	sub	r24, r22
    3354:	91 09       	sbc	r25, r1
    3356:	dc 01       	movw	r26, r24
    3358:	5c 96       	adiw	r26, 0x1c	; 28
    335a:	e7 fd       	sbrc	r30, 7
    335c:	03 c0       	rjmp	.+6      	; 0x3364 <calcAirTime+0x50>
    335e:	80 e1       	ldi	r24, 0x10	; 16
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <calcAirTime+0x54>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	8a 0f       	add	r24, r26
    336a:	9b 1f       	adc	r25, r27
    336c:	4f 2f       	mov	r20, r31
    336e:	55 27       	eor	r21, r21
    3370:	45 2b       	or	r20, r21
    3372:	19 f4       	brne	.+6      	; 0x337a <calcAirTime+0x66>
    3374:	40 e0       	ldi	r20, 0x00	; 0
    3376:	50 e0       	ldi	r21, 0x00	; 0
    3378:	02 c0       	rjmp	.+4      	; 0x337e <calcAirTime+0x6a>
    337a:	44 e1       	ldi	r20, 0x14	; 20
    337c:	50 e0       	ldi	r21, 0x00	; 0
    337e:	84 1b       	sub	r24, r20
    3380:	95 0b       	sbc	r25, r21
    if( tmp > 0 ) {
    3382:	18 16       	cp	r1, r24
    3384:	19 06       	cpc	r1, r25
    3386:	d4 f4       	brge	.+52     	; 0x33bc <calcAirTime+0xa8>
        tmp = (tmp + q - 1) / q;
    3388:	62 1b       	sub	r22, r18
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	86 0f       	add	r24, r22
    338e:	97 1f       	adc	r25, r23
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <__divmodhi4>
        tmp *= getCr(rps)+5;
    3396:	af 01       	movw	r20, r30
    3398:	a5 e0       	ldi	r26, 0x05	; 5
    339a:	56 95       	lsr	r21
    339c:	47 95       	ror	r20
    339e:	aa 95       	dec	r26
    33a0:	e1 f7       	brne	.-8      	; 0x339a <calcAirTime+0x86>
    33a2:	43 70       	andi	r20, 0x03	; 3
    33a4:	50 e0       	ldi	r21, 0x00	; 0
    33a6:	4b 5f       	subi	r20, 0xFB	; 251
    33a8:	5f 4f       	sbci	r21, 0xFF	; 255
    33aa:	46 9f       	mul	r20, r22
    33ac:	c0 01       	movw	r24, r0
    33ae:	47 9f       	mul	r20, r23
    33b0:	90 0d       	add	r25, r0
    33b2:	56 9f       	mul	r21, r22
    33b4:	90 0d       	add	r25, r0
    33b6:	11 24       	eor	r1, r1
        tmp += 8;
    33b8:	08 96       	adiw	r24, 0x08	; 8
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <calcAirTime+0xac>
    } else {
        tmp = 8;
    33bc:	88 e0       	ldi	r24, 0x08	; 8
    33be:	90 e0       	ldi	r25, 0x00	; 0
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
    33c0:	88 0f       	add	r24, r24
    33c2:	99 1f       	adc	r25, r25
    33c4:	88 0f       	add	r24, r24
    33c6:	99 1f       	adc	r25, r25
    33c8:	c1 96       	adiw	r24, 0x31	; 49
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
    33ca:	3f 5f       	subi	r19, 0xFF	; 255
    33cc:	63 e0       	ldi	r22, 0x03	; 3
    33ce:	f6 95       	lsr	r31
    33d0:	e7 95       	ror	r30
    33d2:	6a 95       	dec	r22
    33d4:	e1 f7       	brne	.-8      	; 0x33ce <calcAirTime+0xba>
    33d6:	e3 70       	andi	r30, 0x03	; 3
    33d8:	3e 1b       	sub	r19, r30
    int div = 15625;
    if( sfx > 4 ) {
    33da:	35 30       	cpi	r19, 0x05	; 5
    33dc:	50 f0       	brcs	.+20     	; 0x33f2 <calcAirTime+0xde>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
    33de:	34 50       	subi	r19, 0x04	; 4
    33e0:	e9 e0       	ldi	r30, 0x09	; 9
    33e2:	fd e3       	ldi	r31, 0x3D	; 61
    33e4:	02 c0       	rjmp	.+4      	; 0x33ea <calcAirTime+0xd6>
    33e6:	f5 95       	asr	r31
    33e8:	e7 95       	ror	r30
    33ea:	3a 95       	dec	r19
    33ec:	e2 f7       	brpl	.-8      	; 0x33e6 <calcAirTime+0xd2>
        sfx = 4;
    33ee:	34 e0       	ldi	r19, 0x04	; 4
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <calcAirTime+0xe2>
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
    int div = 15625;
    33f2:	e9 e0       	ldi	r30, 0x09	; 9
    33f4:	fd e3       	ldi	r31, 0x3D	; 61
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
        sfx = 4;
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
    33f6:	09 2e       	mov	r0, r25
    33f8:	00 0c       	add	r0, r0
    33fa:	aa 0b       	sbc	r26, r26
    33fc:	bb 0b       	sbc	r27, r27
    33fe:	7c 01       	movw	r14, r24
    3400:	8d 01       	movw	r16, r26
    3402:	04 c0       	rjmp	.+8      	; 0x340c <calcAirTime+0xf8>
    3404:	ee 0c       	add	r14, r14
    3406:	ff 1c       	adc	r15, r15
    3408:	00 1f       	adc	r16, r16
    340a:	11 1f       	adc	r17, r17
    340c:	3a 95       	dec	r19
    340e:	d2 f7       	brpl	.-12     	; 0x3404 <calcAirTime+0xf0>
    3410:	a8 01       	movw	r20, r16
    3412:	97 01       	movw	r18, r14
    3414:	a2 e1       	ldi	r26, 0x12	; 18
    3416:	ba e7       	ldi	r27, 0x7A	; 122
    3418:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    341c:	9f 01       	movw	r18, r30
    341e:	f7 ff       	sbrs	r31, 7
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <calcAirTime+0x112>
    3422:	2f 5f       	subi	r18, 0xFF	; 255
    3424:	3f 4f       	sbci	r19, 0xFF	; 255
    3426:	35 95       	asr	r19
    3428:	27 95       	ror	r18
    342a:	89 01       	movw	r16, r18
    342c:	33 0f       	add	r19, r19
    342e:	22 0b       	sbc	r18, r18
    3430:	33 0b       	sbc	r19, r19
    3432:	60 0f       	add	r22, r16
    3434:	71 1f       	adc	r23, r17
    3436:	82 1f       	adc	r24, r18
    3438:	93 1f       	adc	r25, r19
    343a:	9f 01       	movw	r18, r30
    343c:	ff 0f       	add	r31, r31
    343e:	44 0b       	sbc	r20, r20
    3440:	55 0b       	sbc	r21, r21
    3442:	0e 94 80 32 	call	0x6500	; 0x6500 <__divmodsi4>
    3446:	ca 01       	movw	r24, r20
    3448:	b9 01       	movw	r22, r18
}
    344a:	1f 91       	pop	r17
    344c:	0f 91       	pop	r16
    344e:	ff 90       	pop	r15
    3450:	ef 90       	pop	r14
    3452:	08 95       	ret

00003454 <LMIC_stopPingable>:
    }
}


void LMIC_stopPingable (void) {
    LMIC.opmode &= ~(OP_PINGABLE|OP_PINGINI);
    3454:	e0 ec       	ldi	r30, 0xC0	; 192
    3456:	f3 e0       	ldi	r31, 0x03	; 3
    3458:	80 81       	ld	r24, Z
    345a:	91 81       	ldd	r25, Z+1	; 0x01
    345c:	99 7f       	andi	r25, 0xF9	; 249
    345e:	91 83       	std	Z+1, r25	; 0x01
    3460:	80 83       	st	Z, r24
    3462:	08 95       	ret

00003464 <LMIC_setupBand>:
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}

bit_t LMIC_setupBand (u1_t bandidx, s1_t txpow, u2_t txcap) {
    3464:	cf 93       	push	r28
    3466:	df 93       	push	r29
    if( bandidx > BAND_AUX ) return 0;
    3468:	84 30       	cpi	r24, 0x04	; 4
    346a:	a8 f4       	brcc	.+42     	; 0x3496 <LMIC_setupBand+0x32>
    //band_t* b = &LMIC.bands[bandidx];
    xref2band_t b = &LMIC.bands[bandidx];
    b->txpow = txpow;
    346c:	98 e0       	ldi	r25, 0x08	; 8
    346e:	89 9f       	mul	r24, r25
    3470:	e0 01       	movw	r28, r0
    3472:	11 24       	eor	r1, r1
    3474:	c7 5e       	subi	r28, 0xE7	; 231
    3476:	dc 4f       	sbci	r29, 0xFC	; 252
    3478:	6d 8f       	std	Y+29, r22	; 0x1d
    b->txcap = txcap;
    347a:	5c 8f       	std	Y+28, r21	; 0x1c
    347c:	4b 8f       	std	Y+27, r20	; 0x1b
    b->avail = os_getTime();
    347e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    3482:	6f 8f       	std	Y+31, r22	; 0x1f
    3484:	78 a3       	std	Y+32, r23	; 0x20
    3486:	89 a3       	std	Y+33, r24	; 0x21
    3488:	9a a3       	std	Y+34, r25	; 0x22
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    348a:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    348e:	8f 70       	andi	r24, 0x0F	; 15
    3490:	8e 8f       	std	Y+30, r24	; 0x1e
    return 1;
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	01 c0       	rjmp	.+2      	; 0x3498 <LMIC_setupBand+0x34>
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}

bit_t LMIC_setupBand (u1_t bandidx, s1_t txpow, u2_t txcap) {
    if( bandidx > BAND_AUX ) return 0;
    3496:	80 e0       	ldi	r24, 0x00	; 0
    b->txpow = txpow;
    b->txcap = txcap;
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	08 95       	ret

0000349e <LMIC_setupChannel>:

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
    349e:	cf 92       	push	r12
    34a0:	df 92       	push	r13
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	a8 2f       	mov	r26, r24
    if( chidx >= MAX_CHANNELS )
    34ae:	80 31       	cpi	r24, 0x10	; 16
    34b0:	08 f0       	brcs	.+2      	; 0x34b4 <LMIC_setupChannel+0x16>
    34b2:	74 c0       	rjmp	.+232    	; 0x359c <LMIC_setupChannel+0xfe>
        return 0;
    if( band == -1 ) {
    34b4:	0f 3f       	cpi	r16, 0xFF	; 255
    34b6:	c1 f5       	brne	.+112    	; 0x3528 <LMIC_setupChannel+0x8a>
        if( freq >= 869400000 && freq <= 869650000 )
    34b8:	6a 01       	movw	r12, r20
    34ba:	7b 01       	movw	r14, r22
    34bc:	80 ec       	ldi	r24, 0xC0	; 192
    34be:	c8 1a       	sub	r12, r24
    34c0:	8d ef       	ldi	r24, 0xFD	; 253
    34c2:	d8 0a       	sbc	r13, r24
    34c4:	81 ed       	ldi	r24, 0xD1	; 209
    34c6:	e8 0a       	sbc	r14, r24
    34c8:	83 e3       	ldi	r24, 0x33	; 51
    34ca:	f8 0a       	sbc	r15, r24
    34cc:	81 e9       	ldi	r24, 0x91	; 145
    34ce:	c8 16       	cp	r12, r24
    34d0:	80 ed       	ldi	r24, 0xD0	; 208
    34d2:	d8 06       	cpc	r13, r24
    34d4:	83 e0       	ldi	r24, 0x03	; 3
    34d6:	e8 06       	cpc	r14, r24
    34d8:	f1 04       	cpc	r15, r1
    34da:	10 f4       	brcc	.+4      	; 0x34e0 <LMIC_setupChannel+0x42>
            freq |= BAND_DECI;   // 10% 27dBm
    34dc:	42 60       	ori	r20, 0x02	; 2
    34de:	30 c0       	rjmp	.+96     	; 0x3540 <LMIC_setupChannel+0xa2>
        else if( (freq >= 868000000 && freq <= 868600000) ||
    34e0:	6a 01       	movw	r12, r20
    34e2:	7b 01       	movw	r14, r22
    34e4:	81 ea       	ldi	r24, 0xA1	; 161
    34e6:	d8 1a       	sub	r13, r24
    34e8:	8c eb       	ldi	r24, 0xBC	; 188
    34ea:	e8 0a       	sbc	r14, r24
    34ec:	83 e3       	ldi	r24, 0x33	; 51
    34ee:	f8 0a       	sbc	r15, r24
    34f0:	81 ec       	ldi	r24, 0xC1	; 193
    34f2:	c8 16       	cp	r12, r24
    34f4:	87 e2       	ldi	r24, 0x27	; 39
    34f6:	d8 06       	cpc	r13, r24
    34f8:	89 e0       	ldi	r24, 0x09	; 9
    34fa:	e8 06       	cpc	r14, r24
    34fc:	f1 04       	cpc	r15, r1
    34fe:	90 f0       	brcs	.+36     	; 0x3524 <LMIC_setupChannel+0x86>
    3500:	6a 01       	movw	r12, r20
    3502:	7b 01       	movw	r14, r22
    3504:	80 ea       	ldi	r24, 0xA0	; 160
    3506:	c8 1a       	sub	r12, r24
    3508:	81 e9       	ldi	r24, 0x91	; 145
    350a:	d8 0a       	sbc	r13, r24
    350c:	86 ed       	ldi	r24, 0xD6	; 214
    350e:	e8 0a       	sbc	r14, r24
    3510:	83 e3       	ldi	r24, 0x33	; 51
    3512:	f8 0a       	sbc	r15, r24
    3514:	81 ee       	ldi	r24, 0xE1	; 225
    3516:	c8 16       	cp	r12, r24
    3518:	83 e9       	ldi	r24, 0x93	; 147
    351a:	d8 06       	cpc	r13, r24
    351c:	84 e0       	ldi	r24, 0x04	; 4
    351e:	e8 06       	cpc	r14, r24
    3520:	f1 04       	cpc	r15, r1
    3522:	70 f4       	brcc	.+28     	; 0x3540 <LMIC_setupChannel+0xa2>
                 (freq >= 869700000 && freq <= 870000000)  )
            freq |= BAND_CENTI;  // 1% 14dBm 
    3524:	41 60       	ori	r20, 0x01	; 1
    3526:	0c c0       	rjmp	.+24     	; 0x3540 <LMIC_setupChannel+0xa2>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
    3528:	04 30       	cpi	r16, 0x04	; 4
    352a:	c4 f5       	brge	.+112    	; 0x359c <LMIC_setupChannel+0xfe>
        freq = (freq&~3) | band;
    352c:	4c 7f       	andi	r20, 0xFC	; 252
    352e:	c0 2e       	mov	r12, r16
    3530:	00 0f       	add	r16, r16
    3532:	dd 08       	sbc	r13, r13
    3534:	ee 08       	sbc	r14, r14
    3536:	ff 08       	sbc	r15, r15
    3538:	4c 29       	or	r20, r12
    353a:	5d 29       	or	r21, r13
    353c:	6e 29       	or	r22, r14
    353e:	7f 29       	or	r23, r15
    }
    LMIC.channelFreq [chidx] = freq;
    3540:	ea 2f       	mov	r30, r26
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	ef 01       	movw	r28, r30
    3546:	cc 0f       	add	r28, r28
    3548:	dd 1f       	adc	r29, r29
    354a:	cc 0f       	add	r28, r28
    354c:	dd 1f       	adc	r29, r29
    354e:	c7 5e       	subi	r28, 0xE7	; 231
    3550:	dc 4f       	sbci	r29, 0xFC	; 252
    3552:	4b af       	std	Y+59, r20	; 0x3b
    3554:	5c af       	std	Y+60, r21	; 0x3c
    3556:	6d af       	std	Y+61, r22	; 0x3d
    3558:	7e af       	std	Y+62, r23	; 0x3e
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    355a:	21 15       	cp	r18, r1
    355c:	31 05       	cpc	r19, r1
    355e:	19 f0       	breq	.+6      	; 0x3566 <LMIC_setupChannel+0xc8>
    3560:	92 2f       	mov	r25, r18
    3562:	83 2f       	mov	r24, r19
    3564:	02 c0       	rjmp	.+4      	; 0x356a <LMIC_setupChannel+0xcc>
    3566:	9f e3       	ldi	r25, 0x3F	; 63
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	ee 0f       	add	r30, r30
    356c:	ff 1f       	adc	r31, r31
    356e:	ec 56       	subi	r30, 0x6C	; 108
    3570:	fc 4f       	sbci	r31, 0xFC	; 252
    3572:	90 83       	st	Z, r25
    3574:	81 83       	std	Z+1, r24	; 0x01
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <LMIC_setupChannel+0xe2>
    357c:	88 0f       	add	r24, r24
    357e:	99 1f       	adc	r25, r25
    3580:	aa 95       	dec	r26
    3582:	e2 f7       	brpl	.-8      	; 0x357c <LMIC_setupChannel+0xde>
    3584:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <LMIC+0x9b>
    3588:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <LMIC+0x9c>
    358c:	82 2b       	or	r24, r18
    358e:	93 2b       	or	r25, r19
    3590:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <LMIC+0x9c>
    3594:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <LMIC+0x9b>
    return 1;
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	01 c0       	rjmp	.+2      	; 0x359e <LMIC_setupChannel+0x100>
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
    if( chidx >= MAX_CHANNELS )
        return 0;
    359c:	80 e0       	ldi	r24, 0x00	; 0
    }
    LMIC.channelFreq [chidx] = freq;
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    return 1;
}
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	0f 91       	pop	r16
    35a4:	ff 90       	pop	r15
    35a6:	ef 90       	pop	r14
    35a8:	df 90       	pop	r13
    35aa:	cf 90       	pop	r12
    35ac:	08 95       	ret

000035ae <decodeFrame>:
    LMIC.bcninfo.flags |= BCN_FULL;
    return 2;
}


static bit_t decodeFrame (void) {
    35ae:	2f 92       	push	r2
    35b0:	3f 92       	push	r3
    35b2:	4f 92       	push	r4
    35b4:	5f 92       	push	r5
    35b6:	6f 92       	push	r6
    35b8:	7f 92       	push	r7
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	29 97       	sbiw	r28, 0x09	; 9
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    u1_t ftype  = hdr & HDR_FTYPE;
    int  dlen   = LMIC.dataLen;
    35e2:	00 91 59 04 	lds	r16, 0x0459	; 0x800459 <LMIC+0x140>
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    if( dlen < OFF_DAT_OPTS+4 ||
    35e8:	0c 30       	cpi	r16, 0x0C	; 12
    35ea:	11 05       	cpc	r17, r1
    35ec:	24 f4       	brge	.+8      	; 0x35f6 <decodeFrame+0x48>
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
        LMIC.dataLen = 0;
    35ee:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
        return 0;
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	35 c3       	rjmp	.+1642   	; 0x3c60 <decodeFrame+0x6b2>
}


static bit_t decodeFrame (void) {
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    35f6:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <LMIC+0x141>
    35fa:	29 83       	std	Y+1, r18	; 0x01
    35fc:	23 70       	andi	r18, 0x03	; 3
    35fe:	28 87       	std	Y+8, r18	; 0x08
    u1_t ftype  = hdr & HDR_FTYPE;
    int  dlen   = LMIC.dataLen;
    if( dlen < OFF_DAT_OPTS+4 ||
    3600:	21 11       	cpse	r18, r1
    3602:	f5 cf       	rjmp	.-22     	; 0x35ee <decodeFrame+0x40>


static bit_t decodeFrame (void) {
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    u1_t ftype  = hdr & HDR_FTYPE;
    3604:	39 81       	ldd	r19, Y+1	; 0x01
    3606:	30 7e       	andi	r19, 0xE0	; 224
    3608:	3e 83       	std	Y+6, r19	; 0x06
    int  dlen   = LMIC.dataLen;
    if( dlen < OFF_DAT_OPTS+4 ||
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
    360a:	30 36       	cpi	r19, 0x60	; 96
    360c:	11 f0       	breq	.+4      	; 0x3612 <decodeFrame+0x64>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
    360e:	30 3a       	cpi	r19, 0xA0	; 160
    3610:	71 f7       	brne	.-36     	; 0x35ee <decodeFrame+0x40>
        return 0;
    }
    // Validate exact frame length
    // Note: device address was already read+evaluated in order to arrive here.
    int  fct   = d[OFF_DAT_FCT];
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
    3612:	8b e5       	ldi	r24, 0x5B	; 91
    3614:	94 e0       	ldi	r25, 0x04	; 4
    3616:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    361a:	ab 01       	movw	r20, r22
    361c:	bc 01       	movw	r22, r24
    361e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <LMIC+0x147>
    3622:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <LMIC+0x148>
    int  olen  = fct & FCT_OPTLEN;
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
    int  poff  = OFF_DAT_OPTS+olen;
    int  pend  = dlen-4;  // MIC

    if( addr != LMIC.devaddr ) {
    3626:	c0 90 26 04 	lds	r12, 0x0426	; 0x800426 <LMIC+0x10d>
    362a:	d0 90 27 04 	lds	r13, 0x0427	; 0x800427 <LMIC+0x10e>
    362e:	e0 90 28 04 	lds	r14, 0x0428	; 0x800428 <LMIC+0x10f>
    3632:	f0 90 29 04 	lds	r15, 0x0429	; 0x800429 <LMIC+0x110>
    3636:	4c 15       	cp	r20, r12
    3638:	5d 05       	cpc	r21, r13
    363a:	6e 05       	cpc	r22, r14
    363c:	7f 05       	cpc	r23, r15
    363e:	b9 f6       	brne	.-82     	; 0x35ee <decodeFrame+0x40>
        LMIC.dataLen = 0;
        return 0;
    }
    // Validate exact frame length
    // Note: device address was already read+evaluated in order to arrive here.
    int  fct   = d[OFF_DAT_FCT];
    3640:	a0 91 5f 04 	lds	r26, 0x045F	; 0x80045f <LMIC+0x146>
    3644:	ab 83       	std	Y+3, r26	; 0x03
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
    int  olen  = fct & FCT_OPTLEN;
    3646:	2a 2f       	mov	r18, r26
    3648:	2f 70       	andi	r18, 0x0F	; 15
    364a:	e2 2f       	mov	r30, r18
    364c:	f0 e0       	ldi	r31, 0x00	; 0
    364e:	fd 83       	std	Y+5, r31	; 0x05
    3650:	ec 83       	std	Y+4, r30	; 0x04
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
    int  poff  = OFF_DAT_OPTS+olen;
    3652:	4f 01       	movw	r8, r30
    3654:	f8 e0       	ldi	r31, 0x08	; 8
    3656:	8f 0e       	add	r8, r31
    3658:	91 1c       	adc	r9, r1
    int  pend  = dlen-4;  // MIC
    365a:	18 01       	movw	r2, r16
    365c:	24 e0       	ldi	r18, 0x04	; 4
    365e:	22 1a       	sub	r2, r18
    3660:	31 08       	sbc	r3, r1
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
    }
    if( poff > pend ) {
    3662:	28 14       	cp	r2, r8
    3664:	39 04       	cpc	r3, r9
    3666:	1c f2       	brlt	.-122    	; 0x35ee <decodeFrame+0x40>
    }

    int port = -1;
    int replayConf = 0;

    if( pend > poff )
    3668:	82 14       	cp	r8, r2
    366a:	93 04       	cpc	r9, r3
    366c:	6c f4       	brge	.+26     	; 0x3688 <decodeFrame+0xda>
        port = d[poff++];
    366e:	f4 01       	movw	r30, r8
    3670:	e6 5a       	subi	r30, 0xA6	; 166
    3672:	fb 4f       	sbci	r31, 0xFB	; 251
    3674:	20 81       	ld	r18, Z
    3676:	a2 2f       	mov	r26, r18
    3678:	b0 e0       	ldi	r27, 0x00	; 0
    367a:	ba 83       	std	Y+2, r27	; 0x02
    367c:	a9 83       	std	Y+1, r26	; 0x01
    367e:	ec 81       	ldd	r30, Y+4	; 0x04
    3680:	fd 81       	ldd	r31, Y+5	; 0x05
    3682:	39 96       	adiw	r30, 0x09	; 9
    3684:	4f 01       	movw	r8, r30
    3686:	04 c0       	rjmp	.+8      	; 0x3690 <decodeFrame+0xe2>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
    }

    int port = -1;
    3688:	2f ef       	ldi	r18, 0xFF	; 255
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	3a 83       	std	Y+2, r19	; 0x02
    368e:	29 83       	std	Y+1, r18	; 0x01
    int replayConf = 0;

    if( pend > poff )
        port = d[poff++];

    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
    3690:	40 90 2a 04 	lds	r4, 0x042A	; 0x80042a <LMIC+0x111>
    3694:	50 90 2b 04 	lds	r5, 0x042B	; 0x80042b <LMIC+0x112>
    3698:	60 90 2c 04 	lds	r6, 0x042C	; 0x80042c <LMIC+0x113>
    369c:	70 90 2d 04 	lds	r7, 0x042D	; 0x80042d <LMIC+0x114>
    36a0:	84 19       	sub	r24, r4
    36a2:	95 09       	sbc	r25, r5
    36a4:	48 0e       	add	r4, r24
    36a6:	59 1e       	adc	r5, r25
    36a8:	61 1c       	adc	r6, r1
    36aa:	71 1c       	adc	r7, r1

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
    os_clearMem(AESaux,16);
    36ac:	10 e1       	ldi	r17, 0x10	; 16
    36ae:	e5 e6       	ldi	r30, 0x65	; 101
    36b0:	f5 e0       	ldi	r31, 0x05	; 5
    36b2:	df 01       	movw	r26, r30
    36b4:	21 2f       	mov	r18, r17
    36b6:	1d 92       	st	X+, r1
    36b8:	2a 95       	dec	r18
    36ba:	e9 f7       	brne	.-6      	; 0x36b6 <decodeFrame+0x108>
    AESaux[0]  = 0x49;
    36bc:	89 e4       	ldi	r24, 0x49	; 73
    36be:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <AESAUX>
    AESaux[5]  = dndir?1:0;
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <AESAUX+0x5>
    AESaux[15] = len;
    36c8:	20 92 74 05 	sts	0x0574, r2	; 0x800574 <AESAUX+0xf>
    os_wlsbf4(AESaux+ 6,devaddr);
    36cc:	8b e6       	ldi	r24, 0x6B	; 107
    36ce:	95 e0       	ldi	r25, 0x05	; 5
    36d0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    36d4:	b3 01       	movw	r22, r6
    36d6:	a2 01       	movw	r20, r4
    36d8:	8f e6       	ldi	r24, 0x6F	; 111
    36da:	95 e0       	ldi	r25, 0x05	; 5
    36dc:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
}


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
    micB0(devaddr, seqno, dndir, len);
    os_copyMem(AESkey,key,16);
    36e0:	e6 e0       	ldi	r30, 0x06	; 6
    36e2:	f4 e0       	ldi	r31, 0x04	; 4
    36e4:	a5 eb       	ldi	r26, 0xB5	; 181
    36e6:	b4 e0       	ldi	r27, 0x04	; 4
    36e8:	01 90       	ld	r0, Z+
    36ea:	0d 92       	st	X+, r0
    36ec:	1a 95       	dec	r17
    36ee:	e1 f7       	brne	.-8      	; 0x36e8 <decodeFrame+0x13a>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
    36f0:	a1 01       	movw	r20, r2
    36f2:	6a e5       	ldi	r22, 0x5A	; 90
    36f4:	74 e0       	ldi	r23, 0x04	; 4
    36f6:	82 e0       	ldi	r24, 0x02	; 2
    36f8:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    36fc:	6b 01       	movw	r12, r22
    36fe:	7c 01       	movw	r14, r24
    3700:	c1 01       	movw	r24, r2
    3702:	86 5a       	subi	r24, 0xA6	; 166
    3704:	9b 4f       	sbci	r25, 0xFB	; 251
    3706:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <os_rmsbf4>
    if( pend > poff )
        port = d[poff++];

    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);

    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
    370a:	c6 16       	cp	r12, r22
    370c:	d7 06       	cpc	r13, r23
    370e:	e8 06       	cpc	r14, r24
    3710:	f9 06       	cpc	r15, r25
    3712:	09 f0       	breq	.+2      	; 0x3716 <decodeFrame+0x168>
    3714:	6c cf       	rjmp	.-296    	; 0x35ee <decodeFrame+0x40>
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
    }
    if( seqno < LMIC.seqnoDn ) {
    3716:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <LMIC+0x111>
    371a:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <LMIC+0x112>
    371e:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <LMIC+0x113>
    3722:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <LMIC+0x114>
    3726:	48 16       	cp	r4, r24
    3728:	59 06       	cpc	r5, r25
    372a:	6a 06       	cpc	r6, r26
    372c:	7b 06       	cpc	r7, r27
    372e:	e8 f4       	brcc	.+58     	; 0x376a <decodeFrame+0x1bc>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
    3730:	84 15       	cp	r24, r4
    3732:	95 05       	cpc	r25, r5
    3734:	a6 05       	cpc	r26, r6
    3736:	b7 05       	cpc	r27, r7
    3738:	0c f4       	brge	.+2      	; 0x373c <decodeFrame+0x18e>
    373a:	59 cf       	rjmp	.-334    	; 0x35ee <decodeFrame+0x40>
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	a1 09       	sbc	r26, r1
    3740:	b1 09       	sbc	r27, r1
    3742:	48 16       	cp	r4, r24
    3744:	59 06       	cpc	r5, r25
    3746:	6a 06       	cpc	r6, r26
    3748:	7b 06       	cpc	r7, r27
    374a:	09 f0       	breq	.+2      	; 0x374e <decodeFrame+0x1a0>
    374c:	50 cf       	rjmp	.-352    	; 0x35ee <decodeFrame+0x40>
    374e:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <LMIC+0x119>
    3752:	88 23       	and	r24, r24
    3754:	09 f4       	brne	.+2      	; 0x3758 <decodeFrame+0x1aa>
    3756:	4b cf       	rjmp	.-362    	; 0x35ee <decodeFrame+0x40>
    3758:	3e 81       	ldd	r19, Y+6	; 0x06
    375a:	30 3a       	cpi	r19, 0xA0	; 160
    375c:	09 f0       	breq	.+2      	; 0x3760 <decodeFrame+0x1b2>
    375e:	47 cf       	rjmp	.-370    	; 0x35ee <decodeFrame+0x40>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9f 83       	std	Y+7, r25	; 0x07
    3766:	8e 83       	std	Y+6, r24	; 0x06
    3768:	17 c0       	rjmp	.+46     	; 0x3798 <decodeFrame+0x1ea>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
    376a:	d3 01       	movw	r26, r6
    376c:	c2 01       	movw	r24, r4
    376e:	01 96       	adiw	r24, 0x01	; 1
    3770:	a1 1d       	adc	r26, r1
    3772:	b1 1d       	adc	r27, r1
    3774:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <LMIC+0x111>
    3778:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <LMIC+0x112>
    377c:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <LMIC+0x113>
    3780:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <LMIC+0x114>
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
    3784:	9e 81       	ldd	r25, Y+6	; 0x06
    3786:	90 3a       	cpi	r25, 0xA0	; 160
    3788:	11 f4       	brne	.+4      	; 0x378e <decodeFrame+0x1e0>
    378a:	80 e2       	ldi	r24, 0x20	; 32
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <decodeFrame+0x1e2>
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <LMIC+0x119>
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
    }

    int port = -1;
    int replayConf = 0;
    3794:	1f 82       	std	Y+7, r1	; 0x07
    3796:	1e 82       	std	Y+6, r1	; 0x06
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
    3798:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <LMIC+0x119>
    379c:	81 11       	cpse	r24, r1
    379e:	03 c0       	rjmp	.+6      	; 0x37a6 <decodeFrame+0x1f8>
    37a0:	ab 81       	ldd	r26, Y+3	; 0x03
    37a2:	a4 ff       	sbrs	r26, 4
    37a4:	09 c0       	rjmp	.+18     	; 0x37b8 <decodeFrame+0x20a>
        LMIC.opmode |= OP_POLL;
    37a6:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    37aa:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    37ae:	80 61       	ori	r24, 0x10	; 16
    37b0:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    37b4:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
    37b8:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <LMIC+0xad>
    37bc:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <LMIC+0x11b>
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
    37c0:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <LMIC+0x11a>
    37c4:	80 38       	cpi	r24, 0x80	; 128
    37c6:	19 f0       	breq	.+6      	; 0x37ce <decodeFrame+0x220>
        LMIC.adrAckReq = LINK_CHECK_INIT;
    37c8:	84 ef       	ldi	r24, 0xF4	; 244
    37ca:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <LMIC+0x11a>

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
    37ce:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <LMIC+0xe>
    37d2:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <LMIC+0xf>
    37d6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <getSensitivity>
    37da:	20 91 25 03 	lds	r18, 0x0325	; 0x800325 <LMIC+0xc>
    37de:	02 2e       	mov	r0, r18
    37e0:	00 0c       	add	r0, r0
    37e2:	33 0b       	sbc	r19, r19
    37e4:	20 54       	subi	r18, 0x40	; 64
    37e6:	31 09       	sbc	r19, r1
    37e8:	28 1b       	sub	r18, r24
    37ea:	39 0b       	sbc	r19, r25
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
    37ec:	37 fd       	sbrc	r19, 7
    37ee:	06 c0       	rjmp	.+12     	; 0x37fc <decodeFrame+0x24e>
    37f0:	2f 3f       	cpi	r18, 0xFF	; 255
    37f2:	31 05       	cpc	r19, r1
    37f4:	14 f0       	brlt	.+4      	; 0x37fa <decodeFrame+0x24c>
    37f6:	2e ef       	ldi	r18, 0xFE	; 254
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	28 87       	std	Y+8, r18	; 0x08
    37fc:	b8 85       	ldd	r27, Y+8	; 0x08
    37fe:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <LMIC+0x11d>

    xref2u1_t opts = &d[OFF_DAT_OPTS];
    int oidx = 0;
    3802:	19 86       	std	Y+9, r1	; 0x09
    3804:	18 86       	std	Y+8, r1	; 0x08
    while( oidx < olen ) {
    3806:	88 85       	ldd	r24, Y+8	; 0x08
    3808:	99 85       	ldd	r25, Y+9	; 0x09
    380a:	ac 81       	ldd	r26, Y+4	; 0x04
    380c:	bd 81       	ldd	r27, Y+5	; 0x05
    380e:	8a 17       	cp	r24, r26
    3810:	9b 07       	cpc	r25, r27
    3812:	0c f0       	brlt	.+2      	; 0x3816 <decodeFrame+0x268>
    3814:	c6 c1       	rjmp	.+908    	; 0x3ba2 <decodeFrame+0x5f4>
        switch( opts[oidx] ) {
    3816:	e8 85       	ldd	r30, Y+8	; 0x08
    3818:	f9 85       	ldd	r31, Y+9	; 0x09
    381a:	ee 59       	subi	r30, 0x9E	; 158
    381c:	fb 4f       	sbci	r31, 0xFB	; 251
    381e:	e0 81       	ld	r30, Z
    3820:	8e 2f       	mov	r24, r30
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	fc 01       	movw	r30, r24
    3826:	32 97       	sbiw	r30, 0x02	; 2
    3828:	e1 31       	cpi	r30, 0x11	; 17
    382a:	f1 05       	cpc	r31, r1
    382c:	08 f0       	brcs	.+2      	; 0x3830 <decodeFrame+0x282>
    382e:	b9 c1       	rjmp	.+882    	; 0x3ba2 <decodeFrame+0x5f4>
    3830:	ec 5c       	subi	r30, 0xCC	; 204
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__tablejump2__>
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
    3838:	e8 85       	ldd	r30, Y+8	; 0x08
    383a:	f9 85       	ldd	r31, Y+9	; 0x09
    383c:	33 96       	adiw	r30, 0x03	; 3
    383e:	f9 87       	std	Y+9, r31	; 0x09
    3840:	e8 87       	std	Y+8, r30	; 0x08
            continue;
    3842:	e1 cf       	rjmp	.-62     	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
    3844:	e8 85       	ldd	r30, Y+8	; 0x08
    3846:	f9 85       	ldd	r31, Y+9	; 0x09
    3848:	ed 59       	subi	r30, 0x9D	; 157
    384a:	fb 4f       	sbci	r31, 0xFB	; 251
    384c:	a0 81       	ld	r26, Z
    384e:	e8 85       	ldd	r30, Y+8	; 0x08
    3850:	f9 85       	ldd	r31, Y+9	; 0x09
    3852:	ec 59       	subi	r30, 0x9C	; 156
    3854:	fb 4f       	sbci	r31, 0xFB	; 251
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
    385a:	e8 85       	ldd	r30, Y+8	; 0x08
    385c:	f9 85       	ldd	r31, Y+9	; 0x09
    385e:	ea 59       	subi	r30, 0x9A	; 154
    3860:	fb 4f       	sbci	r31, 0xFB	; 251
    3862:	b0 81       	ld	r27, Z
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
            oidx += 5;
    3864:	28 85       	ldd	r18, Y+8	; 0x08
    3866:	39 85       	ldd	r19, Y+9	; 0x09
    3868:	2b 5f       	subi	r18, 0xFB	; 251
    386a:	3f 4f       	sbci	r19, 0xFF	; 255
    386c:	39 87       	std	Y+9, r19	; 0x09
    386e:	28 87       	std	Y+8, r18	; 0x08

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
    3870:	37 e8       	ldi	r19, 0x87	; 135
    3872:	30 93 37 04 	sts	0x0437, r19	; 0x800437 <LMIC+0x11e>
    return freq;
}

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
    3876:	2b 2f       	mov	r18, r27
    3878:	20 7f       	andi	r18, 0xF0	; 240
    387a:	09 f0       	breq	.+2      	; 0x387e <decodeFrame+0x2d0>
    387c:	e4 c1       	rjmp	.+968    	; 0x3c46 <decodeFrame+0x698>
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	09 f4       	brne	.+2      	; 0x3884 <decodeFrame+0x2d6>
    3882:	e1 c1       	rjmp	.+962    	; 0x3c46 <decodeFrame+0x698>
    3884:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <LMIC+0x9b>
    3888:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <LMIC+0x9c>
    388c:	20 95       	com	r18
    388e:	30 95       	com	r19
    3890:	28 23       	and	r18, r24
    3892:	39 23       	and	r19, r25
    3894:	23 2b       	or	r18, r19
    3896:	09 f0       	breq	.+2      	; 0x389a <decodeFrame+0x2ec>
    3898:	d6 c1       	rjmp	.+940    	; 0x3c46 <decodeFrame+0x698>
    389a:	e9 e1       	ldi	r30, 0x19	; 25
    389c:	f3 e0       	ldi	r31, 0x03	; 3
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
        return 0;  // illegal input
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
    38a2:	41 e0       	ldi	r20, 0x01	; 1
    38a4:	50 e0       	ldi	r21, 0x00	; 0
    38a6:	02 2e       	mov	r0, r18
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <decodeFrame+0x300>
    38aa:	44 0f       	add	r20, r20
    38ac:	55 1f       	adc	r21, r21
    38ae:	0a 94       	dec	r0
    38b0:	e2 f7       	brpl	.-8      	; 0x38aa <decodeFrame+0x2fc>
    38b2:	ba 01       	movw	r22, r20
    38b4:	68 23       	and	r22, r24
    38b6:	79 23       	and	r23, r25
    38b8:	67 2b       	or	r22, r23
    38ba:	61 f0       	breq	.+24     	; 0x38d4 <decodeFrame+0x326>
    38bc:	c3 ac       	ldd	r12, Z+59	; 0x3b
    38be:	d4 ac       	ldd	r13, Z+60	; 0x3c
    38c0:	e5 ac       	ldd	r14, Z+61	; 0x3d
    38c2:	f6 ac       	ldd	r15, Z+62	; 0x3e
    38c4:	cd 28       	or	r12, r13
    38c6:	ce 28       	or	r12, r14
    38c8:	cf 28       	or	r12, r15
    38ca:	21 f4       	brne	.+8      	; 0x38d4 <decodeFrame+0x326>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
    38cc:	40 95       	com	r20
    38ce:	50 95       	com	r21
    38d0:	84 23       	and	r24, r20
    38d2:	95 23       	and	r25, r21
    38d4:	2f 5f       	subi	r18, 0xFF	; 255
    38d6:	3f 4f       	sbci	r19, 0xFF	; 255
    38d8:	34 96       	adiw	r30, 0x04	; 4

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
        return 0;  // illegal input
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
    38da:	20 31       	cpi	r18, 0x10	; 16
    38dc:	31 05       	cpc	r19, r1
    38de:	09 f7       	brne	.-62     	; 0x38a2 <decodeFrame+0x2f4>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
            chmap &= ~(1<<chnl); // ignore - channel is not defined
    }
    LMIC.channelMap = chmap;
    38e0:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <LMIC+0x9c>
    38e4:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <LMIC+0x9b>

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
    38e8:	8a 2f       	mov	r24, r26
    38ea:	82 95       	swap	r24
    38ec:	8f 70       	andi	r24, 0x0F	; 15
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
    38ee:	e8 2f       	mov	r30, r24
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	e5 53       	subi	r30, 0x35	; 53
    38f4:	fd 4f       	sbci	r31, 0xFD	; 253
            if( !validDR(dr) ) {
    38f6:	91 81       	ldd	r25, Z+1	; 0x01
    38f8:	9f 3f       	cpi	r25, 0xFF	; 255
    38fa:	29 f4       	brne	.+10     	; 0x3906 <decodeFrame+0x358>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
    38fc:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <LMIC+0x11e>
    3900:	9d 7f       	andi	r25, 0xFD	; 253
    3902:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <LMIC+0x11e>
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
    3906:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <LMIC+0x11e>
    390a:	9f 77       	andi	r25, 0x7F	; 127
    390c:	97 30       	cpi	r25, 0x07	; 7
    390e:	51 f4       	brne	.+20     	; 0x3924 <decodeFrame+0x376>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
    3910:	bf 70       	andi	r27, 0x0F	; 15
    3912:	b0 93 c2 03 	sts	0x03C2, r27	; 0x8003c2 <LMIC+0xa9>
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
    3916:	af 70       	andi	r26, 0x0F	; 15
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	a5 54       	subi	r26, 0x45	; 69
    391c:	bd 4f       	sbci	r27, 0xFD	; 253
    391e:	6c 91       	ld	r22, X
    3920:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <setDrTxpow.isra.1>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <LMIC+0x11b>
            continue;
    392a:	6d cf       	rjmp	.-294    	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <LMIC+0x11f>
            oidx += 1;
    3932:	a8 85       	ldd	r26, Y+8	; 0x08
    3934:	b9 85       	ldd	r27, Y+9	; 0x09
    3936:	11 96       	adiw	r26, 0x01	; 1
    3938:	b9 87       	std	Y+9, r27	; 0x09
    393a:	a8 87       	std	Y+8, r26	; 0x08
            continue;
    393c:	64 cf       	rjmp	.-312    	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
    393e:	e8 85       	ldd	r30, Y+8	; 0x08
    3940:	f9 85       	ldd	r31, Y+9	; 0x09
    3942:	ed 59       	subi	r30, 0x9D	; 157
    3944:	fb 4f       	sbci	r31, 0xFB	; 251
    3946:	10 81       	ld	r17, Z
    3948:	1f 70       	andi	r17, 0x0F	; 15
            u4_t freq = convFreq(&opts[oidx+2]);
    394a:	88 85       	ldd	r24, Y+8	; 0x08
    394c:	99 85       	ldd	r25, Y+9	; 0x09
    394e:	8c 59       	subi	r24, 0x9C	; 156
    3950:	9b 4f       	sbci	r25, 0xFB	; 251
    3952:	0e 94 dd 16 	call	0x2dba	; 0x2dba <convFreq>
            oidx += 5;
    3956:	e8 85       	ldd	r30, Y+8	; 0x08
    3958:	f9 85       	ldd	r31, Y+9	; 0x09
    395a:	35 96       	adiw	r30, 0x05	; 5
    395c:	f9 87       	std	Y+9, r31	; 0x09
    395e:	e8 87       	std	Y+8, r30	; 0x08
            LMIC.dn2Ans = 0x80;   // answer pending
    3960:	f0 e8       	ldi	r31, 0x80	; 128
    3962:	f0 93 42 04 	sts	0x0442, r31	; 0x800442 <LMIC+0x129>
    3966:	e1 2f       	mov	r30, r17
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	e5 53       	subi	r30, 0x35	; 53
    396c:	fd 4f       	sbci	r31, 0xFD	; 253
            if( validDR(dr) )
    396e:	21 81       	ldd	r18, Z+1	; 0x01
    3970:	2f 3f       	cpi	r18, 0xFF	; 255
    3972:	09 f4       	brne	.+2      	; 0x3976 <decodeFrame+0x3c8>
    3974:	6c c1       	rjmp	.+728    	; 0x3c4e <decodeFrame+0x6a0>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
    3976:	22 e8       	ldi	r18, 0x82	; 130
    3978:	20 93 42 04 	sts	0x0442, r18	; 0x800442 <LMIC+0x129>
            if( freq != 0 )
    397c:	61 15       	cp	r22, r1
    397e:	71 05       	cpc	r23, r1
    3980:	81 05       	cpc	r24, r1
    3982:	91 05       	cpc	r25, r1
    3984:	09 f4       	brne	.+2      	; 0x3988 <decodeFrame+0x3da>
    3986:	3f cf       	rjmp	.-386    	; 0x3806 <decodeFrame+0x258>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
    3988:	33 e8       	ldi	r19, 0x83	; 131
    398a:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <LMIC+0x129>
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
                LMIC.dn2Dr = dr;
    398e:	10 93 3d 04 	sts	0x043D, r17	; 0x80043d <LMIC+0x124>
                LMIC.dn2Freq = freq;
    3992:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <LMIC+0x125>
    3996:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <LMIC+0x126>
    399a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <LMIC+0x127>
    399e:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <LMIC+0x128>
    39a2:	31 cf       	rjmp	.-414    	; 0x3806 <decodeFrame+0x258>
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
    39a4:	e8 85       	ldd	r30, Y+8	; 0x08
    39a6:	f9 85       	ldd	r31, Y+9	; 0x09
    39a8:	ed 59       	subi	r30, 0x9D	; 157
    39aa:	fb 4f       	sbci	r31, 0xFB	; 251
    39ac:	20 81       	ld	r18, Z
            oidx += 2;
    39ae:	88 85       	ldd	r24, Y+8	; 0x08
    39b0:	99 85       	ldd	r25, Y+9	; 0x09
    39b2:	02 96       	adiw	r24, 0x02	; 2
    39b4:	99 87       	std	Y+9, r25	; 0x09
    39b6:	88 87       	std	Y+8, r24	; 0x08
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
    39b8:	2f 3f       	cpi	r18, 0xFF	; 255
    39ba:	49 f4       	brne	.+18     	; 0x39ce <decodeFrame+0x420>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
    39bc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    39c0:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    39c4:	80 64       	ori	r24, 0x40	; 64
    39c6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    39ca:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
            LMIC.globalDutyRate  = cap & 0xF;
    39ce:	2f 70       	andi	r18, 0x0F	; 15
    39d0:	20 93 b7 03 	sts	0x03B7, r18	; 0x8003b7 <LMIC+0x9e>
            LMIC.globalDutyAvail = os_getTime();
    39d4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    39d8:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <LMIC+0x9f>
    39dc:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <LMIC+0xa0>
    39e0:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <LMIC+0xa1>
    39e4:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <LMIC+0xa2>
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
    39e8:	91 e0       	ldi	r25, 0x01	; 1
    39ea:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <LMIC+0x122>
            continue;
    39ee:	0b cf       	rjmp	.-490    	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
    39f0:	e8 85       	ldd	r30, Y+8	; 0x08
    39f2:	f9 85       	ldd	r31, Y+9	; 0x09
    39f4:	ed 59       	subi	r30, 0x9D	; 157
    39f6:	fb 4f       	sbci	r31, 0xFB	; 251
    39f8:	d0 80       	ld	r13, Z
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
    39fa:	88 85       	ldd	r24, Y+8	; 0x08
    39fc:	99 85       	ldd	r25, Y+9	; 0x09
    39fe:	8c 59       	subi	r24, 0x9C	; 156
    3a00:	9b 4f       	sbci	r25, 0xFB	; 251
    3a02:	0e 94 dd 16 	call	0x2dba	; 0x2dba <convFreq>
    3a06:	ab 01       	movw	r20, r22
    3a08:	bc 01       	movw	r22, r24
            u1_t drs   = opts[oidx+5];  // datarate span
    3a0a:	e8 85       	ldd	r30, Y+8	; 0x08
    3a0c:	f9 85       	ldd	r31, Y+9	; 0x09
    3a0e:	e9 59       	subi	r30, 0x99	; 153
    3a10:	fb 4f       	sbci	r31, 0xFB	; 251
    3a12:	e0 81       	ld	r30, Z
            LMIC.snchAns = 0x80;
    3a14:	a0 e8       	ldi	r26, 0x80	; 128
    3a16:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <LMIC+0x123>
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
    3a1a:	41 15       	cp	r20, r1
    3a1c:	51 05       	cpc	r21, r1
    3a1e:	61 05       	cpc	r22, r1
    3a20:	71 05       	cpc	r23, r1
    3a22:	21 f1       	breq	.+72     	; 0x3a6c <decodeFrame+0x4be>
    3a24:	8e 2f       	mov	r24, r30
    3a26:	82 95       	swap	r24
    3a28:	8f 70       	andi	r24, 0x0F	; 15
    3a2a:	2f e0       	ldi	r18, 0x0F	; 15
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	28 1b       	sub	r18, r24
    3a30:	31 09       	sbc	r19, r1
    3a32:	c9 01       	movw	r24, r18
    3a34:	2f ef       	ldi	r18, 0xFF	; 255
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <decodeFrame+0x490>
    3a3a:	36 95       	lsr	r19
    3a3c:	27 95       	ror	r18
    3a3e:	8a 95       	dec	r24
    3a40:	e2 f7       	brpl	.-8      	; 0x3a3a <decodeFrame+0x48c>
    3a42:	ef 70       	andi	r30, 0x0F	; 15
    3a44:	8f ef       	ldi	r24, 0xFF	; 255
    3a46:	9f ef       	ldi	r25, 0xFF	; 255
    3a48:	02 c0       	rjmp	.+4      	; 0x3a4e <decodeFrame+0x4a0>
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	ea 95       	dec	r30
    3a50:	e2 f7       	brpl	.-8      	; 0x3a4a <decodeFrame+0x49c>
    3a52:	28 23       	and	r18, r24
    3a54:	39 23       	and	r19, r25
    3a56:	0f ef       	ldi	r16, 0xFF	; 255
    3a58:	8d 2d       	mov	r24, r13
    3a5a:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
    3a5e:	88 23       	and	r24, r24
    3a60:	29 f0       	breq	.+10     	; 0x3a6c <decodeFrame+0x4be>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
    3a62:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <LMIC+0x123>
    3a66:	83 60       	ori	r24, 0x03	; 3
    3a68:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <LMIC+0x123>
            oidx += 6;
    3a6c:	88 85       	ldd	r24, Y+8	; 0x08
    3a6e:	99 85       	ldd	r25, Y+9	; 0x09
    3a70:	06 96       	adiw	r24, 0x06	; 6
    3a72:	99 87       	std	Y+9, r25	; 0x09
    3a74:	88 87       	std	Y+8, r24	; 0x08
            continue;
    3a76:	c7 ce       	rjmp	.-626    	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
    3a78:	88 85       	ldd	r24, Y+8	; 0x08
    3a7a:	99 85       	ldd	r25, Y+9	; 0x09
    3a7c:	8d 59       	subi	r24, 0x9D	; 157
    3a7e:	9b 4f       	sbci	r25, 0xFB	; 251
    3a80:	0e 94 dd 16 	call	0x2dba	; 0x2dba <convFreq>
            oidx += 4;
    3a84:	a8 85       	ldd	r26, Y+8	; 0x08
    3a86:	b9 85       	ldd	r27, Y+9	; 0x09
    3a88:	14 96       	adiw	r26, 0x04	; 4
    3a8a:	b9 87       	std	Y+9, r27	; 0x09
    3a8c:	a8 87       	std	Y+8, r26	; 0x08
            u1_t flags = 0x80;
            if( freq != 0 ) {
    3a8e:	61 15       	cp	r22, r1
    3a90:	71 05       	cpc	r23, r1
    3a92:	81 05       	cpc	r24, r1
    3a94:	91 05       	cpc	r25, r1
    3a96:	51 f0       	breq	.+20     	; 0x3aac <decodeFrame+0x4fe>
                flags |= MCMD_PING_ANS_FQACK;
                LMIC.ping.freq = freq;
    3a98:	60 93 52 04 	sts	0x0452, r22	; 0x800452 <LMIC+0x139>
    3a9c:	70 93 53 04 	sts	0x0453, r23	; 0x800453 <LMIC+0x13a>
    3aa0:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <LMIC+0x13b>
    3aa4:	90 93 55 04 	sts	0x0455, r25	; 0x800455 <LMIC+0x13c>
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
            oidx += 4;
            u1_t flags = 0x80;
            if( freq != 0 ) {
                flags |= MCMD_PING_ANS_FQACK;
    3aa8:	81 e8       	ldi	r24, 0x81	; 129
    3aaa:	01 c0       	rjmp	.+2      	; 0x3aae <decodeFrame+0x500>
            continue;
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
            oidx += 4;
            u1_t flags = 0x80;
    3aac:	80 e8       	ldi	r24, 0x80	; 128
                LMIC.ping.freq = freq;
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
    3aae:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <LMIC+0x12c>
            continue;
    3ab2:	a9 ce       	rjmp	.-686    	; 0x3806 <decodeFrame+0x258>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
    3ab4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3ab8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3abc:	81 fd       	sbrc	r24, 1
    3abe:	6a c0       	rjmp	.+212    	; 0x3b94 <decodeFrame+0x5e6>
                LMIC.bcnChnl = opts[oidx+3];
    3ac0:	e8 85       	ldd	r30, Y+8	; 0x08
    3ac2:	f9 85       	ldd	r31, Y+9	; 0x09
    3ac4:	eb 59       	subi	r30, 0x9B	; 155
    3ac6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ac8:	20 81       	ld	r18, Z
    3aca:	20 93 9a 04 	sts	0x049A, r18	; 0x80049a <LMIC+0x181>
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
    3ace:	82 60       	ori	r24, 0x02	; 2
    3ad0:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    3ad4:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
    3ad8:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <LMIC+0x12b>
    3adc:	81 11       	cpse	r24, r1
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <decodeFrame+0x536>
    3ae0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    3ae4:	e8 85       	ldd	r30, Y+8	; 0x08
    3ae6:	f9 85       	ldd	r31, Y+9	; 0x09
    3ae8:	ed 59       	subi	r30, 0x9D	; 157
    3aea:	fb 4f       	sbci	r31, 0xFB	; 251
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
    3aec:	80 81       	ld	r24, Z
    3aee:	91 81       	ldd	r25, Z+1	; 0x01
    3af0:	be e1       	ldi	r27, 0x1E	; 30
    3af2:	b8 9f       	mul	r27, r24
    3af4:	b0 01       	movw	r22, r0
    3af6:	b9 9f       	mul	r27, r25
    3af8:	70 0d       	add	r23, r0
    3afa:	11 24       	eor	r1, r1
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	22 e1       	ldi	r18, 0x12	; 18
    3b02:	3a e7       	ldi	r19, 0x7A	; 122
    3b04:	40 e0       	ldi	r20, 0x00	; 0
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	0e 94 2e 33 	call	0x665c	; 0x665c <__umulsidi3>
    3b0c:	e8 ee       	ldi	r30, 0xE8	; 232
    3b0e:	ae 2e       	mov	r10, r30
    3b10:	f3 e0       	ldi	r31, 0x03	; 3
    3b12:	bf 2e       	mov	r11, r31
    3b14:	c1 2c       	mov	r12, r1
    3b16:	d1 2c       	mov	r13, r1
    3b18:	e1 2c       	mov	r14, r1
    3b1a:	f1 2c       	mov	r15, r1
    3b1c:	00 e0       	ldi	r16, 0x00	; 0
    3b1e:	10 e0       	ldi	r17, 0x00	; 0
    3b20:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__divdi3>
    3b24:	59 01       	movw	r10, r18
    3b26:	6a 01       	movw	r12, r20
    3b28:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <LMIC+0x4>
    3b2c:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <LMIC+0x5>
    3b30:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <LMIC+0x6>
    3b34:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <LMIC+0x7>
    3b38:	8a 0d       	add	r24, r10
    3b3a:	9b 1d       	adc	r25, r11
    3b3c:	ac 1d       	adc	r26, r12
    3b3e:	bd 1d       	adc	r27, r13
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
    3b40:	ac 01       	movw	r20, r24
    3b42:	bd 01       	movw	r22, r26
    3b44:	4b 52       	subi	r20, 0x2B	; 43
    3b46:	57 40       	sbci	r21, 0x07	; 7
    3b48:	6d 43       	sbci	r22, 0x3D	; 61
    3b4a:	71 09       	sbc	r23, r1
    3b4c:	40 93 a0 04 	sts	0x04A0, r20	; 0x8004a0 <LMIC+0x187>
    3b50:	50 93 a1 04 	sts	0x04A1, r21	; 0x8004a1 <LMIC+0x188>
    3b54:	60 93 a2 04 	sts	0x04A2, r22	; 0x8004a2 <LMIC+0x189>
    3b58:	70 93 a3 04 	sts	0x04A3, r23	; 0x8004a3 <LMIC+0x18a>


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
    if( ini ) {
        LMIC.drift = 0;
    3b5c:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <LMIC+0xaf>
    3b60:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <LMIC+0xae>
        LMIC.maxDriftDiff = 0;
    3b64:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <LMIC+0xb3>
    3b68:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <LMIC+0xb2>
        LMIC.missedBcns = 0;
    3b6c:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <LMIC+0x12a>
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    3b70:	ec e0       	ldi	r30, 0x0C	; 12
    3b72:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <LMIC+0x18d>
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    3b76:	f3 e1       	ldi	r31, 0x13	; 19
    3b78:	f0 93 9b 04 	sts	0x049B, r31	; 0x80049b <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    3b7c:	8b 5e       	subi	r24, 0xEB	; 235
    3b7e:	91 09       	sbc	r25, r1
    3b80:	a1 09       	sbc	r26, r1
    3b82:	b1 09       	sbc	r27, r1
    3b84:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <LMIC+0x183>
    3b88:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <LMIC+0x184>
    3b8c:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <LMIC+0x185>
    3b90:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <LMIC+0x186>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
    3b94:	28 85       	ldd	r18, Y+8	; 0x08
    3b96:	39 85       	ldd	r19, Y+9	; 0x09
    3b98:	2c 5f       	subi	r18, 0xFC	; 252
    3b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9c:	39 87       	std	Y+9, r19	; 0x09
    3b9e:	28 87       	std	Y+8, r18	; 0x08
            continue;
    3ba0:	32 ce       	rjmp	.-924    	; 0x3806 <decodeFrame+0x258>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
    3ba2:	ee 81       	ldd	r30, Y+6	; 0x06
    3ba4:	ff 81       	ldd	r31, Y+7	; 0x07
    3ba6:	ef 2b       	or	r30, r31
    3ba8:	31 f5       	brne	.+76     	; 0x3bf6 <decodeFrame+0x648>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
    3baa:	29 81       	ldd	r18, Y+1	; 0x01
    3bac:	3a 81       	ldd	r19, Y+2	; 0x02
    3bae:	2f 3f       	cpi	r18, 0xFF	; 255
    3bb0:	8f ef       	ldi	r24, 0xFF	; 255
    3bb2:	38 07       	cpc	r19, r24
    3bb4:	01 f1       	breq	.+64     	; 0x3bf6 <decodeFrame+0x648>
    3bb6:	51 01       	movw	r10, r2
    3bb8:	a8 18       	sub	r10, r8
    3bba:	b9 08       	sbc	r11, r9
    3bbc:	1a 14       	cp	r1, r10
    3bbe:	1b 04       	cpc	r1, r11
    3bc0:	d4 f4       	brge	.+52     	; 0x3bf6 <decodeFrame+0x648>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
    3bc2:	d4 01       	movw	r26, r8
    3bc4:	a6 5a       	subi	r26, 0xA6	; 166
    3bc6:	bb 4f       	sbci	r27, 0xFB	; 251
    3bc8:	6d 01       	movw	r12, r26
    3bca:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    3bce:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    3bd2:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    3bd6:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>
    3bda:	23 2b       	or	r18, r19
    3bdc:	19 f4       	brne	.+6      	; 0x3be4 <decodeFrame+0x636>
    3bde:	86 e0       	ldi	r24, 0x06	; 6
    3be0:	94 e0       	ldi	r25, 0x04	; 4
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <decodeFrame+0x63a>
    3be4:	86 e1       	ldi	r24, 0x16	; 22
    3be6:	94 e0       	ldi	r25, 0x04	; 4
    3be8:	ee 24       	eor	r14, r14
    3bea:	e3 94       	inc	r14
    3bec:	f1 2c       	mov	r15, r1
    3bee:	93 01       	movw	r18, r6
    3bf0:	82 01       	movw	r16, r4
    3bf2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <aes_cipher.part.2>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
    3bf6:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <LMIC+0x13d>
    3bfa:	88 23       	and	r24, r24
    3bfc:	59 f0       	breq	.+22     	; 0x3c14 <decodeFrame+0x666>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
    3bfe:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <LMIC+0x13e>
    3c02:	bb 81       	ldd	r27, Y+3	; 0x03
    3c04:	b5 ff       	sbrs	r27, 5
    3c06:	02 c0       	rjmp	.+4      	; 0x3c0c <decodeFrame+0x65e>
    3c08:	90 e8       	ldi	r25, 0x80	; 128
    3c0a:	01 c0       	rjmp	.+2      	; 0x3c0e <decodeFrame+0x660>
    3c0c:	90 e4       	ldi	r25, 0x40	; 64
    3c0e:	89 2b       	or	r24, r25
    3c10:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
    3c14:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <LMIC+0x13e>

    if( port < 0 ) {
    3c18:	e9 81       	ldd	r30, Y+1	; 0x01
    3c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c1c:	31 96       	adiw	r30, 0x01	; 1
    3c1e:	41 f4       	brne	.+16     	; 0x3c30 <decodeFrame+0x682>
        LMIC.txrxFlags |= TXRX_NOPORT;
    3c20:	80 62       	ori	r24, 0x20	; 32
    3c22:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
        LMIC.dataBeg = poff;
    3c26:	80 92 58 04 	sts	0x0458, r8	; 0x800458 <LMIC+0x13f>
        LMIC.dataLen = 0;
    3c2a:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    3c2e:	09 c0       	rjmp	.+18     	; 0x3c42 <decodeFrame+0x694>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
    3c30:	80 61       	ori	r24, 0x10	; 16
    3c32:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
        LMIC.dataBeg = poff;
    3c36:	80 92 58 04 	sts	0x0458, r8	; 0x800458 <LMIC+0x13f>
        LMIC.dataLen = pend-poff;
    3c3a:	82 2d       	mov	r24, r2
    3c3c:	88 19       	sub	r24, r8
    3c3e:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <LMIC+0x140>
    }
    return 1;
    3c42:	81 e0       	ldi	r24, 0x01	; 1
    3c44:	0d c0       	rjmp	.+26     	; 0x3c60 <decodeFrame+0x6b2>
            oidx += 5;

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
    3c46:	86 e8       	ldi	r24, 0x86	; 134
    3c48:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <LMIC+0x11e>
    3c4c:	4d ce       	rjmp	.-870    	; 0x38e8 <decodeFrame+0x33a>
            u4_t freq = convFreq(&opts[oidx+2]);
            oidx += 5;
            LMIC.dn2Ans = 0x80;   // answer pending
            if( validDR(dr) )
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
            if( freq != 0 )
    3c4e:	67 2b       	or	r22, r23
    3c50:	68 2b       	or	r22, r24
    3c52:	69 2b       	or	r22, r25
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <decodeFrame+0x6aa>
    3c56:	d7 cd       	rjmp	.-1106   	; 0x3806 <decodeFrame+0x258>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
    3c58:	31 e8       	ldi	r19, 0x81	; 129
    3c5a:	30 93 42 04 	sts	0x0442, r19	; 0x800442 <LMIC+0x129>
    3c5e:	d3 cd       	rjmp	.-1114   	; 0x3806 <decodeFrame+0x258>
        LMIC.txrxFlags |= TXRX_PORT;
        LMIC.dataBeg = poff;
        LMIC.dataLen = pend-poff;
    }
    return 1;
}
    3c60:	29 96       	adiw	r28, 0x09	; 9
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	df 91       	pop	r29
    3c6e:	cf 91       	pop	r28
    3c70:	1f 91       	pop	r17
    3c72:	0f 91       	pop	r16
    3c74:	ff 90       	pop	r15
    3c76:	ef 90       	pop	r14
    3c78:	df 90       	pop	r13
    3c7a:	cf 90       	pop	r12
    3c7c:	bf 90       	pop	r11
    3c7e:	af 90       	pop	r10
    3c80:	9f 90       	pop	r9
    3c82:	8f 90       	pop	r8
    3c84:	7f 90       	pop	r7
    3c86:	6f 90       	pop	r6
    3c88:	5f 90       	pop	r5
    3c8a:	4f 90       	pop	r4
    3c8c:	3f 90       	pop	r3
    3c8e:	2f 90       	pop	r2
    3c90:	08 95       	ret

00003c92 <LMIC_disableChannel>:
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    return 1;
}

void LMIC_disableChannel (u1_t channel) {
    3c92:	48 2f       	mov	r20, r24
    LMIC.channelFreq[channel] = 0;
    3c94:	28 2f       	mov	r18, r24
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	f9 01       	movw	r30, r18
    3c9a:	ee 0f       	add	r30, r30
    3c9c:	ff 1f       	adc	r31, r31
    3c9e:	ee 0f       	add	r30, r30
    3ca0:	ff 1f       	adc	r31, r31
    3ca2:	e7 5e       	subi	r30, 0xE7	; 231
    3ca4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ca6:	13 ae       	std	Z+59, r1	; 0x3b
    3ca8:	14 ae       	std	Z+60, r1	; 0x3c
    3caa:	15 ae       	std	Z+61, r1	; 0x3d
    3cac:	16 ae       	std	Z+62, r1	; 0x3e
    LMIC.channelDrMap[channel] = 0;
    3cae:	22 0f       	add	r18, r18
    3cb0:	33 1f       	adc	r19, r19
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	ec 56       	subi	r30, 0x6C	; 108
    3cb6:	fc 4f       	sbci	r31, 0xFC	; 252
    3cb8:	11 82       	std	Z+1, r1	; 0x01
    3cba:	10 82       	st	Z, r1
    LMIC.channelMap &= ~(1<<channel);
    3cbc:	e4 eb       	ldi	r30, 0xB4	; 180
    3cbe:	f3 e0       	ldi	r31, 0x03	; 3
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <LMIC_disableChannel+0x38>
    3cc6:	88 0f       	add	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	4a 95       	dec	r20
    3ccc:	e2 f7       	brpl	.-8      	; 0x3cc6 <LMIC_disableChannel+0x34>
    3cce:	80 95       	com	r24
    3cd0:	90 95       	com	r25
    3cd2:	20 81       	ld	r18, Z
    3cd4:	31 81       	ldd	r19, Z+1	; 0x01
    3cd6:	82 23       	and	r24, r18
    3cd8:	93 23       	and	r25, r19
    3cda:	91 83       	std	Z+1, r25	; 0x01
    3cdc:	80 83       	st	Z, r24
    3cde:	08 95       	ret

00003ce0 <LMIC_enableTracking>:
    os_radio(RADIO_RXON);
}


bit_t LMIC_enableTracking (u1_t tryBcnInfo) {
    if( (LMIC.opmode & (OP_SCAN|OP_TRACK|OP_SHUTDOWN)) != 0 )
    3ce0:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3ce4:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3ce8:	23 74       	andi	r18, 0x43	; 67
    3cea:	33 27       	eor	r19, r19
    3cec:	23 2b       	or	r18, r19
    3cee:	39 f4       	brne	.+14     	; 0x3cfe <LMIC_enableTracking+0x1e>
        return 0;  // already in progress or failed to enable
    // If BCN info requested from NWK then app has to take are
    // of sending data up so that MCMD_BCNI_REQ can be attached.
    if( (LMIC.bcninfoTries = tryBcnInfo) == 0 )
    3cf0:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <LMIC+0x12b>
    3cf4:	81 11       	cpse	r24, r1
    3cf6:	05 c0       	rjmp	.+10     	; 0x3d02 <LMIC_enableTracking+0x22>
        startScan();
    3cf8:	0e 94 34 15 	call	0x2a68	; 0x2a68 <startScan>
    3cfc:	02 c0       	rjmp	.+4      	; 0x3d02 <LMIC_enableTracking+0x22>
}


bit_t LMIC_enableTracking (u1_t tryBcnInfo) {
    if( (LMIC.opmode & (OP_SCAN|OP_TRACK|OP_SHUTDOWN)) != 0 )
        return 0;  // already in progress or failed to enable
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	08 95       	ret
    // If BCN info requested from NWK then app has to take are
    // of sending data up so that MCMD_BCNI_REQ can be attached.
    if( (LMIC.bcninfoTries = tryBcnInfo) == 0 )
    3d02:	81 e0       	ldi	r24, 0x01	; 1
        startScan();
    return 1;  // enabled
}
    3d04:	08 95       	ret

00003d06 <LMIC_setPingable>:
}


void LMIC_setPingable (u1_t intvExp) {
    // Change setting
    LMIC.ping.intvExp = (intvExp & 0x7);
    3d06:	87 70       	andi	r24, 0x07	; 7
    3d08:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <LMIC+0x12e>
    LMIC.opmode |= OP_PINGABLE;
    3d0c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3d10:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3d14:	9c 01       	movw	r18, r24
    3d16:	34 60       	ori	r19, 0x04	; 4
    3d18:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <LMIC+0xa8>
    3d1c:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <LMIC+0xa7>
    // App may call LMIC_enableTracking() explicitely before
    // Otherwise tracking is implicitly enabled here
    if( (LMIC.opmode & (OP_TRACK|OP_SCAN)) == 0  &&  LMIC.bcninfoTries == 0 )
    3d20:	83 70       	andi	r24, 0x03	; 3
    3d22:	99 27       	eor	r25, r25
    3d24:	89 2b       	or	r24, r25
    3d26:	31 f4       	brne	.+12     	; 0x3d34 <LMIC_setPingable+0x2e>
    3d28:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <LMIC+0x12b>
    3d2c:	81 11       	cpse	r24, r1
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <LMIC_setPingable+0x2e>
        LMIC_enableTracking(0);
    3d30:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <LMIC_enableTracking>
    3d34:	08 95       	ret

00003d36 <LMIC_startJoining>:
static void startJoining (xref2osjob_t osjob) {
    reportEvent(EV_JOINING);
}

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
    3d36:	cf 92       	push	r12
    3d38:	df 92       	push	r13
    3d3a:	ef 92       	push	r14
    3d3c:	ff 92       	push	r15
    if( LMIC.devaddr == 0 ) {
    3d3e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <LMIC+0x10d>
    3d42:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <LMIC+0x10e>
    3d46:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <LMIC+0x10f>
    3d4a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <LMIC+0x110>
    3d4e:	89 2b       	or	r24, r25
    3d50:	8a 2b       	or	r24, r26
    3d52:	8b 2b       	or	r24, r27
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <LMIC_startJoining+0x22>
    3d56:	5d c0       	rjmp	.+186    	; 0x3e12 <LMIC_startJoining+0xdc>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
    3d58:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3d5c:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3d60:	80 79       	andi	r24, 0x90	; 144
    3d62:	99 27       	eor	r25, r25
    3d64:	89 2b       	or	r24, r25
    3d66:	11 f0       	breq	.+4      	; 0x3d6c <LMIC_startJoining+0x36>
    3d68:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
    3d6c:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <LMIC+0x9e>
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
    3d70:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3d74:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3d78:	8e 7d       	andi	r24, 0xDE	; 222
    3d7a:	97 7e       	andi	r25, 0xE7	; 231
    3d7c:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    3d80:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
    3d84:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <LMIC+0xb5>
    3d88:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <LMIC+0x13d>
    3d8c:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <LMIC+0xad>

static void initJoinLoop (void) {
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
    3d90:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    3d94:	66 e0       	ldi	r22, 0x06	; 6
    3d96:	0e 94 4c 32 	call	0x6498	; 0x6498 <__udivmodqi4>
    3d9a:	90 93 b6 03 	sts	0x03B6, r25	; 0x8003b6 <LMIC+0x9d>
#endif
    LMIC.adrTxPow = 14;
    3d9e:	8e e0       	ldi	r24, 0x0E	; 14
    3da0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <LMIC+0xaa>
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
    3da4:	83 e0       	ldi	r24, 0x03	; 3
    3da6:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <LMIC+0xab>
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
#endif
    LMIC.adrTxPow = 14;
    setDrJoin(DRCHG_SET, DR_SF9);
    initDefaultChannels(1);
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
    3db0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3db4:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3db8:	93 fd       	sbrc	r25, 3
    3dba:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
    3dbe:	c0 90 38 03 	lds	r12, 0x0338	; 0x800338 <LMIC+0x1f>
    3dc2:	d0 90 39 03 	lds	r13, 0x0339	; 0x800339 <LMIC+0x20>
    3dc6:	e0 90 3a 03 	lds	r14, 0x033A	; 0x80033a <LMIC+0x21>
    3dca:	f0 90 3b 03 	lds	r15, 0x033B	; 0x80033b <LMIC+0x22>
    3dce:	88 e0       	ldi	r24, 0x08	; 8
    3dd0:	0e 94 16 14 	call	0x282c	; 0x282c <rndDelay>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	8c 0d       	add	r24, r12
    3dda:	9d 1d       	adc	r25, r13
    3ddc:	ae 1d       	adc	r26, r14
    3dde:	bf 1d       	adc	r27, r15
    3de0:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <LMIC>
    3de4:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <LMIC+0x1>
    3de8:	a0 93 1b 03 	sts	0x031B, r26	; 0x80031b <LMIC+0x2>
    3dec:	b0 93 1c 03 	sts	0x031C, r27	; 0x80031c <LMIC+0x3>
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
        initJoinLoop();
        LMIC.opmode |= OP_JOINING;
    3df0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3df4:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3df8:	84 60       	ori	r24, 0x04	; 4
    3dfa:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    3dfe:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
    3e02:	64 e0       	ldi	r22, 0x04	; 4
    3e04:	78 e2       	ldi	r23, 0x28	; 40
    3e06:	8c e2       	ldi	r24, 0x2C	; 44
    3e08:	93 e0       	ldi	r25, 0x03	; 3
    3e0a:	0e 94 b6 0c 	call	0x196c	; 0x196c <os_setCallback>
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	01 c0       	rjmp	.+2      	; 0x3e14 <LMIC_startJoining+0xde>
        return 1;
    }
    return 0; // already joined
    3e12:	80 e0       	ldi	r24, 0x00	; 0
}
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	df 90       	pop	r13
    3e1a:	cf 90       	pop	r12
    3e1c:	08 95       	ret

00003e1e <engineUpdate>:
    os_radio(RADIO_RX);
}


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
    3e1e:	2f 92       	push	r2
    3e20:	3f 92       	push	r3
    3e22:	4f 92       	push	r4
    3e24:	5f 92       	push	r5
    3e26:	6f 92       	push	r6
    3e28:	7f 92       	push	r7
    3e2a:	8f 92       	push	r8
    3e2c:	9f 92       	push	r9
    3e2e:	af 92       	push	r10
    3e30:	bf 92       	push	r11
    3e32:	cf 92       	push	r12
    3e34:	df 92       	push	r13
    3e36:	ef 92       	push	r14
    3e38:	ff 92       	push	r15
    3e3a:	0f 93       	push	r16
    3e3c:	1f 93       	push	r17
    3e3e:	cf 93       	push	r28
    3e40:	df 93       	push	r29
    3e42:	cd b7       	in	r28, 0x3d	; 61
    3e44:	de b7       	in	r29, 0x3e	; 62
    3e46:	62 97       	sbiw	r28, 0x12	; 18
    3e48:	0f b6       	in	r0, 0x3f	; 63
    3e4a:	f8 94       	cli
    3e4c:	de bf       	out	0x3e, r29	; 62
    3e4e:	0f be       	out	0x3f, r0	; 63
    3e50:	cd bf       	out	0x3d, r28	; 61
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
    3e52:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3e56:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3e5a:	9c 01       	movw	r18, r24
    3e5c:	21 7c       	andi	r18, 0xC1	; 193
    3e5e:	33 27       	eor	r19, r19
    3e60:	23 2b       	or	r18, r19
    3e62:	09 f0       	breq	.+2      	; 0x3e66 <engineUpdate+0x48>
    3e64:	7b c5       	rjmp	.+2806   	; 0x495c <engineUpdate+0xb3e>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
    3e66:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    3e6a:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    3e6e:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    3e72:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>
    3e76:	45 2b       	or	r20, r21
    3e78:	46 2b       	or	r20, r22
    3e7a:	47 2b       	or	r20, r23
    3e7c:	e1 f4       	brne	.+56     	; 0x3eb6 <engineUpdate+0x98>
    3e7e:	82 fd       	sbrc	r24, 2
    3e80:	1a c0       	rjmp	.+52     	; 0x3eb6 <engineUpdate+0x98>
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    3e82:	62 96       	adiw	r28, 0x12	; 18
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	ff 90       	pop	r15
    3e98:	ef 90       	pop	r14
    3e9a:	df 90       	pop	r13
    3e9c:	cf 90       	pop	r12
    3e9e:	bf 90       	pop	r11
    3ea0:	af 90       	pop	r10
    3ea2:	9f 90       	pop	r9
    3ea4:	8f 90       	pop	r8
    3ea6:	7f 90       	pop	r7
    3ea8:	6f 90       	pop	r6
    3eaa:	5f 90       	pop	r5
    3eac:	4f 90       	pop	r4
    3eae:	3f 90       	pop	r3
    3eb0:	2f 90       	pop	r2
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
        LMIC_startJoining();
    3eb2:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <LMIC_startJoining>
        return;
    }

    ostime_t now    = os_getTime();
    3eb6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    3eba:	2b 01       	movw	r4, r22
    3ebc:	3c 01       	movw	r6, r24
    ostime_t rxtime = 0;
    ostime_t txbeg  = 0;

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
    3ebe:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3ec2:	81 ff       	sbrs	r24, 1
    3ec4:	2b c0       	rjmp	.+86     	; 0x3f1c <engineUpdate+0xfe>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
    3ec6:	40 91 9c 04 	lds	r20, 0x049C	; 0x80049c <LMIC+0x183>
    3eca:	50 91 9d 04 	lds	r21, 0x049D	; 0x80049d <LMIC+0x184>
    3ece:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <LMIC+0x185>
    3ed2:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <LMIC+0x186>
    3ed6:	d3 01       	movw	r26, r6
    3ed8:	c2 01       	movw	r24, r4
    3eda:	ce 96       	adiw	r24, 0x3e	; 62
    3edc:	a1 1d       	adc	r26, r1
    3ede:	b1 1d       	adc	r27, r1
    3ee0:	84 1b       	sub	r24, r20
    3ee2:	95 0b       	sbc	r25, r21
    3ee4:	a6 0b       	sbc	r26, r22
    3ee6:	b7 0b       	sbc	r27, r23
    3ee8:	18 16       	cp	r1, r24
    3eea:	19 06       	cpc	r1, r25
    3eec:	1a 06       	cpc	r1, r26
    3eee:	1b 06       	cpc	r1, r27
    3ef0:	14 f4       	brge	.+4      	; 0x3ef6 <engineUpdate+0xd8>
    3ef2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
    3ef6:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <LMIC+0x183>
    3efa:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <LMIC+0x184>
    3efe:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <LMIC+0x185>
    3f02:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <LMIC+0x186>
    3f06:	8c 01       	movw	r16, r24
    3f08:	9d 01       	movw	r18, r26
    3f0a:	0e 53       	subi	r16, 0x3E	; 62
    3f0c:	11 09       	sbc	r17, r1
    3f0e:	21 09       	sbc	r18, r1
    3f10:	31 09       	sbc	r19, r1
    3f12:	09 83       	std	Y+1, r16	; 0x01
    3f14:	1a 83       	std	Y+2, r17	; 0x02
    3f16:	2b 83       	std	Y+3, r18	; 0x03
    3f18:	3c 83       	std	Y+4, r19	; 0x04
    3f1a:	04 c0       	rjmp	.+8      	; 0x3f24 <engineUpdate+0x106>
        LMIC_startJoining();
        return;
    }

    ostime_t now    = os_getTime();
    ostime_t rxtime = 0;
    3f1c:	19 82       	std	Y+1, r1	; 0x01
    3f1e:	1a 82       	std	Y+2, r1	; 0x02
    3f20:	1b 82       	std	Y+3, r1	; 0x03
    3f22:	1c 82       	std	Y+4, r1	; 0x04
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
    3f24:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    3f28:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    3f2c:	3a 8b       	std	Y+18, r19	; 0x12
    3f2e:	29 8b       	std	Y+17, r18	; 0x11
    3f30:	c9 01       	movw	r24, r18
    3f32:	8c 73       	andi	r24, 0x3C	; 60
    3f34:	99 27       	eor	r25, r25
    3f36:	89 2b       	or	r24, r25
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <engineUpdate+0x11e>
    3f3a:	ce c3       	rjmp	.+1948   	; 0x46d8 <engineUpdate+0x8ba>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
    3f3c:	19 01       	movw	r2, r18
    3f3e:	34 e2       	ldi	r19, 0x24	; 36
    3f40:	23 22       	and	r2, r19
    3f42:	33 24       	eor	r3, r3
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
    3f44:	49 89       	ldd	r20, Y+17	; 0x11
    3f46:	5a 89       	ldd	r21, Y+18	; 0x12
    3f48:	53 ff       	sbrs	r21, 3
    3f4a:	ba c0       	rjmp	.+372    	; 0x40c0 <engineUpdate+0x2a2>
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    3f4c:	60 91 b4 03 	lds	r22, 0x03B4	; 0x8003b4 <LMIC+0x9b>
    3f50:	70 91 b5 03 	lds	r23, 0x03B5	; 0x8003b5 <LMIC+0x9c>
    3f54:	7a 87       	std	Y+10, r23	; 0x0a
    3f56:	69 87       	std	Y+9, r22	; 0x09
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3f58:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <LMIC+0xab>
    3f5c:	8f 70       	andi	r24, 0x0F	; 15
    3f5e:	21 e0       	ldi	r18, 0x01	; 1
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	d9 01       	movw	r26, r18
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <engineUpdate+0x14c>
    3f66:	aa 0f       	add	r26, r26
    3f68:	bb 1f       	adc	r27, r27
    3f6a:	8a 95       	dec	r24
    3f6c:	e2 f7       	brpl	.-8      	; 0x3f66 <engineUpdate+0x148>
    3f6e:	bc 87       	std	Y+12, r27	; 0x0c
    3f70:	ab 87       	std	Y+11, r26	; 0x0b
    3f72:	af e0       	ldi	r26, 0x0F	; 15
}

static ostime_t nextTx (ostime_t now) {
    u1_t bmap=0xF;
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
    3f74:	93 01       	movw	r18, r6
    3f76:	82 01       	movw	r16, r4
    3f78:	00 5c       	subi	r16, 0xC0	; 192
    3f7a:	1c 4d       	sbci	r17, 0xDC	; 220
    3f7c:	21 4f       	sbci	r18, 0xF1	; 241
    3f7e:	3c 4b       	sbci	r19, 0xBC	; 188
    3f80:	0d 87       	std	Y+13, r16	; 0x0d
    3f82:	1e 87       	std	Y+14, r17	; 0x0e
    3f84:	2f 87       	std	Y+15, r18	; 0x0f
    3f86:	38 8b       	std	Y+16, r19	; 0x10
    3f88:	cd 84       	ldd	r12, Y+13	; 0x0d
    3f8a:	de 84       	ldd	r13, Y+14	; 0x0e
    3f8c:	ef 84       	ldd	r14, Y+15	; 0x0f
    3f8e:	f8 88       	ldd	r15, Y+16	; 0x10
    3f90:	e9 e1       	ldi	r30, 0x19	; 25
    3f92:	f3 e0       	ldi	r31, 0x03	; 3
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
        u1_t band=0;
    3f98:	b0 e0       	ldi	r27, 0x00	; 0
        for( u1_t bi=0; bi<4; bi++ ) {
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
    3f9a:	2a 2f       	mov	r18, r26
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	a9 01       	movw	r20, r18
    3fa0:	08 2e       	mov	r0, r24
    3fa2:	02 c0       	rjmp	.+4      	; 0x3fa8 <engineUpdate+0x18a>
    3fa4:	55 95       	asr	r21
    3fa6:	47 95       	ror	r20
    3fa8:	0a 94       	dec	r0
    3faa:	e2 f7       	brpl	.-8      	; 0x3fa4 <engineUpdate+0x186>
    3fac:	40 ff       	sbrs	r20, 0
    3fae:	12 c0       	rjmp	.+36     	; 0x3fd4 <engineUpdate+0x1b6>
    3fb0:	47 8d       	ldd	r20, Z+31	; 0x1f
    3fb2:	50 a1       	ldd	r21, Z+32	; 0x20
    3fb4:	61 a1       	ldd	r22, Z+33	; 0x21
    3fb6:	72 a1       	ldd	r23, Z+34	; 0x22
    3fb8:	46 01       	movw	r8, r12
    3fba:	57 01       	movw	r10, r14
    3fbc:	84 1a       	sub	r8, r20
    3fbe:	95 0a       	sbc	r9, r21
    3fc0:	a6 0a       	sbc	r10, r22
    3fc2:	b7 0a       	sbc	r11, r23
    3fc4:	18 14       	cp	r1, r8
    3fc6:	19 04       	cpc	r1, r9
    3fc8:	1a 04       	cpc	r1, r10
    3fca:	1b 04       	cpc	r1, r11
    3fcc:	1c f4       	brge	.+6      	; 0x3fd4 <engineUpdate+0x1b6>
    3fce:	b8 2f       	mov	r27, r24
                mintime = LMIC.bands[band = bi].avail;
    3fd0:	6a 01       	movw	r12, r20
    3fd2:	7b 01       	movw	r14, r22
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	38 96       	adiw	r30, 0x08	; 8
static ostime_t nextTx (ostime_t now) {
    u1_t bmap=0xF;
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
        u1_t band=0;
        for( u1_t bi=0; bi<4; bi++ ) {
    3fd8:	84 30       	cpi	r24, 0x04	; 4
    3fda:	91 05       	cpc	r25, r1
    3fdc:	01 f7       	brne	.-64     	; 0x3f9e <engineUpdate+0x180>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
    3fde:	2b 2f       	mov	r18, r27
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	3e 83       	std	Y+6, r19	; 0x06
    3fe4:	2d 83       	std	Y+5, r18	; 0x05
    3fe6:	89 01       	movw	r16, r18
    3fe8:	63 e0       	ldi	r22, 0x03	; 3
    3fea:	00 0f       	add	r16, r16
    3fec:	11 1f       	adc	r17, r17
    3fee:	6a 95       	dec	r22
    3ff0:	e1 f7       	brne	.-8      	; 0x3fea <engineUpdate+0x1cc>
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	e7 5e       	subi	r30, 0xE7	; 231
    3ff6:	fc 4f       	sbci	r31, 0xFC	; 252
    3ff8:	26 8d       	ldd	r18, Z+30	; 0x1e
    3ffa:	90 e1       	ldi	r25, 0x10	; 16
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3ffc:	8b 2e       	mov	r8, r27
    3ffe:	91 2c       	mov	r9, r1
    4000:	a1 2c       	mov	r10, r1
    4002:	b1 2c       	mov	r11, r1
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
    4004:	81 e0       	ldi	r24, 0x01	; 1
    4006:	82 0f       	add	r24, r18
    4008:	80 31       	cpi	r24, 0x10	; 16
    400a:	10 f0       	brcs	.+4      	; 0x4010 <engineUpdate+0x1f2>
                chnl -=  MAX_CHANNELS;
    400c:	81 ef       	ldi	r24, 0xF1	; 241
    400e:	82 0f       	add	r24, r18
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    4010:	28 2f       	mov	r18, r24
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	41 e0       	ldi	r20, 0x01	; 1
    4016:	50 e0       	ldi	r21, 0x00	; 0
    4018:	08 2e       	mov	r0, r24
    401a:	02 c0       	rjmp	.+4      	; 0x4020 <engineUpdate+0x202>
    401c:	44 0f       	add	r20, r20
    401e:	55 1f       	adc	r21, r21
    4020:	0a 94       	dec	r0
    4022:	e2 f7       	brpl	.-8      	; 0x401c <engineUpdate+0x1fe>
    4024:	69 85       	ldd	r22, Y+9	; 0x09
    4026:	7a 85       	ldd	r23, Y+10	; 0x0a
    4028:	46 23       	and	r20, r22
    402a:	57 23       	and	r21, r23
    402c:	45 2b       	or	r20, r21
    402e:	41 f1       	breq	.+80     	; 0x4080 <engineUpdate+0x262>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    4030:	f9 01       	movw	r30, r18
    4032:	ee 0f       	add	r30, r30
    4034:	ff 1f       	adc	r31, r31
    4036:	ec 56       	subi	r30, 0x6C	; 108
    4038:	fc 4f       	sbci	r31, 0xFC	; 252
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    403a:	40 81       	ld	r20, Z
    403c:	51 81       	ldd	r21, Z+1	; 0x01
    403e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4040:	7c 85       	ldd	r23, Y+12	; 0x0c
    4042:	46 23       	and	r20, r22
    4044:	57 23       	and	r21, r23
    4046:	45 2b       	or	r20, r21
    4048:	d9 f0       	breq	.+54     	; 0x4080 <engineUpdate+0x262>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
    404a:	22 0f       	add	r18, r18
    404c:	33 1f       	adc	r19, r19
    404e:	22 0f       	add	r18, r18
    4050:	33 1f       	adc	r19, r19
    4052:	f9 01       	movw	r30, r18
    4054:	e7 5e       	subi	r30, 0xE7	; 231
    4056:	fc 4f       	sbci	r31, 0xFC	; 252
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    4058:	43 ad       	ldd	r20, Z+59	; 0x3b
    405a:	54 ad       	ldd	r21, Z+60	; 0x3c
    405c:	65 ad       	ldd	r22, Z+61	; 0x3d
    405e:	76 ad       	ldd	r23, Z+62	; 0x3e
    4060:	43 70       	andi	r20, 0x03	; 3
    4062:	55 27       	eor	r21, r21
    4064:	66 27       	eor	r22, r22
    4066:	77 27       	eor	r23, r23
    4068:	84 16       	cp	r8, r20
    406a:	95 06       	cpc	r9, r21
    406c:	a6 06       	cpc	r10, r22
    406e:	b7 06       	cpc	r11, r23
    4070:	39 f4       	brne	.+14     	; 0x4080 <engineUpdate+0x262>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
    4072:	f8 01       	movw	r30, r16
    4074:	e7 5e       	subi	r30, 0xE7	; 231
    4076:	fc 4f       	sbci	r31, 0xFC	; 252
    4078:	86 8f       	std	Z+30, r24	; 0x1e
    407a:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <LMIC+0x9d>
    407e:	10 c0       	rjmp	.+32     	; 0x40a0 <engineUpdate+0x282>
    4080:	91 50       	subi	r25, 0x01	; 1
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
    4082:	11 f0       	breq	.+4      	; 0x4088 <engineUpdate+0x26a>
    4084:	28 2f       	mov	r18, r24
    4086:	be cf       	rjmp	.-132    	; 0x4004 <engineUpdate+0x1e6>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
                return mintime;
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0d 80       	ldd	r0, Y+5	; 0x05
    408e:	02 c0       	rjmp	.+4      	; 0x4094 <engineUpdate+0x276>
    4090:	88 0f       	add	r24, r24
    4092:	99 1f       	adc	r25, r25
    4094:	0a 94       	dec	r0
    4096:	e2 f7       	brpl	.-8      	; 0x4090 <engineUpdate+0x272>
    4098:	80 95       	com	r24
    409a:	a8 23       	and	r26, r24
    409c:	09 f0       	breq	.+2      	; 0x40a0 <engineUpdate+0x282>
    409e:	74 cf       	rjmp	.-280    	; 0x3f88 <engineUpdate+0x16a>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
            txbeg = LMIC.txend = nextTx(now);
    40a0:	c0 92 19 03 	sts	0x0319, r12	; 0x800319 <LMIC>
    40a4:	d0 92 1a 03 	sts	0x031A, r13	; 0x80031a <LMIC+0x1>
    40a8:	e0 92 1b 03 	sts	0x031B, r14	; 0x80031b <LMIC+0x2>
    40ac:	f0 92 1c 03 	sts	0x031C, r15	; 0x80031c <LMIC+0x3>
            LMIC.opmode &= ~OP_NEXTCHNL;
    40b0:	89 89       	ldd	r24, Y+17	; 0x11
    40b2:	9a 89       	ldd	r25, Y+18	; 0x12
    40b4:	97 7f       	andi	r25, 0xF7	; 247
    40b6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    40ba:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    40be:	08 c0       	rjmp	.+16     	; 0x40d0 <engineUpdate+0x2b2>
        } else {
            txbeg = LMIC.txend;
    40c0:	c0 90 19 03 	lds	r12, 0x0319	; 0x800319 <LMIC>
    40c4:	d0 90 1a 03 	lds	r13, 0x031A	; 0x80031a <LMIC+0x1>
    40c8:	e0 90 1b 03 	lds	r14, 0x031B	; 0x80031b <LMIC+0x2>
    40cc:	f0 90 1c 03 	lds	r15, 0x031C	; 0x80031c <LMIC+0x3>
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
    40d0:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <LMIC+0x9e>
    40d4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    40d8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    40dc:	21 11       	cpse	r18, r1
    40de:	02 c0       	rjmp	.+4      	; 0x40e4 <engineUpdate+0x2c6>
    40e0:	90 ff       	sbrs	r25, 0
    40e2:	12 c0       	rjmp	.+36     	; 0x4108 <engineUpdate+0x2ea>
    40e4:	40 91 b8 03 	lds	r20, 0x03B8	; 0x8003b8 <LMIC+0x9f>
    40e8:	50 91 b9 03 	lds	r21, 0x03B9	; 0x8003b9 <LMIC+0xa0>
    40ec:	60 91 ba 03 	lds	r22, 0x03BA	; 0x8003ba <LMIC+0xa1>
    40f0:	70 91 bb 03 	lds	r23, 0x03BB	; 0x8003bb <LMIC+0xa2>
    40f4:	97 01       	movw	r18, r14
    40f6:	86 01       	movw	r16, r12
    40f8:	04 1b       	sub	r16, r20
    40fa:	15 0b       	sbc	r17, r21
    40fc:	26 0b       	sbc	r18, r22
    40fe:	37 0b       	sbc	r19, r23
    4100:	37 ff       	sbrs	r19, 7
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <engineUpdate+0x2ea>
            txbeg = LMIC.globalDutyAvail;
    4104:	6a 01       	movw	r12, r20
    4106:	7b 01       	movw	r14, r22
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
    4108:	9c 01       	movw	r18, r24
    410a:	22 70       	andi	r18, 0x02	; 2
    410c:	33 27       	eor	r19, r19
    410e:	81 ff       	sbrs	r24, 1
    4110:	27 c0       	rjmp	.+78     	; 0x4160 <engineUpdate+0x342>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
    4112:	21 14       	cp	r2, r1
    4114:	31 04       	cpc	r3, r1
    4116:	29 f4       	brne	.+10     	; 0x4122 <engineUpdate+0x304>
    4118:	4c e6       	ldi	r20, 0x6C	; 108
    411a:	5c ed       	ldi	r21, 0xDC	; 220
    411c:	62 e0       	ldi	r22, 0x02	; 2
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	04 c0       	rjmp	.+8      	; 0x412a <engineUpdate+0x30c>
    4122:	42 ea       	ldi	r20, 0xA2	; 162
    4124:	5a e4       	ldi	r21, 0x4A	; 74
    4126:	64 e0       	ldi	r22, 0x04	; 4
    4128:	70 e0       	ldi	r23, 0x00	; 0
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
            txbeg = LMIC.globalDutyAvail;
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
    412a:	4c 0d       	add	r20, r12
    412c:	5d 1d       	adc	r21, r13
    412e:	6e 1d       	adc	r22, r14
    4130:	7f 1d       	adc	r23, r15
    4132:	89 80       	ldd	r8, Y+1	; 0x01
    4134:	9a 80       	ldd	r9, Y+2	; 0x02
    4136:	ab 80       	ldd	r10, Y+3	; 0x03
    4138:	bc 80       	ldd	r11, Y+4	; 0x04
    413a:	48 19       	sub	r20, r8
    413c:	59 09       	sbc	r21, r9
    413e:	6a 09       	sbc	r22, r10
    4140:	7b 09       	sbc	r23, r11
    4142:	14 16       	cp	r1, r20
    4144:	15 06       	cpc	r1, r21
    4146:	16 06       	cpc	r1, r22
    4148:	17 06       	cpc	r1, r23
    414a:	54 f4       	brge	.+20     	; 0x4160 <engineUpdate+0x342>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
    414c:	40 e1       	ldi	r20, 0x10	; 16
    414e:	c5 01       	movw	r24, r10
    4150:	b4 01       	movw	r22, r8
    4152:	66 53       	subi	r22, 0x36	; 54
    4154:	7d 4f       	sbci	r23, 0xFD	; 253
    4156:	8e 4f       	sbci	r24, 0xFE	; 254
    4158:	9f 4f       	sbci	r25, 0xFF	; 255
    415a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <txDelay>
    415e:	bf c2       	rjmp	.+1406   	; 0x46de <engineUpdate+0x8c0>
            txbeg = 0;
            goto checkrx;
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
    4160:	b3 01       	movw	r22, r6
    4162:	a2 01       	movw	r20, r4
    4164:	42 5c       	subi	r20, 0xC2	; 194
    4166:	5f 4f       	sbci	r21, 0xFF	; 255
    4168:	6f 4f       	sbci	r22, 0xFF	; 255
    416a:	7f 4f       	sbci	r23, 0xFF	; 255
    416c:	46 01       	movw	r8, r12
    416e:	57 01       	movw	r10, r14
    4170:	84 1a       	sub	r8, r20
    4172:	95 0a       	sbc	r9, r21
    4174:	a6 0a       	sbc	r10, r22
    4176:	b7 0a       	sbc	r11, r23
    4178:	b7 fe       	sbrs	r11, 7
    417a:	a1 c2       	rjmp	.+1346   	; 0x46be <engineUpdate+0x8a0>
            // We could send right now!
        txbeg = now;
            dr_t txdr = (dr_t)LMIC.datarate;
    417c:	90 90 c4 03 	lds	r9, 0x03C4	; 0x8003c4 <LMIC+0xab>
            if( jacc ) {
    4180:	23 28       	or	r2, r3
    4182:	09 f4       	brne	.+2      	; 0x4186 <engineUpdate+0x368>
    4184:	44 c0       	rjmp	.+136    	; 0x420e <engineUpdate+0x3f0>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
    4186:	85 ff       	sbrs	r24, 5
    4188:	0f c0       	rjmp	.+30     	; 0x41a8 <engineUpdate+0x38a>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
    418a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <LMIC+0xad>
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    418e:	81 50       	subi	r24, 0x01	; 1
    4190:	48 f0       	brcs	.+18     	; 0x41a4 <engineUpdate+0x386>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    4192:	e9 2d       	mov	r30, r9
    4194:	f0 e0       	ldi	r31, 0x00	; 0
    4196:	e5 53       	subi	r30, 0x35	; 53
    4198:	fd 4f       	sbci	r31, 0xFD	; 253
    419a:	90 81       	ld	r25, Z
    419c:	9f 3f       	cpi	r25, 0xFF	; 255
    419e:	b9 f3       	breq	.-18     	; 0x418e <engineUpdate+0x370>
    41a0:	9a 94       	dec	r9
    41a2:	f5 cf       	rjmp	.-22     	; 0x418e <engineUpdate+0x370>
                    ftype = HDR_FTYPE_REJOIN;
    41a4:	80 ec       	ldi	r24, 0xC0	; 192
    41a6:	01 c0       	rjmp	.+2      	; 0x41aa <engineUpdate+0x38c>
                } else {
                    ftype = HDR_FTYPE_JREQ;
    41a8:	80 e0       	ldi	r24, 0x00	; 0

static void buildJoinRequest (u1_t ftype) {
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
    d[OFF_JR_HDR] = ftype;
    41aa:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <LMIC+0x141>
    os_getArtEui(d + OFF_JR_ARTEUI);
    41ae:	8b e5       	ldi	r24, 0x5B	; 91
    41b0:	94 e0       	ldi	r25, 0x04	; 4
    41b2:	0e 94 d5 09 	call	0x13aa	; 0x13aa <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
    41b6:	83 e6       	ldi	r24, 0x63	; 99
    41b8:	94 e0       	ldi	r25, 0x04	; 4
    41ba:	0e 94 de 09 	call	0x13bc	; 0x13bc <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
    41be:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <LMIC+0xeb>
    41c2:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <LMIC+0xec>
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    41c6:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <LMIC+0x152>
    buf[1] = v>>8;
    41ca:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <LMIC+0x153>
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
}


static void aes_appendMic0 (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    41ce:	85 eb       	ldi	r24, 0xB5	; 181
    41d0:	94 e0       	ldi	r25, 0x04	; 4
    41d2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
    41d6:	43 e1       	ldi	r20, 0x13	; 19
    41d8:	50 e0       	ldi	r21, 0x00	; 0
    41da:	6a e5       	ldi	r22, 0x5A	; 90
    41dc:	74 e0       	ldi	r23, 0x04	; 4
    41de:	8a e0       	ldi	r24, 0x0A	; 10
    41e0:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    41e4:	ab 01       	movw	r20, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	8d e6       	ldi	r24, 0x6D	; 109
    41ea:	94 e0       	ldi	r25, 0x04	; 4
    41ec:	0e 94 ac 18 	call	0x3158	; 0x3158 <os_wmsbf4>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
    41f0:	87 e1       	ldi	r24, 0x17	; 23
    41f2:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <LMIC+0x140>
    LMIC.devNonce++;
    41f6:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <LMIC+0xeb>
    41fa:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <LMIC+0xec>
    41fe:	01 96       	adiw	r24, 0x01	; 1
    4200:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <LMIC+0xec>
    4204:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <LMIC+0xeb>
                    ftype = HDR_FTYPE_REJOIN;
                } else {
                    ftype = HDR_FTYPE_JREQ;
                }
                buildJoinRequest(ftype);
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
    4208:	84 ea       	ldi	r24, 0xA4	; 164
    420a:	98 e1       	ldi	r25, 0x18	; 24
    420c:	dc c1       	rjmp	.+952    	; 0x45c6 <engineUpdate+0x7a8>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
    420e:	40 91 2a 04 	lds	r20, 0x042A	; 0x80042a <LMIC+0x111>
    4212:	50 91 2b 04 	lds	r21, 0x042B	; 0x80042b <LMIC+0x112>
    4216:	60 91 2c 04 	lds	r22, 0x042C	; 0x80042c <LMIC+0x113>
    421a:	70 91 2d 04 	lds	r23, 0x042D	; 0x80042d <LMIC+0x114>
    421e:	40 38       	cpi	r20, 0x80	; 128
    4220:	5f 4f       	sbci	r21, 0xFF	; 255
    4222:	6f 4f       	sbci	r22, 0xFF	; 255
    4224:	7f 4f       	sbci	r23, 0xFF	; 255
    4226:	f0 f0       	brcs	.+60     	; 0x4264 <engineUpdate+0x446>
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
    4228:	63 e7       	ldi	r22, 0x73	; 115
    422a:	79 e2       	ldi	r23, 0x29	; 41
    422c:	8c e2       	ldi	r24, 0x2C	; 44
    422e:	93 e0       	ldi	r25, 0x03	; 3
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    4230:	62 96       	adiw	r28, 0x12	; 18
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	f8 94       	cli
    4236:	de bf       	out	0x3e, r29	; 62
    4238:	0f be       	out	0x3f, r0	; 63
    423a:	cd bf       	out	0x3d, r28	; 61
    423c:	df 91       	pop	r29
    423e:	cf 91       	pop	r28
    4240:	1f 91       	pop	r17
    4242:	0f 91       	pop	r16
    4244:	ff 90       	pop	r15
    4246:	ef 90       	pop	r14
    4248:	df 90       	pop	r13
    424a:	cf 90       	pop	r12
    424c:	bf 90       	pop	r11
    424e:	af 90       	pop	r10
    4250:	9f 90       	pop	r9
    4252:	8f 90       	pop	r8
    4254:	7f 90       	pop	r7
    4256:	6f 90       	pop	r6
    4258:	5f 90       	pop	r5
    425a:	4f 90       	pop	r4
    425c:	3f 90       	pop	r3
    425e:	2f 90       	pop	r2
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
    4260:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <os_setCallback>
                    return;
                }
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
    4264:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <LMIC+0x13d>
    4268:	21 11       	cpse	r18, r1
    426a:	0d c0       	rjmp	.+26     	; 0x4286 <engineUpdate+0x468>
    426c:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <LMIC+0x115>
    4270:	50 91 2f 04 	lds	r21, 0x042F	; 0x80042f <LMIC+0x116>
    4274:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <LMIC+0x117>
    4278:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <LMIC+0x118>
    427c:	4f 3f       	cpi	r20, 0xFF	; 255
    427e:	5f 4f       	sbci	r21, 0xFF	; 255
    4280:	6f 4f       	sbci	r22, 0xFF	; 255
    4282:	7f 4f       	sbci	r23, 0xFF	; 255
    4284:	89 f2       	breq	.-94     	; 0x4228 <engineUpdate+0x40a>

// ======================================== 


static void buildDataFrame (void) {
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    4286:	9c 01       	movw	r18, r24
    4288:	28 71       	andi	r18, 0x18	; 24
    428a:	33 27       	eor	r19, r19
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
    428c:	20 31       	cpi	r18, 0x10	; 16
    428e:	31 05       	cpc	r19, r1
    4290:	21 f0       	breq	.+8      	; 0x429a <engineUpdate+0x47c>
    4292:	80 90 cf 03 	lds	r8, 0x03CF	; 0x8003cf <LMIC+0xb6>
    4296:	8d 82       	std	Y+5, r8	; 0x05
    4298:	01 c0       	rjmp	.+2      	; 0x429c <engineUpdate+0x47e>
    429a:	1d 82       	std	Y+5, r1	; 0x05

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
    429c:	82 70       	andi	r24, 0x02	; 2
    429e:	94 70       	andi	r25, 0x04	; 4
    42a0:	82 30       	cpi	r24, 0x02	; 2
    42a2:	94 40       	sbci	r25, 0x04	; 4
    42a4:	89 f4       	brne	.+34     	; 0x42c8 <engineUpdate+0x4aa>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
    42a6:	80 e1       	ldi	r24, 0x10	; 16
    42a8:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <LMIC+0x149>
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
    42ac:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <LMIC+0x12e>
    42b0:	10 e1       	ldi	r17, 0x10	; 16
    42b2:	81 9f       	mul	r24, r17
    42b4:	c0 01       	movw	r24, r0
    42b6:	11 24       	eor	r1, r1
    42b8:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <LMIC+0x12d>
    42bc:	89 2b       	or	r24, r25
    42be:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <LMIC+0x14a>
        end += 2;
    42c2:	0a e0       	ldi	r16, 0x0A	; 10
    42c4:	10 e0       	ldi	r17, 0x00	; 0
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <engineUpdate+0x4ae>
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
    42c8:	08 e0       	ldi	r16, 0x08	; 8
    42ca:	10 e0       	ldi	r17, 0x00	; 0
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
        end += 2;
    }
    if( LMIC.dutyCapAns ) {
    42cc:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <LMIC+0x122>
    42d0:	88 23       	and	r24, r24
    42d2:	49 f0       	breq	.+18     	; 0x42e6 <engineUpdate+0x4c8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
    42d4:	f8 01       	movw	r30, r16
    42d6:	e6 5a       	subi	r30, 0xA6	; 166
    42d8:	fb 4f       	sbci	r31, 0xFB	; 251
    42da:	84 e0       	ldi	r24, 0x04	; 4
    42dc:	80 83       	st	Z, r24
        end += 1;
    42de:	0f 5f       	subi	r16, 0xFF	; 255
    42e0:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.dutyCapAns = 0;
    42e2:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <LMIC+0x122>
    }
    if( LMIC.dn2Ans ) {
    42e6:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <LMIC+0x129>
    42ea:	44 23       	and	r20, r20
    42ec:	79 f0       	breq	.+30     	; 0x430c <engineUpdate+0x4ee>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
    42ee:	c8 01       	movw	r24, r16
    42f0:	87 5e       	subi	r24, 0xE7	; 231
    42f2:	9c 4f       	sbci	r25, 0xFC	; 252
    42f4:	fc 01       	movw	r30, r24
    42f6:	ef 5b       	subi	r30, 0xBF	; 191
    42f8:	fe 4f       	sbci	r31, 0xFE	; 254
    42fa:	55 e0       	ldi	r21, 0x05	; 5
    42fc:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
    42fe:	31 96       	adiw	r30, 0x01	; 1
    4300:	43 70       	andi	r20, 0x03	; 3
    4302:	40 83       	st	Z, r20
        end += 2;
    4304:	0e 5f       	subi	r16, 0xFE	; 254
    4306:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.dn2Ans = 0;
    4308:	10 92 42 04 	sts	0x0442, r1	; 0x800442 <LMIC+0x129>
    }
    if( LMIC.devsAns ) {  // answer to device status
    430c:	80 91 38 04 	lds	r24, 0x0438	; 0x800438 <LMIC+0x11f>
    4310:	88 23       	and	r24, r24
    4312:	99 f0       	breq	.+38     	; 0x433a <engineUpdate+0x51c>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
    4314:	c8 01       	movw	r24, r16
    4316:	87 5e       	subi	r24, 0xE7	; 231
    4318:	9c 4f       	sbci	r25, 0xFC	; 252
    431a:	fc 01       	movw	r30, r24
    431c:	ef 5b       	subi	r30, 0xBF	; 191
    431e:	fe 4f       	sbci	r31, 0xFE	; 254
    4320:	46 e0       	ldi	r20, 0x06	; 6
    4322:	40 83       	st	Z, r20
        LMIC.frame[end+1] = os_getBattLevel();
    4324:	31 96       	adiw	r30, 0x01	; 1
    4326:	4f ef       	ldi	r20, 0xFF	; 255
    4328:	40 83       	st	Z, r20
        LMIC.frame[end+2] = LMIC.margin;
    432a:	31 96       	adiw	r30, 0x01	; 1
    432c:	40 91 36 04 	lds	r20, 0x0436	; 0x800436 <LMIC+0x11d>
    4330:	40 83       	st	Z, r20
        end += 3;
    4332:	0d 5f       	subi	r16, 0xFD	; 253
    4334:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.devsAns = 0;
    4336:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <LMIC+0x11f>
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
    433a:	40 91 37 04 	lds	r20, 0x0437	; 0x800437 <LMIC+0x11e>
    433e:	44 23       	and	r20, r20
    4340:	79 f0       	breq	.+30     	; 0x4360 <engineUpdate+0x542>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
    4342:	c8 01       	movw	r24, r16
    4344:	87 5e       	subi	r24, 0xE7	; 231
    4346:	9c 4f       	sbci	r25, 0xFC	; 252
    4348:	fc 01       	movw	r30, r24
    434a:	ef 5b       	subi	r30, 0xBF	; 191
    434c:	fe 4f       	sbci	r31, 0xFE	; 254
    434e:	53 e0       	ldi	r21, 0x03	; 3
    4350:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
    4352:	31 96       	adiw	r30, 0x01	; 1
    4354:	47 70       	andi	r20, 0x07	; 7
    4356:	40 83       	st	Z, r20
        end += 2;
    4358:	0e 5f       	subi	r16, 0xFE	; 254
    435a:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.ladrAns = 0;
    435c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <LMIC+0x11e>
    }
    if( LMIC.bcninfoTries > 0 ) {
    4360:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <LMIC+0x12b>
    4364:	88 23       	and	r24, r24
    4366:	39 f0       	breq	.+14     	; 0x4376 <engineUpdate+0x558>
        LMIC.frame[end] = MCMD_BCNI_REQ;
    4368:	f8 01       	movw	r30, r16
    436a:	e6 5a       	subi	r30, 0xA6	; 166
    436c:	fb 4f       	sbci	r31, 0xFB	; 251
    436e:	82 e1       	ldi	r24, 0x12	; 18
    4370:	80 83       	st	Z, r24
        end += 1;
    4372:	0f 5f       	subi	r16, 0xFF	; 255
    4374:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    if( LMIC.adrChanged ) {
    4376:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <LMIC+0x11b>
    437a:	88 23       	and	r24, r24
    437c:	39 f0       	breq	.+14     	; 0x438c <engineUpdate+0x56e>
        if( LMIC.adrAckReq < 0 )
    437e:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <LMIC+0x11a>
    4382:	87 fd       	sbrc	r24, 7
            LMIC.adrAckReq = 0;
    4384:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <LMIC+0x11a>
        LMIC.adrChanged = 0;
    4388:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <LMIC+0x11b>
    }
    if( LMIC.pingSetAns != 0 ) {
    438c:	40 91 45 04 	lds	r20, 0x0445	; 0x800445 <LMIC+0x12c>
    4390:	44 23       	and	r20, r20
    4392:	79 f0       	breq	.+30     	; 0x43b2 <engineUpdate+0x594>
        LMIC.frame[end+0] = MCMD_PING_ANS;
    4394:	c8 01       	movw	r24, r16
    4396:	87 5e       	subi	r24, 0xE7	; 231
    4398:	9c 4f       	sbci	r25, 0xFC	; 252
    439a:	fc 01       	movw	r30, r24
    439c:	ef 5b       	subi	r30, 0xBF	; 191
    439e:	fe 4f       	sbci	r31, 0xFE	; 254
    43a0:	51 e1       	ldi	r21, 0x11	; 17
    43a2:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
    43a4:	31 96       	adiw	r30, 0x01	; 1
    43a6:	41 70       	andi	r20, 0x01	; 1
    43a8:	40 83       	st	Z, r20
        end += 2;
    43aa:	0e 5f       	subi	r16, 0xFE	; 254
    43ac:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.pingSetAns = 0;
    43ae:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <LMIC+0x12c>
    }
    if( LMIC.snchAns ) {
    43b2:	40 91 3c 04 	lds	r20, 0x043C	; 0x80043c <LMIC+0x123>
    43b6:	44 23       	and	r20, r20
    43b8:	79 f0       	breq	.+30     	; 0x43d8 <engineUpdate+0x5ba>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
    43ba:	c8 01       	movw	r24, r16
    43bc:	87 5e       	subi	r24, 0xE7	; 231
    43be:	9c 4f       	sbci	r25, 0xFC	; 252
    43c0:	fc 01       	movw	r30, r24
    43c2:	ef 5b       	subi	r30, 0xBF	; 191
    43c4:	fe 4f       	sbci	r31, 0xFE	; 254
    43c6:	57 e0       	ldi	r21, 0x07	; 7
    43c8:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
    43ca:	31 96       	adiw	r30, 0x01	; 1
    43cc:	43 70       	andi	r20, 0x03	; 3
    43ce:	40 83       	st	Z, r20
        end += 2;
    43d0:	0e 5f       	subi	r16, 0xFE	; 254
    43d2:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.snchAns = 0;
    43d4:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <LMIC+0x123>
    }
    ASSERT(end <= OFF_DAT_OPTS+16);

    u1_t flen = end + (txdata ? 5+dlen : 4);
    43d8:	20 31       	cpi	r18, 0x10	; 16
    43da:	31 05       	cpc	r19, r1
    43dc:	21 f0       	breq	.+8      	; 0x43e6 <engineUpdate+0x5c8>
    43de:	4d 81       	ldd	r20, Y+5	; 0x05
    43e0:	4b 5f       	subi	r20, 0xFB	; 251
    43e2:	49 83       	std	Y+1, r20	; 0x01
    43e4:	02 c0       	rjmp	.+4      	; 0x43ea <engineUpdate+0x5cc>
    43e6:	54 e0       	ldi	r21, 0x04	; 4
    43e8:	59 83       	std	Y+1, r21	; 0x01
    43ea:	40 2f       	mov	r20, r16
    43ec:	89 80       	ldd	r8, Y+1	; 0x01
    43ee:	80 0e       	add	r8, r16
    43f0:	89 82       	std	Y+1, r8	; 0x01
    if( flen > MAX_LEN_FRAME ) {
    43f2:	58 2d       	mov	r21, r8
    43f4:	51 34       	cpi	r21, 0x41	; 65
    43f6:	30 f4       	brcc	.+12     	; 0x4404 <engineUpdate+0x5e6>

// ======================================== 


static void buildDataFrame (void) {
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    43f8:	ff 24       	eor	r15, r15
    43fa:	f3 94       	inc	r15
    43fc:	20 31       	cpi	r18, 0x10	; 16
    43fe:	31 05       	cpc	r19, r1
    4400:	31 f4       	brne	.+12     	; 0x440e <engineUpdate+0x5f0>
    4402:	04 c0       	rjmp	.+8      	; 0x440c <engineUpdate+0x5ee>

    u1_t flen = end + (txdata ? 5+dlen : 4);
    if( flen > MAX_LEN_FRAME ) {
        // Options and payload too big - delay payload
        txdata = 0;
        flen = end+4;
    4404:	94 e0       	ldi	r25, 0x04	; 4
    4406:	89 2e       	mov	r8, r25
    4408:	80 0e       	add	r8, r16
    440a:	89 82       	std	Y+1, r8	; 0x01
    ASSERT(end <= OFF_DAT_OPTS+16);

    u1_t flen = end + (txdata ? 5+dlen : 4);
    if( flen > MAX_LEN_FRAME ) {
        // Options and payload too big - delay payload
        txdata = 0;
    440c:	f1 2c       	mov	r15, r1
        flen = end+4;
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
    440e:	80 e4       	ldi	r24, 0x40	; 64
    4410:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <LMIC+0x141>
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
    4414:	90 91 32 04 	lds	r25, 0x0432	; 0x800432 <LMIC+0x119>
    4418:	20 91 39 04 	lds	r18, 0x0439	; 0x800439 <LMIC+0x120>
    441c:	29 2b       	or	r18, r25
    441e:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <LMIC+0x11a>
    4422:	90 95       	com	r25
    4424:	89 2f       	mov	r24, r25
    4426:	88 1f       	adc	r24, r24
    4428:	88 27       	eor	r24, r24
    442a:	88 1f       	adc	r24, r24
    442c:	82 95       	swap	r24
    442e:	88 0f       	add	r24, r24
    4430:	88 0f       	add	r24, r24
    4432:	80 7c       	andi	r24, 0xC0	; 192
    4434:	98 ef       	ldi	r25, 0xF8	; 248
    4436:	94 0f       	add	r25, r20
    4438:	92 2b       	or	r25, r18
    443a:	89 2b       	or	r24, r25
    443c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <LMIC+0x146>
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
                              | (end-OFF_DAT_OPTS));
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
    4440:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    4444:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    4448:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    444c:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>
    4450:	8b e5       	ldi	r24, 0x5B	; 91
    4452:	94 e0       	ldi	r25, 0x04	; 4
    4454:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
    4458:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <LMIC+0x13d>
    445c:	21 11       	cpse	r18, r1
    445e:	13 c0       	rjmp	.+38     	; 0x4486 <engineUpdate+0x668>
        LMIC.seqnoUp += 1;
    4460:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <LMIC+0x115>
    4464:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <LMIC+0x116>
    4468:	a0 91 30 04 	lds	r26, 0x0430	; 0x800430 <LMIC+0x117>
    446c:	b0 91 31 04 	lds	r27, 0x0431	; 0x800431 <LMIC+0x118>
    4470:	01 96       	adiw	r24, 0x01	; 1
    4472:	a1 1d       	adc	r26, r1
    4474:	b1 1d       	adc	r27, r1
    4476:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <LMIC+0x115>
    447a:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <LMIC+0x116>
    447e:	a0 93 30 04 	sts	0x0430, r26	; 0x800430 <LMIC+0x117>
    4482:	b0 93 31 04 	sts	0x0431, r27	; 0x800431 <LMIC+0x118>
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
    4486:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <LMIC+0x115>
    448a:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <LMIC+0x116>
    448e:	01 97       	sbiw	r24, 0x01	; 1
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    4490:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <LMIC+0x147>
    buf[1] = v>>8;
    4494:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <LMIC+0x148>
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
    4498:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <LMIC+0x119>

    if( txdata ) {
    449c:	ff 20       	and	r15, r15
    449e:	09 f4       	brne	.+2      	; 0x44a2 <engineUpdate+0x684>
    44a0:	43 c0       	rjmp	.+134    	; 0x4528 <engineUpdate+0x70a>
        if( LMIC.pendTxConf ) {
    44a2:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <LMIC+0xb5>
    44a6:	88 23       	and	r24, r24
    44a8:	41 f0       	breq	.+16     	; 0x44ba <engineUpdate+0x69c>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
    44aa:	80 e8       	ldi	r24, 0x80	; 128
    44ac:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <LMIC+0x141>
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
    44b0:	21 11       	cpse	r18, r1
    44b2:	03 c0       	rjmp	.+6      	; 0x44ba <engineUpdate+0x69c>
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <LMIC+0x13d>
        }
        LMIC.frame[end] = LMIC.pendTxPort;
    44ba:	f8 01       	movw	r30, r16
    44bc:	e6 5a       	subi	r30, 0xA6	; 166
    44be:	fb 4f       	sbci	r31, 0xFB	; 251
    44c0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <LMIC+0xb4>
    44c4:	80 83       	st	Z, r24
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
    44c6:	98 01       	movw	r18, r16
    44c8:	25 5a       	subi	r18, 0xA5	; 165
    44ca:	3b 4f       	sbci	r19, 0xFB	; 251
    44cc:	69 01       	movw	r12, r18
    44ce:	8d 80       	ldd	r8, Y+5	; 0x05
    44d0:	a8 2c       	mov	r10, r8
    44d2:	b1 2c       	mov	r11, r1
    44d4:	a5 01       	movw	r20, r10
    44d6:	60 ed       	ldi	r22, 0xD0	; 208
    44d8:	73 e0       	ldi	r23, 0x03	; 3
    44da:	c9 01       	movw	r24, r18
    44dc:	0e 94 89 34 	call	0x6912	; 0x6912 <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
    44e0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <LMIC+0xb4>
    44e4:	88 23       	and	r24, r24
    44e6:	19 f0       	breq	.+6      	; 0x44ee <engineUpdate+0x6d0>
    44e8:	86 e1       	ldi	r24, 0x16	; 22
    44ea:	94 e0       	ldi	r25, 0x04	; 4
    44ec:	02 c0       	rjmp	.+4      	; 0x44f2 <engineUpdate+0x6d4>
    44ee:	86 e0       	ldi	r24, 0x06	; 6
    44f0:	94 e0       	ldi	r25, 0x04	; 4
    os_aes(AES_ENC, pdu, len);
}


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
    if( len <= 0 )
    44f2:	a1 14       	cp	r10, r1
    44f4:	b1 04       	cpc	r11, r1
    44f6:	c1 f0       	breq	.+48     	; 0x4528 <engineUpdate+0x70a>
    44f8:	00 91 2e 04 	lds	r16, 0x042E	; 0x80042e <LMIC+0x115>
    44fc:	10 91 2f 04 	lds	r17, 0x042F	; 0x80042f <LMIC+0x116>
    4500:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <LMIC+0x117>
    4504:	30 91 31 04 	lds	r19, 0x0431	; 0x800431 <LMIC+0x118>
    4508:	01 50       	subi	r16, 0x01	; 1
    450a:	11 09       	sbc	r17, r1
    450c:	21 09       	sbc	r18, r1
    450e:	31 09       	sbc	r19, r1
    4510:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    4514:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    4518:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    451c:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>
    4520:	e1 2c       	mov	r14, r1
    4522:	f1 2c       	mov	r15, r1
    4524:	0e 94 29 17 	call	0x2e52	; 0x2e52 <aes_cipher.part.2>
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
                   LMIC.devaddr, LMIC.seqnoUp-1,
                   /*up*/0, LMIC.frame+end+1, dlen);
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
    4528:	89 80       	ldd	r8, Y+1	; 0x01
    452a:	08 2d       	mov	r16, r8
    452c:	10 e0       	ldi	r17, 0x00	; 0
    452e:	04 50       	subi	r16, 0x04	; 4
    4530:	11 09       	sbc	r17, r1
    4532:	c0 90 2e 04 	lds	r12, 0x042E	; 0x80042e <LMIC+0x115>
    4536:	d0 90 2f 04 	lds	r13, 0x042F	; 0x80042f <LMIC+0x116>
    453a:	e0 90 30 04 	lds	r14, 0x0430	; 0x800430 <LMIC+0x117>
    453e:	f0 90 31 04 	lds	r15, 0x0431	; 0x800431 <LMIC+0x118>
    4542:	21 e0       	ldi	r18, 0x01	; 1
    4544:	c2 1a       	sub	r12, r18
    4546:	d1 08       	sbc	r13, r1
    4548:	e1 08       	sbc	r14, r1
    454a:	f1 08       	sbc	r15, r1
    454c:	40 91 26 04 	lds	r20, 0x0426	; 0x800426 <LMIC+0x10d>
    4550:	50 91 27 04 	lds	r21, 0x0427	; 0x800427 <LMIC+0x10e>
    4554:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <LMIC+0x10f>
    4558:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <LMIC+0x110>

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
    os_clearMem(AESaux,16);
    455c:	e5 e6       	ldi	r30, 0x65	; 101
    455e:	f5 e0       	ldi	r31, 0x05	; 5
    4560:	df 01       	movw	r26, r30
    4562:	e0 e1       	ldi	r30, 0x10	; 16
    4564:	8e 2e       	mov	r8, r30
    4566:	1d 92       	st	X+, r1
    4568:	8a 94       	dec	r8
    456a:	e9 f7       	brne	.-6      	; 0x4566 <engineUpdate+0x748>
    AESaux[0]  = 0x49;
    456c:	89 e4       	ldi	r24, 0x49	; 73
    456e:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <AESAUX>
    AESaux[5]  = dndir?1:0;
    4572:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <AESAUX+0x5>
    AESaux[15] = len;
    4576:	00 93 74 05 	sts	0x0574, r16	; 0x800574 <AESAUX+0xf>
    os_wlsbf4(AESaux+ 6,devaddr);
    457a:	8b e6       	ldi	r24, 0x6B	; 107
    457c:	95 e0       	ldi	r25, 0x05	; 5
    457e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    4582:	b7 01       	movw	r22, r14
    4584:	a6 01       	movw	r20, r12
    4586:	8f e6       	ldi	r24, 0x6F	; 111
    4588:	95 e0       	ldi	r25, 0x05	; 5
    458a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <os_wlsbf4>
}


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
    micB0(devaddr, seqno, dndir, len);
    os_copyMem(AESkey,key,16);
    458e:	e6 e0       	ldi	r30, 0x06	; 6
    4590:	f4 e0       	ldi	r31, 0x04	; 4
    4592:	a5 eb       	ldi	r26, 0xB5	; 181
    4594:	b4 e0       	ldi	r27, 0x04	; 4
    4596:	80 e1       	ldi	r24, 0x10	; 16
    4598:	a8 2e       	mov	r10, r24
    459a:	01 90       	ld	r0, Z+
    459c:	0d 92       	st	X+, r0
    459e:	aa 94       	dec	r10
    45a0:	e1 f7       	brne	.-8      	; 0x459a <engineUpdate+0x77c>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
    45a2:	a8 01       	movw	r20, r16
    45a4:	6a e5       	ldi	r22, 0x5A	; 90
    45a6:	74 e0       	ldi	r23, 0x04	; 4
    45a8:	82 e0       	ldi	r24, 0x02	; 2
    45aa:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    45ae:	ab 01       	movw	r20, r22
    45b0:	bc 01       	movw	r22, r24
    45b2:	c8 01       	movw	r24, r16
    45b4:	86 5a       	subi	r24, 0xA6	; 166
    45b6:	9b 4f       	sbci	r25, 0xFB	; 251
    45b8:	0e 94 ac 18 	call	0x3158	; 0x3158 <os_wmsbf4>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
    45bc:	89 80       	ldd	r8, Y+1	; 0x01
    45be:	80 92 59 04 	sts	0x0459, r8	; 0x800459 <LMIC+0x140>
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
                }
                buildDataFrame();
                LMIC.osjob.func = FUNC_ADDR(updataDone);
    45c2:	89 e9       	ldi	r24, 0x99	; 153
    45c4:	98 e1       	ldi	r25, 0x18	; 24
    45c6:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    45ca:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    45ce:	e9 2d       	mov	r30, r9
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	e5 53       	subi	r30, 0x35	; 53
    45d4:	fd 4f       	sbci	r31, 0xFD	; 253
inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
    45d6:	21 81       	ldd	r18, Z+1	; 0x01
    45d8:	2f 79       	andi	r18, 0x9F	; 159
    45da:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <LMIC+0xac>
    45de:	00 e2       	ldi	r16, 0x20	; 32
    45e0:	80 9f       	mul	r24, r16
    45e2:	c0 01       	movw	r24, r0
    45e4:	11 24       	eor	r1, r1
    45e6:	82 2b       	or	r24, r18
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
    45e8:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <LMIC+0xf>
    45ec:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <LMIC+0xe>
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
    45f0:	90 92 2a 03 	sts	0x032A, r9	; 0x80032a <LMIC+0x11>
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
    45f4:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    45f8:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    45fc:	2f 76       	andi	r18, 0x6F	; 111
    45fe:	36 7f       	andi	r19, 0xF6	; 246
    4600:	20 68       	ori	r18, 0x80	; 128
    4602:	38 60       	ori	r19, 0x08	; 8
    4604:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <LMIC+0xa8>
    4608:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <LMIC+0xa7>
    return 1;
}


static void updateTx (ostime_t txbeg) {
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
    460c:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <LMIC+0x9d>
    4610:	14 e0       	ldi	r17, 0x04	; 4
    4612:	e1 9f       	mul	r30, r17
    4614:	f0 01       	movw	r30, r0
    4616:	11 24       	eor	r1, r1
    4618:	e7 5e       	subi	r30, 0xE7	; 231
    461a:	fc 4f       	sbci	r31, 0xFC	; 252
    461c:	83 ac       	ldd	r8, Z+59	; 0x3b
    461e:	94 ac       	ldd	r9, Z+60	; 0x3c
    4620:	a5 ac       	ldd	r10, Z+61	; 0x3d
    4622:	b6 ac       	ldd	r11, Z+62	; 0x3e
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
    4624:	60 91 59 04 	lds	r22, 0x0459	; 0x800459 <LMIC+0x140>
    4628:	0e 94 8a 19 	call	0x3314	; 0x3314 <calcAirTime>
    462c:	6b 01       	movw	r12, r22
    462e:	7c 01       	movw	r14, r24
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
    4630:	d5 01       	movw	r26, r10
    4632:	c4 01       	movw	r24, r8
    4634:	83 70       	andi	r24, 0x03	; 3
    4636:	99 27       	eor	r25, r25
    4638:	aa 27       	eor	r26, r26
    463a:	bb 27       	eor	r27, r27
    LMIC.freq  = freq & ~(u4_t)3;
    463c:	2c ef       	ldi	r18, 0xFC	; 252
    463e:	82 22       	and	r8, r18
    4640:	80 92 21 03 	sts	0x0321, r8	; 0x800321 <LMIC+0x8>
    4644:	90 92 22 03 	sts	0x0322, r9	; 0x800322 <LMIC+0x9>
    4648:	a0 92 23 03 	sts	0x0323, r10	; 0x800323 <LMIC+0xa>
    464c:	b0 92 24 03 	sts	0x0324, r11	; 0x800324 <LMIC+0xb>
    LMIC.txpow = band->txpow;
    4650:	43 e0       	ldi	r20, 0x03	; 3
    4652:	88 0f       	add	r24, r24
    4654:	99 1f       	adc	r25, r25
    4656:	4a 95       	dec	r20
    4658:	e1 f7       	brne	.-8      	; 0x4652 <engineUpdate+0x834>
    465a:	fc 01       	movw	r30, r24
    465c:	e7 5e       	subi	r30, 0xE7	; 231
    465e:	fc 4f       	sbci	r31, 0xFC	; 252
    4660:	85 8d       	ldd	r24, Z+29	; 0x1d
    4662:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <LMIC+0x12>
    band->avail = txbeg + airtime * band->txcap;
    4666:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4668:	b4 8d       	ldd	r27, Z+28	; 0x1c
    466a:	a7 01       	movw	r20, r14
    466c:	96 01       	movw	r18, r12
    466e:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    4672:	dc 01       	movw	r26, r24
    4674:	cb 01       	movw	r24, r22
    4676:	84 0d       	add	r24, r4
    4678:	95 1d       	adc	r25, r5
    467a:	a6 1d       	adc	r26, r6
    467c:	b7 1d       	adc	r27, r7
    467e:	87 8f       	std	Z+31, r24	; 0x1f
    4680:	90 a3       	std	Z+32, r25	; 0x20
    4682:	a1 a3       	std	Z+33, r26	; 0x21
    4684:	b2 a3       	std	Z+34, r27	; 0x22
    if( LMIC.globalDutyRate != 0 )
    4686:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <LMIC+0x9e>
    468a:	88 23       	and	r24, r24
    468c:	99 f0       	breq	.+38     	; 0x46b4 <engineUpdate+0x896>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
    468e:	04 c0       	rjmp	.+8      	; 0x4698 <engineUpdate+0x87a>
    4690:	cc 0c       	add	r12, r12
    4692:	dd 1c       	adc	r13, r13
    4694:	ee 1c       	adc	r14, r14
    4696:	ff 1c       	adc	r15, r15
    4698:	8a 95       	dec	r24
    469a:	d2 f7       	brpl	.-12     	; 0x4690 <engineUpdate+0x872>
    469c:	c4 0c       	add	r12, r4
    469e:	d5 1c       	adc	r13, r5
    46a0:	e6 1c       	adc	r14, r6
    46a2:	f7 1c       	adc	r15, r7
    46a4:	c0 92 b8 03 	sts	0x03B8, r12	; 0x8003b8 <LMIC+0x9f>
    46a8:	d0 92 b9 03 	sts	0x03B9, r13	; 0x8003b9 <LMIC+0xa0>
    46ac:	e0 92 ba 03 	sts	0x03BA, r14	; 0x8003ba <LMIC+0xa1>
    46b0:	f0 92 bb 03 	sts	0x03BB, r15	; 0x8003bb <LMIC+0xa2>
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
            updateTx(txbeg);
            reportEvent(EV_TXSTART);
    46b4:	81 e1       	ldi	r24, 0x11	; 17
    46b6:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
            os_radio(RADIO_TX);
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	b8 c0       	rjmp	.+368    	; 0x482e <engineUpdate+0xa10>
            return;
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
    46be:	23 2b       	or	r18, r19
    46c0:	09 f4       	brne	.+2      	; 0x46c4 <engineUpdate+0x8a6>
    46c2:	dc c0       	rjmp	.+440    	; 0x487c <engineUpdate+0xa5e>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
    46c4:	c1 14       	cp	r12, r1
    46c6:	d1 04       	cpc	r13, r1
    46c8:	e1 04       	cpc	r14, r1
    46ca:	f1 04       	cpc	r15, r1
    46cc:	59 f4       	brne	.+22     	; 0x46e4 <engineUpdate+0x8c6>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
    46ce:	c1 2c       	mov	r12, r1
    46d0:	d1 2c       	mov	r13, r1
    46d2:	76 01       	movw	r14, r12
    46d4:	c3 94       	inc	r12
    46d6:	06 c0       	rjmp	.+12     	; 0x46e4 <engineUpdate+0x8c6>
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
    46d8:	39 89       	ldd	r19, Y+17	; 0x11
    46da:	31 ff       	sbrs	r19, 1
    46dc:	3f c1       	rjmp	.+638    	; 0x495c <engineUpdate+0xb3e>
        return;
    }

    ostime_t now    = os_getTime();
    ostime_t rxtime = 0;
    ostime_t txbeg  = 0;
    46de:	c1 2c       	mov	r12, r1
    46e0:	d1 2c       	mov	r13, r1
    46e2:	76 01       	movw	r14, r12
            return;
    }

    // Are we pingable?
  checkrx:
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
    46e4:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    46e8:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    46ec:	91 ff       	sbrs	r25, 1
    46ee:	65 c0       	rjmp	.+202    	; 0x47ba <engineUpdate+0x99c>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
    46f0:	b3 01       	movw	r22, r6
    46f2:	a2 01       	movw	r20, r4
    46f4:	42 5c       	subi	r20, 0xC2	; 194
    46f6:	5f 4f       	sbci	r21, 0xFF	; 255
    46f8:	6f 4f       	sbci	r22, 0xFF	; 255
    46fa:	7f 4f       	sbci	r23, 0xFF	; 255
    46fc:	4d 83       	std	Y+5, r20	; 0x05
    46fe:	5e 83       	std	Y+6, r21	; 0x06
    4700:	6f 83       	std	Y+7, r22	; 0x07
    4702:	78 87       	std	Y+8, r23	; 0x08
}


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
  again:
    if( rxsched->rxtime - cando >= 0 )
    4704:	40 91 4e 04 	lds	r20, 0x044E	; 0x80044e <LMIC+0x135>
    4708:	50 91 4f 04 	lds	r21, 0x044F	; 0x80044f <LMIC+0x136>
    470c:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <LMIC+0x137>
    4710:	70 91 51 04 	lds	r23, 0x0451	; 0x800451 <LMIC+0x138>
    4714:	db 01       	movw	r26, r22
    4716:	ca 01       	movw	r24, r20
    4718:	8d 80       	ldd	r8, Y+5	; 0x05
    471a:	9e 80       	ldd	r9, Y+6	; 0x06
    471c:	af 80       	ldd	r10, Y+7	; 0x07
    471e:	b8 84       	ldd	r11, Y+8	; 0x08
    4720:	88 19       	sub	r24, r8
    4722:	99 09       	sbc	r25, r9
    4724:	aa 09       	sbc	r26, r10
    4726:	bb 09       	sbc	r27, r11
    4728:	b7 ff       	sbrs	r27, 7
    472a:	9b c0       	rjmp	.+310    	; 0x4862 <engineUpdate+0xa44>
        return 1;
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
    472c:	10 91 48 04 	lds	r17, 0x0448	; 0x800448 <LMIC+0x12f>
    4730:	17 fd       	sbrc	r17, 7
    4732:	43 c0       	rjmp	.+134    	; 0x47ba <engineUpdate+0x99c>
        return 0;
    u1_t intv = 1<<rxsched->intvExp;
    4734:	e1 e0       	ldi	r30, 0x01	; 1
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	00 90 47 04 	lds	r0, 0x0447	; 0x800447 <LMIC+0x12e>
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <engineUpdate+0x924>
    473e:	ee 0f       	add	r30, r30
    4740:	ff 1f       	adc	r31, r31
    4742:	0a 94       	dec	r0
    4744:	e2 f7       	brpl	.-8      	; 0x473e <engineUpdate+0x920>
    if( (rxsched->slot = (slot += (intv))) >= 128 )
    4746:	1e 0f       	add	r17, r30
    4748:	10 93 48 04 	sts	0x0448, r17	; 0x800448 <LMIC+0x12f>
    474c:	17 fd       	sbrc	r17, 7
    474e:	35 c0       	rjmp	.+106    	; 0x47ba <engineUpdate+0x99c>
        return 0;
    rxsched->rxtime = rxsched->rxbase
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
    4750:	a1 2f       	mov	r26, r17
    4752:	b0 e0       	ldi	r27, 0x00	; 0
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	38 e9       	ldi	r19, 0x98	; 152
    4758:	4a e3       	ldi	r20, 0x3A	; 58
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	27 e0       	ldi	r18, 0x07	; 7
    4766:	b5 95       	asr	r27
    4768:	a7 95       	ror	r26
    476a:	97 95       	ror	r25
    476c:	87 95       	ror	r24
    476e:	2a 95       	dec	r18
    4770:	d1 f7       	brne	.-12     	; 0x4766 <engineUpdate+0x948>
    4772:	80 90 4a 04 	lds	r8, 0x044A	; 0x80044a <LMIC+0x131>
    4776:	90 90 4b 04 	lds	r9, 0x044B	; 0x80044b <LMIC+0x132>
    477a:	a0 90 4c 04 	lds	r10, 0x044C	; 0x80044c <LMIC+0x133>
    477e:	b0 90 4d 04 	lds	r11, 0x044D	; 0x80044d <LMIC+0x134>
    4782:	88 0e       	add	r8, r24
    4784:	99 1e       	adc	r9, r25
    4786:	aa 1e       	adc	r10, r26
    4788:	bb 1e       	adc	r11, r27
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
    478a:	82 e0       	ldi	r24, 0x02	; 2
    478c:	8e 0f       	add	r24, r30
    478e:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <LMIC+0x12d>
    4792:	81 0f       	add	r24, r17
    4794:	0e 94 43 13 	call	0x2686	; 0x2686 <calcRxWindow>
    if( (slot=rxsched->slot) >= 128 )
        return 0;
    u1_t intv = 1<<rxsched->intvExp;
    if( (rxsched->slot = (slot += (intv))) >= 128 )
        return 0;
    rxsched->rxtime = rxsched->rxbase
    4798:	86 1a       	sub	r8, r22
    479a:	97 0a       	sbc	r9, r23
    479c:	a8 0a       	sbc	r10, r24
    479e:	b9 0a       	sbc	r11, r25
    47a0:	80 92 4e 04 	sts	0x044E, r8	; 0x80044e <LMIC+0x135>
    47a4:	90 92 4f 04 	sts	0x044F, r9	; 0x80044f <LMIC+0x136>
    47a8:	a0 92 50 04 	sts	0x0450, r10	; 0x800450 <LMIC+0x137>
    47ac:	b0 92 51 04 	sts	0x0451, r11	; 0x800451 <LMIC+0x138>
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
    rxsched->rxsyms = LMIC.rxsyms;
    47b0:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <LMIC+0x10>
    47b4:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <LMIC+0x130>
    47b8:	a5 cf       	rjmp	.-182    	; 0x4704 <engineUpdate+0x8e6>
            return;
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
    47ba:	c1 14       	cp	r12, r1
    47bc:	d1 04       	cpc	r13, r1
    47be:	e1 04       	cpc	r14, r1
    47c0:	f1 04       	cpc	r15, r1
    47c2:	61 f0       	breq	.+24     	; 0x47dc <engineUpdate+0x9be>
    47c4:	d7 01       	movw	r26, r14
    47c6:	c6 01       	movw	r24, r12
    47c8:	89 80       	ldd	r8, Y+1	; 0x01
    47ca:	9a 80       	ldd	r9, Y+2	; 0x02
    47cc:	ab 80       	ldd	r10, Y+3	; 0x03
    47ce:	bc 80       	ldd	r11, Y+4	; 0x04
    47d0:	88 19       	sub	r24, r8
    47d2:	99 09       	sbc	r25, r9
    47d4:	aa 09       	sbc	r26, r10
    47d6:	bb 09       	sbc	r27, r11
    47d8:	b7 fd       	sbrc	r27, 7
    47da:	50 c0       	rjmp	.+160    	; 0x487c <engineUpdate+0xa5e>
        goto txdelay;

    setBcnRxParams();
    47dc:	0e 94 b2 13 	call	0x2764	; 0x2764 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
    47e0:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <LMIC+0x182>
    47e4:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <LMIC+0x10>
    LMIC.rxtime = LMIC.bcnRxtime;
    47e8:	80 91 9c 04 	lds	r24, 0x049C	; 0x80049c <LMIC+0x183>
    47ec:	90 91 9d 04 	lds	r25, 0x049D	; 0x80049d <LMIC+0x184>
    47f0:	a0 91 9e 04 	lds	r26, 0x049E	; 0x80049e <LMIC+0x185>
    47f4:	b0 91 9f 04 	lds	r27, 0x049F	; 0x80049f <LMIC+0x186>
    47f8:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <LMIC+0x4>
    47fc:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <LMIC+0x5>
    4800:	a0 93 1f 03 	sts	0x031F, r26	; 0x80031f <LMIC+0x6>
    4804:	b0 93 20 03 	sts	0x0320, r27	; 0x800320 <LMIC+0x7>
    if( now - rxtime >= 0 ) {
    4808:	d3 01       	movw	r26, r6
    480a:	c2 01       	movw	r24, r4
    480c:	89 80       	ldd	r8, Y+1	; 0x01
    480e:	9a 80       	ldd	r9, Y+2	; 0x02
    4810:	ab 80       	ldd	r10, Y+3	; 0x03
    4812:	bc 80       	ldd	r11, Y+4	; 0x04
    4814:	88 19       	sub	r24, r8
    4816:	99 09       	sbc	r25, r9
    4818:	aa 09       	sbc	r26, r10
    481a:	bb 09       	sbc	r27, r11
    481c:	b7 fd       	sbrc	r27, 7
    481e:	52 c0       	rjmp	.+164    	; 0x48c4 <engineUpdate+0xaa6>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
    4820:	8c e2       	ldi	r24, 0x2C	; 44
    4822:	95 e2       	ldi	r25, 0x25	; 37
    4824:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <LMIC+0x1a>
    4828:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <LMIC+0x19>
        os_radio(RADIO_RX);
    482c:	82 e0       	ldi	r24, 0x02	; 2
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    482e:	62 96       	adiw	r28, 0x12	; 18
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	f8 94       	cli
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	0f be       	out	0x3f, r0	; 63
    4838:	cd bf       	out	0x3d, r28	; 61
    483a:	df 91       	pop	r29
    483c:	cf 91       	pop	r28
    483e:	1f 91       	pop	r17
    4840:	0f 91       	pop	r16
    4842:	ff 90       	pop	r15
    4844:	ef 90       	pop	r14
    4846:	df 90       	pop	r13
    4848:	cf 90       	pop	r12
    484a:	bf 90       	pop	r11
    484c:	af 90       	pop	r10
    484e:	9f 90       	pop	r9
    4850:	8f 90       	pop	r8
    4852:	7f 90       	pop	r7
    4854:	6f 90       	pop	r6
    4856:	5f 90       	pop	r5
    4858:	4f 90       	pop	r4
    485a:	3f 90       	pop	r3
    485c:	2f 90       	pop	r2
    setBcnRxParams();
    LMIC.rxsyms = LMIC.bcnRxsyms;
    LMIC.rxtime = LMIC.bcnRxtime;
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
        os_radio(RADIO_RX);
    485e:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <os_radio>
    // Are we pingable?
  checkrx:
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
    4862:	c1 14       	cp	r12, r1
    4864:	d1 04       	cpc	r13, r1
    4866:	e1 04       	cpc	r14, r1
    4868:	f1 04       	cpc	r15, r1
    486a:	99 f1       	breq	.+102    	; 0x48d2 <engineUpdate+0xab4>
    486c:	d7 01       	movw	r26, r14
    486e:	c6 01       	movw	r24, r12
    4870:	84 1b       	sub	r24, r20
    4872:	95 0b       	sbc	r25, r21
    4874:	a6 0b       	sbc	r26, r22
    4876:	b7 0b       	sbc	r27, r23
    4878:	b7 ff       	sbrs	r27, 7
    487a:	2b c0       	rjmp	.+86     	; 0x48d2 <engineUpdate+0xab4>
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
    487c:	b7 01       	movw	r22, r14
    487e:	a6 01       	movw	r20, r12
    4880:	4e 53       	subi	r20, 0x3E	; 62
    4882:	51 09       	sbc	r21, r1
    4884:	61 09       	sbc	r22, r1
    4886:	71 09       	sbc	r23, r1
    4888:	27 e0       	ldi	r18, 0x07	; 7
    488a:	38 e2       	ldi	r19, 0x28	; 40
    488c:	8c e2       	ldi	r24, 0x2C	; 44
    488e:	93 e0       	ldi	r25, 0x03	; 3
}
    4890:	62 96       	adiw	r28, 0x12	; 18
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	f8 94       	cli
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	0f be       	out	0x3f, r0	; 63
    489a:	cd bf       	out	0x3d, r28	; 61
    489c:	df 91       	pop	r29
    489e:	cf 91       	pop	r28
    48a0:	1f 91       	pop	r17
    48a2:	0f 91       	pop	r16
    48a4:	ff 90       	pop	r15
    48a6:	ef 90       	pop	r14
    48a8:	df 90       	pop	r13
    48aa:	cf 90       	pop	r12
    48ac:	bf 90       	pop	r11
    48ae:	af 90       	pop	r10
    48b0:	9f 90       	pop	r9
    48b2:	8f 90       	pop	r8
    48b4:	7f 90       	pop	r7
    48b6:	6f 90       	pop	r6
    48b8:	5f 90       	pop	r5
    48ba:	4f 90       	pop	r4
    48bc:	3f 90       	pop	r3
    48be:	2f 90       	pop	r2
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
    48c0:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
        os_radio(RADIO_RX);
        return;
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
    48c4:	24 ed       	ldi	r18, 0xD4	; 212
    48c6:	34 e1       	ldi	r19, 0x14	; 20
    48c8:	49 81       	ldd	r20, Y+1	; 0x01
    48ca:	5a 81       	ldd	r21, Y+2	; 0x02
    48cc:	6b 81       	ldd	r22, Y+3	; 0x03
    48ce:	7c 81       	ldd	r23, Y+4	; 0x04
    48d0:	dd cf       	rjmp	.-70     	; 0x488c <engineUpdate+0xa6e>
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
    48d2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <LMIC+0x130>
    48d6:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <LMIC+0x10>
            LMIC.rxtime  = LMIC.ping.rxtime;
    48da:	40 93 1d 03 	sts	0x031D, r20	; 0x80031d <LMIC+0x4>
    48de:	50 93 1e 03 	sts	0x031E, r21	; 0x80031e <LMIC+0x5>
    48e2:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <LMIC+0x6>
    48e6:	70 93 20 03 	sts	0x0320, r23	; 0x800320 <LMIC+0x7>
            LMIC.freq    = LMIC.ping.freq;
    48ea:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <LMIC+0x139>
    48ee:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <LMIC+0x13a>
    48f2:	a0 91 54 04 	lds	r26, 0x0454	; 0x800454 <LMIC+0x13b>
    48f6:	b0 91 55 04 	lds	r27, 0x0455	; 0x800455 <LMIC+0x13c>
    48fa:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <LMIC+0x8>
    48fe:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <LMIC+0x9>
    4902:	a0 93 23 03 	sts	0x0323, r26	; 0x800323 <LMIC+0xa>
    4906:	b0 93 24 03 	sts	0x0324, r27	; 0x800324 <LMIC+0xb>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    490a:	e0 91 46 04 	lds	r30, 0x0446	; 0x800446 <LMIC+0x12d>
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	e5 53       	subi	r30, 0x35	; 53
    4912:	fd 4f       	sbci	r31, 0xFD	; 253
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
    4914:	81 81       	ldd	r24, Z+1	; 0x01
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	8f 77       	andi	r24, 0x7F	; 127
    491a:	80 68       	ori	r24, 0x80	; 128
    491c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <LMIC+0xf>
    4920:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <LMIC+0xe>
            LMIC.dataLen = 0;
    4924:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
    4928:	44 19       	sub	r20, r4
    492a:	55 09       	sbc	r21, r5
    492c:	66 09       	sbc	r22, r6
    492e:	77 09       	sbc	r23, r7
    4930:	42 3c       	cpi	r20, 0xC2	; 194
    4932:	5f 4f       	sbci	r21, 0xFF	; 255
    4934:	6f 4f       	sbci	r22, 0xFF	; 255
    4936:	7f 4f       	sbci	r23, 0xFF	; 255
    4938:	14 f4       	brge	.+4      	; 0x493e <engineUpdate+0xb20>
    493a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
    493e:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <LMIC+0x4>
    4942:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <LMIC+0x5>
    4946:	60 91 1f 03 	lds	r22, 0x031F	; 0x80031f <LMIC+0x6>
    494a:	70 91 20 03 	lds	r23, 0x0320	; 0x800320 <LMIC+0x7>
    494e:	4e 53       	subi	r20, 0x3E	; 62
    4950:	51 09       	sbc	r21, r1
    4952:	61 09       	sbc	r22, r1
    4954:	71 09       	sbc	r23, r1
    4956:	2d ed       	ldi	r18, 0xDD	; 221
    4958:	34 e1       	ldi	r19, 0x14	; 20
    495a:	98 cf       	rjmp	.-208    	; 0x488c <engineUpdate+0xa6e>
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    495c:	62 96       	adiw	r28, 0x12	; 18
    495e:	0f b6       	in	r0, 0x3f	; 63
    4960:	f8 94       	cli
    4962:	de bf       	out	0x3e, r29	; 62
    4964:	0f be       	out	0x3f, r0	; 63
    4966:	cd bf       	out	0x3d, r28	; 61
    4968:	df 91       	pop	r29
    496a:	cf 91       	pop	r28
    496c:	1f 91       	pop	r17
    496e:	0f 91       	pop	r16
    4970:	ff 90       	pop	r15
    4972:	ef 90       	pop	r14
    4974:	df 90       	pop	r13
    4976:	cf 90       	pop	r12
    4978:	bf 90       	pop	r11
    497a:	af 90       	pop	r10
    497c:	9f 90       	pop	r9
    497e:	8f 90       	pop	r8
    4980:	7f 90       	pop	r7
    4982:	6f 90       	pop	r6
    4984:	5f 90       	pop	r5
    4986:	4f 90       	pop	r4
    4988:	3f 90       	pop	r3
    498a:	2f 90       	pop	r2
    498c:	08 95       	ret

0000498e <reportEvent>:

static void reportEvent (ev_t ev) {
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
    498e:	0e 94 08 0a 	call	0x1410	; 0x1410 <onEvent>
    engineUpdate();
    4992:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

00004996 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	0e 94 8c 12 	call	0x2518	; 0x2518 <os_radio>
    os_clearCallback(&LMIC.osjob);
    499c:	8c e2       	ldi	r24, 0x2C	; 44
    499e:	93 e0       	ldi	r25, 0x03	; 3
    49a0:	0e 94 a3 0c 	call	0x1946	; 0x1946 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
    49a4:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    49a8:	81 11       	cpse	r24, r1
    49aa:	0b c0       	rjmp	.+22     	; 0x49c2 <onBcnRx+0x2c>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
    49ac:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    49b0:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    49b4:	8c 7f       	andi	r24, 0xFC	; 252
    49b6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    49ba:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
        reportEvent(EV_SCAN_TIMEOUT);
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	49 c0       	rjmp	.+146    	; 0x4a54 <onBcnRx+0xbe>
        return;
    }
    if( decodeBeacon() <= 0 ) {
    49c2:	0e 94 cf 18 	call	0x319e	; 0x319e <decodeBeacon>
    49c6:	18 16       	cp	r1, r24
    49c8:	19 06       	cpc	r1, r25
    49ca:	9c f0       	brlt	.+38     	; 0x49f2 <onBcnRx+0x5c>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
    49cc:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
        os_radio(RADIO_RXON);
    49d0:	83 e0       	ldi	r24, 0x03	; 3
    49d2:	0e 94 8c 12 	call	0x2518	; 0x2518 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
    49d6:	40 91 a0 04 	lds	r20, 0x04A0	; 0x8004a0 <LMIC+0x187>
    49da:	50 91 a1 04 	lds	r21, 0x04A1	; 0x8004a1 <LMIC+0x188>
    49de:	60 91 a2 04 	lds	r22, 0x04A2	; 0x8004a2 <LMIC+0x189>
    49e2:	70 91 a3 04 	lds	r23, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    49e6:	2b ec       	ldi	r18, 0xCB	; 203
    49e8:	34 e2       	ldi	r19, 0x24	; 36
    49ea:	8c e2       	ldi	r24, 0x2C	; 44
    49ec:	93 e0       	ldi	r25, 0x03	; 3
    49ee:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
    if( ini ) {
        LMIC.drift = 0;
    49f2:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <LMIC+0xaf>
    49f6:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <LMIC+0xae>
        LMIC.maxDriftDiff = 0;
    49fa:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <LMIC+0xb3>
    49fe:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <LMIC+0xb2>
        LMIC.missedBcns = 0;
    4a02:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <LMIC+0x12a>
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    4a06:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <LMIC+0x18d>
    4a0a:	8c 60       	ori	r24, 0x0C	; 12
    4a0c:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <LMIC+0x18d>
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    4a10:	8b e0       	ldi	r24, 0x0B	; 11
    4a12:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    4a16:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4a1a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4a1e:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <LMIC+0x189>
    4a22:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    4a26:	80 5c       	subi	r24, 0xC0	; 192
    4a28:	97 4f       	sbci	r25, 0xF7	; 247
    4a2a:	a2 4c       	sbci	r26, 0xC2	; 194
    4a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a2e:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <LMIC+0x183>
    4a32:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <LMIC+0x184>
    4a36:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <LMIC+0x185>
    4a3a:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <LMIC+0x186>
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
    4a3e:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4a42:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4a46:	8e 7f       	andi	r24, 0xFE	; 254
    4a48:	82 60       	ori	r24, 0x02	; 2
    4a4a:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4a4e:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
    4a52:	82 e0       	ldi	r24, 0x02	; 2
    4a54:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>

00004a58 <processBeacon>:
    }
    goto txcomplete;
}


static void processBeacon (xref2osjob_t osjob) {
    4a58:	cf 92       	push	r12
    4a5a:	df 92       	push	r13
    4a5c:	ef 92       	push	r14
    4a5e:	ff 92       	push	r15
    4a60:	cf 93       	push	r28
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
    4a62:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    4a66:	88 23       	and	r24, r24
    4a68:	09 f4       	brne	.+2      	; 0x4a6c <processBeacon+0x14>
    4a6a:	7b c0       	rjmp	.+246    	; 0x4b62 <processBeacon+0x10a>
    goto txcomplete;
}


static void processBeacon (xref2osjob_t osjob) {
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    4a6c:	c0 90 a0 04 	lds	r12, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4a70:	d0 90 a1 04 	lds	r13, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4a74:	e0 90 a2 04 	lds	r14, 0x04A2	; 0x8004a2 <LMIC+0x189>
    4a78:	f0 90 a3 04 	lds	r15, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    u1_t flags = LMIC.bcninfo.flags;
    4a7c:	c0 91 a6 04 	lds	r28, 0x04A6	; 0x8004a6 <LMIC+0x18d>
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
    4a80:	0e 94 cf 18 	call	0x319e	; 0x319e <decodeBeacon>
    4a84:	18 16       	cp	r1, r24
    4a86:	19 06       	cpc	r1, r25
    4a88:	0c f0       	brlt	.+2      	; 0x4a8c <processBeacon+0x34>
    4a8a:	6b c0       	rjmp	.+214    	; 0x4b62 <processBeacon+0x10a>
        ev = EV_BEACON_TRACKED;
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
    4a8c:	c3 70       	andi	r28, 0x03	; 3
    4a8e:	c9 f4       	brne	.+50     	; 0x4ac2 <processBeacon+0x6a>
        LMIC.maxDriftDiff = 0;
        LMIC.missedBcns = 0;
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    4a90:	8b e0       	ldi	r24, 0x0B	; 11
    4a92:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    4a96:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4a9a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4a9e:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <LMIC+0x189>
    4aa2:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    4aa6:	80 5c       	subi	r24, 0xC0	; 192
    4aa8:	97 4f       	sbci	r25, 0xF7	; 247
    4aaa:	a2 4c       	sbci	r26, 0xC2	; 194
    4aac:	bf 4f       	sbci	r27, 0xFF	; 255
    4aae:	80 93 9c 04 	sts	0x049C, r24	; 0x80049c <LMIC+0x183>
    4ab2:	90 93 9d 04 	sts	0x049D, r25	; 0x80049d <LMIC+0x184>
    4ab6:	a0 93 9e 04 	sts	0x049E, r26	; 0x80049e <LMIC+0x185>
    4aba:	b0 93 9f 04 	sts	0x049F, r27	; 0x80049f <LMIC+0x186>
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
        ev = EV_BEACON_TRACKED;
    4abe:	c4 e0       	ldi	r28, 0x04	; 4
    4ac0:	da c0       	rjmp	.+436    	; 0x4c76 <processBeacon+0x21e>
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
            goto rev;
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
    4ac2:	27 ef       	ldi	r18, 0xF7	; 247
    4ac4:	d2 1a       	sub	r13, r18
    4ac6:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4aca:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4ace:	c8 1a       	sub	r12, r24
    4ad0:	d9 0a       	sbc	r13, r25
        if( LMIC.missedBcns > 0 ) {
    4ad2:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <LMIC+0x12a>
    4ad6:	66 23       	and	r22, r22
    4ad8:	79 f0       	breq	.+30     	; 0x4af8 <processBeacon+0xa0>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
    4ada:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <LMIC+0xae>
    4ade:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <LMIC+0xaf>
    4ae2:	c6 01       	movw	r24, r12
    4ae4:	82 1b       	sub	r24, r18
    4ae6:	93 0b       	sbc	r25, r19
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	6f 5f       	subi	r22, 0xFF	; 255
    4aec:	7f 4f       	sbci	r23, 0xFF	; 255
    4aee:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <__divmodhi4>
    4af2:	69 01       	movw	r12, r18
    4af4:	c6 0e       	add	r12, r22
    4af6:	d7 1e       	adc	r13, r23
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
    4af8:	20 91 a6 04 	lds	r18, 0x04A6	; 0x8004a6 <LMIC+0x18d>
    4afc:	22 fd       	sbrc	r18, 2
    4afe:	1d c0       	rjmp	.+58     	; 0x4b3a <processBeacon+0xe2>
            s2_t diff = LMIC.drift - drift;
    4b00:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <LMIC+0xae>
    4b04:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <LMIC+0xaf>
    4b08:	8c 19       	sub	r24, r12
    4b0a:	9d 09       	sbc	r25, r13
    4b0c:	97 ff       	sbrs	r25, 7
    4b0e:	03 c0       	rjmp	.+6      	; 0x4b16 <processBeacon+0xbe>
    4b10:	91 95       	neg	r25
    4b12:	81 95       	neg	r24
    4b14:	91 09       	sbc	r25, r1
            if( diff < 0 ) diff = -diff;
            LMIC.lastDriftDiff = diff;
    4b16:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <LMIC+0xb1>
    4b1a:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <LMIC+0xb0>
            if( LMIC.maxDriftDiff < diff )
    4b1e:	40 91 cb 03 	lds	r20, 0x03CB	; 0x8003cb <LMIC+0xb2>
    4b22:	50 91 cc 03 	lds	r21, 0x03CC	; 0x8003cc <LMIC+0xb3>
    4b26:	48 17       	cp	r20, r24
    4b28:	59 07       	cpc	r21, r25
    4b2a:	24 f4       	brge	.+8      	; 0x4b34 <processBeacon+0xdc>
                LMIC.maxDriftDiff = diff;
    4b2c:	90 93 cc 03 	sts	0x03CC, r25	; 0x8003cc <LMIC+0xb3>
    4b30:	80 93 cb 03 	sts	0x03CB, r24	; 0x8003cb <LMIC+0xb2>
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
    4b34:	27 7f       	andi	r18, 0xF7	; 247
    4b36:	20 93 a6 04 	sts	0x04A6, r18	; 0x8004a6 <LMIC+0x18d>
        }
        LMIC.drift = drift;
    4b3a:	d0 92 c8 03 	sts	0x03C8, r13	; 0x8003c8 <LMIC+0xaf>
    4b3e:	c0 92 c7 03 	sts	0x03C7, r12	; 0x8003c7 <LMIC+0xae>
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
    4b42:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <LMIC+0xad>
    4b46:	10 92 43 04 	sts	0x0443, r1	; 0x800443 <LMIC+0x12a>
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
    4b4a:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <LMIC+0x18d>
    4b4e:	98 2f       	mov	r25, r24
    4b50:	9b 7f       	andi	r25, 0xFB	; 251
    4b52:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <LMIC+0x18d>
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
    4b56:	83 70       	andi	r24, 0x03	; 3
    4b58:	09 f0       	breq	.+2      	; 0x4b5c <processBeacon+0x104>
    4b5a:	69 c0       	rjmp	.+210    	; 0x4c2e <processBeacon+0x1d6>
    4b5c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    4b60:	66 c0       	rjmp	.+204    	; 0x4c2e <processBeacon+0x1d6>
    } else {
        ev = EV_BEACON_MISSED;
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
    4b62:	c0 90 c7 03 	lds	r12, 0x03C7	; 0x8003c7 <LMIC+0xae>
    4b66:	d0 90 c8 03 	lds	r13, 0x03C8	; 0x8003c8 <LMIC+0xaf>
    4b6a:	0d 2c       	mov	r0, r13
    4b6c:	00 0c       	add	r0, r0
    4b6e:	ee 08       	sbc	r14, r14
    4b70:	ff 08       	sbc	r15, r15
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	99 e0       	ldi	r25, 0x09	; 9
    4b76:	ad e3       	ldi	r26, 0x3D	; 61
    4b78:	b0 e0       	ldi	r27, 0x00	; 0
    4b7a:	ac 01       	movw	r20, r24
    4b7c:	bd 01       	movw	r22, r26
    4b7e:	4c 19       	sub	r20, r12
    4b80:	5d 09       	sbc	r21, r13
    4b82:	6e 09       	sbc	r22, r14
    4b84:	7f 09       	sbc	r23, r15
    4b86:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4b8a:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4b8e:	a0 91 a2 04 	lds	r26, 0x04A2	; 0x8004a2 <LMIC+0x189>
    4b92:	b0 91 a3 04 	lds	r27, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    4b96:	84 0f       	add	r24, r20
    4b98:	95 1f       	adc	r25, r21
    4b9a:	a6 1f       	adc	r26, r22
    4b9c:	b7 1f       	adc	r27, r23
    4b9e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <LMIC+0x187>
    4ba2:	90 93 a1 04 	sts	0x04A1, r25	; 0x8004a1 <LMIC+0x188>
    4ba6:	a0 93 a2 04 	sts	0x04A2, r26	; 0x8004a2 <LMIC+0x189>
    4baa:	b0 93 a3 04 	sts	0x04A3, r27	; 0x8004a3 <LMIC+0x18a>
        LMIC.bcninfo.time   += BCN_INTV_sec;
    4bae:	c0 90 a7 04 	lds	r12, 0x04A7	; 0x8004a7 <LMIC+0x18e>
    4bb2:	d0 90 a8 04 	lds	r13, 0x04A8	; 0x8004a8 <LMIC+0x18f>
    4bb6:	e0 90 a9 04 	lds	r14, 0x04A9	; 0x8004a9 <LMIC+0x190>
    4bba:	f0 90 aa 04 	lds	r15, 0x04AA	; 0x8004aa <LMIC+0x191>
    4bbe:	20 e8       	ldi	r18, 0x80	; 128
    4bc0:	c2 0e       	add	r12, r18
    4bc2:	d1 1c       	adc	r13, r1
    4bc4:	e1 1c       	adc	r14, r1
    4bc6:	f1 1c       	adc	r15, r1
    4bc8:	c0 92 a7 04 	sts	0x04A7, r12	; 0x8004a7 <LMIC+0x18e>
    4bcc:	d0 92 a8 04 	sts	0x04A8, r13	; 0x8004a8 <LMIC+0x18f>
    4bd0:	e0 92 a9 04 	sts	0x04A9, r14	; 0x8004a9 <LMIC+0x190>
    4bd4:	f0 92 aa 04 	sts	0x04AA, r15	; 0x8004aa <LMIC+0x191>
        LMIC.missedBcns++;
    4bd8:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <LMIC+0x12a>
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <LMIC+0x12a>
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
    4be2:	bc 01       	movw	r22, r24
    4be4:	cd 01       	movw	r24, r26
    4be6:	66 53       	subi	r22, 0x36	; 54
    4be8:	7d 4f       	sbci	r23, 0xFD	; 253
    4bea:	8e 4f       	sbci	r24, 0xFE	; 254
    4bec:	9f 4f       	sbci	r25, 0xFF	; 255
    4bee:	44 e0       	ldi	r20, 0x04	; 4
    4bf0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
    4bf4:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <LMIC+0x12a>
    4bf8:	85 31       	cpi	r24, 0x15	; 21
    4bfa:	48 f0       	brcs	.+18     	; 0x4c0e <processBeacon+0x1b6>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
    4bfc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4c00:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4c04:	80 62       	ori	r24, 0x20	; 32
    4c06:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4c0a:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
    4c0e:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <LMIC+0x182>
    4c12:	85 36       	cpi	r24, 0x65	; 101
    4c14:	70 f0       	brcs	.+28     	; 0x4c32 <processBeacon+0x1da>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
    4c16:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4c1a:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4c1e:	8d 7d       	andi	r24, 0xDD	; 221
    4c20:	99 7f       	andi	r25, 0xF9	; 249
    4c22:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4c26:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
            reportEvent(EV_LOST_TSYNC);
    4c2a:	8b e0       	ldi	r24, 0x0B	; 11
    4c2c:	2c c0       	rjmp	.+88     	; 0x4c86 <processBeacon+0x22e>
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
        ev = EV_BEACON_TRACKED;
    4c2e:	c4 e0       	ldi	r28, 0x04	; 4
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <processBeacon+0x1dc>
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
    } else {
        ev = EV_BEACON_MISSED;
    4c32:	c3 e0       	ldi	r28, 0x03	; 3
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
            reportEvent(EV_LOST_TSYNC);
            return;
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
    4c34:	c0 90 a0 04 	lds	r12, 0x04A0	; 0x8004a0 <LMIC+0x187>
    4c38:	d0 90 a1 04 	lds	r13, 0x04A1	; 0x8004a1 <LMIC+0x188>
    4c3c:	e0 90 a2 04 	lds	r14, 0x04A2	; 0x8004a2 <LMIC+0x189>
    4c40:	f0 90 a3 04 	lds	r15, 0x04A3	; 0x8004a3 <LMIC+0x18a>
    4c44:	89 e0       	ldi	r24, 0x09	; 9
    4c46:	d8 0e       	add	r13, r24
    4c48:	8d e3       	ldi	r24, 0x3D	; 61
    4c4a:	e8 1e       	adc	r14, r24
    4c4c:	f1 1c       	adc	r15, r1
    4c4e:	63 e0       	ldi	r22, 0x03	; 3
    4c50:	80 e0       	ldi	r24, 0x00	; 0
    4c52:	0e 94 43 13 	call	0x2686	; 0x2686 <calcRxWindow>
    4c56:	c6 1a       	sub	r12, r22
    4c58:	d7 0a       	sbc	r13, r23
    4c5a:	e8 0a       	sbc	r14, r24
    4c5c:	f9 0a       	sbc	r15, r25
    4c5e:	c0 92 9c 04 	sts	0x049C, r12	; 0x80049c <LMIC+0x183>
    4c62:	d0 92 9d 04 	sts	0x049D, r13	; 0x80049d <LMIC+0x184>
    4c66:	e0 92 9e 04 	sts	0x049E, r14	; 0x80049e <LMIC+0x185>
    4c6a:	f0 92 9f 04 	sts	0x049F, r15	; 0x80049f <LMIC+0x186>
    LMIC.bcnRxsyms = LMIC.rxsyms;    
    4c6e:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <LMIC+0x10>
    4c72:	80 93 9b 04 	sts	0x049B, r24	; 0x80049b <LMIC+0x182>
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
    4c76:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4c7a:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4c7e:	91 fd       	sbrc	r25, 1
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
    4c80:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <rxschedInit.constprop.10>
    reportEvent(ev);
    4c84:	8c 2f       	mov	r24, r28
}
    4c86:	cf 91       	pop	r28
    4c88:	ff 90       	pop	r15
    4c8a:	ef 90       	pop	r14
    4c8c:	df 90       	pop	r13
    4c8e:	cf 90       	pop	r12
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
    reportEvent(ev);
    4c90:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>

00004c94 <processJoinAccept>:
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
}


static bit_t processJoinAccept (void) {
    4c94:	cf 92       	push	r12
    4c96:	df 92       	push	r13
    4c98:	ef 92       	push	r14
    4c9a:	ff 92       	push	r15
    4c9c:	0f 93       	push	r16
    4c9e:	1f 93       	push	r17
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
    4ca4:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <LMIC+0x13e>
    4ca8:	81 30       	cpi	r24, 0x01	; 1
    4caa:	31 f4       	brne	.+12     	; 0x4cb8 <processJoinAccept+0x24>
    4cac:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    4cb0:	81 11       	cpse	r24, r1
    4cb2:	02 c0       	rjmp	.+4      	; 0x4cb8 <processJoinAccept+0x24>
    4cb4:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
    4cb8:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4cbc:	87 ff       	sbrs	r24, 7
    4cbe:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>

    if( LMIC.dataLen == 0 ) {
    4cc2:	10 91 59 04 	lds	r17, 0x0459	; 0x800459 <LMIC+0x140>
    4cc6:	11 11       	cpse	r17, r1
    4cc8:	8f c0       	rjmp	.+286    	; 0x4de8 <processJoinAccept+0x154>
      nojoinframe:
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
    4cca:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4cce:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4cd2:	82 fd       	sbrc	r24, 2
    4cd4:	15 c0       	rjmp	.+42     	; 0x4d00 <processJoinAccept+0x6c>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
    4cd6:	85 ff       	sbrs	r24, 5
    4cd8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
            // REJOIN attempt for roaming
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
    4cdc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4ce0:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4ce4:	8f 75       	andi	r24, 0x5F	; 95
    4ce6:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4cea:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
            if( LMIC.rejoinCnt < 10 )
    4cee:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <LMIC+0xad>
    4cf2:	8a 30       	cpi	r24, 0x0A	; 10
    4cf4:	18 f4       	brcc	.+6      	; 0x4cfc <processJoinAccept+0x68>
                LMIC.rejoinCnt++;
    4cf6:	8f 5f       	subi	r24, 0xFF	; 255
    4cf8:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <LMIC+0xad>
            reportEvent(EV_REJOIN_FAILED);
    4cfc:	89 e0       	ldi	r24, 0x09	; 9
    4cfe:	5c c1       	rjmp	.+696    	; 0x4fb8 <processJoinAccept+0x324>
static ostime_t nextJoinState (void) {
    u1_t failed = 0;

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
    4d00:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <LMIC+0x9d>
    4d04:	2f 5f       	subi	r18, 0xFF	; 255
    4d06:	26 30       	cpi	r18, 0x06	; 6
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <processJoinAccept+0x7c>
    4d0a:	20 93 b6 03 	sts	0x03B6, r18	; 0x8003b6 <LMIC+0x9d>
    4d0e:	02 c0       	rjmp	.+4      	; 0x4d14 <processJoinAccept+0x80>
        LMIC.txChnl = 0;
    4d10:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <LMIC+0x9d>
    if( (++LMIC.txCnt & 1) == 0 ) {
    4d14:	20 91 56 04 	lds	r18, 0x0456	; 0x800456 <LMIC+0x13d>
    4d18:	2f 5f       	subi	r18, 0xFF	; 255
    4d1a:	20 93 56 04 	sts	0x0456, r18	; 0x800456 <LMIC+0x13d>
    4d1e:	20 fd       	sbrc	r18, 0
    4d20:	0e c0       	rjmp	.+28     	; 0x4d3e <processJoinAccept+0xaa>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
    4d22:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <LMIC+0xab>
    4d26:	22 23       	and	r18, r18
    4d28:	61 f0       	breq	.+24     	; 0x4d42 <processJoinAccept+0xae>
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    4d2a:	e2 2f       	mov	r30, r18
    4d2c:	f0 e0       	ldi	r31, 0x00	; 0
    4d2e:	e5 53       	subi	r30, 0x35	; 53
    4d30:	fd 4f       	sbci	r31, 0xFD	; 253
    4d32:	30 81       	ld	r19, Z
    4d34:	3f 3f       	cpi	r19, 0xFF	; 255
    4d36:	09 f0       	breq	.+2      	; 0x4d3a <processJoinAccept+0xa6>
    4d38:	21 50       	subi	r18, 0x01	; 1
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
    4d3a:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <LMIC+0xab>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
}


static ostime_t nextJoinState (void) {
    u1_t failed = 0;
    4d3e:	c0 e0       	ldi	r28, 0x00	; 0
    4d40:	01 c0       	rjmp	.+2      	; 0x4d44 <processJoinAccept+0xb0>
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
        LMIC.txChnl = 0;
    if( (++LMIC.txCnt & 1) == 0 ) {
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
    4d42:	c1 e0       	ldi	r28, 0x01	; 1
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
    4d44:	8f 77       	andi	r24, 0x7F	; 127
    4d46:	97 7f       	andi	r25, 0xF7	; 247
    4d48:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4d4c:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
    4d50:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    4d54:	6b 01       	movw	r12, r22
    4d56:	7c 01       	movw	r14, r24
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
    4d58:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <LMIC+0x1f>
    4d5c:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <LMIC+0x20>
    4d60:	a0 91 3a 03 	lds	r26, 0x033A	; 0x80033a <LMIC+0x21>
    4d64:	b0 91 3b 03 	lds	r27, 0x033B	; 0x80033b <LMIC+0x22>
    4d68:	b7 01       	movw	r22, r14
    4d6a:	a6 01       	movw	r20, r12
    4d6c:	48 1b       	sub	r20, r24
    4d6e:	59 0b       	sbc	r21, r25
    4d70:	6a 0b       	sbc	r22, r26
    4d72:	7b 0b       	sbc	r23, r27
    4d74:	77 ff       	sbrs	r23, 7
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <processJoinAccept+0xe8>
        time = LMIC.bands[BAND_MILLI].avail;
    4d78:	6c 01       	movw	r12, r24
    4d7a:	7d 01       	movw	r14, r26
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
    4d7c:	8f ef       	ldi	r24, 0xFF	; 255
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	00 90 c4 03 	lds	r0, 0x03C4	; 0x8003c4 <LMIC+0xab>
    4d84:	02 c0       	rjmp	.+4      	; 0x4d8a <processJoinAccept+0xf6>
    4d86:	95 95       	asr	r25
    4d88:	87 95       	ror	r24
    4d8a:	0a 94       	dec	r0
    4d8c:	e2 f7       	brpl	.-8      	; 0x4d86 <processJoinAccept+0xf2>
    4d8e:	0e 94 16 14 	call	0x282c	; 0x282c <rndDelay>
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
        time = LMIC.bands[BAND_MILLI].avail;
    LMIC.txend = time +
    4d92:	dc 01       	movw	r26, r24
    4d94:	cb 01       	movw	r24, r22
    4d96:	8a 5c       	subi	r24, 0xCA	; 202
    4d98:	91 49       	sbci	r25, 0x91	; 145
    4d9a:	ae 4f       	sbci	r26, 0xFE	; 254
    4d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    4d9e:	c8 0e       	add	r12, r24
    4da0:	d9 1e       	adc	r13, r25
    4da2:	ea 1e       	adc	r14, r26
    4da4:	fb 1e       	adc	r15, r27
    4da6:	c0 92 19 03 	sts	0x0319, r12	; 0x800319 <LMIC>
    4daa:	d0 92 1a 03 	sts	0x031A, r13	; 0x80031a <LMIC+0x1>
    4dae:	e0 92 1b 03 	sts	0x031B, r14	; 0x80031b <LMIC+0x2>
    4db2:	f0 92 1c 03 	sts	0x031C, r15	; 0x80031c <LMIC+0x3>
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
    4db6:	cc 2e       	mov	r12, r28
    4db8:	d1 2c       	mov	r13, r1
    4dba:	e1 2c       	mov	r14, r1
    4dbc:	f1 2c       	mov	r15, r1
                            e_.info   = LMIC.datarate|DR_PAGE,
                            e_.info2  = osticks2ms(delay)));
        // Build next JOIN REQUEST with next engineUpdate call
        // Optionally, report join failed.
        // Both after a random/chosen amount of ticks.
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
    4dbe:	c1 11       	cpse	r28, r1
    4dc0:	03 c0       	rjmp	.+6      	; 0x4dc8 <processJoinAccept+0x134>
    4dc2:	c7 e0       	ldi	r28, 0x07	; 7
    4dc4:	d8 e2       	ldi	r29, 0x28	; 40
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <processJoinAccept+0x138>
    4dc8:	c1 e0       	ldi	r28, 0x01	; 1
    4dca:	d8 e2       	ldi	r29, 0x28	; 40
    4dcc:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    4dd0:	ab 01       	movw	r20, r22
    4dd2:	bc 01       	movw	r22, r24
    4dd4:	4c 0d       	add	r20, r12
    4dd6:	5d 1d       	adc	r21, r13
    4dd8:	6e 1d       	adc	r22, r14
    4dda:	7f 1d       	adc	r23, r15
    4ddc:	9e 01       	movw	r18, r28
    4dde:	8c e2       	ldi	r24, 0x2C	; 44
    4de0:	93 e0       	ldi	r25, 0x03	; 3
    4de2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <os_setTimedCallback>
    4de6:	ea c0       	rjmp	.+468    	; 0x4fbc <processJoinAccept+0x328>
        return 1;
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
    4de8:	11 31       	cpi	r17, 0x11	; 17
    4dea:	41 f0       	breq	.+16     	; 0x4dfc <processJoinAccept+0x168>
    4dec:	11 32       	cpi	r17, 0x21	; 33
    4dee:	31 f0       	breq	.+12     	; 0x4dfc <processJoinAccept+0x168>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
    4df0:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <LMIC+0x13e>
    4df4:	80 ff       	sbrs	r24, 0
    4df6:	69 cf       	rjmp	.-302    	; 0x4cca <processJoinAccept+0x36>
            return 0;
    4df8:	80 e0       	ldi	r24, 0x00	; 0
    4dfa:	e1 c0       	rjmp	.+450    	; 0x4fbe <processJoinAccept+0x32a>
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
    4dfc:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <LMIC+0x141>
    4e00:	83 7e       	andi	r24, 0xE3	; 227
    4e02:	80 32       	cpi	r24, 0x20	; 32
    4e04:	a9 f7       	brne	.-22     	; 0x4df0 <processJoinAccept+0x15c>
                            : FUNC_ADDR(runEngineUpdate)); // next step to be delayed
        return 1;
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    4e06:	c1 2f       	mov	r28, r17
    4e08:	d0 e0       	ldi	r29, 0x00	; 0
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
}


static void aes_encrypt (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    4e0a:	85 eb       	ldi	r24, 0xB5	; 181
    4e0c:	94 e0       	ldi	r25, 0x04	; 4
    4e0e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
    4e12:	ae 01       	movw	r20, r28
    4e14:	41 50       	subi	r20, 0x01	; 1
    4e16:	51 09       	sbc	r21, r1
    4e18:	6b e5       	ldi	r22, 0x5B	; 91
    4e1a:	74 e0       	ldi	r23, 0x04	; 4
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
}


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    4e22:	85 eb       	ldi	r24, 0xB5	; 181
    4e24:	94 e0       	ldi	r25, 0x04	; 4
    4e26:	0e 94 e7 09 	call	0x13ce	; 0x13ce <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
    4e2a:	24 97       	sbiw	r28, 0x04	; 4
    4e2c:	ae 01       	movw	r20, r28
    4e2e:	6a e5       	ldi	r22, 0x5A	; 90
    4e30:	74 e0       	ldi	r23, 0x04	; 4
    4e32:	8a e0       	ldi	r24, 0x0A	; 10
    4e34:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    4e38:	6b 01       	movw	r12, r22
    4e3a:	7c 01       	movw	r14, r24
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	86 5a       	subi	r24, 0xA6	; 166
    4e40:	9b 4f       	sbci	r25, 0xFB	; 251
    4e42:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <os_rmsbf4>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
    4e46:	c6 16       	cp	r12, r22
    4e48:	d7 06       	cpc	r13, r23
    4e4a:	e8 06       	cpc	r14, r24
    4e4c:	f9 06       	cpc	r15, r25
    4e4e:	81 f6       	brne	.-96     	; 0x4df0 <processJoinAccept+0x15c>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
    4e50:	81 e6       	ldi	r24, 0x61	; 97
    4e52:	94 e0       	ldi	r25, 0x04	; 4
    4e54:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    LMIC.devaddr = addr;
    4e58:	60 93 26 04 	sts	0x0426, r22	; 0x800426 <LMIC+0x10d>
    4e5c:	70 93 27 04 	sts	0x0427, r23	; 0x800427 <LMIC+0x10e>
    4e60:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <LMIC+0x10f>
    4e64:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <LMIC+0x110>
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
    4e68:	8e e5       	ldi	r24, 0x5E	; 94
    4e6a:	94 e0       	ldi	r25, 0x04	; 4
    4e6c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <os_rlsbf4>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	bb 27       	eor	r27, r27
    4e76:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <LMIC+0xa3>
    4e7a:	90 93 bd 03 	sts	0x03BD, r25	; 0x8003bd <LMIC+0xa4>
    4e7e:	a0 93 be 03 	sts	0x03BE, r26	; 0x8003be <LMIC+0xa5>
    4e82:	b0 93 bf 03 	sts	0x03BF, r27	; 0x8003bf <LMIC+0xa6>

#if defined(CFG_eu868)
    initDefaultChannels(0);
    4e86:	80 e0       	ldi	r24, 0x00	; 0
    4e88:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
    4e8c:	12 31       	cpi	r17, 0x12	; 18
    4e8e:	08 f0       	brcs	.+2      	; 0x4e92 <processJoinAccept+0x1fe>
    4e90:	49 c0       	rjmp	.+146    	; 0x4f24 <processJoinAccept+0x290>
                LMIC_setupChannel(chidx, freq, 0, -1);
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
    4e92:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <LMIC+0xeb>
    4e96:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <LMIC+0xec>
    4e9a:	01 97       	sbiw	r24, 0x01	; 1
    os_aes(AES_CTR, payload, len);
}


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
    os_clearMem(nwkkey, 16);
    4e9c:	20 e1       	ldi	r18, 0x10	; 16
    4e9e:	e6 e0       	ldi	r30, 0x06	; 6
    4ea0:	f4 e0       	ldi	r31, 0x04	; 4
    4ea2:	df 01       	movw	r26, r30
    4ea4:	32 2f       	mov	r19, r18
    4ea6:	1d 92       	st	X+, r1
    4ea8:	3a 95       	dec	r19
    4eaa:	e9 f7       	brne	.-6      	; 0x4ea6 <processJoinAccept+0x212>
    nwkkey[0] = 0x01;
    4eac:	31 e0       	ldi	r19, 0x01	; 1
    4eae:	30 93 06 04 	sts	0x0406, r19	; 0x800406 <LMIC+0xed>
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
    4eb2:	36 e0       	ldi	r19, 0x06	; 6
    4eb4:	eb e5       	ldi	r30, 0x5B	; 91
    4eb6:	f4 e0       	ldi	r31, 0x04	; 4
    4eb8:	a7 e0       	ldi	r26, 0x07	; 7
    4eba:	b4 e0       	ldi	r27, 0x04	; 4
    4ebc:	01 90       	ld	r0, Z+
    4ebe:	0d 92       	st	X+, r0
    4ec0:	3a 95       	dec	r19
    4ec2:	e1 f7       	brne	.-8      	; 0x4ebc <processJoinAccept+0x228>
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    4ec4:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <LMIC+0xf4>
    buf[1] = v>>8;
    4ec8:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <LMIC+0xf5>
static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
    os_clearMem(nwkkey, 16);
    nwkkey[0] = 0x01;
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
    os_copyMem(artkey, nwkkey, 16);
    4ecc:	e6 e0       	ldi	r30, 0x06	; 6
    4ece:	f4 e0       	ldi	r31, 0x04	; 4
    4ed0:	a6 e1       	ldi	r26, 0x16	; 22
    4ed2:	b4 e0       	ldi	r27, 0x04	; 4
    4ed4:	01 90       	ld	r0, Z+
    4ed6:	0d 92       	st	X+, r0
    4ed8:	2a 95       	dec	r18
    4eda:	e1 f7       	brne	.-8      	; 0x4ed4 <processJoinAccept+0x240>
    artkey[0] = 0x02;
    4edc:	82 e0       	ldi	r24, 0x02	; 2
    4ede:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <LMIC+0xfd>

    os_getDevKey(AESkey);
    4ee2:	85 eb       	ldi	r24, 0xB5	; 181
    4ee4:	94 e0       	ldi	r25, 0x04	; 4
    4ee6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
    4eea:	40 e1       	ldi	r20, 0x10	; 16
    4eec:	50 e0       	ldi	r21, 0x00	; 0
    4eee:	66 e0       	ldi	r22, 0x06	; 6
    4ef0:	74 e0       	ldi	r23, 0x04	; 4
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
    os_getDevKey(AESkey);
    4ef8:	85 eb       	ldi	r24, 0xB5	; 181
    4efa:	94 e0       	ldi	r25, 0x04	; 4
    4efc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
    4f00:	40 e1       	ldi	r20, 0x10	; 16
    4f02:	50 e0       	ldi	r21, 0x00	; 0
    4f04:	66 e1       	ldi	r22, 0x16	; 22
    4f06:	74 e0       	ldi	r23, 0x04	; 4
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	0e 94 31 2a 	call	0x5462	; 0x5462 <os_aes>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
    4f0e:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4f12:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4f16:	84 72       	andi	r24, 0x24	; 36
    4f18:	99 27       	eor	r25, r25
    4f1a:	89 2b       	or	r24, r25
    4f1c:	f9 f4       	brne	.+62     	; 0x4f5c <processJoinAccept+0x2c8>
    4f1e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>
    4f22:	1c c0       	rjmp	.+56     	; 0x4f5c <processJoinAccept+0x2c8>
    4f24:	87 e6       	ldi	r24, 0x67	; 103
    4f26:	e8 2e       	mov	r14, r24
    4f28:	84 e0       	ldi	r24, 0x04	; 4
    4f2a:	f8 2e       	mov	r15, r24
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;

#if defined(CFG_eu868)
    initDefaultChannels(0);
#endif
    if( dlen > LEN_JA ) {
    4f2c:	c3 e0       	ldi	r28, 0x03	; 3
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
            u4_t freq = convFreq(&LMIC.frame[dlen]);
    4f2e:	c7 01       	movw	r24, r14
    4f30:	0e 94 dd 16 	call	0x2dba	; 0x2dba <convFreq>
    4f34:	ab 01       	movw	r20, r22
    4f36:	bc 01       	movw	r22, r24
            if( freq )
    4f38:	41 15       	cp	r20, r1
    4f3a:	51 05       	cpc	r21, r1
    4f3c:	61 05       	cpc	r22, r1
    4f3e:	71 05       	cpc	r23, r1
    4f40:	31 f0       	breq	.+12     	; 0x4f4e <processJoinAccept+0x2ba>
                LMIC_setupChannel(chidx, freq, 0, -1);
    4f42:	0f ef       	ldi	r16, 0xFF	; 255
    4f44:	20 e0       	ldi	r18, 0x00	; 0
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	8c 2f       	mov	r24, r28
    4f4a:	0e 94 4f 1a 	call	0x349e	; 0x349e <LMIC_setupChannel>
    if( dlen > LEN_JA ) {
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
    4f4e:	cf 5f       	subi	r28, 0xFF	; 255
    4f50:	83 e0       	ldi	r24, 0x03	; 3
    4f52:	e8 0e       	add	r14, r24
    4f54:	f1 1c       	adc	r15, r1
    4f56:	c8 30       	cpi	r28, 0x08	; 8
    4f58:	51 f7       	brne	.-44     	; 0x4f2e <processJoinAccept+0x29a>
    4f5a:	9b cf       	rjmp	.-202    	; 0x4e92 <processJoinAccept+0x1fe>
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
    4f5c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    4f60:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    4f64:	85 ff       	sbrs	r24, 5
    4f66:	11 c0       	rjmp	.+34     	; 0x4f8a <processJoinAccept+0x2f6>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
    4f68:	30 91 c6 03 	lds	r19, 0x03C6	; 0x8003c6 <LMIC+0xad>
    4f6c:	20 91 c4 03 	lds	r18, 0x03C4	; 0x8003c4 <LMIC+0xab>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    4f70:	31 50       	subi	r19, 0x01	; 1
    4f72:	48 f0       	brcs	.+18     	; 0x4f86 <processJoinAccept+0x2f2>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    4f74:	e2 2f       	mov	r30, r18
    4f76:	f0 e0       	ldi	r31, 0x00	; 0
    4f78:	e5 53       	subi	r30, 0x35	; 53
    4f7a:	fd 4f       	sbci	r31, 0xFD	; 253
    4f7c:	40 81       	ld	r20, Z
    4f7e:	4f 3f       	cpi	r20, 0xFF	; 255
    4f80:	b9 f3       	breq	.-18     	; 0x4f70 <processJoinAccept+0x2dc>
    4f82:	21 50       	subi	r18, 0x01	; 1
    4f84:	f5 cf       	rjmp	.-22     	; 0x4f70 <processJoinAccept+0x2dc>
    4f86:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <LMIC+0xab>
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
    4f8a:	89 75       	andi	r24, 0x59	; 89
    4f8c:	9d 7f       	andi	r25, 0xFD	; 253
    4f8e:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    4f92:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    LMIC.txCnt = 0;
    4f96:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <LMIC+0x13d>
    stateJustJoined();
    4f9a:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
    4f9e:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <LMIC+0x14c>
    4fa2:	8f 70       	andi	r24, 0x0F	; 15
    4fa4:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <LMIC+0x124>
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
    4fa8:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <LMIC+0x14d>
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
    4fac:	81 11       	cpse	r24, r1
    4fae:	01 c0       	rjmp	.+2      	; 0x4fb2 <processJoinAccept+0x31e>
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	80 93 35 04 	sts	0x0435, r24	; 0x800435 <LMIC+0x11c>
    reportEvent(EV_JOINED);
    4fb6:	86 e0       	ldi	r24, 0x06	; 6
    4fb8:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
    return 1;
    4fbc:	81 e0       	ldi	r24, 0x01	; 1
}
    4fbe:	df 91       	pop	r29
    4fc0:	cf 91       	pop	r28
    4fc2:	1f 91       	pop	r17
    4fc4:	0f 91       	pop	r16
    4fc6:	ff 90       	pop	r15
    4fc8:	ef 90       	pop	r14
    4fca:	df 90       	pop	r13
    4fcc:	cf 90       	pop	r12
    4fce:	08 95       	ret

00004fd0 <processRx1Jacc>:
    setupRx2();
}


static void processRx1Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processJoinAccept() )
    4fd0:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    4fd4:	81 11       	cpse	r24, r1
    4fd6:	08 c0       	rjmp	.+16     	; 0x4fe8 <processRx1Jacc+0x18>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
    4fd8:	4c e2       	ldi	r20, 0x2C	; 44
    4fda:	55 e1       	ldi	r21, 0x15	; 21
    4fdc:	6c e6       	ldi	r22, 0x6C	; 108
    4fde:	7c ed       	ldi	r23, 0xDC	; 220
    4fe0:	82 e0       	ldi	r24, 0x02	; 2
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	0c 94 94 14 	jmp	0x2928	; 0x2928 <schedRx2>
    setupRx2();
}


static void processRx1Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processJoinAccept() )
    4fe8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <processJoinAccept>
    4fec:	88 23       	and	r24, r24
    4fee:	a1 f3       	breq	.-24     	; 0x4fd8 <processRx1Jacc+0x8>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
}
    4ff0:	08 95       	ret

00004ff2 <processRx2Jacc>:
    return 1;
}


static void processRx2Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 )
    4ff2:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    4ff6:	81 11       	cpse	r24, r1
    4ff8:	02 c0       	rjmp	.+4      	; 0x4ffe <processRx2Jacc+0xc>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
    4ffa:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <LMIC+0x13e>
    processJoinAccept();
    4ffe:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <processJoinAccept>

00005002 <onJoinFailed>:


static void onJoinFailed (xref2osjob_t osjob) {
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
    5002:	88 e0       	ldi	r24, 0x08	; 8
    5004:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>

00005008 <startJoining>:
    LMIC.devNonce++;
    DO_DEVDB(LMIC.devNonce,devNonce);
}

static void startJoining (xref2osjob_t osjob) {
    reportEvent(EV_JOINING);
    5008:	85 e0       	ldi	r24, 0x05	; 5
    500a:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>

0000500e <runEngineUpdate>:
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
    engineUpdate();
    500e:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

00005012 <processPingRx>:
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
    if( LMIC.dataLen != 0 ) {
    5012:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    5016:	88 23       	and	r24, r24
    5018:	51 f0       	breq	.+20     	; 0x502e <processPingRx+0x1c>
        LMIC.txrxFlags = TXRX_PING;
    501a:	84 e0       	ldi	r24, 0x04	; 4
    501c:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
        if( decodeFrame() ) {
    5020:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <decodeFrame>
    5024:	88 23       	and	r24, r24
    5026:	19 f0       	breq	.+6      	; 0x502e <processPingRx+0x1c>
            reportEvent(EV_RXCOMPLETE);
    5028:	8d e0       	ldi	r24, 0x0D	; 13
    502a:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>
            return;
        }
    }
    // Pick next ping slot
    engineUpdate();
    502e:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

00005032 <processDnData>:
}


static bit_t processDnData (void) {
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
    5032:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5036:	87 ff       	sbrs	r24, 7
    5038:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <hal_failed>

    if( LMIC.dataLen == 0 ) {
    503c:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    5040:	81 11       	cpse	r24, r1
    5042:	98 c0       	rjmp	.+304    	; 0x5174 <processDnData+0x142>
      norx:
        if( LMIC.txCnt != 0 ) {
    5044:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <LMIC+0x13d>
    5048:	ee 23       	and	r30, r30
    504a:	91 f1       	breq	.+100    	; 0x50b0 <processDnData+0x7e>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
    504c:	e8 30       	cpi	r30, 0x08	; 8
    504e:	70 f5       	brcc	.+92     	; 0x50ac <processDnData+0x7a>
                LMIC.txCnt += 1;
    5050:	ef 5f       	subi	r30, 0xFF	; 255
    5052:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <LMIC+0x13d>
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
    5056:	f0 e0       	ldi	r31, 0x00	; 0
    5058:	e4 56       	subi	r30, 0x64	; 100
    505a:	fd 4f       	sbci	r31, 0xFD	; 253
    505c:	90 81       	ld	r25, Z
    505e:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <LMIC+0xab>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    5062:	91 50       	subi	r25, 0x01	; 1
    5064:	48 f0       	brcs	.+18     	; 0x5078 <processDnData+0x46>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    5066:	e8 2f       	mov	r30, r24
    5068:	f0 e0       	ldi	r31, 0x00	; 0
    506a:	e5 53       	subi	r30, 0x35	; 53
    506c:	fd 4f       	sbci	r31, 0xFD	; 253
    506e:	20 81       	ld	r18, Z
    5070:	2f 3f       	cpi	r18, 0xFF	; 255
    5072:	b9 f3       	breq	.-18     	; 0x5062 <processDnData+0x30>
    5074:	81 50       	subi	r24, 0x01	; 1
    5076:	f5 cf       	rjmp	.-22     	; 0x5062 <processDnData+0x30>
    5078:	60 e8       	ldi	r22, 0x80	; 128
    507a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <setDrTxpow.isra.1>
                // Schedule another retransmission
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
    507e:	60 91 1d 03 	lds	r22, 0x031D	; 0x80031d <LMIC+0x4>
    5082:	70 91 1e 03 	lds	r23, 0x031E	; 0x80031e <LMIC+0x5>
    5086:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <LMIC+0x6>
    508a:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <LMIC+0x7>
    508e:	43 e0       	ldi	r20, 0x03	; 3
    5090:	0e 94 58 14 	call	0x28b0	; 0x28b0 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
    5094:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5098:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    509c:	8f 77       	andi	r24, 0x7F	; 127
    509e:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    50a2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
                engineUpdate();
    50a6:	0e 94 0f 1f 	call	0x3e1e	; 0x3e1e <engineUpdate>
    50aa:	62 c0       	rjmp	.+196    	; 0x5170 <processDnData+0x13e>
                return 1;
            }
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
    50ac:	80 e6       	ldi	r24, 0x60	; 96
    50ae:	01 c0       	rjmp	.+2      	; 0x50b2 <processDnData+0x80>
        } else {
            // Nothing received - implies no port
            LMIC.txrxFlags = TXRX_NOPORT;
    50b0:	80 e2       	ldi	r24, 0x20	; 32
    50b2:	80 93 57 04 	sts	0x0457, r24	; 0x800457 <LMIC+0x13e>
        }
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
    50b6:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <LMIC+0x11a>
    50ba:	80 38       	cpi	r24, 0x80	; 128
    50bc:	19 f0       	breq	.+6      	; 0x50c4 <processDnData+0x92>
            LMIC.adrAckReq += 1;
    50be:	8f 5f       	subi	r24, 0xFF	; 255
    50c0:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <LMIC+0x11a>
        LMIC.dataBeg = LMIC.dataLen = 0;
    50c4:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <LMIC+0x140>
    50c8:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <LMIC+0x13f>
      txcomplete:
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
    50cc:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    50d0:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    50d4:	9c 01       	movw	r18, r24
    50d6:	27 77       	andi	r18, 0x77	; 119
    50d8:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <LMIC+0xa8>
    50dc:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <LMIC+0xa7>
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
    50e0:	20 91 57 04 	lds	r18, 0x0457	; 0x800457 <LMIC+0x13e>
    50e4:	27 70       	andi	r18, 0x07	; 7
    50e6:	59 f0       	breq	.+22     	; 0x50fe <processDnData+0xcc>
    50e8:	94 ff       	sbrs	r25, 4
    50ea:	09 c0       	rjmp	.+18     	; 0x50fe <processDnData+0xcc>
            LMIC.opmode &= ~OP_LINKDEAD;
    50ec:	87 77       	andi	r24, 0x77	; 119
    50ee:	9f 7e       	andi	r25, 0xEF	; 239
    50f0:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    50f4:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
            reportEvent(EV_LINK_ALIVE);
    50f8:	8f e0       	ldi	r24, 0x0F	; 15
    50fa:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
        }
        reportEvent(EV_TXCOMPLETE);
    50fe:	8a e0       	ldi	r24, 0x0A	; 10
    5100:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
        // If we haven't heard from NWK in a while although we asked for a sign
        // assume link is dead - notify application and keep going
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
    5104:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <LMIC+0x11a>
    5108:	89 31       	cpi	r24, 0x19	; 25
    510a:	ec f0       	brlt	.+58     	; 0x5146 <processDnData+0x114>
            // We haven't heard from NWK for some time although we
            // asked for a response for some time - assume we're disconnected. Lower DR one notch.
            EV(devCond, ERR, (e_.reason = EV::devCond_t::LINK_DEAD,
                              e_.eui    = MAIN::CDEV->getEui(),
                              e_.info   = LMIC.adrAckReq));
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
    510c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <LMIC+0xab>
    5110:	e8 2f       	mov	r30, r24
    5112:	f0 e0       	ldi	r31, 0x00	; 0
    5114:	e5 53       	subi	r30, 0x35	; 53
    5116:	fd 4f       	sbci	r31, 0xFD	; 253
    5118:	90 81       	ld	r25, Z
    511a:	9f 3f       	cpi	r25, 0xFF	; 255
    511c:	09 f0       	breq	.+2      	; 0x5120 <processDnData+0xee>
    511e:	81 50       	subi	r24, 0x01	; 1
    5120:	60 e8       	ldi	r22, 0x80	; 128
    5122:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <setDrTxpow.isra.1>
            LMIC.adrAckReq = LINK_CHECK_CONT;
    5126:	8c e0       	ldi	r24, 0x0C	; 12
    5128:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <LMIC+0x11a>
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
    512c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5130:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    5134:	80 62       	ori	r24, 0x20	; 32
    5136:	90 61       	ori	r25, 0x10	; 16
    5138:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    513c:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
            reportEvent(EV_LINK_DEAD);
    5140:	8e e0       	ldi	r24, 0x0E	; 14
    5142:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
        }
        // If this falls to zero the NWK did not answer our MCMD_BCNI_REQ commands - try full scan
        if( LMIC.bcninfoTries > 0 ) {
    5146:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <LMIC+0x12b>
    514a:	88 23       	and	r24, r24
    514c:	89 f0       	breq	.+34     	; 0x5170 <processDnData+0x13e>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
    514e:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5152:	91 ff       	sbrs	r25, 1
    5154:	06 c0       	rjmp	.+12     	; 0x5162 <processDnData+0x130>
                reportEvent(EV_BEACON_FOUND);
    5156:	82 e0       	ldi	r24, 0x02	; 2
    5158:	0e 94 c7 24 	call	0x498e	; 0x498e <reportEvent>
                LMIC.bcninfoTries = 0;
    515c:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <LMIC+0x12b>
    5160:	07 c0       	rjmp	.+14     	; 0x5170 <processDnData+0x13e>
            }
            else if( --LMIC.bcninfoTries == 0 ) {
    5162:	81 50       	subi	r24, 0x01	; 1
    5164:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <LMIC+0x12b>
    5168:	81 11       	cpse	r24, r1
    516a:	02 c0       	rjmp	.+4      	; 0x5170 <processDnData+0x13e>
                startScan();   // NWK did not answer - try scan
    516c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <startScan>
            }
        }
        return 1;
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	08 95       	ret
    }
    if( !decodeFrame() ) {
    5174:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <decodeFrame>
    5178:	81 11       	cpse	r24, r1
    517a:	a8 cf       	rjmp	.-176    	; 0x50cc <processDnData+0x9a>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
    517c:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <LMIC+0x13e>
    5180:	90 ff       	sbrs	r25, 0
    5182:	60 cf       	rjmp	.-320    	; 0x5044 <processDnData+0x12>
            return 0;
        goto norx;
    }
    goto txcomplete;
}
    5184:	08 95       	ret

00005186 <processRx1DnData>:
    setupRx2();
}


static void processRx1DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processDnData() )
    5186:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    518a:	81 11       	cpse	r24, r1
    518c:	0c c0       	rjmp	.+24     	; 0x51a6 <processRx1DnData+0x20>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
    518e:	a0 91 35 04 	lds	r26, 0x0435	; 0x800435 <LMIC+0x11c>
    5192:	b0 e0       	ldi	r27, 0x00	; 0
    5194:	11 96       	adiw	r26, 0x01	; 1
    5196:	22 e1       	ldi	r18, 0x12	; 18
    5198:	3a e7       	ldi	r19, 0x7A	; 122
    519a:	0e 94 bb 32 	call	0x6576	; 0x6576 <__usmulhisi3>
    519e:	44 e2       	ldi	r20, 0x24	; 36
    51a0:	55 e1       	ldi	r21, 0x15	; 21
    51a2:	0c 94 94 14 	jmp	0x2928	; 0x2928 <schedRx2>
    setupRx2();
}


static void processRx1DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processDnData() )
    51a6:	0e 94 19 28 	call	0x5032	; 0x5032 <processDnData>
    51aa:	88 23       	and	r24, r24
    51ac:	81 f3       	breq	.-32     	; 0x518e <processRx1DnData+0x8>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
}
    51ae:	08 95       	ret

000051b0 <processRx2DnData>:

static void processRx2DnDataDelay (xref2osjob_t osjob) {
    processDnData();
}

static void processRx2DnData (xref2osjob_t osjob) {
    51b0:	cf 92       	push	r12
    51b2:	df 92       	push	r13
    51b4:	ef 92       	push	r14
    51b6:	ff 92       	push	r15
    if( LMIC.dataLen == 0 ) {
    51b8:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <LMIC+0x140>
    51bc:	81 11       	cpse	r24, r1
    51be:	20 c0       	rjmp	.+64     	; 0x5200 <processRx2DnData+0x50>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
    51c0:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <LMIC+0x13e>
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
    51c4:	0e 94 a1 0c 	call	0x1942	; 0x1942 <os_getTime>
    51c8:	6b 01       	movw	r12, r22
    51ca:	7c 01       	movw	r14, r24
    51cc:	82 e0       	ldi	r24, 0x02	; 2
    51ce:	0e 94 16 14 	call	0x282c	; 0x282c <rndDelay>
static void processRx2DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 ) {
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
    51d2:	26 e3       	ldi	r18, 0x36	; 54
    51d4:	c2 0e       	add	r12, r18
    51d6:	2e e6       	ldi	r18, 0x6E	; 110
    51d8:	d2 1e       	adc	r13, r18
    51da:	21 e0       	ldi	r18, 0x01	; 1
    51dc:	e2 1e       	adc	r14, r18
    51de:	f1 1c       	adc	r15, r1
    51e0:	ab 01       	movw	r20, r22
    51e2:	bc 01       	movw	r22, r24
    51e4:	4c 0d       	add	r20, r12
    51e6:	5d 1d       	adc	r21, r13
    51e8:	6e 1d       	adc	r22, r14
    51ea:	7f 1d       	adc	r23, r15
    51ec:	26 e0       	ldi	r18, 0x06	; 6
    51ee:	39 e2       	ldi	r19, 0x29	; 41
    51f0:	8c e2       	ldi	r24, 0x2C	; 44
    51f2:	93 e0       	ldi	r25, 0x03	; 3
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
}
    51f4:	ff 90       	pop	r15
    51f6:	ef 90       	pop	r14
    51f8:	df 90       	pop	r13
    51fa:	cf 90       	pop	r12
static void processRx2DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 ) {
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
    51fc:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <os_setTimedCallback>
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
}
    5200:	ff 90       	pop	r15
    5202:	ef 90       	pop	r14
    5204:	df 90       	pop	r13
    5206:	cf 90       	pop	r12
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
    5208:	0c 94 19 28 	jmp	0x5032	; 0x5032 <processDnData>

0000520c <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
    processDnData();
    520c:	0c 94 19 28 	jmp	0x5032	; 0x5032 <processDnData>

00005210 <LMIC_disableTracking>:
    return 1;  // enabled
}


void LMIC_disableTracking (void) {
    LMIC.opmode &= ~(OP_SCAN|OP_TRACK);
    5210:	e0 ec       	ldi	r30, 0xC0	; 192
    5212:	f3 e0       	ldi	r31, 0x03	; 3
    5214:	80 81       	ld	r24, Z
    5216:	91 81       	ldd	r25, Z+1	; 0x01
    5218:	8c 7f       	andi	r24, 0xFC	; 252
    521a:	91 83       	std	Z+1, r25	; 0x01
    521c:	80 83       	st	Z, r24
    LMIC.bcninfoTries = 0;
    521e:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <LMIC+0x12b>
    engineUpdate();
    5222:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

00005226 <LMIC_setAdrMode>:
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}


void LMIC_setAdrMode (bit_t enabled) {
    LMIC.adrEnabled = enabled ? FCT_ADREN : 0;
    5226:	81 11       	cpse	r24, r1
    5228:	80 e8       	ldi	r24, 0x80	; 128
    522a:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <LMIC+0x120>
    522e:	08 95       	ret

00005230 <LMIC_setDrTxpow>:
}


//  Should we have/need an ext. API like this?
void LMIC_setDrTxpow (dr_t dr, s1_t txpow) {
    setDrTxpow(DRCHG_SET, dr, txpow);
    5230:	0c 94 fe 15 	jmp	0x2bfc	; 0x2bfc <setDrTxpow.isra.1>

00005234 <LMIC_shutdown>:
}


void LMIC_shutdown (void) {
    os_clearCallback(&LMIC.osjob);
    5234:	8c e2       	ldi	r24, 0x2C	; 44
    5236:	93 e0       	ldi	r25, 0x03	; 3
    5238:	0e 94 a3 0c 	call	0x1946	; 0x1946 <os_clearCallback>
    os_radio(RADIO_RST);
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	0e 94 8c 12 	call	0x2518	; 0x2518 <os_radio>
    LMIC.opmode |= OP_SHUTDOWN;
    5242:	e0 ec       	ldi	r30, 0xC0	; 192
    5244:	f3 e0       	ldi	r31, 0x03	; 3
    5246:	80 81       	ld	r24, Z
    5248:	91 81       	ldd	r25, Z+1	; 0x01
    524a:	80 64       	ori	r24, 0x40	; 64
    524c:	91 83       	std	Z+1, r25	; 0x01
    524e:	80 83       	st	Z, r24
    5250:	08 95       	ret

00005252 <LMIC_reset>:
}


void LMIC_reset (void) {
    5252:	cf 93       	push	r28
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	0e 94 8c 12 	call	0x2518	; 0x2518 <os_radio>
    os_clearCallback(&LMIC.osjob);
    525a:	8c e2       	ldi	r24, 0x2C	; 44
    525c:	93 e0       	ldi	r25, 0x03	; 3
    525e:	0e 94 a3 0c 	call	0x1946	; 0x1946 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
    5262:	8c e9       	ldi	r24, 0x9C	; 156
    5264:	91 e0       	ldi	r25, 0x01	; 1
    5266:	e9 e1       	ldi	r30, 0x19	; 25
    5268:	f3 e0       	ldi	r31, 0x03	; 3
    526a:	df 01       	movw	r26, r30
    526c:	9c 01       	movw	r18, r24
    526e:	1d 92       	st	X+, r1
    5270:	21 50       	subi	r18, 0x01	; 1
    5272:	30 40       	sbci	r19, 0x00	; 0
    5274:	e1 f7       	brne	.-8      	; 0x526e <LMIC_reset+0x1c>
    LMIC.devaddr      =  0;
    LMIC.devNonce     =  os_getRndU2();
    5276:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    527a:	c8 2f       	mov	r28, r24
    527c:	0e 94 b3 11 	call	0x2366	; 0x2366 <radio_rand1>
    5280:	2c 2f       	mov	r18, r28
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	32 2f       	mov	r19, r18
    5286:	22 27       	eor	r18, r18
    5288:	28 2b       	or	r18, r24
    528a:	30 93 05 04 	sts	0x0405, r19	; 0x800405 <LMIC+0xec>
    528e:	20 93 04 04 	sts	0x0404, r18	; 0x800404 <LMIC+0xeb>
    LMIC.opmode       =  OP_NONE;
    5292:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <LMIC+0xa8>
    5296:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <LMIC+0xa7>
    LMIC.errcr        =  CR_4_5;
    529a:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <LMIC+0xac>
    LMIC.adrEnabled   =  FCT_ADREN;
    529e:	80 e8       	ldi	r24, 0x80	; 128
    52a0:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <LMIC+0x120>
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
    52a4:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <LMIC+0x124>
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
    52a8:	88 e0       	ldi	r24, 0x08	; 8
    52aa:	96 ee       	ldi	r25, 0xE6	; 230
    52ac:	a3 ed       	ldi	r26, 0xD3	; 211
    52ae:	b3 e3       	ldi	r27, 0x33	; 51
    52b0:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <LMIC+0x125>
    52b4:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <LMIC+0x126>
    52b8:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <LMIC+0x127>
    52bc:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <LMIC+0x128>
    LMIC.rxDelay      =  DELAY_DNW1;
    52c0:	21 e0       	ldi	r18, 0x01	; 1
    52c2:	20 93 35 04 	sts	0x0435, r18	; 0x800435 <LMIC+0x11c>
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
    52c6:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <LMIC+0x139>
    52ca:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <LMIC+0x13a>
    52ce:	a0 93 54 04 	sts	0x0454, r26	; 0x800454 <LMIC+0x13b>
    52d2:	b0 93 55 04 	sts	0x0455, r27	; 0x800455 <LMIC+0x13c>
    LMIC.ping.dr      =  DR_PING;   // ditto
    52d6:	83 e0       	ldi	r24, 0x03	; 3
    52d8:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <LMIC+0x12d>
    LMIC.ping.intvExp =  0xFF;
    52dc:	8f ef       	ldi	r24, 0xFF	; 255
    52de:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <LMIC+0x12e>
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
    52e2:	cf 91       	pop	r28
    52e4:	08 95       	ret

000052e6 <runReset>:
}


static void runReset (xref2osjob_t osjob) {
    // Disable session
    LMIC_reset();
    52e6:	0e 94 29 29 	call	0x5252	; 0x5252 <LMIC_reset>
    LMIC_startJoining();
    52ea:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <LMIC_startJoining>
    reportEvent(EV_RESET);
    52ee:	8c e0       	ldi	r24, 0x0C	; 12
    52f0:	0c 94 c7 24 	jmp	0x498e	; 0x498e <reportEvent>

000052f4 <LMIC_init>:
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}


void LMIC_init (void) {
    LMIC.opmode = OP_SHUTDOWN;
    52f4:	80 e4       	ldi	r24, 0x40	; 64
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    52fc:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    5300:	08 95       	ret

00005302 <LMIC_clrTxData>:
}


void LMIC_clrTxData (void) {
    LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND|OP_POLL);
    5302:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5306:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    530a:	9c 01       	movw	r18, r24
    530c:	27 76       	andi	r18, 0x67	; 103
    530e:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <LMIC+0xa8>
    5312:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <LMIC+0xa7>
    LMIC.pendTxLen = 0;
    5316:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <LMIC+0xb6>
    if( (LMIC.opmode & (OP_JOINING|OP_SCAN)) != 0 ) // do not interfere with JOINING
    531a:	85 70       	andi	r24, 0x05	; 5
    531c:	99 27       	eor	r25, r25
    531e:	89 2b       	or	r24, r25
    5320:	49 f4       	brne	.+18     	; 0x5334 <LMIC_clrTxData+0x32>
        return;
    os_clearCallback(&LMIC.osjob);
    5322:	8c e2       	ldi	r24, 0x2C	; 44
    5324:	93 e0       	ldi	r25, 0x03	; 3
    5326:	0e 94 a3 0c 	call	0x1946	; 0x1946 <os_clearCallback>
    os_radio(RADIO_RST);
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	0e 94 8c 12 	call	0x2518	; 0x2518 <os_radio>
    engineUpdate();
    5330:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>
    5334:	08 95       	ret

00005336 <LMIC_setTxData>:
}


void LMIC_setTxData (void) {
    LMIC.opmode |= OP_TXDATA;
    5336:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    533a:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    533e:	9c 01       	movw	r18, r24
    5340:	28 60       	ori	r18, 0x08	; 8
    5342:	30 93 c1 03 	sts	0x03C1, r19	; 0x8003c1 <LMIC+0xa8>
    5346:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <LMIC+0xa7>
    if( (LMIC.opmode & OP_JOINING) == 0 )
    534a:	82 ff       	sbrs	r24, 2
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
    534c:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <LMIC+0x13d>
    engineUpdate();
    5350:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

00005354 <LMIC_setTxData2>:
}


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
    5354:	1f 93       	push	r17
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
    535a:	45 33       	cpi	r20, 0x35	; 53
    535c:	b0 f4       	brcc	.+44     	; 0x538a <LMIC_setTxData2+0x36>
    535e:	12 2f       	mov	r17, r18
    5360:	c4 2f       	mov	r28, r20
    5362:	d8 2f       	mov	r29, r24
        return -2;
    if( data != (xref2u1_t)0 )
    5364:	61 15       	cp	r22, r1
    5366:	71 05       	cpc	r23, r1
    5368:	29 f0       	breq	.+10     	; 0x5374 <LMIC_setTxData2+0x20>
        os_copyMem(LMIC.pendTxData, data, dlen);
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	80 ed       	ldi	r24, 0xD0	; 208
    536e:	93 e0       	ldi	r25, 0x03	; 3
    5370:	0e 94 89 34 	call	0x6912	; 0x6912 <memcpy>
    LMIC.pendTxConf = confirmed;
    5374:	10 93 ce 03 	sts	0x03CE, r17	; 0x8003ce <LMIC+0xb5>
    LMIC.pendTxPort = port;
    5378:	d0 93 cd 03 	sts	0x03CD, r29	; 0x8003cd <LMIC+0xb4>
    LMIC.pendTxLen  = dlen;
    537c:	c0 93 cf 03 	sts	0x03CF, r28	; 0x8003cf <LMIC+0xb6>
    LMIC_setTxData();
    5380:	0e 94 9b 29 	call	0x5336	; 0x5336 <LMIC_setTxData>
    return 0;
    5384:	80 e0       	ldi	r24, 0x00	; 0
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	02 c0       	rjmp	.+4      	; 0x538e <LMIC_setTxData2+0x3a>


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
        return -2;
    538a:	8e ef       	ldi	r24, 0xFE	; 254
    538c:	9f ef       	ldi	r25, 0xFF	; 255
    LMIC.pendTxConf = confirmed;
    LMIC.pendTxPort = port;
    LMIC.pendTxLen  = dlen;
    LMIC_setTxData();
    return 0;
}
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	1f 91       	pop	r17
    5394:	08 95       	ret

00005396 <LMIC_sendAlive>:


// Send a payload-less message to signal device is alive
void LMIC_sendAlive (void) {
    LMIC.opmode |= OP_POLL;
    5396:	e0 ec       	ldi	r30, 0xC0	; 192
    5398:	f3 e0       	ldi	r31, 0x03	; 3
    539a:	80 81       	ld	r24, Z
    539c:	91 81       	ldd	r25, Z+1	; 0x01
    539e:	80 61       	ori	r24, 0x10	; 16
    53a0:	91 83       	std	Z+1, r25	; 0x01
    53a2:	80 83       	st	Z, r24
    engineUpdate();
    53a4:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

000053a8 <LMIC_tryRejoin>:
}


// Check if other networks are around.
void LMIC_tryRejoin (void) {
    LMIC.opmode |= OP_REJOIN;
    53a8:	e0 ec       	ldi	r30, 0xC0	; 192
    53aa:	f3 e0       	ldi	r31, 0x03	; 3
    53ac:	80 81       	ld	r24, Z
    53ae:	91 81       	ldd	r25, Z+1	; 0x01
    53b0:	80 62       	ori	r24, 0x20	; 32
    53b2:	91 83       	std	Z+1, r25	; 0x01
    53b4:	80 83       	st	Z, r24
    engineUpdate();
    53b6:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <engineUpdate>

000053ba <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (u4_t netid, devaddr_t devaddr, xref2u1_t nwkKey, xref2u1_t artKey) {
    53ba:	ef 92       	push	r14
    53bc:	ff 92       	push	r15
    53be:	0f 93       	push	r16
    53c0:	1f 93       	push	r17
    LMIC.netid = netid;
    53c2:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <LMIC+0xa3>
    53c6:	70 93 bd 03 	sts	0x03BD, r23	; 0x8003bd <LMIC+0xa4>
    53ca:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <LMIC+0xa5>
    53ce:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <LMIC+0xa6>
    LMIC.devaddr = devaddr;
    53d2:	20 93 26 04 	sts	0x0426, r18	; 0x800426 <LMIC+0x10d>
    53d6:	30 93 27 04 	sts	0x0427, r19	; 0x800427 <LMIC+0x10e>
    53da:	40 93 28 04 	sts	0x0428, r20	; 0x800428 <LMIC+0x10f>
    53de:	50 93 29 04 	sts	0x0429, r21	; 0x800429 <LMIC+0x110>
    if( nwkKey != (xref2u1_t)0 )
    53e2:	01 15       	cp	r16, r1
    53e4:	11 05       	cpc	r17, r1
    53e6:	41 f0       	breq	.+16     	; 0x53f8 <LMIC_setSession+0x3e>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
    53e8:	80 e1       	ldi	r24, 0x10	; 16
    53ea:	f8 01       	movw	r30, r16
    53ec:	a6 e0       	ldi	r26, 0x06	; 6
    53ee:	b4 e0       	ldi	r27, 0x04	; 4
    53f0:	01 90       	ld	r0, Z+
    53f2:	0d 92       	st	X+, r0
    53f4:	8a 95       	dec	r24
    53f6:	e1 f7       	brne	.-8      	; 0x53f0 <LMIC_setSession+0x36>
    if( artKey != (xref2u1_t)0 )
    53f8:	e1 14       	cp	r14, r1
    53fa:	f1 04       	cpc	r15, r1
    53fc:	41 f0       	breq	.+16     	; 0x540e <LMIC_setSession+0x54>
        os_copyMem(LMIC.artKey, artKey, 16);
    53fe:	80 e1       	ldi	r24, 0x10	; 16
    5400:	f7 01       	movw	r30, r14
    5402:	a6 e1       	ldi	r26, 0x16	; 22
    5404:	b4 e0       	ldi	r27, 0x04	; 4
    5406:	01 90       	ld	r0, Z+
    5408:	0d 92       	st	X+, r0
    540a:	8a 95       	dec	r24
    540c:	e1 f7       	brne	.-8      	; 0x5406 <LMIC_setSession+0x4c>
    
#if defined(CFG_eu868)
    initDefaultChannels(0);
    540e:	80 e0       	ldi	r24, 0x00	; 0
    5410:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <initDefaultChannels>
#endif
 
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    5414:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <LMIC+0xa7>
    5418:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <LMIC+0xa8>
    541c:	89 75       	andi	r24, 0x59	; 89
    541e:	9d 7f       	andi	r25, 0xFD	; 253
    5420:	98 60       	ori	r25, 0x08	; 8
    5422:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <LMIC+0xa8>
    5426:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <LMIC+0xa7>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
    542a:	1f 91       	pop	r17
    542c:	0f 91       	pop	r16
    542e:	ff 90       	pop	r15
    5430:	ef 90       	pop	r14
    initDefaultChannels(0);
#endif
 
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    stateJustJoined();
    5432:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <stateJustJoined>

00005436 <LMIC_setLinkCheckMode>:
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bit_t enabled) {
    LMIC.adrChanged = 0;
    5436:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <LMIC+0x11b>
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
    543a:	81 11       	cpse	r24, r1
    543c:	02 c0       	rjmp	.+4      	; 0x5442 <LMIC_setLinkCheckMode+0xc>
    543e:	80 e8       	ldi	r24, 0x80	; 128
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <LMIC_setLinkCheckMode+0xe>
    5442:	84 ef       	ldi	r24, 0xF4	; 244
    5444:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <LMIC+0x11a>
    5448:	08 95       	ret

0000544a <table_get_u4>:

    TABLE_GETTER(_u1, u1_t, byte);
    TABLE_GETTER(_s1, s1_t, byte);
    TABLE_GETTER(_u2, u2_t, word);
    TABLE_GETTER(_s2, s2_t, word);
    TABLE_GETTER(_u4, u4_t, dword);
    544a:	66 0f       	add	r22, r22
    544c:	77 1f       	adc	r23, r23
    544e:	66 0f       	add	r22, r22
    5450:	77 1f       	adc	r23, r23
    5452:	86 0f       	add	r24, r22
    5454:	97 1f       	adc	r25, r23
    5456:	fc 01       	movw	r30, r24
    5458:	65 91       	lpm	r22, Z+
    545a:	75 91       	lpm	r23, Z+
    545c:	85 91       	lpm	r24, Z+
    545e:	94 91       	lpm	r25, Z
    5460:	08 95       	ret

00005462 <os_aes>:
        }
        AESKEY[i] = b ^= AESKEY[i-4];
    }
}

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
    5462:	2f 92       	push	r2
    5464:	3f 92       	push	r3
    5466:	4f 92       	push	r4
    5468:	5f 92       	push	r5
    546a:	6f 92       	push	r6
    546c:	7f 92       	push	r7
    546e:	8f 92       	push	r8
    5470:	9f 92       	push	r9
    5472:	af 92       	push	r10
    5474:	bf 92       	push	r11
    5476:	cf 92       	push	r12
    5478:	df 92       	push	r13
    547a:	ef 92       	push	r14
    547c:	ff 92       	push	r15
    547e:	0f 93       	push	r16
    5480:	1f 93       	push	r17
    5482:	cf 93       	push	r28
    5484:	df 93       	push	r29
    5486:	cd b7       	in	r28, 0x3d	; 61
    5488:	de b7       	in	r29, 0x3e	; 62
    548a:	ab 97       	sbiw	r28, 0x2b	; 43
    548c:	0f b6       	in	r0, 0x3f	; 63
    548e:	f8 94       	cli
    5490:	de bf       	out	0x3e, r29	; 62
    5492:	0f be       	out	0x3f, r0	; 63
    5494:	cd bf       	out	0x3d, r28	; 61
    5496:	89 8b       	std	Y+17, r24	; 0x11
    5498:	7b a7       	std	Y+43, r23	; 0x2b
    549a:	6a a7       	std	Y+42, r22	; 0x2a
    549c:	1a 01       	movw	r2, r20
    549e:	05 eb       	ldi	r16, 0xB5	; 181
    54a0:	14 e0       	ldi	r17, 0x04	; 4
    54a2:	1a 87       	std	Y+10, r17	; 0x0a
    54a4:	09 87       	std	Y+9, r16	; 0x09
    54a6:	25 ec       	ldi	r18, 0xC5	; 197
    54a8:	34 e0       	ldi	r19, 0x04	; 4
    54aa:	f8 01       	movw	r30, r16
    54ac:	60 81       	ld	r22, Z
    54ae:	71 81       	ldd	r23, Z+1	; 0x01
    54b0:	82 81       	ldd	r24, Z+2	; 0x02
    54b2:	93 81       	ldd	r25, Z+3	; 0x03
    54b4:	0e 94 a5 32 	call	0x654a	; 0x654a <__bswapsi2>
static void aesroundkeys () {
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
        AESKEY[i] = swapmsbf(AESKEY[i]);
    54b8:	61 93       	st	Z+, r22
    54ba:	71 93       	st	Z+, r23
    54bc:	81 93       	st	Z+, r24
    54be:	91 93       	st	Z+, r25
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
    54c0:	2e 17       	cp	r18, r30
    54c2:	3f 07       	cpc	r19, r31
    54c4:	99 f7       	brne	.-26     	; 0x54ac <os_aes+0x4a>
        AESKEY[i] = swapmsbf(AESKEY[i]);
    }

    b = AESKEY[3];
    54c6:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <AESKEY+0xc>
    54ca:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <AESKEY+0xd>
    54ce:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <AESKEY+0xe>
    54d2:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <AESKEY+0xf>
    54d6:	04 e0       	ldi	r16, 0x04	; 4
    54d8:	10 e0       	ldi	r17, 0x00	; 0
    for( ; i<44; i++ ) {
        if( i%4==0 ) {
    54da:	98 01       	movw	r18, r16
    54dc:	23 70       	andi	r18, 0x03	; 3
    54de:	33 27       	eor	r19, r19
    54e0:	23 2b       	or	r18, r19
    54e2:	81 f5       	brne	.+96     	; 0x5544 <os_aes+0xe2>
            if (__builtin_constant_p(table[index])) \
                return table[index]; \
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
    54e4:	ea 2f       	mov	r30, r26
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	e6 57       	subi	r30, 0x76	; 118
    54ea:	ff 4e       	sbci	r31, 0xEF	; 239
    54ec:	24 91       	lpm	r18, Z
    54ee:	2a 8b       	std	Y+18, r18	; 0x12
    54f0:	e9 2f       	mov	r30, r25
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	e6 57       	subi	r30, 0x76	; 118
    54f6:	ff 4e       	sbci	r31, 0xEF	; 239
    54f8:	34 91       	lpm	r19, Z
    54fa:	3d 87       	std	Y+13, r19	; 0x0d
    54fc:	e8 2f       	mov	r30, r24
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	e6 57       	subi	r30, 0x76	; 118
    5502:	ff 4e       	sbci	r31, 0xEF	; 239
    5504:	44 91       	lpm	r20, Z
    5506:	4e 8b       	std	Y+22, r20	; 0x16
    5508:	8b 2f       	mov	r24, r27
    550a:	99 27       	eor	r25, r25
    550c:	aa 27       	eor	r26, r26
    550e:	bb 27       	eor	r27, r27
    5510:	fc 01       	movw	r30, r24
    5512:	e6 57       	subi	r30, 0x76	; 118
    5514:	ff 4e       	sbci	r31, 0xEF	; 239
    5516:	54 91       	lpm	r21, Z
    5518:	5a 8f       	std	Y+26, r21	; 0x1a
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((u4_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
                ((u4_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
    551a:	b8 01       	movw	r22, r16
    551c:	64 50       	subi	r22, 0x04	; 4
    551e:	71 09       	sbc	r23, r1
    5520:	75 95       	asr	r23
    5522:	67 95       	ror	r22
    5524:	75 95       	asr	r23
    5526:	67 95       	ror	r22
    5528:	8a e8       	ldi	r24, 0x8A	; 138
    552a:	91 e1       	ldi	r25, 0x11	; 17
    552c:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>

    b = AESKEY[3];
    for( ; i<44; i++ ) {
        if( i%4==0 ) {
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((u4_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
    5530:	dc 01       	movw	r26, r24
    5532:	cb 01       	movw	r24, r22
    5534:	ea 8d       	ldd	r30, Y+26	; 0x1a
    5536:	8e 27       	eor	r24, r30
    5538:	fa 89       	ldd	r31, Y+18	; 0x12
    553a:	bf 27       	eor	r27, r31
    553c:	2d 85       	ldd	r18, Y+13	; 0x0d
    553e:	a2 27       	eor	r26, r18
    5540:	3e 89       	ldd	r19, Y+22	; 0x16
    5542:	93 27       	eor	r25, r19
                ((u4_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
                ((u4_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
        }
        AESKEY[i] = b ^= AESKEY[i-4];
    5544:	e9 85       	ldd	r30, Y+9	; 0x09
    5546:	fa 85       	ldd	r31, Y+10	; 0x0a
    5548:	41 91       	ld	r20, Z+
    554a:	51 91       	ld	r21, Z+
    554c:	61 91       	ld	r22, Z+
    554e:	71 91       	ld	r23, Z+
    5550:	fa 87       	std	Y+10, r31	; 0x0a
    5552:	e9 87       	std	Y+9, r30	; 0x09
    5554:	84 27       	eor	r24, r20
    5556:	95 27       	eor	r25, r21
    5558:	a6 27       	eor	r26, r22
    555a:	b7 27       	eor	r27, r23
    555c:	84 87       	std	Z+12, r24	; 0x0c
    555e:	95 87       	std	Z+13, r25	; 0x0d
    5560:	a6 87       	std	Z+14, r26	; 0x0e
    5562:	b7 87       	std	Z+15, r27	; 0x0f
    for( i=0; i<4; i++) {
        AESKEY[i] = swapmsbf(AESKEY[i]);
    }

    b = AESKEY[3];
    for( ; i<44; i++ ) {
    5564:	0f 5f       	subi	r16, 0xFF	; 255
    5566:	1f 4f       	sbci	r17, 0xFF	; 255
    5568:	0c 32       	cpi	r16, 0x2C	; 44
    556a:	11 05       	cpc	r17, r1
    556c:	09 f0       	breq	.+2      	; 0x5570 <os_aes+0x10e>
    556e:	b5 cf       	rjmp	.-150    	; 0x54da <os_aes+0x78>

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {

        aesroundkeys();

        if( mode & AES_MICNOAUX ) {
    5570:	09 89       	ldd	r16, Y+17	; 0x11
    5572:	03 ff       	sbrs	r16, 3
    5574:	21 c0       	rjmp	.+66     	; 0x55b8 <os_aes+0x156>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
    5576:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <AESAUX+0xc>
    557a:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <AESAUX+0xd>
    557e:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <AESAUX+0xe>
    5582:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <AESAUX+0xf>
    5586:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <AESAUX+0x8>
    558a:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <AESAUX+0x9>
    558e:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <AESAUX+0xa>
    5592:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <AESAUX+0xb>
    5596:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <AESAUX+0x4>
    559a:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <AESAUX+0x5>
    559e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <AESAUX+0x6>
    55a2:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <AESAUX+0x7>
    55a6:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <AESAUX>
    55aa:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <AESAUX+0x1>
    55ae:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <AESAUX+0x2>
    55b2:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <AESAUX+0x3>
    55b6:	77 c0       	rjmp	.+238    	; 0x56a6 <os_aes+0x244>
    55b8:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <AESAUX>
    55bc:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <AESAUX+0x1>
    55c0:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <AESAUX+0x2>
    55c4:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <AESAUX+0x3>
    55c8:	0e 94 a5 32 	call	0x654a	; 0x654a <__bswapsi2>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
    55cc:	60 93 65 05 	sts	0x0565, r22	; 0x800565 <AESAUX>
    55d0:	70 93 66 05 	sts	0x0566, r23	; 0x800566 <AESAUX+0x1>
    55d4:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <AESAUX+0x2>
    55d8:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <AESAUX+0x3>
    55dc:	60 91 69 05 	lds	r22, 0x0569	; 0x800569 <AESAUX+0x4>
    55e0:	70 91 6a 05 	lds	r23, 0x056A	; 0x80056a <AESAUX+0x5>
    55e4:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <AESAUX+0x6>
    55e8:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <AESAUX+0x7>
    55ec:	0e 94 a5 32 	call	0x654a	; 0x654a <__bswapsi2>
            AESAUX[1] = swapmsbf(AESAUX[1]);
    55f0:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <AESAUX+0x4>
    55f4:	70 93 6a 05 	sts	0x056A, r23	; 0x80056a <AESAUX+0x5>
    55f8:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <AESAUX+0x6>
    55fc:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <AESAUX+0x7>
    5600:	60 91 6d 05 	lds	r22, 0x056D	; 0x80056d <AESAUX+0x8>
    5604:	70 91 6e 05 	lds	r23, 0x056E	; 0x80056e <AESAUX+0x9>
    5608:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <AESAUX+0xa>
    560c:	90 91 70 05 	lds	r25, 0x0570	; 0x800570 <AESAUX+0xb>
    5610:	0e 94 a5 32 	call	0x654a	; 0x654a <__bswapsi2>
            AESAUX[2] = swapmsbf(AESAUX[2]);
    5614:	60 93 6d 05 	sts	0x056D, r22	; 0x80056d <AESAUX+0x8>
    5618:	70 93 6e 05 	sts	0x056E, r23	; 0x80056e <AESAUX+0x9>
    561c:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <AESAUX+0xa>
    5620:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <AESAUX+0xb>
    5624:	60 91 71 05 	lds	r22, 0x0571	; 0x800571 <AESAUX+0xc>
    5628:	70 91 72 05 	lds	r23, 0x0572	; 0x800572 <AESAUX+0xd>
    562c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <AESAUX+0xe>
    5630:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <AESAUX+0xf>
    5634:	0e 94 a5 32 	call	0x654a	; 0x654a <__bswapsi2>
            AESAUX[3] = swapmsbf(AESAUX[3]);
    5638:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <AESAUX+0xc>
    563c:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <AESAUX+0xd>
    5640:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <AESAUX+0xe>
    5644:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <AESAUX+0xf>
    5648:	2e c0       	rjmp	.+92     	; 0x56a6 <os_aes+0x244>
                    AESAUX[3] ^= a3;
                    mode &= ~AES_MICSUB;
                    goto LOADDATA;
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
    564a:	29 81       	ldd	r18, Y+1	; 0x01
    564c:	3a 81       	ldd	r19, Y+2	; 0x02
    564e:	4b 81       	ldd	r20, Y+3	; 0x03
    5650:	5c 81       	ldd	r21, Y+4	; 0x04
    5652:	20 93 65 05 	sts	0x0565, r18	; 0x800565 <AESAUX>
    5656:	30 93 66 05 	sts	0x0566, r19	; 0x800566 <AESAUX+0x1>
    565a:	40 93 67 05 	sts	0x0567, r20	; 0x800567 <AESAUX+0x2>
    565e:	50 93 68 05 	sts	0x0568, r21	; 0x800568 <AESAUX+0x3>
                    AESAUX[1] = a1;
    5662:	c0 92 69 05 	sts	0x0569, r12	; 0x800569 <AESAUX+0x4>
    5666:	d0 92 6a 05 	sts	0x056A, r13	; 0x80056a <AESAUX+0x5>
    566a:	e0 92 6b 05 	sts	0x056B, r14	; 0x80056b <AESAUX+0x6>
    566e:	f0 92 6c 05 	sts	0x056C, r15	; 0x80056c <AESAUX+0x7>
                    AESAUX[2] = a2;
    5672:	40 92 6d 05 	sts	0x056D, r4	; 0x80056d <AESAUX+0x8>
    5676:	50 92 6e 05 	sts	0x056E, r5	; 0x80056e <AESAUX+0x9>
    567a:	60 92 6f 05 	sts	0x056F, r6	; 0x80056f <AESAUX+0xa>
    567e:	70 92 70 05 	sts	0x0570, r7	; 0x800570 <AESAUX+0xb>
                    AESAUX[3] = a3;
    5682:	80 92 71 05 	sts	0x0571, r8	; 0x800571 <AESAUX+0xc>
    5686:	90 92 72 05 	sts	0x0572, r9	; 0x800572 <AESAUX+0xd>
    568a:	a0 92 73 05 	sts	0x0573, r10	; 0x800573 <AESAUX+0xe>
    568e:	b0 92 74 05 	sts	0x0574, r11	; 0x800574 <AESAUX+0xf>
                    msbf4_write(buf+12, a3);
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
    5692:	09 89       	ldd	r16, Y+17	; 0x11
    5694:	1d 82       	std	Y+5, r1	; 0x05
    5696:	1e 82       	std	Y+6, r1	; 0x06
    5698:	1f 82       	std	Y+7, r1	; 0x07
    569a:	18 86       	std	Y+8, r1	; 0x08
    569c:	03 fd       	sbrc	r16, 3
    569e:	d1 c6       	rjmp	.+3490   	; 0x6442 <os_aes+0xfe0>
                buf += 16;
                len -= 16;
            }
            mode |= AES_MICNOAUX;
    56a0:	09 89       	ldd	r16, Y+17	; 0x11
    56a2:	08 60       	ori	r16, 0x08	; 8
    56a4:	09 8b       	std	Y+17, r16	; 0x11
            AESAUX[1] = swapmsbf(AESAUX[1]);
            AESAUX[2] = swapmsbf(AESAUX[2]);
            AESAUX[3] = swapmsbf(AESAUX[3]);
        }

        while( (signed char)len > 0 ) {
    56a6:	12 14       	cp	r1, r2
    56a8:	0c f0       	brlt	.+2      	; 0x56ac <os_aes+0x24a>
    56aa:	d5 c6       	rjmp	.+3498   	; 0x6456 <os_aes+0xff4>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
    56ac:	19 89       	ldd	r17, Y+17	; 0x11
    56ae:	12 fd       	sbrc	r17, 2
    56b0:	04 c0       	rjmp	.+8      	; 0x56ba <os_aes+0x258>
    56b2:	11 ff       	sbrs	r17, 1
    56b4:	19 c6       	rjmp	.+3122   	; 0x62e8 <os_aes+0xe86>
    56b6:	13 fd       	sbrc	r17, 3
    56b8:	25 c0       	rjmp	.+74     	; 0x5704 <os_aes+0x2a2>
                a0 = AESAUX[0];
    56ba:	20 91 65 05 	lds	r18, 0x0565	; 0x800565 <AESAUX>
    56be:	30 91 66 05 	lds	r19, 0x0566	; 0x800566 <AESAUX+0x1>
    56c2:	40 91 67 05 	lds	r20, 0x0567	; 0x800567 <AESAUX+0x2>
    56c6:	50 91 68 05 	lds	r21, 0x0568	; 0x800568 <AESAUX+0x3>
    56ca:	29 83       	std	Y+1, r18	; 0x01
    56cc:	3a 83       	std	Y+2, r19	; 0x02
    56ce:	4b 83       	std	Y+3, r20	; 0x03
    56d0:	5c 83       	std	Y+4, r21	; 0x04
                a1 = AESAUX[1];
    56d2:	c0 90 69 05 	lds	r12, 0x0569	; 0x800569 <AESAUX+0x4>
    56d6:	d0 90 6a 05 	lds	r13, 0x056A	; 0x80056a <AESAUX+0x5>
    56da:	e0 90 6b 05 	lds	r14, 0x056B	; 0x80056b <AESAUX+0x6>
    56de:	f0 90 6c 05 	lds	r15, 0x056C	; 0x80056c <AESAUX+0x7>
                a2 = AESAUX[2];
    56e2:	40 90 6d 05 	lds	r4, 0x056D	; 0x80056d <AESAUX+0x8>
    56e6:	50 90 6e 05 	lds	r5, 0x056E	; 0x80056e <AESAUX+0x9>
    56ea:	60 90 6f 05 	lds	r6, 0x056F	; 0x80056f <AESAUX+0xa>
    56ee:	70 90 70 05 	lds	r7, 0x0570	; 0x800570 <AESAUX+0xb>
                a3 = AESAUX[3];
    56f2:	80 90 71 05 	lds	r8, 0x0571	; 0x800571 <AESAUX+0xc>
    56f6:	90 90 72 05 	lds	r9, 0x0572	; 0x800572 <AESAUX+0xd>
    56fa:	a0 90 73 05 	lds	r10, 0x0573	; 0x800573 <AESAUX+0xe>
    56fe:	b0 90 74 05 	lds	r11, 0x0574	; 0x800574 <AESAUX+0xf>
    5702:	9d c0       	rjmp	.+314    	; 0x583e <os_aes+0x3dc>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
    5704:	31 e1       	ldi	r19, 0x11	; 17
    5706:	23 16       	cp	r2, r19
    5708:	31 04       	cpc	r3, r1
    570a:	08 f0       	brcs	.+2      	; 0x570e <os_aes+0x2ac>
    570c:	ed c5       	rjmp	.+3034   	; 0x62e8 <os_aes+0xe86>
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
    570e:	40 e1       	ldi	r20, 0x10	; 16
    5710:	24 16       	cp	r2, r20
    5712:	31 04       	cpc	r3, r1
    5714:	11 f4       	brne	.+4      	; 0x571a <os_aes+0x2b8>
    5716:	80 e1       	ldi	r24, 0x10	; 16
    5718:	01 c0       	rjmp	.+2      	; 0x571c <os_aes+0x2ba>
    571a:	80 e2       	ldi	r24, 0x20	; 32
    571c:	09 89       	ldd	r16, Y+17	; 0x11
    571e:	08 2b       	or	r16, r24
    5720:	09 8b       	std	Y+17, r16	; 0x11
                a1 = AESAUX[1];
                a2 = AESAUX[2];
                a3 = AESAUX[3];
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
    5722:	81 2c       	mov	r8, r1
    5724:	91 2c       	mov	r9, r1
    5726:	54 01       	movw	r10, r8
    5728:	41 2c       	mov	r4, r1
    572a:	51 2c       	mov	r5, r1
    572c:	32 01       	movw	r6, r4
    572e:	c1 2c       	mov	r12, r1
    5730:	d1 2c       	mov	r13, r1
    5732:	76 01       	movw	r14, r12
    5734:	19 82       	std	Y+1, r1	; 0x01
    5736:	1a 82       	std	Y+2, r1	; 0x02
    5738:	1b 82       	std	Y+3, r1	; 0x03
    573a:	1c 82       	std	Y+4, r1	; 0x04
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
    573c:	80 c0       	rjmp	.+256    	; 0x583e <os_aes+0x3dc>
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
    573e:	4d 81       	ldd	r20, Y+5	; 0x05
    5740:	5e 81       	ldd	r21, Y+6	; 0x06
    5742:	6f 81       	ldd	r22, Y+7	; 0x07
    5744:	78 85       	ldd	r23, Y+8	; 0x08
    5746:	76 2f       	mov	r23, r22
    5748:	65 2f       	mov	r22, r21
    574a:	54 2f       	mov	r21, r20
    574c:	44 27       	eor	r20, r20
    574e:	4d 83       	std	Y+5, r20	; 0x05
    5750:	5e 83       	std	Y+6, r21	; 0x06
    5752:	6f 83       	std	Y+7, r22	; 0x07
    5754:	78 87       	std	Y+8, r23	; 0x08
    5756:	09 85       	ldd	r16, Y+9	; 0x09
    5758:	1a 85       	ldd	r17, Y+10	; 0x0a
    575a:	2b 85       	ldd	r18, Y+11	; 0x0b
    575c:	3c 85       	ldd	r19, Y+12	; 0x0c
    575e:	80 17       	cp	r24, r16
    5760:	91 07       	cpc	r25, r17
    5762:	a2 07       	cpc	r26, r18
    5764:	b3 07       	cpc	r27, r19
    5766:	08 f0       	brcs	.+2      	; 0x576a <os_aes+0x308>
    5768:	cc c5       	rjmp	.+2968   	; 0x6302 <os_aes+0xea0>
    576a:	40 81       	ld	r20, Z
    576c:	50 e0       	ldi	r21, 0x00	; 0
    576e:	60 e0       	ldi	r22, 0x00	; 0
    5770:	70 e0       	ldi	r23, 0x00	; 0
    5772:	0d 81       	ldd	r16, Y+5	; 0x05
    5774:	1e 81       	ldd	r17, Y+6	; 0x06
    5776:	2f 81       	ldd	r18, Y+7	; 0x07
    5778:	38 85       	ldd	r19, Y+8	; 0x08
    577a:	04 2b       	or	r16, r20
    577c:	15 2b       	or	r17, r21
    577e:	26 2b       	or	r18, r22
    5780:	37 2b       	or	r19, r23
    5782:	0d 83       	std	Y+5, r16	; 0x05
    5784:	1e 83       	std	Y+6, r17	; 0x06
    5786:	2f 83       	std	Y+7, r18	; 0x07
    5788:	38 87       	std	Y+8, r19	; 0x08
                    if((t0&3)==3) {
    578a:	ac 01       	movw	r20, r24
    578c:	bd 01       	movw	r22, r26
    578e:	43 70       	andi	r20, 0x03	; 3
    5790:	55 27       	eor	r21, r21
    5792:	66 27       	eor	r22, r22
    5794:	77 27       	eor	r23, r23
    5796:	43 30       	cpi	r20, 0x03	; 3
    5798:	51 05       	cpc	r21, r1
    579a:	61 05       	cpc	r22, r1
    579c:	71 05       	cpc	r23, r1
    579e:	51 f4       	brne	.+20     	; 0x57b4 <os_aes+0x352>
    57a0:	c9 82       	std	Y+1, r12	; 0x01
    57a2:	da 82       	std	Y+2, r13	; 0x02
    57a4:	eb 82       	std	Y+3, r14	; 0x03
    57a6:	fc 82       	std	Y+4, r15	; 0x04
    57a8:	73 01       	movw	r14, r6
    57aa:	62 01       	movw	r12, r4
    57ac:	24 01       	movw	r4, r8
    57ae:	35 01       	movw	r6, r10
                        a0 = a1;
                        a1 = a2;
                        a2 = a3;
                        a3 = t1;
    57b0:	48 01       	movw	r8, r16
    57b2:	59 01       	movw	r10, r18
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
    57b4:	01 96       	adiw	r24, 0x01	; 1
    57b6:	a1 1d       	adc	r26, r1
    57b8:	b1 1d       	adc	r27, r1
    57ba:	31 96       	adiw	r30, 0x01	; 1
    57bc:	80 31       	cpi	r24, 0x10	; 16
    57be:	91 05       	cpc	r25, r1
    57c0:	a1 05       	cpc	r26, r1
    57c2:	b1 05       	cpc	r27, r1
    57c4:	09 f0       	breq	.+2      	; 0x57c8 <os_aes+0x366>
    57c6:	bb cf       	rjmp	.-138    	; 0x573e <os_aes+0x2dc>
                        a1 = a2;
                        a2 = a3;
                        a3 = t1;
                    }
                }
                if( mode & AES_MIC ) {
    57c8:	19 89       	ldd	r17, Y+17	; 0x11
    57ca:	11 ff       	sbrs	r17, 1
    57cc:	38 c0       	rjmp	.+112    	; 0x583e <os_aes+0x3dc>
                    a0 ^= AESAUX[0];
    57ce:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <AESAUX>
    57d2:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <AESAUX+0x1>
    57d6:	a0 91 67 05 	lds	r26, 0x0567	; 0x800567 <AESAUX+0x2>
    57da:	b0 91 68 05 	lds	r27, 0x0568	; 0x800568 <AESAUX+0x3>
    57de:	29 81       	ldd	r18, Y+1	; 0x01
    57e0:	3a 81       	ldd	r19, Y+2	; 0x02
    57e2:	4b 81       	ldd	r20, Y+3	; 0x03
    57e4:	5c 81       	ldd	r21, Y+4	; 0x04
    57e6:	28 27       	eor	r18, r24
    57e8:	39 27       	eor	r19, r25
    57ea:	4a 27       	eor	r20, r26
    57ec:	5b 27       	eor	r21, r27
    57ee:	29 83       	std	Y+1, r18	; 0x01
    57f0:	3a 83       	std	Y+2, r19	; 0x02
    57f2:	4b 83       	std	Y+3, r20	; 0x03
    57f4:	5c 83       	std	Y+4, r21	; 0x04
                    a1 ^= AESAUX[1];
    57f6:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <AESAUX+0x4>
    57fa:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <AESAUX+0x5>
    57fe:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <AESAUX+0x6>
    5802:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <AESAUX+0x7>
    5806:	c8 26       	eor	r12, r24
    5808:	d9 26       	eor	r13, r25
    580a:	ea 26       	eor	r14, r26
    580c:	fb 26       	eor	r15, r27
                    a2 ^= AESAUX[2];
    580e:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <AESAUX+0x8>
    5812:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <AESAUX+0x9>
    5816:	a0 91 6f 05 	lds	r26, 0x056F	; 0x80056f <AESAUX+0xa>
    581a:	b0 91 70 05 	lds	r27, 0x0570	; 0x800570 <AESAUX+0xb>
    581e:	48 26       	eor	r4, r24
    5820:	59 26       	eor	r5, r25
    5822:	6a 26       	eor	r6, r26
    5824:	7b 26       	eor	r7, r27
                    a3 ^= AESAUX[3];
    5826:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <AESAUX+0xc>
    582a:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <AESAUX+0xd>
    582e:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <AESAUX+0xe>
    5832:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <AESAUX+0xf>
    5836:	88 26       	eor	r8, r24
    5838:	99 26       	eor	r9, r25
    583a:	aa 26       	eor	r10, r26
    583c:	bb 26       	eor	r11, r27
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
            ke = ki + 8*4;
            a0 ^= ki[0];
    583e:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <AESKEY>
    5842:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <AESKEY+0x1>
    5846:	a0 91 b7 04 	lds	r26, 0x04B7	; 0x8004b7 <AESKEY+0x2>
    584a:	b0 91 b8 04 	lds	r27, 0x04B8	; 0x8004b8 <AESKEY+0x3>
    584e:	49 81       	ldd	r20, Y+1	; 0x01
    5850:	5a 81       	ldd	r21, Y+2	; 0x02
    5852:	6b 81       	ldd	r22, Y+3	; 0x03
    5854:	7c 81       	ldd	r23, Y+4	; 0x04
    5856:	48 27       	eor	r20, r24
    5858:	59 27       	eor	r21, r25
    585a:	6a 27       	eor	r22, r26
    585c:	7b 27       	eor	r23, r27
    585e:	49 83       	std	Y+1, r20	; 0x01
    5860:	5a 83       	std	Y+2, r21	; 0x02
    5862:	6b 83       	std	Y+3, r22	; 0x03
    5864:	7c 83       	std	Y+4, r23	; 0x04
            a1 ^= ki[1];
    5866:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <AESKEY+0x4>
    586a:	90 91 ba 04 	lds	r25, 0x04BA	; 0x8004ba <AESKEY+0x5>
    586e:	a0 91 bb 04 	lds	r26, 0x04BB	; 0x8004bb <AESKEY+0x6>
    5872:	b0 91 bc 04 	lds	r27, 0x04BC	; 0x8004bc <AESKEY+0x7>
    5876:	97 01       	movw	r18, r14
    5878:	86 01       	movw	r16, r12
    587a:	08 27       	eor	r16, r24
    587c:	19 27       	eor	r17, r25
    587e:	2a 27       	eor	r18, r26
    5880:	3b 27       	eor	r19, r27
    5882:	0d 83       	std	Y+5, r16	; 0x05
    5884:	1e 83       	std	Y+6, r17	; 0x06
    5886:	2f 83       	std	Y+7, r18	; 0x07
    5888:	38 87       	std	Y+8, r19	; 0x08
            a2 ^= ki[2];
    588a:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <AESKEY+0x8>
    588e:	90 91 be 04 	lds	r25, 0x04BE	; 0x8004be <AESKEY+0x9>
    5892:	a0 91 bf 04 	lds	r26, 0x04BF	; 0x8004bf <AESKEY+0xa>
    5896:	b0 91 c0 04 	lds	r27, 0x04C0	; 0x8004c0 <AESKEY+0xb>
    589a:	a3 01       	movw	r20, r6
    589c:	92 01       	movw	r18, r4
    589e:	28 27       	eor	r18, r24
    58a0:	39 27       	eor	r19, r25
    58a2:	4a 27       	eor	r20, r26
    58a4:	5b 27       	eor	r21, r27
    58a6:	29 87       	std	Y+9, r18	; 0x09
    58a8:	3a 87       	std	Y+10, r19	; 0x0a
    58aa:	4b 87       	std	Y+11, r20	; 0x0b
    58ac:	5c 87       	std	Y+12, r21	; 0x0c
            a3 ^= ki[3];
    58ae:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <AESKEY+0xc>
    58b2:	90 91 c2 04 	lds	r25, 0x04C2	; 0x8004c2 <AESKEY+0xd>
    58b6:	a0 91 c3 04 	lds	r26, 0x04C3	; 0x8004c3 <AESKEY+0xe>
    58ba:	b0 91 c4 04 	lds	r27, 0x04C4	; 0x8004c4 <AESKEY+0xf>
    58be:	b5 01       	movw	r22, r10
    58c0:	a4 01       	movw	r20, r8
    58c2:	48 27       	eor	r20, r24
    58c4:	59 27       	eor	r21, r25
    58c6:	6a 27       	eor	r22, r26
    58c8:	7b 27       	eor	r23, r27
    58ca:	4a 8b       	std	Y+18, r20	; 0x12
    58cc:	5b 8b       	std	Y+19, r21	; 0x13
    58ce:	6c 8b       	std	Y+20, r22	; 0x14
    58d0:	7d 8b       	std	Y+21, r23	; 0x15
                    a3 ^= AESAUX[3];
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
    58d2:	05 eb       	ldi	r16, 0xB5	; 181
    58d4:	14 e0       	ldi	r17, 0x04	; 4
            a0 ^= ki[0];
            a1 ^= ki[1];
            a2 ^= ki[2];
            a3 ^= ki[3];
            do {
                AES_key4 (t1,t2,t3,t0,4);
    58d6:	d8 01       	movw	r26, r16
    58d8:	54 96       	adiw	r26, 0x14	; 20
    58da:	6d 91       	ld	r22, X+
    58dc:	7d 91       	ld	r23, X+
    58de:	8d 91       	ld	r24, X+
    58e0:	9c 91       	ld	r25, X
    58e2:	57 97       	sbiw	r26, 0x17	; 23
    58e4:	6d 87       	std	Y+13, r22	; 0x0d
    58e6:	7e 87       	std	Y+14, r23	; 0x0e
    58e8:	8f 87       	std	Y+15, r24	; 0x0f
    58ea:	98 8b       	std	Y+16, r25	; 0x10
    58ec:	58 96       	adiw	r26, 0x18	; 24
    58ee:	2d 91       	ld	r18, X+
    58f0:	3d 91       	ld	r19, X+
    58f2:	4d 91       	ld	r20, X+
    58f4:	5c 91       	ld	r21, X
    58f6:	5b 97       	sbiw	r26, 0x1b	; 27
    58f8:	2e 8b       	std	Y+22, r18	; 0x16
    58fa:	3f 8b       	std	Y+23, r19	; 0x17
    58fc:	48 8f       	std	Y+24, r20	; 0x18
    58fe:	59 8f       	std	Y+25, r21	; 0x19
    5900:	5c 96       	adiw	r26, 0x1c	; 28
    5902:	2d 91       	ld	r18, X+
    5904:	3d 91       	ld	r19, X+
    5906:	4d 91       	ld	r20, X+
    5908:	5c 91       	ld	r21, X
    590a:	5f 97       	sbiw	r26, 0x1f	; 31
    590c:	2a 8f       	std	Y+26, r18	; 0x1a
    590e:	3b 8f       	std	Y+27, r19	; 0x1b
    5910:	4c 8f       	std	Y+28, r20	; 0x1c
    5912:	5d 8f       	std	Y+29, r21	; 0x1d
    5914:	50 96       	adiw	r26, 0x10	; 16
    5916:	2d 91       	ld	r18, X+
    5918:	3d 91       	ld	r19, X+
    591a:	4d 91       	ld	r20, X+
    591c:	5c 91       	ld	r21, X
    591e:	53 97       	sbiw	r26, 0x13	; 19
    5920:	2e 8f       	std	Y+30, r18	; 0x1e
    5922:	3f 8f       	std	Y+31, r19	; 0x1f
    5924:	48 a3       	std	Y+32, r20	; 0x20
    5926:	59 a3       	std	Y+33, r21	; 0x21
                AES_expr4(t1,t2,t3,t0,a0);
    5928:	b9 81       	ldd	r27, Y+1	; 0x01
    592a:	6b 2f       	mov	r22, r27
    592c:	70 e0       	ldi	r23, 0x00	; 0
    592e:	8a e8       	ldi	r24, 0x8A	; 138
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5936:	6a a3       	std	Y+34, r22	; 0x22
    5938:	7b a3       	std	Y+35, r23	; 0x23
    593a:	8c a3       	std	Y+36, r24	; 0x24
    593c:	9d a3       	std	Y+37, r25	; 0x25
    593e:	ea 81       	ldd	r30, Y+2	; 0x02
    5940:	6e 2f       	mov	r22, r30
    5942:	70 e0       	ldi	r23, 0x00	; 0
    5944:	8a e8       	ldi	r24, 0x8A	; 138
    5946:	94 e0       	ldi	r25, 0x04	; 4
    5948:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    594c:	2b 01       	movw	r4, r22
    594e:	3c 01       	movw	r6, r24
    5950:	fb 81       	ldd	r31, Y+3	; 0x03
    5952:	6f 2f       	mov	r22, r31
    5954:	70 e0       	ldi	r23, 0x00	; 0
    5956:	8a e8       	ldi	r24, 0x8A	; 138
    5958:	98 e0       	ldi	r25, 0x08	; 8
    595a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    595e:	4b 01       	movw	r8, r22
    5960:	5c 01       	movw	r10, r24
    5962:	29 81       	ldd	r18, Y+1	; 0x01
    5964:	3a 81       	ldd	r19, Y+2	; 0x02
    5966:	4b 81       	ldd	r20, Y+3	; 0x03
    5968:	5c 81       	ldd	r21, Y+4	; 0x04
    596a:	65 2f       	mov	r22, r21
    596c:	77 27       	eor	r23, r23
    596e:	88 27       	eor	r24, r24
    5970:	99 27       	eor	r25, r25
    5972:	8a e8       	ldi	r24, 0x8A	; 138
    5974:	9c e0       	ldi	r25, 0x0C	; 12
    5976:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    597a:	6b 01       	movw	r12, r22
    597c:	7c 01       	movw	r14, r24
                AES_expr4(t2,t3,t0,t1,a1);
    597e:	3d 81       	ldd	r19, Y+5	; 0x05
    5980:	63 2f       	mov	r22, r19
    5982:	70 e0       	ldi	r23, 0x00	; 0
    5984:	8a e8       	ldi	r24, 0x8A	; 138
    5986:	90 e0       	ldi	r25, 0x00	; 0
    5988:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    598c:	a3 01       	movw	r20, r6
    598e:	92 01       	movw	r18, r4
    5990:	26 27       	eor	r18, r22
    5992:	37 27       	eor	r19, r23
    5994:	48 27       	eor	r20, r24
    5996:	59 27       	eor	r21, r25
    5998:	2e a3       	std	Y+38, r18	; 0x26
    599a:	3f a3       	std	Y+39, r19	; 0x27
    599c:	48 a7       	std	Y+40, r20	; 0x28
    599e:	59 a7       	std	Y+41, r21	; 0x29
    59a0:	3e 81       	ldd	r19, Y+6	; 0x06
    59a2:	63 2f       	mov	r22, r19
    59a4:	70 e0       	ldi	r23, 0x00	; 0
    59a6:	8a e8       	ldi	r24, 0x8A	; 138
    59a8:	94 e0       	ldi	r25, 0x04	; 4
    59aa:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    59ae:	86 26       	eor	r8, r22
    59b0:	97 26       	eor	r9, r23
    59b2:	a8 26       	eor	r10, r24
    59b4:	b9 26       	eor	r11, r25
    59b6:	4f 81       	ldd	r20, Y+7	; 0x07
    59b8:	64 2f       	mov	r22, r20
    59ba:	70 e0       	ldi	r23, 0x00	; 0
    59bc:	8a e8       	ldi	r24, 0x8A	; 138
    59be:	98 e0       	ldi	r25, 0x08	; 8
    59c0:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    59c4:	c6 26       	eor	r12, r22
    59c6:	d7 26       	eor	r13, r23
    59c8:	e8 26       	eor	r14, r24
    59ca:	f9 26       	eor	r15, r25
    59cc:	2d 81       	ldd	r18, Y+5	; 0x05
    59ce:	3e 81       	ldd	r19, Y+6	; 0x06
    59d0:	4f 81       	ldd	r20, Y+7	; 0x07
    59d2:	58 85       	ldd	r21, Y+8	; 0x08
    59d4:	65 2f       	mov	r22, r21
    59d6:	77 27       	eor	r23, r23
    59d8:	88 27       	eor	r24, r24
    59da:	99 27       	eor	r25, r25
    59dc:	8a e8       	ldi	r24, 0x8A	; 138
    59de:	9c e0       	ldi	r25, 0x0C	; 12
    59e0:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    59e4:	4a a0       	ldd	r4, Y+34	; 0x22
    59e6:	5b a0       	ldd	r5, Y+35	; 0x23
    59e8:	6c a0       	ldd	r6, Y+36	; 0x24
    59ea:	7d a0       	ldd	r7, Y+37	; 0x25
    59ec:	46 26       	eor	r4, r22
    59ee:	57 26       	eor	r5, r23
    59f0:	68 26       	eor	r6, r24
    59f2:	79 26       	eor	r7, r25
                AES_expr4(t3,t0,t1,t2,a2);
    59f4:	39 85       	ldd	r19, Y+9	; 0x09
    59f6:	63 2f       	mov	r22, r19
    59f8:	70 e0       	ldi	r23, 0x00	; 0
    59fa:	8a e8       	ldi	r24, 0x8A	; 138
    59fc:	90 e0       	ldi	r25, 0x00	; 0
    59fe:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5a02:	9b 01       	movw	r18, r22
    5a04:	ac 01       	movw	r20, r24
    5a06:	28 25       	eor	r18, r8
    5a08:	39 25       	eor	r19, r9
    5a0a:	4a 25       	eor	r20, r10
    5a0c:	5b 25       	eor	r21, r11
    5a0e:	29 83       	std	Y+1, r18	; 0x01
    5a10:	3a 83       	std	Y+2, r19	; 0x02
    5a12:	4b 83       	std	Y+3, r20	; 0x03
    5a14:	5c 83       	std	Y+4, r21	; 0x04
    5a16:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a18:	63 2f       	mov	r22, r19
    5a1a:	70 e0       	ldi	r23, 0x00	; 0
    5a1c:	8a e8       	ldi	r24, 0x8A	; 138
    5a1e:	94 e0       	ldi	r25, 0x04	; 4
    5a20:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5a24:	c6 26       	eor	r12, r22
    5a26:	d7 26       	eor	r13, r23
    5a28:	e8 26       	eor	r14, r24
    5a2a:	f9 26       	eor	r15, r25
    5a2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a2e:	64 2f       	mov	r22, r20
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	8a e8       	ldi	r24, 0x8A	; 138
    5a34:	98 e0       	ldi	r25, 0x08	; 8
    5a36:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5a3a:	4b 01       	movw	r8, r22
    5a3c:	5c 01       	movw	r10, r24
    5a3e:	84 24       	eor	r8, r4
    5a40:	95 24       	eor	r9, r5
    5a42:	a6 24       	eor	r10, r6
    5a44:	b7 24       	eor	r11, r7
    5a46:	29 85       	ldd	r18, Y+9	; 0x09
    5a48:	3a 85       	ldd	r19, Y+10	; 0x0a
    5a4a:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    5a4e:	65 2f       	mov	r22, r21
    5a50:	77 27       	eor	r23, r23
    5a52:	88 27       	eor	r24, r24
    5a54:	99 27       	eor	r25, r25
    5a56:	8a e8       	ldi	r24, 0x8A	; 138
    5a58:	9c e0       	ldi	r25, 0x0C	; 12
    5a5a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5a5e:	4e a0       	ldd	r4, Y+38	; 0x26
    5a60:	5f a0       	ldd	r5, Y+39	; 0x27
    5a62:	68 a4       	ldd	r6, Y+40	; 0x28
    5a64:	79 a4       	ldd	r7, Y+41	; 0x29
    5a66:	46 26       	eor	r4, r22
    5a68:	57 26       	eor	r5, r23
    5a6a:	68 26       	eor	r6, r24
    5a6c:	79 26       	eor	r7, r25
                AES_expr4(t0,t1,t2,t3,a3);
    5a6e:	3a 89       	ldd	r19, Y+18	; 0x12
    5a70:	63 2f       	mov	r22, r19
    5a72:	70 e0       	ldi	r23, 0x00	; 0
    5a74:	8a e8       	ldi	r24, 0x8A	; 138
    5a76:	90 e0       	ldi	r25, 0x00	; 0
    5a78:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5a7c:	c6 26       	eor	r12, r22
    5a7e:	d7 26       	eor	r13, r23
    5a80:	e8 26       	eor	r14, r24
    5a82:	f9 26       	eor	r15, r25
    5a84:	4e 8d       	ldd	r20, Y+30	; 0x1e
    5a86:	5f 8d       	ldd	r21, Y+31	; 0x1f
    5a88:	68 a1       	ldd	r22, Y+32	; 0x20
    5a8a:	79 a1       	ldd	r23, Y+33	; 0x21
    5a8c:	c4 26       	eor	r12, r20
    5a8e:	d5 26       	eor	r13, r21
    5a90:	e6 26       	eor	r14, r22
    5a92:	f7 26       	eor	r15, r23
    5a94:	5b 89       	ldd	r21, Y+19	; 0x13
    5a96:	65 2f       	mov	r22, r21
    5a98:	70 e0       	ldi	r23, 0x00	; 0
    5a9a:	8a e8       	ldi	r24, 0x8A	; 138
    5a9c:	94 e0       	ldi	r25, 0x04	; 4
    5a9e:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5aa2:	dc 01       	movw	r26, r24
    5aa4:	cb 01       	movw	r24, r22
    5aa6:	88 25       	eor	r24, r8
    5aa8:	99 25       	eor	r25, r9
    5aaa:	aa 25       	eor	r26, r10
    5aac:	bb 25       	eor	r27, r11
    5aae:	2d 85       	ldd	r18, Y+13	; 0x0d
    5ab0:	3e 85       	ldd	r19, Y+14	; 0x0e
    5ab2:	4f 85       	ldd	r20, Y+15	; 0x0f
    5ab4:	58 89       	ldd	r21, Y+16	; 0x10
    5ab6:	28 27       	eor	r18, r24
    5ab8:	39 27       	eor	r19, r25
    5aba:	4a 27       	eor	r20, r26
    5abc:	5b 27       	eor	r21, r27
    5abe:	2d 87       	std	Y+13, r18	; 0x0d
    5ac0:	3e 87       	std	Y+14, r19	; 0x0e
    5ac2:	4f 87       	std	Y+15, r20	; 0x0f
    5ac4:	58 8b       	std	Y+16, r21	; 0x10
    5ac6:	3c 89       	ldd	r19, Y+20	; 0x14
    5ac8:	63 2f       	mov	r22, r19
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	8a e8       	ldi	r24, 0x8A	; 138
    5ace:	98 e0       	ldi	r25, 0x08	; 8
    5ad0:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5ad4:	46 26       	eor	r4, r22
    5ad6:	57 26       	eor	r5, r23
    5ad8:	68 26       	eor	r6, r24
    5ada:	79 26       	eor	r7, r25
    5adc:	4e 89       	ldd	r20, Y+22	; 0x16
    5ade:	5f 89       	ldd	r21, Y+23	; 0x17
    5ae0:	68 8d       	ldd	r22, Y+24	; 0x18
    5ae2:	79 8d       	ldd	r23, Y+25	; 0x19
    5ae4:	44 25       	eor	r20, r4
    5ae6:	55 25       	eor	r21, r5
    5ae8:	66 25       	eor	r22, r6
    5aea:	77 25       	eor	r23, r7
    5aec:	4e 8b       	std	Y+22, r20	; 0x16
    5aee:	5f 8b       	std	Y+23, r21	; 0x17
    5af0:	68 8f       	std	Y+24, r22	; 0x18
    5af2:	79 8f       	std	Y+25, r23	; 0x19
    5af4:	2a 89       	ldd	r18, Y+18	; 0x12
    5af6:	3b 89       	ldd	r19, Y+19	; 0x13
    5af8:	4c 89       	ldd	r20, Y+20	; 0x14
    5afa:	5d 89       	ldd	r21, Y+21	; 0x15
    5afc:	65 2f       	mov	r22, r21
    5afe:	77 27       	eor	r23, r23
    5b00:	88 27       	eor	r24, r24
    5b02:	99 27       	eor	r25, r25
    5b04:	8a e8       	ldi	r24, 0x8A	; 138
    5b06:	9c e0       	ldi	r25, 0x0C	; 12
    5b08:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5b0c:	89 80       	ldd	r8, Y+1	; 0x01
    5b0e:	9a 80       	ldd	r9, Y+2	; 0x02
    5b10:	ab 80       	ldd	r10, Y+3	; 0x03
    5b12:	bc 80       	ldd	r11, Y+4	; 0x04
    5b14:	86 26       	eor	r8, r22
    5b16:	97 26       	eor	r9, r23
    5b18:	a8 26       	eor	r10, r24
    5b1a:	b9 26       	eor	r11, r25
    5b1c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5b1e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5b20:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5b22:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5b24:	48 25       	eor	r20, r8
    5b26:	59 25       	eor	r21, r9
    5b28:	6a 25       	eor	r22, r10
    5b2a:	7b 25       	eor	r23, r11
    5b2c:	4a 8f       	std	Y+26, r20	; 0x1a
    5b2e:	5b 8f       	std	Y+27, r21	; 0x1b
    5b30:	6c 8f       	std	Y+28, r22	; 0x1c
    5b32:	7d 8f       	std	Y+29, r23	; 0x1d

                AES_key4 (a1,a2,a3,a0,8);
    5b34:	d8 01       	movw	r26, r16
    5b36:	94 96       	adiw	r26, 0x24	; 36
    5b38:	6d 91       	ld	r22, X+
    5b3a:	7d 91       	ld	r23, X+
    5b3c:	8d 91       	ld	r24, X+
    5b3e:	9c 91       	ld	r25, X
    5b40:	97 97       	sbiw	r26, 0x27	; 39
    5b42:	6d 83       	std	Y+5, r22	; 0x05
    5b44:	7e 83       	std	Y+6, r23	; 0x06
    5b46:	8f 83       	std	Y+7, r24	; 0x07
    5b48:	98 87       	std	Y+8, r25	; 0x08
    5b4a:	98 96       	adiw	r26, 0x28	; 40
    5b4c:	2d 91       	ld	r18, X+
    5b4e:	3d 91       	ld	r19, X+
    5b50:	4d 91       	ld	r20, X+
    5b52:	5c 91       	ld	r21, X
    5b54:	9b 97       	sbiw	r26, 0x2b	; 43
    5b56:	29 87       	std	Y+9, r18	; 0x09
    5b58:	3a 87       	std	Y+10, r19	; 0x0a
    5b5a:	4b 87       	std	Y+11, r20	; 0x0b
    5b5c:	5c 87       	std	Y+12, r21	; 0x0c
    5b5e:	9c 96       	adiw	r26, 0x2c	; 44
    5b60:	2d 91       	ld	r18, X+
    5b62:	3d 91       	ld	r19, X+
    5b64:	4d 91       	ld	r20, X+
    5b66:	5c 91       	ld	r21, X
    5b68:	9f 97       	sbiw	r26, 0x2f	; 47
    5b6a:	2a 8b       	std	Y+18, r18	; 0x12
    5b6c:	3b 8b       	std	Y+19, r19	; 0x13
    5b6e:	4c 8b       	std	Y+20, r20	; 0x14
    5b70:	5d 8b       	std	Y+21, r21	; 0x15
    5b72:	90 96       	adiw	r26, 0x20	; 32
    5b74:	2d 91       	ld	r18, X+
    5b76:	3d 91       	ld	r19, X+
    5b78:	4d 91       	ld	r20, X+
    5b7a:	5c 91       	ld	r21, X
    5b7c:	93 97       	sbiw	r26, 0x23	; 35
    5b7e:	29 83       	std	Y+1, r18	; 0x01
    5b80:	3a 83       	std	Y+2, r19	; 0x02
    5b82:	4b 83       	std	Y+3, r20	; 0x03
    5b84:	5c 83       	std	Y+4, r21	; 0x04
                AES_expr4(a1,a2,a3,a0,t0);
    5b86:	6c 2d       	mov	r22, r12
    5b88:	70 e0       	ldi	r23, 0x00	; 0
    5b8a:	8a e8       	ldi	r24, 0x8A	; 138
    5b8c:	90 e0       	ldi	r25, 0x00	; 0
    5b8e:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5b92:	6e 8f       	std	Y+30, r22	; 0x1e
    5b94:	7f 8f       	std	Y+31, r23	; 0x1f
    5b96:	88 a3       	std	Y+32, r24	; 0x20
    5b98:	99 a3       	std	Y+33, r25	; 0x21
    5b9a:	6d 2d       	mov	r22, r13
    5b9c:	70 e0       	ldi	r23, 0x00	; 0
    5b9e:	8a e8       	ldi	r24, 0x8A	; 138
    5ba0:	94 e0       	ldi	r25, 0x04	; 4
    5ba2:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5ba6:	2b 01       	movw	r4, r22
    5ba8:	3c 01       	movw	r6, r24
    5baa:	6e 2d       	mov	r22, r14
    5bac:	70 e0       	ldi	r23, 0x00	; 0
    5bae:	8a e8       	ldi	r24, 0x8A	; 138
    5bb0:	98 e0       	ldi	r25, 0x08	; 8
    5bb2:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5bb6:	4b 01       	movw	r8, r22
    5bb8:	5c 01       	movw	r10, r24
    5bba:	6f 2d       	mov	r22, r15
    5bbc:	77 27       	eor	r23, r23
    5bbe:	88 27       	eor	r24, r24
    5bc0:	99 27       	eor	r25, r25
    5bc2:	8a e8       	ldi	r24, 0x8A	; 138
    5bc4:	9c e0       	ldi	r25, 0x0C	; 12
    5bc6:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5bca:	6b 01       	movw	r12, r22
    5bcc:	7c 01       	movw	r14, r24
                AES_expr4(a2,a3,a0,a1,t1);
    5bce:	bd 85       	ldd	r27, Y+13	; 0x0d
    5bd0:	6b 2f       	mov	r22, r27
    5bd2:	70 e0       	ldi	r23, 0x00	; 0
    5bd4:	8a e8       	ldi	r24, 0x8A	; 138
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5bdc:	a3 01       	movw	r20, r6
    5bde:	92 01       	movw	r18, r4
    5be0:	26 27       	eor	r18, r22
    5be2:	37 27       	eor	r19, r23
    5be4:	48 27       	eor	r20, r24
    5be6:	59 27       	eor	r21, r25
    5be8:	2a a3       	std	Y+34, r18	; 0x22
    5bea:	3b a3       	std	Y+35, r19	; 0x23
    5bec:	4c a3       	std	Y+36, r20	; 0x24
    5bee:	5d a3       	std	Y+37, r21	; 0x25
    5bf0:	3e 85       	ldd	r19, Y+14	; 0x0e
    5bf2:	63 2f       	mov	r22, r19
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	8a e8       	ldi	r24, 0x8A	; 138
    5bf8:	94 e0       	ldi	r25, 0x04	; 4
    5bfa:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5bfe:	24 01       	movw	r4, r8
    5c00:	35 01       	movw	r6, r10
    5c02:	46 26       	eor	r4, r22
    5c04:	57 26       	eor	r5, r23
    5c06:	68 26       	eor	r6, r24
    5c08:	79 26       	eor	r7, r25
    5c0a:	4f 85       	ldd	r20, Y+15	; 0x0f
    5c0c:	64 2f       	mov	r22, r20
    5c0e:	70 e0       	ldi	r23, 0x00	; 0
    5c10:	8a e8       	ldi	r24, 0x8A	; 138
    5c12:	98 e0       	ldi	r25, 0x08	; 8
    5c14:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5c18:	c6 26       	eor	r12, r22
    5c1a:	d7 26       	eor	r13, r23
    5c1c:	e8 26       	eor	r14, r24
    5c1e:	f9 26       	eor	r15, r25
    5c20:	2d 85       	ldd	r18, Y+13	; 0x0d
    5c22:	3e 85       	ldd	r19, Y+14	; 0x0e
    5c24:	4f 85       	ldd	r20, Y+15	; 0x0f
    5c26:	58 89       	ldd	r21, Y+16	; 0x10
    5c28:	65 2f       	mov	r22, r21
    5c2a:	77 27       	eor	r23, r23
    5c2c:	88 27       	eor	r24, r24
    5c2e:	99 27       	eor	r25, r25
    5c30:	8a e8       	ldi	r24, 0x8A	; 138
    5c32:	9c e0       	ldi	r25, 0x0C	; 12
    5c34:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5c38:	8e 8c       	ldd	r8, Y+30	; 0x1e
    5c3a:	9f 8c       	ldd	r9, Y+31	; 0x1f
    5c3c:	a8 a0       	ldd	r10, Y+32	; 0x20
    5c3e:	b9 a0       	ldd	r11, Y+33	; 0x21
    5c40:	86 26       	eor	r8, r22
    5c42:	97 26       	eor	r9, r23
    5c44:	a8 26       	eor	r10, r24
    5c46:	b9 26       	eor	r11, r25
                AES_expr4(a3,a0,a1,a2,t2);
    5c48:	3e 89       	ldd	r19, Y+22	; 0x16
    5c4a:	63 2f       	mov	r22, r19
    5c4c:	70 e0       	ldi	r23, 0x00	; 0
    5c4e:	8a e8       	ldi	r24, 0x8A	; 138
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5c56:	9b 01       	movw	r18, r22
    5c58:	ac 01       	movw	r20, r24
    5c5a:	24 25       	eor	r18, r4
    5c5c:	35 25       	eor	r19, r5
    5c5e:	46 25       	eor	r20, r6
    5c60:	57 25       	eor	r21, r7
    5c62:	2d 87       	std	Y+13, r18	; 0x0d
    5c64:	3e 87       	std	Y+14, r19	; 0x0e
    5c66:	4f 87       	std	Y+15, r20	; 0x0f
    5c68:	58 8b       	std	Y+16, r21	; 0x10
    5c6a:	3f 89       	ldd	r19, Y+23	; 0x17
    5c6c:	63 2f       	mov	r22, r19
    5c6e:	70 e0       	ldi	r23, 0x00	; 0
    5c70:	8a e8       	ldi	r24, 0x8A	; 138
    5c72:	94 e0       	ldi	r25, 0x04	; 4
    5c74:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5c78:	c6 26       	eor	r12, r22
    5c7a:	d7 26       	eor	r13, r23
    5c7c:	e8 26       	eor	r14, r24
    5c7e:	f9 26       	eor	r15, r25
    5c80:	48 8d       	ldd	r20, Y+24	; 0x18
    5c82:	64 2f       	mov	r22, r20
    5c84:	70 e0       	ldi	r23, 0x00	; 0
    5c86:	8a e8       	ldi	r24, 0x8A	; 138
    5c88:	98 e0       	ldi	r25, 0x08	; 8
    5c8a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5c8e:	86 26       	eor	r8, r22
    5c90:	97 26       	eor	r9, r23
    5c92:	a8 26       	eor	r10, r24
    5c94:	b9 26       	eor	r11, r25
    5c96:	2e 89       	ldd	r18, Y+22	; 0x16
    5c98:	3f 89       	ldd	r19, Y+23	; 0x17
    5c9a:	48 8d       	ldd	r20, Y+24	; 0x18
    5c9c:	59 8d       	ldd	r21, Y+25	; 0x19
    5c9e:	65 2f       	mov	r22, r21
    5ca0:	77 27       	eor	r23, r23
    5ca2:	88 27       	eor	r24, r24
    5ca4:	99 27       	eor	r25, r25
    5ca6:	8a e8       	ldi	r24, 0x8A	; 138
    5ca8:	9c e0       	ldi	r25, 0x0C	; 12
    5caa:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5cae:	4a a0       	ldd	r4, Y+34	; 0x22
    5cb0:	5b a0       	ldd	r5, Y+35	; 0x23
    5cb2:	6c a0       	ldd	r6, Y+36	; 0x24
    5cb4:	7d a0       	ldd	r7, Y+37	; 0x25
    5cb6:	46 26       	eor	r4, r22
    5cb8:	57 26       	eor	r5, r23
    5cba:	68 26       	eor	r6, r24
    5cbc:	79 26       	eor	r7, r25
                AES_expr4(a0,a1,a2,a3,t3);
    5cbe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5cc0:	63 2f       	mov	r22, r19
    5cc2:	70 e0       	ldi	r23, 0x00	; 0
    5cc4:	8a e8       	ldi	r24, 0x8A	; 138
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5ccc:	c6 26       	eor	r12, r22
    5cce:	d7 26       	eor	r13, r23
    5cd0:	e8 26       	eor	r14, r24
    5cd2:	f9 26       	eor	r15, r25
    5cd4:	49 81       	ldd	r20, Y+1	; 0x01
    5cd6:	5a 81       	ldd	r21, Y+2	; 0x02
    5cd8:	6b 81       	ldd	r22, Y+3	; 0x03
    5cda:	7c 81       	ldd	r23, Y+4	; 0x04
    5cdc:	4c 25       	eor	r20, r12
    5cde:	5d 25       	eor	r21, r13
    5ce0:	6e 25       	eor	r22, r14
    5ce2:	7f 25       	eor	r23, r15
    5ce4:	49 83       	std	Y+1, r20	; 0x01
    5ce6:	5a 83       	std	Y+2, r21	; 0x02
    5ce8:	6b 83       	std	Y+3, r22	; 0x03
    5cea:	7c 83       	std	Y+4, r23	; 0x04
    5cec:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5cee:	65 2f       	mov	r22, r21
    5cf0:	70 e0       	ldi	r23, 0x00	; 0
    5cf2:	8a e8       	ldi	r24, 0x8A	; 138
    5cf4:	94 e0       	ldi	r25, 0x04	; 4
    5cf6:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5cfa:	dc 01       	movw	r26, r24
    5cfc:	cb 01       	movw	r24, r22
    5cfe:	88 25       	eor	r24, r8
    5d00:	99 25       	eor	r25, r9
    5d02:	aa 25       	eor	r26, r10
    5d04:	bb 25       	eor	r27, r11
    5d06:	2d 81       	ldd	r18, Y+5	; 0x05
    5d08:	3e 81       	ldd	r19, Y+6	; 0x06
    5d0a:	4f 81       	ldd	r20, Y+7	; 0x07
    5d0c:	58 85       	ldd	r21, Y+8	; 0x08
    5d0e:	28 27       	eor	r18, r24
    5d10:	39 27       	eor	r19, r25
    5d12:	4a 27       	eor	r20, r26
    5d14:	5b 27       	eor	r21, r27
    5d16:	2d 83       	std	Y+5, r18	; 0x05
    5d18:	3e 83       	std	Y+6, r19	; 0x06
    5d1a:	4f 83       	std	Y+7, r20	; 0x07
    5d1c:	58 87       	std	Y+8, r21	; 0x08
    5d1e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5d20:	63 2f       	mov	r22, r19
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	8a e8       	ldi	r24, 0x8A	; 138
    5d26:	98 e0       	ldi	r25, 0x08	; 8
    5d28:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5d2c:	46 26       	eor	r4, r22
    5d2e:	57 26       	eor	r5, r23
    5d30:	68 26       	eor	r6, r24
    5d32:	79 26       	eor	r7, r25
    5d34:	49 85       	ldd	r20, Y+9	; 0x09
    5d36:	5a 85       	ldd	r21, Y+10	; 0x0a
    5d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    5d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    5d3c:	44 25       	eor	r20, r4
    5d3e:	55 25       	eor	r21, r5
    5d40:	66 25       	eor	r22, r6
    5d42:	77 25       	eor	r23, r7
    5d44:	49 87       	std	Y+9, r20	; 0x09
    5d46:	5a 87       	std	Y+10, r21	; 0x0a
    5d48:	6b 87       	std	Y+11, r22	; 0x0b
    5d4a:	7c 87       	std	Y+12, r23	; 0x0c
    5d4c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5d4e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5d50:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5d52:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5d54:	65 2f       	mov	r22, r21
    5d56:	77 27       	eor	r23, r23
    5d58:	88 27       	eor	r24, r24
    5d5a:	99 27       	eor	r25, r25
    5d5c:	8a e8       	ldi	r24, 0x8A	; 138
    5d5e:	9c e0       	ldi	r25, 0x0C	; 12
    5d60:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5d64:	8d 84       	ldd	r8, Y+13	; 0x0d
    5d66:	9e 84       	ldd	r9, Y+14	; 0x0e
    5d68:	af 84       	ldd	r10, Y+15	; 0x0f
    5d6a:	b8 88       	ldd	r11, Y+16	; 0x10
    5d6c:	86 26       	eor	r8, r22
    5d6e:	97 26       	eor	r9, r23
    5d70:	a8 26       	eor	r10, r24
    5d72:	b9 26       	eor	r11, r25
    5d74:	4a 89       	ldd	r20, Y+18	; 0x12
    5d76:	5b 89       	ldd	r21, Y+19	; 0x13
    5d78:	6c 89       	ldd	r22, Y+20	; 0x14
    5d7a:	7d 89       	ldd	r23, Y+21	; 0x15
    5d7c:	48 25       	eor	r20, r8
    5d7e:	59 25       	eor	r21, r9
    5d80:	6a 25       	eor	r22, r10
    5d82:	7b 25       	eor	r23, r11
    5d84:	4a 8b       	std	Y+18, r20	; 0x12
    5d86:	5b 8b       	std	Y+19, r21	; 0x13
    5d88:	6c 8b       	std	Y+20, r22	; 0x14
    5d8a:	7d 8b       	std	Y+21, r23	; 0x15
            } while( (ki+=8) < ke );
    5d8c:	00 5e       	subi	r16, 0xE0	; 224
    5d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d90:	55 e0       	ldi	r21, 0x05	; 5
    5d92:	05 33       	cpi	r16, 0x35	; 53
    5d94:	15 07       	cpc	r17, r21
    5d96:	09 f0       	breq	.+2      	; 0x5d9a <os_aes+0x938>
    5d98:	9e cd       	rjmp	.-1220   	; 0x58d6 <os_aes+0x474>

            AES_key4 (t1,t2,t3,t0,4);
    5d9a:	60 91 49 05 	lds	r22, 0x0549	; 0x800549 <AESKEY+0x94>
    5d9e:	70 91 4a 05 	lds	r23, 0x054A	; 0x80054a <AESKEY+0x95>
    5da2:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <AESKEY+0x96>
    5da6:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <AESKEY+0x97>
    5daa:	6a 8f       	std	Y+26, r22	; 0x1a
    5dac:	7b 8f       	std	Y+27, r23	; 0x1b
    5dae:	8c 8f       	std	Y+28, r24	; 0x1c
    5db0:	9d 8f       	std	Y+29, r25	; 0x1d
    5db2:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <AESKEY+0x98>
    5db6:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <AESKEY+0x99>
    5dba:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <AESKEY+0x9a>
    5dbe:	b0 91 50 05 	lds	r27, 0x0550	; 0x800550 <AESKEY+0x9b>
    5dc2:	8e 8b       	std	Y+22, r24	; 0x16
    5dc4:	9f 8b       	std	Y+23, r25	; 0x17
    5dc6:	a8 8f       	std	Y+24, r26	; 0x18
    5dc8:	b9 8f       	std	Y+25, r27	; 0x19
    5dca:	00 91 51 05 	lds	r16, 0x0551	; 0x800551 <AESKEY+0x9c>
    5dce:	10 91 52 05 	lds	r17, 0x0552	; 0x800552 <AESKEY+0x9d>
    5dd2:	20 91 53 05 	lds	r18, 0x0553	; 0x800553 <AESKEY+0x9e>
    5dd6:	30 91 54 05 	lds	r19, 0x0554	; 0x800554 <AESKEY+0x9f>
    5dda:	0d 87       	std	Y+13, r16	; 0x0d
    5ddc:	1e 87       	std	Y+14, r17	; 0x0e
    5dde:	2f 87       	std	Y+15, r18	; 0x0f
    5de0:	38 8b       	std	Y+16, r19	; 0x10
    5de2:	20 91 45 05 	lds	r18, 0x0545	; 0x800545 <AESKEY+0x90>
    5de6:	30 91 46 05 	lds	r19, 0x0546	; 0x800546 <AESKEY+0x91>
    5dea:	40 91 47 05 	lds	r20, 0x0547	; 0x800547 <AESKEY+0x92>
    5dee:	50 91 48 05 	lds	r21, 0x0548	; 0x800548 <AESKEY+0x93>
    5df2:	2e 8f       	std	Y+30, r18	; 0x1e
    5df4:	3f 8f       	std	Y+31, r19	; 0x1f
    5df6:	48 a3       	std	Y+32, r20	; 0x20
    5df8:	59 a3       	std	Y+33, r21	; 0x21
            AES_expr4(t1,t2,t3,t0,a0);
    5dfa:	39 81       	ldd	r19, Y+1	; 0x01
    5dfc:	63 2f       	mov	r22, r19
    5dfe:	70 e0       	ldi	r23, 0x00	; 0
    5e00:	8a e8       	ldi	r24, 0x8A	; 138
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e08:	6a a3       	std	Y+34, r22	; 0x22
    5e0a:	7b a3       	std	Y+35, r23	; 0x23
    5e0c:	8c a3       	std	Y+36, r24	; 0x24
    5e0e:	9d a3       	std	Y+37, r25	; 0x25
    5e10:	4a 81       	ldd	r20, Y+2	; 0x02
    5e12:	64 2f       	mov	r22, r20
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	8a e8       	ldi	r24, 0x8A	; 138
    5e18:	94 e0       	ldi	r25, 0x04	; 4
    5e1a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e1e:	2b 01       	movw	r4, r22
    5e20:	3c 01       	movw	r6, r24
    5e22:	5b 81       	ldd	r21, Y+3	; 0x03
    5e24:	65 2f       	mov	r22, r21
    5e26:	70 e0       	ldi	r23, 0x00	; 0
    5e28:	8a e8       	ldi	r24, 0x8A	; 138
    5e2a:	98 e0       	ldi	r25, 0x08	; 8
    5e2c:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e30:	4b 01       	movw	r8, r22
    5e32:	5c 01       	movw	r10, r24
    5e34:	09 81       	ldd	r16, Y+1	; 0x01
    5e36:	1a 81       	ldd	r17, Y+2	; 0x02
    5e38:	2b 81       	ldd	r18, Y+3	; 0x03
    5e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    5e3c:	63 2f       	mov	r22, r19
    5e3e:	77 27       	eor	r23, r23
    5e40:	88 27       	eor	r24, r24
    5e42:	99 27       	eor	r25, r25
    5e44:	8a e8       	ldi	r24, 0x8A	; 138
    5e46:	9c e0       	ldi	r25, 0x0C	; 12
    5e48:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e4c:	6b 01       	movw	r12, r22
    5e4e:	7c 01       	movw	r14, r24
            AES_expr4(t2,t3,t0,t1,a1);
    5e50:	1d 81       	ldd	r17, Y+5	; 0x05
    5e52:	61 2f       	mov	r22, r17
    5e54:	70 e0       	ldi	r23, 0x00	; 0
    5e56:	8a e8       	ldi	r24, 0x8A	; 138
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e5e:	46 26       	eor	r4, r22
    5e60:	57 26       	eor	r5, r23
    5e62:	68 26       	eor	r6, r24
    5e64:	79 26       	eor	r7, r25
    5e66:	2e 89       	ldd	r18, Y+22	; 0x16
    5e68:	3f 89       	ldd	r19, Y+23	; 0x17
    5e6a:	48 8d       	ldd	r20, Y+24	; 0x18
    5e6c:	59 8d       	ldd	r21, Y+25	; 0x19
    5e6e:	24 25       	eor	r18, r4
    5e70:	35 25       	eor	r19, r5
    5e72:	46 25       	eor	r20, r6
    5e74:	57 25       	eor	r21, r7
    5e76:	2e 8b       	std	Y+22, r18	; 0x16
    5e78:	3f 8b       	std	Y+23, r19	; 0x17
    5e7a:	48 8f       	std	Y+24, r20	; 0x18
    5e7c:	59 8f       	std	Y+25, r21	; 0x19
    5e7e:	3e 81       	ldd	r19, Y+6	; 0x06
    5e80:	63 2f       	mov	r22, r19
    5e82:	70 e0       	ldi	r23, 0x00	; 0
    5e84:	8a e8       	ldi	r24, 0x8A	; 138
    5e86:	94 e0       	ldi	r25, 0x04	; 4
    5e88:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5e8c:	86 26       	eor	r8, r22
    5e8e:	97 26       	eor	r9, r23
    5e90:	a8 26       	eor	r10, r24
    5e92:	b9 26       	eor	r11, r25
    5e94:	4d 85       	ldd	r20, Y+13	; 0x0d
    5e96:	5e 85       	ldd	r21, Y+14	; 0x0e
    5e98:	6f 85       	ldd	r22, Y+15	; 0x0f
    5e9a:	78 89       	ldd	r23, Y+16	; 0x10
    5e9c:	48 25       	eor	r20, r8
    5e9e:	59 25       	eor	r21, r9
    5ea0:	6a 25       	eor	r22, r10
    5ea2:	7b 25       	eor	r23, r11
    5ea4:	4d 87       	std	Y+13, r20	; 0x0d
    5ea6:	5e 87       	std	Y+14, r21	; 0x0e
    5ea8:	6f 87       	std	Y+15, r22	; 0x0f
    5eaa:	78 8b       	std	Y+16, r23	; 0x10
    5eac:	5f 81       	ldd	r21, Y+7	; 0x07
    5eae:	65 2f       	mov	r22, r21
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	8a e8       	ldi	r24, 0x8A	; 138
    5eb4:	98 e0       	ldi	r25, 0x08	; 8
    5eb6:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5eba:	c6 26       	eor	r12, r22
    5ebc:	d7 26       	eor	r13, r23
    5ebe:	e8 26       	eor	r14, r24
    5ec0:	f9 26       	eor	r15, r25
    5ec2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5ec4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    5ec6:	88 a1       	ldd	r24, Y+32	; 0x20
    5ec8:	99 a1       	ldd	r25, Y+33	; 0x21
    5eca:	c6 26       	eor	r12, r22
    5ecc:	d7 26       	eor	r13, r23
    5ece:	e8 26       	eor	r14, r24
    5ed0:	f9 26       	eor	r15, r25
    5ed2:	0d 81       	ldd	r16, Y+5	; 0x05
    5ed4:	1e 81       	ldd	r17, Y+6	; 0x06
    5ed6:	2f 81       	ldd	r18, Y+7	; 0x07
    5ed8:	38 85       	ldd	r19, Y+8	; 0x08
    5eda:	63 2f       	mov	r22, r19
    5edc:	77 27       	eor	r23, r23
    5ede:	88 27       	eor	r24, r24
    5ee0:	99 27       	eor	r25, r25
    5ee2:	8a e8       	ldi	r24, 0x8A	; 138
    5ee4:	9c e0       	ldi	r25, 0x0C	; 12
    5ee6:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5eea:	8a a0       	ldd	r8, Y+34	; 0x22
    5eec:	9b a0       	ldd	r9, Y+35	; 0x23
    5eee:	ac a0       	ldd	r10, Y+36	; 0x24
    5ef0:	bd a0       	ldd	r11, Y+37	; 0x25
    5ef2:	86 26       	eor	r8, r22
    5ef4:	97 26       	eor	r9, r23
    5ef6:	a8 26       	eor	r10, r24
    5ef8:	b9 26       	eor	r11, r25
    5efa:	4a 8c       	ldd	r4, Y+26	; 0x1a
    5efc:	5b 8c       	ldd	r5, Y+27	; 0x1b
    5efe:	6c 8c       	ldd	r6, Y+28	; 0x1c
    5f00:	7d 8c       	ldd	r7, Y+29	; 0x1d
    5f02:	48 24       	eor	r4, r8
    5f04:	59 24       	eor	r5, r9
    5f06:	6a 24       	eor	r6, r10
    5f08:	7b 24       	eor	r7, r11
            AES_expr4(t3,t0,t1,t2,a2);
    5f0a:	19 85       	ldd	r17, Y+9	; 0x09
    5f0c:	61 2f       	mov	r22, r17
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	8a e8       	ldi	r24, 0x8A	; 138
    5f12:	90 e0       	ldi	r25, 0x00	; 0
    5f14:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5f18:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f1a:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f1c:	4f 85       	ldd	r20, Y+15	; 0x0f
    5f1e:	58 89       	ldd	r21, Y+16	; 0x10
    5f20:	26 27       	eor	r18, r22
    5f22:	37 27       	eor	r19, r23
    5f24:	48 27       	eor	r20, r24
    5f26:	59 27       	eor	r21, r25
    5f28:	2d 87       	std	Y+13, r18	; 0x0d
    5f2a:	3e 87       	std	Y+14, r19	; 0x0e
    5f2c:	4f 87       	std	Y+15, r20	; 0x0f
    5f2e:	58 8b       	std	Y+16, r21	; 0x10
    5f30:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f32:	63 2f       	mov	r22, r19
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	8a e8       	ldi	r24, 0x8A	; 138
    5f38:	94 e0       	ldi	r25, 0x04	; 4
    5f3a:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5f3e:	c6 26       	eor	r12, r22
    5f40:	d7 26       	eor	r13, r23
    5f42:	e8 26       	eor	r14, r24
    5f44:	f9 26       	eor	r15, r25
    5f46:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f48:	64 2f       	mov	r22, r20
    5f4a:	70 e0       	ldi	r23, 0x00	; 0
    5f4c:	8a e8       	ldi	r24, 0x8A	; 138
    5f4e:	98 e0       	ldi	r25, 0x08	; 8
    5f50:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5f54:	53 01       	movw	r10, r6
    5f56:	42 01       	movw	r8, r4
    5f58:	86 26       	eor	r8, r22
    5f5a:	97 26       	eor	r9, r23
    5f5c:	a8 26       	eor	r10, r24
    5f5e:	b9 26       	eor	r11, r25
    5f60:	09 85       	ldd	r16, Y+9	; 0x09
    5f62:	1a 85       	ldd	r17, Y+10	; 0x0a
    5f64:	2b 85       	ldd	r18, Y+11	; 0x0b
    5f66:	3c 85       	ldd	r19, Y+12	; 0x0c
    5f68:	63 2f       	mov	r22, r19
    5f6a:	77 27       	eor	r23, r23
    5f6c:	88 27       	eor	r24, r24
    5f6e:	99 27       	eor	r25, r25
    5f70:	8a e8       	ldi	r24, 0x8A	; 138
    5f72:	9c e0       	ldi	r25, 0x0C	; 12
    5f74:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5f78:	4e 88       	ldd	r4, Y+22	; 0x16
    5f7a:	5f 88       	ldd	r5, Y+23	; 0x17
    5f7c:	68 8c       	ldd	r6, Y+24	; 0x18
    5f7e:	79 8c       	ldd	r7, Y+25	; 0x19
    5f80:	46 26       	eor	r4, r22
    5f82:	57 26       	eor	r5, r23
    5f84:	68 26       	eor	r6, r24
    5f86:	79 26       	eor	r7, r25
            AES_expr4(t0,t1,t2,t3,a3);
    5f88:	1a 89       	ldd	r17, Y+18	; 0x12
    5f8a:	61 2f       	mov	r22, r17
    5f8c:	70 e0       	ldi	r23, 0x00	; 0
    5f8e:	8a e8       	ldi	r24, 0x8A	; 138
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5f96:	a7 01       	movw	r20, r14
    5f98:	96 01       	movw	r18, r12
    5f9a:	26 27       	eor	r18, r22
    5f9c:	37 27       	eor	r19, r23
    5f9e:	48 27       	eor	r20, r24
    5fa0:	59 27       	eor	r21, r25
    5fa2:	29 87       	std	Y+9, r18	; 0x09
    5fa4:	3a 87       	std	Y+10, r19	; 0x0a
    5fa6:	4b 87       	std	Y+11, r20	; 0x0b
    5fa8:	5c 87       	std	Y+12, r21	; 0x0c
    5faa:	3b 89       	ldd	r19, Y+19	; 0x13
    5fac:	63 2f       	mov	r22, r19
    5fae:	70 e0       	ldi	r23, 0x00	; 0
    5fb0:	8a e8       	ldi	r24, 0x8A	; 138
    5fb2:	94 e0       	ldi	r25, 0x04	; 4
    5fb4:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5fb8:	95 01       	movw	r18, r10
    5fba:	84 01       	movw	r16, r8
    5fbc:	06 27       	eor	r16, r22
    5fbe:	17 27       	eor	r17, r23
    5fc0:	28 27       	eor	r18, r24
    5fc2:	39 27       	eor	r19, r25
    5fc4:	0d 83       	std	Y+5, r16	; 0x05
    5fc6:	1e 83       	std	Y+6, r17	; 0x06
    5fc8:	2f 83       	std	Y+7, r18	; 0x07
    5fca:	38 87       	std	Y+8, r19	; 0x08
    5fcc:	1c 89       	ldd	r17, Y+20	; 0x14
    5fce:	61 2f       	mov	r22, r17
    5fd0:	70 e0       	ldi	r23, 0x00	; 0
    5fd2:	8a e8       	ldi	r24, 0x8A	; 138
    5fd4:	98 e0       	ldi	r25, 0x08	; 8
    5fd6:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5fda:	53 01       	movw	r10, r6
    5fdc:	42 01       	movw	r8, r4
    5fde:	86 26       	eor	r8, r22
    5fe0:	97 26       	eor	r9, r23
    5fe2:	a8 26       	eor	r10, r24
    5fe4:	b9 26       	eor	r11, r25
    5fe6:	2a 89       	ldd	r18, Y+18	; 0x12
    5fe8:	3b 89       	ldd	r19, Y+19	; 0x13
    5fea:	4c 89       	ldd	r20, Y+20	; 0x14
    5fec:	5d 89       	ldd	r21, Y+21	; 0x15
    5fee:	65 2f       	mov	r22, r21
    5ff0:	77 27       	eor	r23, r23
    5ff2:	88 27       	eor	r24, r24
    5ff4:	99 27       	eor	r25, r25
    5ff6:	8a e8       	ldi	r24, 0x8A	; 138
    5ff8:	9c e0       	ldi	r25, 0x0C	; 12
    5ffa:	0e 94 25 2a 	call	0x544a	; 0x544a <table_get_u4>
    5ffe:	0d 85       	ldd	r16, Y+13	; 0x0d
    6000:	1e 85       	ldd	r17, Y+14	; 0x0e
    6002:	2f 85       	ldd	r18, Y+15	; 0x0f
    6004:	38 89       	ldd	r19, Y+16	; 0x10
    6006:	06 27       	eor	r16, r22
    6008:	17 27       	eor	r17, r23
    600a:	28 27       	eor	r18, r24
    600c:	39 27       	eor	r19, r25
    600e:	d9 01       	movw	r26, r18
    6010:	c8 01       	movw	r24, r16
    6012:	49 85       	ldd	r20, Y+9	; 0x09
    6014:	5a 85       	ldd	r21, Y+10	; 0x0a
    6016:	6b 85       	ldd	r22, Y+11	; 0x0b
    6018:	7c 85       	ldd	r23, Y+12	; 0x0c
    601a:	07 2f       	mov	r16, r23
    601c:	11 27       	eor	r17, r17
    601e:	22 27       	eor	r18, r18
    6020:	33 27       	eor	r19, r19
    6022:	f8 01       	movw	r30, r16
    6024:	e6 57       	subi	r30, 0x76	; 118
    6026:	ff 4e       	sbci	r31, 0xEF	; 239
    6028:	44 91       	lpm	r20, Z
    602a:	5f 81       	ldd	r21, Y+7	; 0x07
    602c:	e5 2f       	mov	r30, r21
    602e:	f0 e0       	ldi	r31, 0x00	; 0
    6030:	e6 57       	subi	r30, 0x76	; 118
    6032:	ff 4e       	sbci	r31, 0xEF	; 239
    6034:	34 91       	lpm	r19, Z
    6036:	e9 2d       	mov	r30, r9
    6038:	f0 e0       	ldi	r31, 0x00	; 0
    603a:	e6 57       	subi	r30, 0x76	; 118
    603c:	ff 4e       	sbci	r31, 0xEF	; 239
    603e:	24 91       	lpm	r18, Z
    6040:	e8 2f       	mov	r30, r24
    6042:	f0 e0       	ldi	r31, 0x00	; 0
    6044:	e6 57       	subi	r30, 0x76	; 118
    6046:	ff 4e       	sbci	r31, 0xEF	; 239
    6048:	e4 91       	lpm	r30, Z
    604a:	c0 90 55 05 	lds	r12, 0x0555	; 0x800555 <AESKEY+0xa0>
    604e:	d0 90 56 05 	lds	r13, 0x0556	; 0x800556 <AESKEY+0xa1>
    6052:	e0 90 57 05 	lds	r14, 0x0557	; 0x800557 <AESKEY+0xa2>
    6056:	f0 90 58 05 	lds	r15, 0x0558	; 0x800558 <AESKEY+0xa3>
    605a:	ce 26       	eor	r12, r30
    605c:	f4 26       	eor	r15, r20
    605e:	e3 26       	eor	r14, r19

            AES_expr(a0,t0,t1,t2,t3,8);
    6060:	b7 01       	movw	r22, r14
    6062:	a6 01       	movw	r20, r12
    6064:	52 27       	eor	r21, r18
    6066:	49 83       	std	Y+1, r20	; 0x01
    6068:	5a 83       	std	Y+2, r21	; 0x02
    606a:	6b 83       	std	Y+3, r22	; 0x03
    606c:	7c 83       	std	Y+4, r23	; 0x04
    606e:	4d 81       	ldd	r20, Y+5	; 0x05
    6070:	5e 81       	ldd	r21, Y+6	; 0x06
    6072:	6f 81       	ldd	r22, Y+7	; 0x07
    6074:	78 85       	ldd	r23, Y+8	; 0x08
    6076:	07 2f       	mov	r16, r23
    6078:	11 27       	eor	r17, r17
    607a:	22 27       	eor	r18, r18
    607c:	33 27       	eor	r19, r19
    607e:	f8 01       	movw	r30, r16
    6080:	e6 57       	subi	r30, 0x76	; 118
    6082:	ff 4e       	sbci	r31, 0xEF	; 239
    6084:	44 91       	lpm	r20, Z
    6086:	ea 2d       	mov	r30, r10
    6088:	f0 e0       	ldi	r31, 0x00	; 0
    608a:	e6 57       	subi	r30, 0x76	; 118
    608c:	ff 4e       	sbci	r31, 0xEF	; 239
    608e:	34 91       	lpm	r19, Z
    6090:	e9 2f       	mov	r30, r25
    6092:	f0 e0       	ldi	r31, 0x00	; 0
    6094:	e6 57       	subi	r30, 0x76	; 118
    6096:	ff 4e       	sbci	r31, 0xEF	; 239
    6098:	24 91       	lpm	r18, Z
    609a:	59 85       	ldd	r21, Y+9	; 0x09
    609c:	e5 2f       	mov	r30, r21
    609e:	f0 e0       	ldi	r31, 0x00	; 0
    60a0:	e6 57       	subi	r30, 0x76	; 118
    60a2:	ff 4e       	sbci	r31, 0xEF	; 239
    60a4:	e4 91       	lpm	r30, Z
    60a6:	c0 90 59 05 	lds	r12, 0x0559	; 0x800559 <AESKEY+0xa4>
    60aa:	d0 90 5a 05 	lds	r13, 0x055A	; 0x80055a <AESKEY+0xa5>
    60ae:	e0 90 5b 05 	lds	r14, 0x055B	; 0x80055b <AESKEY+0xa6>
    60b2:	f0 90 5c 05 	lds	r15, 0x055C	; 0x80055c <AESKEY+0xa7>
    60b6:	ce 26       	eor	r12, r30
    60b8:	f4 26       	eor	r15, r20
    60ba:	e3 26       	eor	r14, r19
            AES_expr(a1,t1,t2,t3,t0,9);
    60bc:	d2 26       	eor	r13, r18
    60be:	0b 2d       	mov	r16, r11
    60c0:	11 27       	eor	r17, r17
    60c2:	22 27       	eor	r18, r18
    60c4:	33 27       	eor	r19, r19
    60c6:	f8 01       	movw	r30, r16
    60c8:	e6 57       	subi	r30, 0x76	; 118
    60ca:	ff 4e       	sbci	r31, 0xEF	; 239
    60cc:	44 91       	lpm	r20, Z
    60ce:	ea 2f       	mov	r30, r26
    60d0:	f0 e0       	ldi	r31, 0x00	; 0
    60d2:	e6 57       	subi	r30, 0x76	; 118
    60d4:	ff 4e       	sbci	r31, 0xEF	; 239
    60d6:	34 91       	lpm	r19, Z
    60d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    60da:	e6 2f       	mov	r30, r22
    60dc:	f0 e0       	ldi	r31, 0x00	; 0
    60de:	e6 57       	subi	r30, 0x76	; 118
    60e0:	ff 4e       	sbci	r31, 0xEF	; 239
    60e2:	24 91       	lpm	r18, Z
    60e4:	7d 81       	ldd	r23, Y+5	; 0x05
    60e6:	e7 2f       	mov	r30, r23
    60e8:	f0 e0       	ldi	r31, 0x00	; 0
    60ea:	e6 57       	subi	r30, 0x76	; 118
    60ec:	ff 4e       	sbci	r31, 0xEF	; 239
    60ee:	e4 91       	lpm	r30, Z
    60f0:	40 90 5d 05 	lds	r4, 0x055D	; 0x80055d <AESKEY+0xa8>
    60f4:	50 90 5e 05 	lds	r5, 0x055E	; 0x80055e <AESKEY+0xa9>
    60f8:	60 90 5f 05 	lds	r6, 0x055F	; 0x80055f <AESKEY+0xaa>
    60fc:	70 90 60 05 	lds	r7, 0x0560	; 0x800560 <AESKEY+0xab>
    6100:	4e 26       	eor	r4, r30
    6102:	74 26       	eor	r7, r20
    6104:	63 26       	eor	r6, r19
            AES_expr(a2,t2,t3,t0,t1,10);
    6106:	52 26       	eor	r5, r18
    6108:	8b 2f       	mov	r24, r27
    610a:	99 27       	eor	r25, r25
    610c:	aa 27       	eor	r26, r26
    610e:	bb 27       	eor	r27, r27
    6110:	fc 01       	movw	r30, r24
    6112:	e6 57       	subi	r30, 0x76	; 118
    6114:	ff 4e       	sbci	r31, 0xEF	; 239
    6116:	84 91       	lpm	r24, Z
    6118:	9b 85       	ldd	r25, Y+11	; 0x0b
    611a:	e9 2f       	mov	r30, r25
    611c:	f0 e0       	ldi	r31, 0x00	; 0
    611e:	e6 57       	subi	r30, 0x76	; 118
    6120:	ff 4e       	sbci	r31, 0xEF	; 239
    6122:	24 91       	lpm	r18, Z
    6124:	ae 81       	ldd	r26, Y+6	; 0x06
    6126:	ea 2f       	mov	r30, r26
    6128:	f0 e0       	ldi	r31, 0x00	; 0
    612a:	e6 57       	subi	r30, 0x76	; 118
    612c:	ff 4e       	sbci	r31, 0xEF	; 239
    612e:	94 91       	lpm	r25, Z
    6130:	e8 2d       	mov	r30, r8
    6132:	f0 e0       	ldi	r31, 0x00	; 0
    6134:	e6 57       	subi	r30, 0x76	; 118
    6136:	ff 4e       	sbci	r31, 0xEF	; 239
    6138:	e4 91       	lpm	r30, Z
    613a:	80 90 61 05 	lds	r8, 0x0561	; 0x800561 <AESKEY+0xac>
    613e:	90 90 62 05 	lds	r9, 0x0562	; 0x800562 <AESKEY+0xad>
    6142:	a0 90 63 05 	lds	r10, 0x0563	; 0x800563 <AESKEY+0xae>
    6146:	b0 90 64 05 	lds	r11, 0x0564	; 0x800564 <AESKEY+0xaf>
    614a:	8e 26       	eor	r8, r30
    614c:	b8 26       	eor	r11, r24
    614e:	a2 26       	eor	r10, r18
            AES_expr(a3,t3,t0,t1,t2,11);
    6150:	99 26       	eor	r9, r25
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
    6152:	09 89       	ldd	r16, Y+17	; 0x11
    6154:	01 ff       	sbrs	r16, 1
    6156:	e7 c0       	rjmp	.+462    	; 0x6326 <os_aes+0xec4>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
    6158:	40 2f       	mov	r20, r16
    615a:	40 73       	andi	r20, 0x30	; 48
    615c:	50 e0       	ldi	r21, 0x00	; 0
    615e:	64 e0       	ldi	r22, 0x04	; 4
    6160:	55 95       	asr	r21
    6162:	47 95       	ror	r20
    6164:	6a 95       	dec	r22
    6166:	e1 f7       	brne	.-8      	; 0x6160 <os_aes+0xcfe>
    6168:	41 15       	cp	r20, r1
    616a:	51 05       	cpc	r21, r1
    616c:	09 f4       	brne	.+2      	; 0x6170 <os_aes+0xd0e>
    616e:	6d ca       	rjmp	.-2854   	; 0x564a <os_aes+0x1e8>
    6170:	ba 01       	movw	r22, r20
    6172:	55 0f       	add	r21, r21
    6174:	88 0b       	sbc	r24, r24
    6176:	99 0b       	sbc	r25, r25
    6178:	6d 83       	std	Y+5, r22	; 0x05
    617a:	7e 83       	std	Y+6, r23	; 0x06
    617c:	8f 83       	std	Y+7, r24	; 0x07
    617e:	98 87       	std	Y+8, r25	; 0x08
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
    6180:	89 81       	ldd	r24, Y+1	; 0x01
    6182:	9a 81       	ldd	r25, Y+2	; 0x02
    6184:	ab 81       	ldd	r26, Y+3	; 0x03
    6186:	bc 81       	ldd	r27, Y+4	; 0x04
    6188:	88 27       	eor	r24, r24
    618a:	b7 fd       	sbrc	r27, 7
    618c:	83 95       	inc	r24
    618e:	99 27       	eor	r25, r25
    6190:	aa 27       	eor	r26, r26
    6192:	bb 27       	eor	r27, r27
                        a0 = (a0 << 1) | (a1 >> 31);
    6194:	49 81       	ldd	r20, Y+1	; 0x01
    6196:	5a 81       	ldd	r21, Y+2	; 0x02
    6198:	6b 81       	ldd	r22, Y+3	; 0x03
    619a:	7c 81       	ldd	r23, Y+4	; 0x04
    619c:	44 0f       	add	r20, r20
    619e:	55 1f       	adc	r21, r21
    61a0:	66 1f       	adc	r22, r22
    61a2:	77 1f       	adc	r23, r23
    61a4:	97 01       	movw	r18, r14
    61a6:	86 01       	movw	r16, r12
    61a8:	00 27       	eor	r16, r16
    61aa:	37 fd       	sbrc	r19, 7
    61ac:	03 95       	inc	r16
    61ae:	11 27       	eor	r17, r17
    61b0:	22 27       	eor	r18, r18
    61b2:	33 27       	eor	r19, r19
    61b4:	04 2b       	or	r16, r20
    61b6:	15 2b       	or	r17, r21
    61b8:	26 2b       	or	r18, r22
    61ba:	37 2b       	or	r19, r23
    61bc:	09 83       	std	Y+1, r16	; 0x01
    61be:	1a 83       	std	Y+2, r17	; 0x02
    61c0:	2b 83       	std	Y+3, r18	; 0x03
    61c2:	3c 83       	std	Y+4, r19	; 0x04
                        a1 = (a1 << 1) | (a2 >> 31);
    61c4:	cc 0c       	add	r12, r12
    61c6:	dd 1c       	adc	r13, r13
    61c8:	ee 1c       	adc	r14, r14
    61ca:	ff 1c       	adc	r15, r15
    61cc:	b3 01       	movw	r22, r6
    61ce:	a2 01       	movw	r20, r4
    61d0:	44 27       	eor	r20, r20
    61d2:	77 fd       	sbrc	r23, 7
    61d4:	43 95       	inc	r20
    61d6:	55 27       	eor	r21, r21
    61d8:	66 27       	eor	r22, r22
    61da:	77 27       	eor	r23, r23
    61dc:	c4 2a       	or	r12, r20
    61de:	d5 2a       	or	r13, r21
    61e0:	e6 2a       	or	r14, r22
    61e2:	f7 2a       	or	r15, r23
                        a2 = (a2 << 1) | (a3 >> 31);
    61e4:	44 0c       	add	r4, r4
    61e6:	55 1c       	adc	r5, r5
    61e8:	66 1c       	adc	r6, r6
    61ea:	77 1c       	adc	r7, r7
    61ec:	b5 01       	movw	r22, r10
    61ee:	a4 01       	movw	r20, r8
    61f0:	44 27       	eor	r20, r20
    61f2:	77 fd       	sbrc	r23, 7
    61f4:	43 95       	inc	r20
    61f6:	55 27       	eor	r21, r21
    61f8:	66 27       	eor	r22, r22
    61fa:	77 27       	eor	r23, r23
    61fc:	44 2a       	or	r4, r20
    61fe:	55 2a       	or	r5, r21
    6200:	66 2a       	or	r6, r22
    6202:	77 2a       	or	r7, r23
                        a3 = (a3 << 1);
    6204:	88 0c       	add	r8, r8
    6206:	99 1c       	adc	r9, r9
    6208:	aa 1c       	adc	r10, r10
    620a:	bb 1c       	adc	r11, r11
                        if( t0 ) a3 ^= 0x87;
    620c:	89 2b       	or	r24, r25
    620e:	8a 2b       	or	r24, r26
    6210:	8b 2b       	or	r24, r27
    6212:	11 f0       	breq	.+4      	; 0x6218 <os_aes+0xdb6>
    6214:	17 e8       	ldi	r17, 0x87	; 135
    6216:	81 26       	eor	r8, r17
                    } while( --t1 );
    6218:	2d 81       	ldd	r18, Y+5	; 0x05
    621a:	3e 81       	ldd	r19, Y+6	; 0x06
    621c:	4f 81       	ldd	r20, Y+7	; 0x07
    621e:	58 85       	ldd	r21, Y+8	; 0x08
    6220:	21 50       	subi	r18, 0x01	; 1
    6222:	31 09       	sbc	r19, r1
    6224:	41 09       	sbc	r20, r1
    6226:	51 09       	sbc	r21, r1
    6228:	2d 83       	std	Y+5, r18	; 0x05
    622a:	3e 83       	std	Y+6, r19	; 0x06
    622c:	4f 83       	std	Y+7, r20	; 0x07
    622e:	58 87       	std	Y+8, r21	; 0x08
    6230:	23 2b       	or	r18, r19
    6232:	24 2b       	or	r18, r20
    6234:	25 2b       	or	r18, r21
    6236:	09 f0       	breq	.+2      	; 0x623a <os_aes+0xdd8>
    6238:	a3 cf       	rjmp	.-186    	; 0x6180 <os_aes+0xd1e>

                    AESAUX[0] ^= a0;
    623a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <AESAUX>
    623e:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <AESAUX+0x1>
    6242:	a0 91 67 05 	lds	r26, 0x0567	; 0x800567 <AESAUX+0x2>
    6246:	b0 91 68 05 	lds	r27, 0x0568	; 0x800568 <AESAUX+0x3>
    624a:	49 81       	ldd	r20, Y+1	; 0x01
    624c:	5a 81       	ldd	r21, Y+2	; 0x02
    624e:	6b 81       	ldd	r22, Y+3	; 0x03
    6250:	7c 81       	ldd	r23, Y+4	; 0x04
    6252:	84 27       	eor	r24, r20
    6254:	95 27       	eor	r25, r21
    6256:	a6 27       	eor	r26, r22
    6258:	b7 27       	eor	r27, r23
    625a:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <AESAUX>
    625e:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <AESAUX+0x1>
    6262:	a0 93 67 05 	sts	0x0567, r26	; 0x800567 <AESAUX+0x2>
    6266:	b0 93 68 05 	sts	0x0568, r27	; 0x800568 <AESAUX+0x3>
                    AESAUX[1] ^= a1;
    626a:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <AESAUX+0x4>
    626e:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <AESAUX+0x5>
    6272:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <AESAUX+0x6>
    6276:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <AESAUX+0x7>
    627a:	8c 25       	eor	r24, r12
    627c:	9d 25       	eor	r25, r13
    627e:	ae 25       	eor	r26, r14
    6280:	bf 25       	eor	r27, r15
    6282:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <AESAUX+0x4>
    6286:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <AESAUX+0x5>
    628a:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <AESAUX+0x6>
    628e:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <AESAUX+0x7>
                    AESAUX[2] ^= a2;
    6292:	80 91 6d 05 	lds	r24, 0x056D	; 0x80056d <AESAUX+0x8>
    6296:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <AESAUX+0x9>
    629a:	a0 91 6f 05 	lds	r26, 0x056F	; 0x80056f <AESAUX+0xa>
    629e:	b0 91 70 05 	lds	r27, 0x0570	; 0x800570 <AESAUX+0xb>
    62a2:	84 25       	eor	r24, r4
    62a4:	95 25       	eor	r25, r5
    62a6:	a6 25       	eor	r26, r6
    62a8:	b7 25       	eor	r27, r7
    62aa:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <AESAUX+0x8>
    62ae:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <AESAUX+0x9>
    62b2:	a0 93 6f 05 	sts	0x056F, r26	; 0x80056f <AESAUX+0xa>
    62b6:	b0 93 70 05 	sts	0x0570, r27	; 0x800570 <AESAUX+0xb>
                    AESAUX[3] ^= a3;
    62ba:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <AESAUX+0xc>
    62be:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <AESAUX+0xd>
    62c2:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <AESAUX+0xe>
    62c6:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <AESAUX+0xf>
    62ca:	88 25       	eor	r24, r8
    62cc:	99 25       	eor	r25, r9
    62ce:	aa 25       	eor	r26, r10
    62d0:	bb 25       	eor	r27, r11
    62d2:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <AESAUX+0xc>
    62d6:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <AESAUX+0xd>
    62da:	a0 93 73 05 	sts	0x0573, r26	; 0x800573 <AESAUX+0xe>
    62de:	b0 93 74 05 	sts	0x0574, r27	; 0x800574 <AESAUX+0xf>
                    mode &= ~AES_MICSUB;
    62e2:	09 89       	ldd	r16, Y+17	; 0x11
    62e4:	0f 7c       	andi	r16, 0xCF	; 207
    62e6:	09 8b       	std	Y+17, r16	; 0x11
    62e8:	ea a5       	ldd	r30, Y+42	; 0x2a
    62ea:	fb a5       	ldd	r31, Y+43	; 0x2b
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
    62ec:	80 e0       	ldi	r24, 0x00	; 0
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	dc 01       	movw	r26, r24
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
    62f2:	91 01       	movw	r18, r2
    62f4:	40 e0       	ldi	r20, 0x00	; 0
    62f6:	50 e0       	ldi	r21, 0x00	; 0
    62f8:	29 87       	std	Y+9, r18	; 0x09
    62fa:	3a 87       	std	Y+10, r19	; 0x0a
    62fc:	4b 87       	std	Y+11, r20	; 0x0b
    62fe:	5c 87       	std	Y+12, r21	; 0x0c
    6300:	1e ca       	rjmp	.-3012   	; 0x573e <os_aes+0x2dc>
    6302:	29 85       	ldd	r18, Y+9	; 0x09
    6304:	3a 85       	ldd	r19, Y+10	; 0x0a
    6306:	4b 85       	ldd	r20, Y+11	; 0x0b
    6308:	5c 85       	ldd	r21, Y+12	; 0x0c
    630a:	28 17       	cp	r18, r24
    630c:	39 07       	cpc	r19, r25
    630e:	4a 07       	cpc	r20, r26
    6310:	5b 07       	cpc	r21, r27
    6312:	29 f4       	brne	.+10     	; 0x631e <os_aes+0xebc>
    6314:	40 e8       	ldi	r20, 0x80	; 128
    6316:	50 e0       	ldi	r21, 0x00	; 0
    6318:	60 e0       	ldi	r22, 0x00	; 0
    631a:	70 e0       	ldi	r23, 0x00	; 0
    631c:	2a ca       	rjmp	.-2988   	; 0x5772 <os_aes+0x310>
    631e:	40 e0       	ldi	r20, 0x00	; 0
    6320:	50 e0       	ldi	r21, 0x00	; 0
    6322:	ba 01       	movw	r22, r20
    6324:	26 ca       	rjmp	.-2996   	; 0x5772 <os_aes+0x310>
                    AESAUX[1] = a1;
                    AESAUX[2] = a2;
                    AESAUX[3] = a3;
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
    6326:	19 89       	ldd	r17, Y+17	; 0x11
    6328:	12 ff       	sbrs	r17, 2
    632a:	58 c0       	rjmp	.+176    	; 0x63dc <os_aes+0xf7a>
                    t0 = (len > 16) ? 16: len;
    632c:	a1 01       	movw	r20, r2
    632e:	21 e1       	ldi	r18, 0x11	; 17
    6330:	22 16       	cp	r2, r18
    6332:	31 04       	cpc	r3, r1
    6334:	10 f0       	brcs	.+4      	; 0x633a <os_aes+0xed8>
    6336:	40 e1       	ldi	r20, 0x10	; 16
    6338:	50 e0       	ldi	r21, 0x00	; 0
    633a:	ba 01       	movw	r22, r20
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	6d 83       	std	Y+5, r22	; 0x05
    6342:	7e 83       	std	Y+6, r23	; 0x06
    6344:	8f 83       	std	Y+7, r24	; 0x07
    6346:	98 87       	std	Y+8, r25	; 0x08
    6348:	ea a5       	ldd	r30, Y+42	; 0x2a
    634a:	fb a5       	ldd	r31, Y+43	; 0x2b
                    for(t1=0; t1<t0; t1++) {
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	dc 01       	movw	r26, r24
    6352:	2d 81       	ldd	r18, Y+5	; 0x05
    6354:	3e 81       	ldd	r19, Y+6	; 0x06
    6356:	4f 81       	ldd	r20, Y+7	; 0x07
    6358:	58 85       	ldd	r21, Y+8	; 0x08
    635a:	82 17       	cp	r24, r18
    635c:	93 07       	cpc	r25, r19
    635e:	a4 07       	cpc	r26, r20
    6360:	b5 07       	cpc	r27, r21
    6362:	40 f5       	brcc	.+80     	; 0x63b4 <os_aes+0xf52>
                        buf[t1] ^= (a0>>24);
    6364:	20 81       	ld	r18, Z
    6366:	7c 81       	ldd	r23, Y+4	; 0x04
    6368:	27 27       	eor	r18, r23
    636a:	21 93       	st	Z+, r18
                        a0 <<= 8;
                        if((t1&3)==3) {
    636c:	ac 01       	movw	r20, r24
    636e:	bd 01       	movw	r22, r26
    6370:	43 70       	andi	r20, 0x03	; 3
    6372:	55 27       	eor	r21, r21
    6374:	66 27       	eor	r22, r22
    6376:	77 27       	eor	r23, r23
    6378:	43 30       	cpi	r20, 0x03	; 3
    637a:	51 05       	cpc	r21, r1
    637c:	61 05       	cpc	r22, r1
    637e:	71 05       	cpc	r23, r1
    6380:	69 f0       	breq	.+26     	; 0x639c <os_aes+0xf3a>
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
                    t0 = (len > 16) ? 16: len;
                    for(t1=0; t1<t0; t1++) {
                        buf[t1] ^= (a0>>24);
                        a0 <<= 8;
    6382:	09 81       	ldd	r16, Y+1	; 0x01
    6384:	1a 81       	ldd	r17, Y+2	; 0x02
    6386:	2b 81       	ldd	r18, Y+3	; 0x03
    6388:	3c 81       	ldd	r19, Y+4	; 0x04
    638a:	32 2f       	mov	r19, r18
    638c:	21 2f       	mov	r18, r17
    638e:	10 2f       	mov	r17, r16
    6390:	00 27       	eor	r16, r16
    6392:	09 83       	std	Y+1, r16	; 0x01
    6394:	1a 83       	std	Y+2, r17	; 0x02
    6396:	2b 83       	std	Y+3, r18	; 0x03
    6398:	3c 83       	std	Y+4, r19	; 0x04
    639a:	08 c0       	rjmp	.+16     	; 0x63ac <os_aes+0xf4a>
    639c:	c9 82       	std	Y+1, r12	; 0x01
    639e:	da 82       	std	Y+2, r13	; 0x02
    63a0:	eb 82       	std	Y+3, r14	; 0x03
    63a2:	fc 82       	std	Y+4, r15	; 0x04
    63a4:	73 01       	movw	r14, r6
    63a6:	62 01       	movw	r12, r4
                        if((t1&3)==3) {
                            a0 = a1;
                            a1 = a2;
                            a2 = a3;
    63a8:	24 01       	movw	r4, r8
    63aa:	35 01       	movw	r6, r10
                    AESAUX[3] = a3;
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
                    t0 = (len > 16) ? 16: len;
                    for(t1=0; t1<t0; t1++) {
    63ac:	01 96       	adiw	r24, 0x01	; 1
    63ae:	a1 1d       	adc	r26, r1
    63b0:	b1 1d       	adc	r27, r1
    63b2:	cf cf       	rjmp	.-98     	; 0x6352 <os_aes+0xef0>
                            a1 = a2;
                            a2 = a3;
                        }
                    }
                    // update counter
                    AESAUX[3]++;
    63b4:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <AESAUX+0xc>
    63b8:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <AESAUX+0xd>
    63bc:	a0 91 73 05 	lds	r26, 0x0573	; 0x800573 <AESAUX+0xe>
    63c0:	b0 91 74 05 	lds	r27, 0x0574	; 0x800574 <AESAUX+0xf>
    63c4:	01 96       	adiw	r24, 0x01	; 1
    63c6:	a1 1d       	adc	r26, r1
    63c8:	b1 1d       	adc	r27, r1
    63ca:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <AESAUX+0xc>
    63ce:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <AESAUX+0xd>
    63d2:	a0 93 73 05 	sts	0x0573, r26	; 0x800573 <AESAUX+0xe>
    63d6:	b0 93 74 05 	sts	0x0574, r27	; 0x800574 <AESAUX+0xf>
    63da:	33 c0       	rjmp	.+102    	; 0x6442 <os_aes+0xfe0>
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
    63dc:	ec 81       	ldd	r30, Y+4	; 0x04
    63de:	aa a5       	ldd	r26, Y+42	; 0x2a
    63e0:	bb a5       	ldd	r27, Y+43	; 0x2b
    63e2:	ec 93       	st	X, r30
    63e4:	fb 81       	ldd	r31, Y+3	; 0x03
    63e6:	11 96       	adiw	r26, 0x01	; 1
    63e8:	fc 93       	st	X, r31
    63ea:	11 97       	sbiw	r26, 0x01	; 1
    63ec:	0a 81       	ldd	r16, Y+2	; 0x02
    63ee:	12 96       	adiw	r26, 0x02	; 2
    63f0:	0c 93       	st	X, r16
    63f2:	12 97       	sbiw	r26, 0x02	; 2
    63f4:	19 81       	ldd	r17, Y+1	; 0x01
    63f6:	13 96       	adiw	r26, 0x03	; 3
    63f8:	1c 93       	st	X, r17
    63fa:	13 97       	sbiw	r26, 0x03	; 3
                    msbf4_write(buf+4,  a1);
    63fc:	14 96       	adiw	r26, 0x04	; 4
    63fe:	fc 92       	st	X, r15
    6400:	14 97       	sbiw	r26, 0x04	; 4
    6402:	15 96       	adiw	r26, 0x05	; 5
    6404:	ec 92       	st	X, r14
    6406:	15 97       	sbiw	r26, 0x05	; 5
    6408:	16 96       	adiw	r26, 0x06	; 6
    640a:	dc 92       	st	X, r13
    640c:	16 97       	sbiw	r26, 0x06	; 6
    640e:	17 96       	adiw	r26, 0x07	; 7
    6410:	cc 92       	st	X, r12
    6412:	17 97       	sbiw	r26, 0x07	; 7
                    msbf4_write(buf+8,  a2);
    6414:	18 96       	adiw	r26, 0x08	; 8
    6416:	7c 92       	st	X, r7
    6418:	18 97       	sbiw	r26, 0x08	; 8
    641a:	19 96       	adiw	r26, 0x09	; 9
    641c:	6c 92       	st	X, r6
    641e:	19 97       	sbiw	r26, 0x09	; 9
    6420:	1a 96       	adiw	r26, 0x0a	; 10
    6422:	5c 92       	st	X, r5
    6424:	1a 97       	sbiw	r26, 0x0a	; 10
    6426:	1b 96       	adiw	r26, 0x0b	; 11
    6428:	4c 92       	st	X, r4
    642a:	1b 97       	sbiw	r26, 0x0b	; 11
                    msbf4_write(buf+12, a3);
    642c:	1c 96       	adiw	r26, 0x0c	; 12
    642e:	bc 92       	st	X, r11
    6430:	1c 97       	sbiw	r26, 0x0c	; 12
    6432:	1d 96       	adiw	r26, 0x0d	; 13
    6434:	ac 92       	st	X, r10
    6436:	1d 97       	sbiw	r26, 0x0d	; 13
    6438:	1e 96       	adiw	r26, 0x0e	; 14
    643a:	9c 92       	st	X, r9
    643c:	1e 97       	sbiw	r26, 0x0e	; 14
    643e:	1f 96       	adiw	r26, 0x0f	; 15
    6440:	8c 92       	st	X, r8
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
                buf += 16;
    6442:	0a a5       	ldd	r16, Y+42	; 0x2a
    6444:	1b a5       	ldd	r17, Y+43	; 0x2b
    6446:	00 5f       	subi	r16, 0xF0	; 240
    6448:	1f 4f       	sbci	r17, 0xFF	; 255
    644a:	1b a7       	std	Y+43, r17	; 0x2b
    644c:	0a a7       	std	Y+42, r16	; 0x2a
                len -= 16;
    644e:	10 e1       	ldi	r17, 0x10	; 16
    6450:	21 1a       	sub	r2, r17
    6452:	31 08       	sbc	r3, r1
    6454:	25 c9       	rjmp	.-3510   	; 0x56a0 <os_aes+0x23e>
            }
            mode |= AES_MICNOAUX;
        }
        return AESAUX[0];
    6456:	60 91 65 05 	lds	r22, 0x0565	; 0x800565 <AESAUX>
    645a:	70 91 66 05 	lds	r23, 0x0566	; 0x800566 <AESAUX+0x1>
    645e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <AESAUX+0x2>
    6462:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <AESAUX+0x3>
}
    6466:	ab 96       	adiw	r28, 0x2b	; 43
    6468:	0f b6       	in	r0, 0x3f	; 63
    646a:	f8 94       	cli
    646c:	de bf       	out	0x3e, r29	; 62
    646e:	0f be       	out	0x3f, r0	; 63
    6470:	cd bf       	out	0x3d, r28	; 61
    6472:	df 91       	pop	r29
    6474:	cf 91       	pop	r28
    6476:	1f 91       	pop	r17
    6478:	0f 91       	pop	r16
    647a:	ff 90       	pop	r15
    647c:	ef 90       	pop	r14
    647e:	df 90       	pop	r13
    6480:	cf 90       	pop	r12
    6482:	bf 90       	pop	r11
    6484:	af 90       	pop	r10
    6486:	9f 90       	pop	r9
    6488:	8f 90       	pop	r8
    648a:	7f 90       	pop	r7
    648c:	6f 90       	pop	r6
    648e:	5f 90       	pop	r5
    6490:	4f 90       	pop	r4
    6492:	3f 90       	pop	r3
    6494:	2f 90       	pop	r2
    6496:	08 95       	ret

00006498 <__udivmodqi4>:
    6498:	99 1b       	sub	r25, r25
    649a:	79 e0       	ldi	r23, 0x09	; 9
    649c:	04 c0       	rjmp	.+8      	; 0x64a6 <__udivmodqi4_ep>

0000649e <__udivmodqi4_loop>:
    649e:	99 1f       	adc	r25, r25
    64a0:	96 17       	cp	r25, r22
    64a2:	08 f0       	brcs	.+2      	; 0x64a6 <__udivmodqi4_ep>
    64a4:	96 1b       	sub	r25, r22

000064a6 <__udivmodqi4_ep>:
    64a6:	88 1f       	adc	r24, r24
    64a8:	7a 95       	dec	r23
    64aa:	c9 f7       	brne	.-14     	; 0x649e <__udivmodqi4_loop>
    64ac:	80 95       	com	r24
    64ae:	08 95       	ret

000064b0 <__udivmodhi4>:
    64b0:	aa 1b       	sub	r26, r26
    64b2:	bb 1b       	sub	r27, r27
    64b4:	51 e1       	ldi	r21, 0x11	; 17
    64b6:	07 c0       	rjmp	.+14     	; 0x64c6 <__udivmodhi4_ep>

000064b8 <__udivmodhi4_loop>:
    64b8:	aa 1f       	adc	r26, r26
    64ba:	bb 1f       	adc	r27, r27
    64bc:	a6 17       	cp	r26, r22
    64be:	b7 07       	cpc	r27, r23
    64c0:	10 f0       	brcs	.+4      	; 0x64c6 <__udivmodhi4_ep>
    64c2:	a6 1b       	sub	r26, r22
    64c4:	b7 0b       	sbc	r27, r23

000064c6 <__udivmodhi4_ep>:
    64c6:	88 1f       	adc	r24, r24
    64c8:	99 1f       	adc	r25, r25
    64ca:	5a 95       	dec	r21
    64cc:	a9 f7       	brne	.-22     	; 0x64b8 <__udivmodhi4_loop>
    64ce:	80 95       	com	r24
    64d0:	90 95       	com	r25
    64d2:	bc 01       	movw	r22, r24
    64d4:	cd 01       	movw	r24, r26
    64d6:	08 95       	ret

000064d8 <__divmodhi4>:
    64d8:	97 fb       	bst	r25, 7
    64da:	07 2e       	mov	r0, r23
    64dc:	16 f4       	brtc	.+4      	; 0x64e2 <__divmodhi4+0xa>
    64de:	00 94       	com	r0
    64e0:	07 d0       	rcall	.+14     	; 0x64f0 <__divmodhi4_neg1>
    64e2:	77 fd       	sbrc	r23, 7
    64e4:	09 d0       	rcall	.+18     	; 0x64f8 <__divmodhi4_neg2>
    64e6:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__udivmodhi4>
    64ea:	07 fc       	sbrc	r0, 7
    64ec:	05 d0       	rcall	.+10     	; 0x64f8 <__divmodhi4_neg2>
    64ee:	3e f4       	brtc	.+14     	; 0x64fe <__divmodhi4_exit>

000064f0 <__divmodhi4_neg1>:
    64f0:	90 95       	com	r25
    64f2:	81 95       	neg	r24
    64f4:	9f 4f       	sbci	r25, 0xFF	; 255
    64f6:	08 95       	ret

000064f8 <__divmodhi4_neg2>:
    64f8:	70 95       	com	r23
    64fa:	61 95       	neg	r22
    64fc:	7f 4f       	sbci	r23, 0xFF	; 255

000064fe <__divmodhi4_exit>:
    64fe:	08 95       	ret

00006500 <__divmodsi4>:
    6500:	05 2e       	mov	r0, r21
    6502:	97 fb       	bst	r25, 7
    6504:	1e f4       	brtc	.+6      	; 0x650c <__divmodsi4+0xc>
    6506:	00 94       	com	r0
    6508:	0e 94 97 32 	call	0x652e	; 0x652e <__negsi2>
    650c:	57 fd       	sbrc	r21, 7
    650e:	07 d0       	rcall	.+14     	; 0x651e <__divmodsi4_neg2>
    6510:	0e 94 67 34 	call	0x68ce	; 0x68ce <__udivmodsi4>
    6514:	07 fc       	sbrc	r0, 7
    6516:	03 d0       	rcall	.+6      	; 0x651e <__divmodsi4_neg2>
    6518:	4e f4       	brtc	.+18     	; 0x652c <__divmodsi4_exit>
    651a:	0c 94 97 32 	jmp	0x652e	; 0x652e <__negsi2>

0000651e <__divmodsi4_neg2>:
    651e:	50 95       	com	r21
    6520:	40 95       	com	r20
    6522:	30 95       	com	r19
    6524:	21 95       	neg	r18
    6526:	3f 4f       	sbci	r19, 0xFF	; 255
    6528:	4f 4f       	sbci	r20, 0xFF	; 255
    652a:	5f 4f       	sbci	r21, 0xFF	; 255

0000652c <__divmodsi4_exit>:
    652c:	08 95       	ret

0000652e <__negsi2>:
    652e:	90 95       	com	r25
    6530:	80 95       	com	r24
    6532:	70 95       	com	r23
    6534:	61 95       	neg	r22
    6536:	7f 4f       	sbci	r23, 0xFF	; 255
    6538:	8f 4f       	sbci	r24, 0xFF	; 255
    653a:	9f 4f       	sbci	r25, 0xFF	; 255
    653c:	08 95       	ret

0000653e <__tablejump2__>:
    653e:	ee 0f       	add	r30, r30
    6540:	ff 1f       	adc	r31, r31
    6542:	05 90       	lpm	r0, Z+
    6544:	f4 91       	lpm	r31, Z
    6546:	e0 2d       	mov	r30, r0
    6548:	09 94       	ijmp

0000654a <__bswapsi2>:
    654a:	69 27       	eor	r22, r25
    654c:	96 27       	eor	r25, r22
    654e:	69 27       	eor	r22, r25
    6550:	78 27       	eor	r23, r24
    6552:	87 27       	eor	r24, r23
    6554:	78 27       	eor	r23, r24
    6556:	08 95       	ret

00006558 <__umulhisi3>:
    6558:	a2 9f       	mul	r26, r18
    655a:	b0 01       	movw	r22, r0
    655c:	b3 9f       	mul	r27, r19
    655e:	c0 01       	movw	r24, r0
    6560:	a3 9f       	mul	r26, r19
    6562:	70 0d       	add	r23, r0
    6564:	81 1d       	adc	r24, r1
    6566:	11 24       	eor	r1, r1
    6568:	91 1d       	adc	r25, r1
    656a:	b2 9f       	mul	r27, r18
    656c:	70 0d       	add	r23, r0
    656e:	81 1d       	adc	r24, r1
    6570:	11 24       	eor	r1, r1
    6572:	91 1d       	adc	r25, r1
    6574:	08 95       	ret

00006576 <__usmulhisi3>:
    6576:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>

0000657a <__usmulhisi3_tail>:
    657a:	b7 ff       	sbrs	r27, 7
    657c:	08 95       	ret
    657e:	82 1b       	sub	r24, r18
    6580:	93 0b       	sbc	r25, r19
    6582:	08 95       	ret

00006584 <__muluhisi3>:
    6584:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    6588:	a5 9f       	mul	r26, r21
    658a:	90 0d       	add	r25, r0
    658c:	b4 9f       	mul	r27, r20
    658e:	90 0d       	add	r25, r0
    6590:	a4 9f       	mul	r26, r20
    6592:	80 0d       	add	r24, r0
    6594:	91 1d       	adc	r25, r1
    6596:	11 24       	eor	r1, r1
    6598:	08 95       	ret

0000659a <__mulshisi3>:
    659a:	b7 ff       	sbrs	r27, 7
    659c:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__muluhisi3>

000065a0 <__mulohisi3>:
    65a0:	0e 94 c2 32 	call	0x6584	; 0x6584 <__muluhisi3>
    65a4:	82 1b       	sub	r24, r18
    65a6:	93 0b       	sbc	r25, r19
    65a8:	08 95       	ret

000065aa <__muldi3>:
    65aa:	df 93       	push	r29
    65ac:	cf 93       	push	r28
    65ae:	1f 93       	push	r17
    65b0:	0f 93       	push	r16
    65b2:	9a 9d       	mul	r25, r10
    65b4:	f0 2d       	mov	r31, r0
    65b6:	21 9f       	mul	r18, r17
    65b8:	f0 0d       	add	r31, r0
    65ba:	8b 9d       	mul	r24, r11
    65bc:	f0 0d       	add	r31, r0
    65be:	8a 9d       	mul	r24, r10
    65c0:	e0 2d       	mov	r30, r0
    65c2:	f1 0d       	add	r31, r1
    65c4:	03 9f       	mul	r16, r19
    65c6:	f0 0d       	add	r31, r0
    65c8:	02 9f       	mul	r16, r18
    65ca:	e0 0d       	add	r30, r0
    65cc:	f1 1d       	adc	r31, r1
    65ce:	4e 9d       	mul	r20, r14
    65d0:	e0 0d       	add	r30, r0
    65d2:	f1 1d       	adc	r31, r1
    65d4:	5e 9d       	mul	r21, r14
    65d6:	f0 0d       	add	r31, r0
    65d8:	4f 9d       	mul	r20, r15
    65da:	f0 0d       	add	r31, r0
    65dc:	7f 93       	push	r23
    65de:	6f 93       	push	r22
    65e0:	bf 92       	push	r11
    65e2:	af 92       	push	r10
    65e4:	5f 93       	push	r21
    65e6:	4f 93       	push	r20
    65e8:	d5 01       	movw	r26, r10
    65ea:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    65ee:	8b 01       	movw	r16, r22
    65f0:	ac 01       	movw	r20, r24
    65f2:	d7 01       	movw	r26, r14
    65f4:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    65f8:	eb 01       	movw	r28, r22
    65fa:	e8 0f       	add	r30, r24
    65fc:	f9 1f       	adc	r31, r25
    65fe:	d6 01       	movw	r26, r12
    6600:	0e 94 25 33 	call	0x664a	; 0x664a <__muldi3_6>
    6604:	2f 91       	pop	r18
    6606:	3f 91       	pop	r19
    6608:	d6 01       	movw	r26, r12
    660a:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    660e:	c6 0f       	add	r28, r22
    6610:	d7 1f       	adc	r29, r23
    6612:	e8 1f       	adc	r30, r24
    6614:	f9 1f       	adc	r31, r25
    6616:	af 91       	pop	r26
    6618:	bf 91       	pop	r27
    661a:	0e 94 25 33 	call	0x664a	; 0x664a <__muldi3_6>
    661e:	2f 91       	pop	r18
    6620:	3f 91       	pop	r19
    6622:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    6626:	c6 0f       	add	r28, r22
    6628:	d7 1f       	adc	r29, r23
    662a:	e8 1f       	adc	r30, r24
    662c:	f9 1f       	adc	r31, r25
    662e:	d6 01       	movw	r26, r12
    6630:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    6634:	e6 0f       	add	r30, r22
    6636:	f7 1f       	adc	r31, r23
    6638:	98 01       	movw	r18, r16
    663a:	be 01       	movw	r22, r28
    663c:	cf 01       	movw	r24, r30
    663e:	11 24       	eor	r1, r1
    6640:	0f 91       	pop	r16
    6642:	1f 91       	pop	r17
    6644:	cf 91       	pop	r28
    6646:	df 91       	pop	r29
    6648:	08 95       	ret

0000664a <__muldi3_6>:
    664a:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    664e:	46 0f       	add	r20, r22
    6650:	57 1f       	adc	r21, r23
    6652:	c8 1f       	adc	r28, r24
    6654:	d9 1f       	adc	r29, r25
    6656:	08 f4       	brcc	.+2      	; 0x665a <__muldi3_6+0x10>
    6658:	31 96       	adiw	r30, 0x01	; 1
    665a:	08 95       	ret

0000665c <__umulsidi3>:
    665c:	e8 94       	clt

0000665e <__umulsidi3_helper>:
    665e:	df 93       	push	r29
    6660:	cf 93       	push	r28
    6662:	fc 01       	movw	r30, r24
    6664:	db 01       	movw	r26, r22
    6666:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    666a:	7f 93       	push	r23
    666c:	6f 93       	push	r22
    666e:	e9 01       	movw	r28, r18
    6670:	9a 01       	movw	r18, r20
    6672:	ac 01       	movw	r20, r24
    6674:	bf 93       	push	r27
    6676:	af 93       	push	r26
    6678:	3f 93       	push	r19
    667a:	2f 93       	push	r18
    667c:	df 01       	movw	r26, r30
    667e:	0e 94 ac 32 	call	0x6558	; 0x6558 <__umulhisi3>
    6682:	26 f4       	brtc	.+8      	; 0x668c <__umulsidi3_helper+0x2e>
    6684:	6c 1b       	sub	r22, r28
    6686:	7d 0b       	sbc	r23, r29
    6688:	82 0b       	sbc	r24, r18
    668a:	93 0b       	sbc	r25, r19
    668c:	9e 01       	movw	r18, r28
    668e:	eb 01       	movw	r28, r22
    6690:	fc 01       	movw	r30, r24
    6692:	0e 94 25 33 	call	0x664a	; 0x664a <__muldi3_6>
    6696:	af 91       	pop	r26
    6698:	bf 91       	pop	r27
    669a:	2f 91       	pop	r18
    669c:	3f 91       	pop	r19
    669e:	0e 94 25 33 	call	0x664a	; 0x664a <__muldi3_6>
    66a2:	be 01       	movw	r22, r28
    66a4:	cf 01       	movw	r24, r30
    66a6:	f9 01       	movw	r30, r18
    66a8:	2f 91       	pop	r18
    66aa:	3f 91       	pop	r19
    66ac:	cf 91       	pop	r28
    66ae:	df 91       	pop	r29
    66b0:	08 95       	ret

000066b2 <__moddi3>:
    66b2:	68 94       	set
    66b4:	01 c0       	rjmp	.+2      	; 0x66b8 <__divdi3_moddi3>

000066b6 <__divdi3>:
    66b6:	e8 94       	clt

000066b8 <__divdi3_moddi3>:
    66b8:	f9 2f       	mov	r31, r25
    66ba:	f1 2b       	or	r31, r17
    66bc:	12 f0       	brmi	.+4      	; 0x66c2 <__divdi3_moddi3+0xa>
    66be:	0c 94 8d 33 	jmp	0x671a	; 0x671a <__udivdi3_umoddi3>
    66c2:	a0 e0       	ldi	r26, 0x00	; 0
    66c4:	b0 e0       	ldi	r27, 0x00	; 0
    66c6:	e7 e6       	ldi	r30, 0x67	; 103
    66c8:	f3 e3       	ldi	r31, 0x33	; 51
    66ca:	0c 94 ff 33 	jmp	0x67fe	; 0x67fe <__prologue_saves__+0xc>
    66ce:	09 2e       	mov	r0, r25
    66d0:	05 94       	asr	r0
    66d2:	22 f4       	brpl	.+8      	; 0x66dc <__divdi3_moddi3+0x24>
    66d4:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__negdi2>
    66d8:	11 23       	and	r17, r17
    66da:	92 f4       	brpl	.+36     	; 0x6700 <__divdi3_moddi3+0x48>
    66dc:	f0 e8       	ldi	r31, 0x80	; 128
    66de:	0f 26       	eor	r0, r31
    66e0:	ff ef       	ldi	r31, 0xFF	; 255
    66e2:	e0 94       	com	r14
    66e4:	f0 94       	com	r15
    66e6:	00 95       	com	r16
    66e8:	10 95       	com	r17
    66ea:	b0 94       	com	r11
    66ec:	c0 94       	com	r12
    66ee:	d0 94       	com	r13
    66f0:	a1 94       	neg	r10
    66f2:	bf 0a       	sbc	r11, r31
    66f4:	cf 0a       	sbc	r12, r31
    66f6:	df 0a       	sbc	r13, r31
    66f8:	ef 0a       	sbc	r14, r31
    66fa:	ff 0a       	sbc	r15, r31
    66fc:	0f 0b       	sbc	r16, r31
    66fe:	1f 0b       	sbc	r17, r31
    6700:	0e 94 98 33 	call	0x6730	; 0x6730 <__udivmod64>
    6704:	07 fc       	sbrc	r0, 7
    6706:	0e 94 e9 33 	call	0x67d2	; 0x67d2 <__negdi2>
    670a:	cd b7       	in	r28, 0x3d	; 61
    670c:	de b7       	in	r29, 0x3e	; 62
    670e:	ec e0       	ldi	r30, 0x0C	; 12
    6710:	0c 94 1b 34 	jmp	0x6836	; 0x6836 <__epilogue_restores__+0xc>

00006714 <__umoddi3>:
    6714:	68 94       	set
    6716:	01 c0       	rjmp	.+2      	; 0x671a <__udivdi3_umoddi3>

00006718 <__udivdi3>:
    6718:	e8 94       	clt

0000671a <__udivdi3_umoddi3>:
    671a:	8f 92       	push	r8
    671c:	9f 92       	push	r9
    671e:	cf 93       	push	r28
    6720:	df 93       	push	r29
    6722:	0e 94 98 33 	call	0x6730	; 0x6730 <__udivmod64>
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	9f 90       	pop	r9
    672c:	8f 90       	pop	r8
    672e:	08 95       	ret

00006730 <__udivmod64>:
    6730:	88 24       	eor	r8, r8
    6732:	99 24       	eor	r9, r9
    6734:	f4 01       	movw	r30, r8
    6736:	e4 01       	movw	r28, r8
    6738:	b0 e4       	ldi	r27, 0x40	; 64
    673a:	9f 93       	push	r25
    673c:	aa 27       	eor	r26, r26
    673e:	9a 15       	cp	r25, r10
    6740:	8b 04       	cpc	r8, r11
    6742:	9c 04       	cpc	r9, r12
    6744:	ed 05       	cpc	r30, r13
    6746:	fe 05       	cpc	r31, r14
    6748:	cf 05       	cpc	r28, r15
    674a:	d0 07       	cpc	r29, r16
    674c:	a1 07       	cpc	r26, r17
    674e:	98 f4       	brcc	.+38     	; 0x6776 <__udivmod64+0x46>
    6750:	ad 2f       	mov	r26, r29
    6752:	dc 2f       	mov	r29, r28
    6754:	cf 2f       	mov	r28, r31
    6756:	fe 2f       	mov	r31, r30
    6758:	e9 2d       	mov	r30, r9
    675a:	98 2c       	mov	r9, r8
    675c:	89 2e       	mov	r8, r25
    675e:	98 2f       	mov	r25, r24
    6760:	87 2f       	mov	r24, r23
    6762:	76 2f       	mov	r23, r22
    6764:	65 2f       	mov	r22, r21
    6766:	54 2f       	mov	r21, r20
    6768:	43 2f       	mov	r20, r19
    676a:	32 2f       	mov	r19, r18
    676c:	22 27       	eor	r18, r18
    676e:	b8 50       	subi	r27, 0x08	; 8
    6770:	31 f7       	brne	.-52     	; 0x673e <__udivmod64+0xe>
    6772:	bf 91       	pop	r27
    6774:	27 c0       	rjmp	.+78     	; 0x67c4 <__udivmod64+0x94>
    6776:	1b 2e       	mov	r1, r27
    6778:	bf 91       	pop	r27
    677a:	bb 27       	eor	r27, r27
    677c:	22 0f       	add	r18, r18
    677e:	33 1f       	adc	r19, r19
    6780:	44 1f       	adc	r20, r20
    6782:	55 1f       	adc	r21, r21
    6784:	66 1f       	adc	r22, r22
    6786:	77 1f       	adc	r23, r23
    6788:	88 1f       	adc	r24, r24
    678a:	99 1f       	adc	r25, r25
    678c:	88 1c       	adc	r8, r8
    678e:	99 1c       	adc	r9, r9
    6790:	ee 1f       	adc	r30, r30
    6792:	ff 1f       	adc	r31, r31
    6794:	cc 1f       	adc	r28, r28
    6796:	dd 1f       	adc	r29, r29
    6798:	aa 1f       	adc	r26, r26
    679a:	bb 1f       	adc	r27, r27
    679c:	8a 14       	cp	r8, r10
    679e:	9b 04       	cpc	r9, r11
    67a0:	ec 05       	cpc	r30, r12
    67a2:	fd 05       	cpc	r31, r13
    67a4:	ce 05       	cpc	r28, r14
    67a6:	df 05       	cpc	r29, r15
    67a8:	a0 07       	cpc	r26, r16
    67aa:	b1 07       	cpc	r27, r17
    67ac:	48 f0       	brcs	.+18     	; 0x67c0 <__udivmod64+0x90>
    67ae:	8a 18       	sub	r8, r10
    67b0:	9b 08       	sbc	r9, r11
    67b2:	ec 09       	sbc	r30, r12
    67b4:	fd 09       	sbc	r31, r13
    67b6:	ce 09       	sbc	r28, r14
    67b8:	df 09       	sbc	r29, r15
    67ba:	a0 0b       	sbc	r26, r16
    67bc:	b1 0b       	sbc	r27, r17
    67be:	21 60       	ori	r18, 0x01	; 1
    67c0:	1a 94       	dec	r1
    67c2:	e1 f6       	brne	.-72     	; 0x677c <__udivmod64+0x4c>
    67c4:	2e f4       	brtc	.+10     	; 0x67d0 <__udivmod64+0xa0>
    67c6:	94 01       	movw	r18, r8
    67c8:	af 01       	movw	r20, r30
    67ca:	be 01       	movw	r22, r28
    67cc:	cd 01       	movw	r24, r26
    67ce:	00 0c       	add	r0, r0
    67d0:	08 95       	ret

000067d2 <__negdi2>:
    67d2:	60 95       	com	r22
    67d4:	70 95       	com	r23
    67d6:	80 95       	com	r24
    67d8:	90 95       	com	r25
    67da:	30 95       	com	r19
    67dc:	40 95       	com	r20
    67de:	50 95       	com	r21
    67e0:	21 95       	neg	r18
    67e2:	3f 4f       	sbci	r19, 0xFF	; 255
    67e4:	4f 4f       	sbci	r20, 0xFF	; 255
    67e6:	5f 4f       	sbci	r21, 0xFF	; 255
    67e8:	6f 4f       	sbci	r22, 0xFF	; 255
    67ea:	7f 4f       	sbci	r23, 0xFF	; 255
    67ec:	8f 4f       	sbci	r24, 0xFF	; 255
    67ee:	9f 4f       	sbci	r25, 0xFF	; 255
    67f0:	08 95       	ret

000067f2 <__prologue_saves__>:
    67f2:	2f 92       	push	r2
    67f4:	3f 92       	push	r3
    67f6:	4f 92       	push	r4
    67f8:	5f 92       	push	r5
    67fa:	6f 92       	push	r6
    67fc:	7f 92       	push	r7
    67fe:	8f 92       	push	r8
    6800:	9f 92       	push	r9
    6802:	af 92       	push	r10
    6804:	bf 92       	push	r11
    6806:	cf 92       	push	r12
    6808:	df 92       	push	r13
    680a:	ef 92       	push	r14
    680c:	ff 92       	push	r15
    680e:	0f 93       	push	r16
    6810:	1f 93       	push	r17
    6812:	cf 93       	push	r28
    6814:	df 93       	push	r29
    6816:	cd b7       	in	r28, 0x3d	; 61
    6818:	de b7       	in	r29, 0x3e	; 62
    681a:	ca 1b       	sub	r28, r26
    681c:	db 0b       	sbc	r29, r27
    681e:	0f b6       	in	r0, 0x3f	; 63
    6820:	f8 94       	cli
    6822:	de bf       	out	0x3e, r29	; 62
    6824:	0f be       	out	0x3f, r0	; 63
    6826:	cd bf       	out	0x3d, r28	; 61
    6828:	09 94       	ijmp

0000682a <__epilogue_restores__>:
    682a:	2a 88       	ldd	r2, Y+18	; 0x12
    682c:	39 88       	ldd	r3, Y+17	; 0x11
    682e:	48 88       	ldd	r4, Y+16	; 0x10
    6830:	5f 84       	ldd	r5, Y+15	; 0x0f
    6832:	6e 84       	ldd	r6, Y+14	; 0x0e
    6834:	7d 84       	ldd	r7, Y+13	; 0x0d
    6836:	8c 84       	ldd	r8, Y+12	; 0x0c
    6838:	9b 84       	ldd	r9, Y+11	; 0x0b
    683a:	aa 84       	ldd	r10, Y+10	; 0x0a
    683c:	b9 84       	ldd	r11, Y+9	; 0x09
    683e:	c8 84       	ldd	r12, Y+8	; 0x08
    6840:	df 80       	ldd	r13, Y+7	; 0x07
    6842:	ee 80       	ldd	r14, Y+6	; 0x06
    6844:	fd 80       	ldd	r15, Y+5	; 0x05
    6846:	0c 81       	ldd	r16, Y+4	; 0x04
    6848:	1b 81       	ldd	r17, Y+3	; 0x03
    684a:	aa 81       	ldd	r26, Y+2	; 0x02
    684c:	b9 81       	ldd	r27, Y+1	; 0x01
    684e:	ce 0f       	add	r28, r30
    6850:	d1 1d       	adc	r29, r1
    6852:	0f b6       	in	r0, 0x3f	; 63
    6854:	f8 94       	cli
    6856:	de bf       	out	0x3e, r29	; 62
    6858:	0f be       	out	0x3f, r0	; 63
    685a:	cd bf       	out	0x3d, r28	; 61
    685c:	ed 01       	movw	r28, r26
    685e:	08 95       	ret

00006860 <__ashldi3>:
    6860:	0f 93       	push	r16
    6862:	08 30       	cpi	r16, 0x08	; 8
    6864:	90 f0       	brcs	.+36     	; 0x688a <__ashldi3+0x2a>
    6866:	98 2f       	mov	r25, r24
    6868:	87 2f       	mov	r24, r23
    686a:	76 2f       	mov	r23, r22
    686c:	65 2f       	mov	r22, r21
    686e:	54 2f       	mov	r21, r20
    6870:	43 2f       	mov	r20, r19
    6872:	32 2f       	mov	r19, r18
    6874:	22 27       	eor	r18, r18
    6876:	08 50       	subi	r16, 0x08	; 8
    6878:	f4 cf       	rjmp	.-24     	; 0x6862 <__ashldi3+0x2>
    687a:	22 0f       	add	r18, r18
    687c:	33 1f       	adc	r19, r19
    687e:	44 1f       	adc	r20, r20
    6880:	55 1f       	adc	r21, r21
    6882:	66 1f       	adc	r22, r22
    6884:	77 1f       	adc	r23, r23
    6886:	88 1f       	adc	r24, r24
    6888:	99 1f       	adc	r25, r25
    688a:	0a 95       	dec	r16
    688c:	b2 f7       	brpl	.-20     	; 0x687a <__ashldi3+0x1a>
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <__ashrdi3>:
    6892:	97 fb       	bst	r25, 7
    6894:	10 f8       	bld	r1, 0

00006896 <__lshrdi3>:
    6896:	16 94       	lsr	r1
    6898:	00 08       	sbc	r0, r0
    689a:	0f 93       	push	r16
    689c:	08 30       	cpi	r16, 0x08	; 8
    689e:	98 f0       	brcs	.+38     	; 0x68c6 <__lshrdi3+0x30>
    68a0:	08 50       	subi	r16, 0x08	; 8
    68a2:	23 2f       	mov	r18, r19
    68a4:	34 2f       	mov	r19, r20
    68a6:	45 2f       	mov	r20, r21
    68a8:	56 2f       	mov	r21, r22
    68aa:	67 2f       	mov	r22, r23
    68ac:	78 2f       	mov	r23, r24
    68ae:	89 2f       	mov	r24, r25
    68b0:	90 2d       	mov	r25, r0
    68b2:	f4 cf       	rjmp	.-24     	; 0x689c <__lshrdi3+0x6>
    68b4:	05 94       	asr	r0
    68b6:	97 95       	ror	r25
    68b8:	87 95       	ror	r24
    68ba:	77 95       	ror	r23
    68bc:	67 95       	ror	r22
    68be:	57 95       	ror	r21
    68c0:	47 95       	ror	r20
    68c2:	37 95       	ror	r19
    68c4:	27 95       	ror	r18
    68c6:	0a 95       	dec	r16
    68c8:	aa f7       	brpl	.-22     	; 0x68b4 <__lshrdi3+0x1e>
    68ca:	0f 91       	pop	r16
    68cc:	08 95       	ret

000068ce <__udivmodsi4>:
    68ce:	a1 e2       	ldi	r26, 0x21	; 33
    68d0:	1a 2e       	mov	r1, r26
    68d2:	aa 1b       	sub	r26, r26
    68d4:	bb 1b       	sub	r27, r27
    68d6:	fd 01       	movw	r30, r26
    68d8:	0d c0       	rjmp	.+26     	; 0x68f4 <__udivmodsi4_ep>

000068da <__udivmodsi4_loop>:
    68da:	aa 1f       	adc	r26, r26
    68dc:	bb 1f       	adc	r27, r27
    68de:	ee 1f       	adc	r30, r30
    68e0:	ff 1f       	adc	r31, r31
    68e2:	a2 17       	cp	r26, r18
    68e4:	b3 07       	cpc	r27, r19
    68e6:	e4 07       	cpc	r30, r20
    68e8:	f5 07       	cpc	r31, r21
    68ea:	20 f0       	brcs	.+8      	; 0x68f4 <__udivmodsi4_ep>
    68ec:	a2 1b       	sub	r26, r18
    68ee:	b3 0b       	sbc	r27, r19
    68f0:	e4 0b       	sbc	r30, r20
    68f2:	f5 0b       	sbc	r31, r21

000068f4 <__udivmodsi4_ep>:
    68f4:	66 1f       	adc	r22, r22
    68f6:	77 1f       	adc	r23, r23
    68f8:	88 1f       	adc	r24, r24
    68fa:	99 1f       	adc	r25, r25
    68fc:	1a 94       	dec	r1
    68fe:	69 f7       	brne	.-38     	; 0x68da <__udivmodsi4_loop>
    6900:	60 95       	com	r22
    6902:	70 95       	com	r23
    6904:	80 95       	com	r24
    6906:	90 95       	com	r25
    6908:	9b 01       	movw	r18, r22
    690a:	ac 01       	movw	r20, r24
    690c:	bd 01       	movw	r22, r26
    690e:	cf 01       	movw	r24, r30
    6910:	08 95       	ret

00006912 <memcpy>:
    6912:	fb 01       	movw	r30, r22
    6914:	dc 01       	movw	r26, r24
    6916:	02 c0       	rjmp	.+4      	; 0x691c <memcpy+0xa>
    6918:	01 90       	ld	r0, Z+
    691a:	0d 92       	st	X+, r0
    691c:	41 50       	subi	r20, 0x01	; 1
    691e:	50 40       	sbci	r21, 0x00	; 0
    6920:	d8 f7       	brcc	.-10     	; 0x6918 <memcpy+0x6>
    6922:	08 95       	ret

00006924 <_exit>:
    6924:	f8 94       	cli

00006926 <__stop_program>:
    6926:	ff cf       	rjmp	.-2      	; 0x6926 <__stop_program>
