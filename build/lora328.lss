
build/lora328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800100  00006854  000068e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006854  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000324  008001f8  008001f8  000069e0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000069e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000069f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a279  00000000  00000000  00006f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b7c  00000000  00000000  00011215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003500  00000000  00000000  00012d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010f4  00000000  00000000  00016294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eb1  00000000  00000000  00017388  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006450  00000000  00000000  00019239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0001f689  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__ctors_end>
       4:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__vector_1>
       8:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
       c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      10:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      14:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__vector_5>
      18:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      1c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      20:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      24:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      28:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      2c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      30:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      34:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      38:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      3c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      40:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__vector_16>
      44:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      48:	0c 94 73 31 	jmp	0x62e6	; 0x62e6 <__vector_18>
      4c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      50:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__vector_20>
      54:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      58:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      5c:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      60:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      64:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__bad_interrupt>
      68:	74 1a       	sub	r7, r20
      6a:	7a 1a       	sub	r7, r26
      6c:	2a 1b       	sub	r18, r26
      6e:	f7 1a       	sub	r15, r23
      70:	ee 1a       	sub	r14, r30
      72:	50 1b       	sub	r21, r16
      74:	29 1c       	adc	r2, r9
      76:	29 1c       	adc	r2, r9
      78:	29 1c       	adc	r2, r9
      7a:	29 1c       	adc	r2, r9
      7c:	29 1c       	adc	r2, r9
      7e:	29 1c       	adc	r2, r9
      80:	29 1c       	adc	r2, r9
      82:	29 1c       	adc	r2, r9
      84:	29 1c       	adc	r2, r9
      86:	94 1b       	sub	r25, r20
      88:	b2 1b       	sub	r27, r18

0000008a <__trampolines_end>:
      8a:	c6 a5       	ldd	r28, Z+46	; 0x2e
      8c:	63 63       	ori	r22, 0x33	; 51
      8e:	f8 84       	ldd	r15, Y+8	; 0x08
      90:	7c 7c       	andi	r23, 0xCC	; 204
      92:	ee 99       	sbic	0x1d, 6	; 29
      94:	77 77       	andi	r23, 0x77	; 119
      96:	f6 8d       	ldd	r31, Z+30	; 0x1e
      98:	7b 7b       	andi	r23, 0xBB	; 187
      9a:	ff 0d       	add	r31, r15
      9c:	f2 f2       	brmi	.-68     	; 0x5a <__SREG__+0x1b>
      9e:	d6 bd       	out	0x26, r29	; 38
      a0:	6b 6b       	ori	r22, 0xBB	; 187
      a2:	de b1       	in	r29, 0x0e	; 14
      a4:	6f 6f       	ori	r22, 0xFF	; 255
      a6:	91 54       	subi	r25, 0x41	; 65
      a8:	c5 c5       	rjmp	.+2954   	; 0xc34 <__stack+0x335>
      aa:	60 50       	subi	r22, 0x00	; 0
      ac:	30 30       	cpi	r19, 0x00	; 0
      ae:	02 03       	mulsu	r16, r18
      b0:	01 01       	movw	r0, r2
      b2:	ce a9       	ldd	r28, Y+54	; 0x36
      b4:	67 67       	ori	r22, 0x77	; 119
      b6:	56 7d       	andi	r21, 0xD6	; 214
      b8:	2b 2b       	or	r18, r27
      ba:	e7 19       	sub	r30, r7
      bc:	fe fe       	.word	0xfefe	; ????
      be:	b5 62       	ori	r27, 0x25	; 37
      c0:	d7 d7       	rcall	.+4014   	; 0x1070 <constant_table_AES_E1+0x3e6>
      c2:	4d e6       	ldi	r20, 0x6D	; 109
      c4:	ab ab       	std	Y+51, r26	; 0x33
      c6:	ec 9a       	sbi	0x1d, 4	; 29
      c8:	76 76       	andi	r23, 0x66	; 102
      ca:	8f 45       	sbci	r24, 0x5F	; 95
      cc:	ca ca       	rjmp	.-2668   	; 0xfffff662 <__eeprom_end+0xff7ef662>
      ce:	1f 9d       	mul	r17, r15
      d0:	82 82       	std	Z+2, r8	; 0x02
      d2:	89 40       	sbci	r24, 0x09	; 9
      d4:	c9 c9       	rjmp	.-3182   	; 0xfffff468 <__eeprom_end+0xff7ef468>
      d6:	fa 87       	std	Y+10, r31	; 0x0a
      d8:	7d 7d       	andi	r23, 0xDD	; 221
      da:	ef 15       	cp	r30, r15
      dc:	fa fa       	.word	0xfafa	; ????
      de:	b2 eb       	ldi	r27, 0xB2	; 178
      e0:	59 59       	subi	r21, 0x99	; 153
      e2:	8e c9       	rjmp	.-3300   	; 0xfffff400 <__eeprom_end+0xff7ef400>
      e4:	47 47       	sbci	r20, 0x77	; 119
      e6:	fb 0b       	sbc	r31, r27
      e8:	f0 f0       	brcs	.+60     	; 0x126 <__trampolines_end+0x9c>
      ea:	41 ec       	ldi	r20, 0xC1	; 193
      ec:	ad ad       	ldd	r26, Y+61	; 0x3d
      ee:	b3 67       	ori	r27, 0x73	; 115
      f0:	d4 d4       	rcall	.+2472   	; 0xa9a <__stack+0x19b>
      f2:	5f fd       	.word	0xfd5f	; ????
      f4:	a2 a2       	std	Z+34, r10	; 0x22
      f6:	45 ea       	ldi	r20, 0xA5	; 165
      f8:	af af       	std	Y+63, r26	; 0x3f
      fa:	23 bf       	out	0x33, r18	; 51
      fc:	9c 9c       	mul	r9, r12
      fe:	53 f7       	brvc	.-44     	; 0xd4 <__trampolines_end+0x4a>
     100:	a4 a4       	ldd	r10, Z+44	; 0x2c
     102:	e4 96       	adiw	r28, 0x34	; 52
     104:	72 72       	andi	r23, 0x22	; 34
     106:	9b 5b       	subi	r25, 0xBB	; 187
     108:	c0 c0       	rjmp	.+384    	; 0x28a <__trampolines_end+0x200>
     10a:	75 c2       	rjmp	.+1258   	; 0x5f6 <constant_table_AES_E3+0x16c>
     10c:	b7 b7       	in	r27, 0x37	; 55
     10e:	e1 1c       	adc	r14, r1
     110:	fd fd       	.word	0xfdfd	; ????
     112:	3d ae       	std	Y+61, r3	; 0x3d
     114:	93 93       	.word	0x9393	; ????
     116:	4c 6a       	ori	r20, 0xAC	; 172
     118:	26 26       	eor	r2, r22
     11a:	6c 5a       	subi	r22, 0xAC	; 172
     11c:	36 36       	cpi	r19, 0x66	; 102
     11e:	7e 41       	sbci	r23, 0x1E	; 30
     120:	3f 3f       	cpi	r19, 0xFF	; 255
     122:	f5 02       	muls	r31, r21
     124:	f7 f7       	brid	.-4      	; 0x122 <__trampolines_end+0x98>
     126:	83 4f       	sbci	r24, 0xF3	; 243
     128:	cc cc       	rjmp	.-1640   	; 0xfffffac2 <__eeprom_end+0xff7efac2>
     12a:	68 5c       	subi	r22, 0xC8	; 200
     12c:	34 34       	cpi	r19, 0x44	; 68
     12e:	51 f4       	brne	.+20     	; 0x144 <__trampolines_end+0xba>
     130:	a5 a5       	ldd	r26, Z+45	; 0x2d
     132:	d1 34       	cpi	r29, 0x41	; 65
     134:	e5 e5       	ldi	r30, 0x55	; 85
     136:	f9 08       	sbc	r15, r9
     138:	f1 f1       	breq	.+124    	; 0x1b6 <__trampolines_end+0x12c>
     13a:	e2 93       	st	-Z, r30	; undefined
     13c:	71 71       	andi	r23, 0x11	; 17
     13e:	ab 73       	andi	r26, 0x3B	; 59
     140:	d8 d8       	rcall	.-3664   	; 0xfffff2f2 <__eeprom_end+0xff7ef2f2>
     142:	62 53       	subi	r22, 0x32	; 50
     144:	31 31       	cpi	r19, 0x11	; 17
     146:	2a 3f       	cpi	r18, 0xFA	; 250
     148:	15 15       	cp	r17, r5
     14a:	08 0c       	add	r0, r8
     14c:	04 04       	cpc	r0, r4
     14e:	95 52       	subi	r25, 0x25	; 37
     150:	c7 c7       	rjmp	.+3982   	; 0x10e0 <constant_table_AES_S+0x56>
     152:	46 65       	ori	r20, 0x56	; 86
     154:	23 23       	and	r18, r19
     156:	9d 5e       	subi	r25, 0xED	; 237
     158:	c3 c3       	rjmp	.+1926   	; 0x8e0 <constant_table_AES_E2+0x56>
     15a:	30 28       	or	r3, r0
     15c:	18 18       	sub	r1, r8
     15e:	37 a1       	ldd	r19, Z+39	; 0x27
     160:	96 96       	adiw	r26, 0x26	; 38
     162:	0a 0f       	add	r16, r26
     164:	05 05       	cpc	r16, r5
     166:	2f b5       	in	r18, 0x2f	; 47
     168:	9a 9a       	sbi	0x13, 2	; 19
     16a:	0e 09       	sbc	r16, r14
     16c:	07 07       	cpc	r16, r23
     16e:	24 36       	cpi	r18, 0x64	; 100
     170:	12 12       	cpse	r1, r18
     172:	1b 9b       	sbis	0x03, 3	; 3
     174:	80 80       	ld	r8, Z
     176:	df 3d       	cpi	r29, 0xDF	; 223
     178:	e2 e2       	ldi	r30, 0x22	; 34
     17a:	cd 26       	eor	r12, r29
     17c:	eb eb       	ldi	r30, 0xBB	; 187
     17e:	4e 69       	ori	r20, 0x9E	; 158
     180:	27 27       	eor	r18, r23
     182:	7f cd       	rjmp	.-1282   	; 0xfffffc82 <__eeprom_end+0xff7efc82>
     184:	b2 b2       	in	r11, 0x12	; 18
     186:	ea 9f       	mul	r30, r26
     188:	75 75       	andi	r23, 0x55	; 85
     18a:	12 1b       	sub	r17, r18
     18c:	09 09       	sbc	r16, r9
     18e:	1d 9e       	mul	r1, r29
     190:	83 83       	std	Z+3, r24	; 0x03
     192:	58 74       	andi	r21, 0x48	; 72
     194:	2c 2c       	mov	r2, r12
     196:	34 2e       	mov	r3, r20
     198:	1a 1a       	sub	r1, r26
     19a:	36 2d       	mov	r19, r6
     19c:	1b 1b       	sub	r17, r27
     19e:	dc b2       	in	r13, 0x1c	; 28
     1a0:	6e 6e       	ori	r22, 0xEE	; 238
     1a2:	b4 ee       	ldi	r27, 0xE4	; 228
     1a4:	5a 5a       	subi	r21, 0xAA	; 170
     1a6:	5b fb       	.word	0xfb5b	; ????
     1a8:	a0 a0       	ldd	r10, Z+32	; 0x20
     1aa:	a4 f6       	brge	.-88     	; 0x154 <__trampolines_end+0xca>
     1ac:	52 52       	subi	r21, 0x22	; 34
     1ae:	76 4d       	sbci	r23, 0xD6	; 214
     1b0:	3b 3b       	cpi	r19, 0xBB	; 187
     1b2:	b7 61       	ori	r27, 0x17	; 23
     1b4:	d6 d6       	rcall	.+3500   	; 0xf62 <constant_table_AES_E1+0x2d8>
     1b6:	7d ce       	rjmp	.-774    	; 0xfffffeb2 <__eeprom_end+0xff7efeb2>
     1b8:	b3 b3       	in	r27, 0x13	; 19
     1ba:	52 7b       	andi	r21, 0xB2	; 178
     1bc:	29 29       	or	r18, r9
     1be:	dd 3e       	cpi	r29, 0xED	; 237
     1c0:	e3 e3       	ldi	r30, 0x33	; 51
     1c2:	5e 71       	andi	r21, 0x1E	; 30
     1c4:	2f 2f       	mov	r18, r31
     1c6:	13 97       	sbiw	r26, 0x03	; 3
     1c8:	84 84       	ldd	r8, Z+12	; 0x0c
     1ca:	a6 f5       	brtc	.+104    	; 0x234 <__trampolines_end+0x1aa>
     1cc:	53 53       	subi	r21, 0x33	; 51
     1ce:	b9 68       	ori	r27, 0x89	; 137
     1d0:	d1 d1       	rcall	.+930    	; 0x574 <constant_table_AES_E3+0xea>
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	c1 2c       	mov	r12, r1
     1d8:	ed ed       	ldi	r30, 0xDD	; 221
     1da:	40 60       	ori	r20, 0x00	; 0
     1dc:	20 20       	and	r2, r0
     1de:	e3 1f       	adc	r30, r19
     1e0:	fc fc       	.word	0xfcfc	; ????
     1e2:	79 c8       	rjmp	.-3854   	; 0xfffff2d6 <__eeprom_end+0xff7ef2d6>
     1e4:	b1 b1       	in	r27, 0x01	; 1
     1e6:	b6 ed       	ldi	r27, 0xD6	; 214
     1e8:	5b 5b       	subi	r21, 0xBB	; 187
     1ea:	d4 be       	out	0x34, r13	; 52
     1ec:	6a 6a       	ori	r22, 0xAA	; 170
     1ee:	8d 46       	sbci	r24, 0x6D	; 109
     1f0:	cb cb       	rjmp	.-2154   	; 0xfffff988 <__eeprom_end+0xff7ef988>
     1f2:	67 d9       	rcall	.-3378   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
     1f4:	be be       	out	0x3e, r11	; 62
     1f6:	72 4b       	sbci	r23, 0xB2	; 178
     1f8:	39 39       	cpi	r19, 0x99	; 153
     1fa:	94 de       	rcall	.-728    	; 0xffffff24 <__eeprom_end+0xff7eff24>
     1fc:	4a 4a       	sbci	r20, 0xAA	; 170
     1fe:	98 d4       	rcall	.+2352   	; 0xb30 <__stack+0x231>
     200:	4c 4c       	sbci	r20, 0xCC	; 204
     202:	b0 e8       	ldi	r27, 0x80	; 128
     204:	58 58       	subi	r21, 0x88	; 136
     206:	85 4a       	sbci	r24, 0xA5	; 165
     208:	cf cf       	rjmp	.-98     	; 0x1a8 <__trampolines_end+0x11e>
     20a:	bb 6b       	ori	r27, 0xBB	; 187
     20c:	d0 d0       	rcall	.+416    	; 0x3ae <__trampolines_end+0x324>
     20e:	c5 2a       	or	r12, r21
     210:	ef ef       	ldi	r30, 0xFF	; 255
     212:	4f e5       	ldi	r20, 0x5F	; 95
     214:	aa aa       	std	Y+50, r10	; 0x32
     216:	ed 16       	cp	r14, r29
     218:	fb fb       	.word	0xfbfb	; ????
     21a:	86 c5       	rjmp	.+2828   	; 0xd28 <constant_table_AES_E1+0x9e>
     21c:	43 43       	sbci	r20, 0x33	; 51
     21e:	9a d7       	rcall	.+3892   	; 0x1154 <constant_table_AES_S+0xca>
     220:	4d 4d       	sbci	r20, 0xDD	; 221
     222:	66 55       	subi	r22, 0x56	; 86
     224:	33 33       	cpi	r19, 0x33	; 51
     226:	11 94       	neg	r1
     228:	85 85       	ldd	r24, Z+13	; 0x0d
     22a:	8a cf       	rjmp	.-236    	; 0x140 <__trampolines_end+0xb6>
     22c:	45 45       	sbci	r20, 0x55	; 85
     22e:	e9 10       	cpse	r14, r9
     230:	f9 f9       	.word	0xf9f9	; ????
     232:	04 06       	cpc	r0, r20
     234:	02 02       	muls	r16, r18
     236:	fe 81       	ldd	r31, Y+6	; 0x06
     238:	7f 7f       	andi	r23, 0xFF	; 255
     23a:	a0 f0       	brcs	.+40     	; 0x264 <__trampolines_end+0x1da>
     23c:	50 50       	subi	r21, 0x00	; 0
     23e:	78 44       	sbci	r23, 0x48	; 72
     240:	3c 3c       	cpi	r19, 0xCC	; 204
     242:	25 ba       	out	0x15, r2	; 21
     244:	9f 9f       	mul	r25, r31
     246:	4b e3       	ldi	r20, 0x3B	; 59
     248:	a8 a8       	ldd	r10, Y+48	; 0x30
     24a:	a2 f3       	brmi	.-24     	; 0x234 <__trampolines_end+0x1aa>
     24c:	51 51       	subi	r21, 0x11	; 17
     24e:	5d fe       	.word	0xfe5d	; ????
     250:	a3 a3       	std	Z+35, r26	; 0x23
     252:	80 c0       	rjmp	.+256    	; 0x354 <__trampolines_end+0x2ca>
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	05 8a       	std	Z+21, r0	; 0x15
     258:	8f 8f       	std	Y+31, r24	; 0x1f
     25a:	3f ad       	ldd	r19, Y+63	; 0x3f
     25c:	92 92       	st	-Z, r9
     25e:	21 bc       	out	0x21, r2	; 33
     260:	9d 9d       	mul	r25, r13
     262:	70 48       	sbci	r23, 0x80	; 128
     264:	38 38       	cpi	r19, 0x88	; 136
     266:	f1 04       	cpc	r15, r1
     268:	f5 f5       	brhc	.+124    	; 0x2e6 <__trampolines_end+0x25c>
     26a:	63 df       	rcall	.-314    	; 0x132 <__trampolines_end+0xa8>
     26c:	bc bc       	out	0x2c, r11	; 44
     26e:	77 c1       	rjmp	.+750    	; 0x55e <constant_table_AES_E3+0xd4>
     270:	b6 b6       	in	r11, 0x36	; 54
     272:	af 75       	andi	r26, 0x5F	; 95
     274:	da da       	rcall	.-2636   	; 0xfffff82a <__eeprom_end+0xff7ef82a>
     276:	42 63       	ori	r20, 0x32	; 50
     278:	21 21       	and	r18, r1
     27a:	20 30       	cpi	r18, 0x00	; 0
     27c:	10 10       	cpse	r1, r0
     27e:	e5 1a       	sub	r14, r21
     280:	ff ff       	.word	0xffff	; ????
     282:	fd 0e       	add	r15, r29
     284:	f3 f3       	brvs	.-4      	; 0x282 <__trampolines_end+0x1f8>
     286:	bf 6d       	ori	r27, 0xDF	; 223
     288:	d2 d2       	rcall	.+1444   	; 0x82e <constant_table_AES_E3+0x3a4>
     28a:	81 4c       	sbci	r24, 0xC1	; 193
     28c:	cd cd       	rjmp	.-1126   	; 0xfffffe28 <__eeprom_end+0xff7efe28>
     28e:	18 14       	cp	r1, r8
     290:	0c 0c       	add	r0, r12
     292:	26 35       	cpi	r18, 0x56	; 86
     294:	13 13       	cpse	r17, r19
     296:	c3 2f       	mov	r28, r19
     298:	ec ec       	ldi	r30, 0xCC	; 204
     29a:	be e1       	ldi	r27, 0x1E	; 30
     29c:	5f 5f       	subi	r21, 0xFF	; 255
     29e:	35 a2       	std	Z+37, r3	; 0x25
     2a0:	97 97       	sbiw	r26, 0x27	; 39
     2a2:	88 cc       	rjmp	.-1776   	; 0xfffffbb4 <__eeprom_end+0xff7efbb4>
     2a4:	44 44       	sbci	r20, 0x44	; 68
     2a6:	2e 39       	cpi	r18, 0x9E	; 158
     2a8:	17 17       	cp	r17, r23
     2aa:	93 57       	subi	r25, 0x73	; 115
     2ac:	c4 c4       	rjmp	.+2440   	; 0xc36 <__stack+0x337>
     2ae:	55 f2       	brhs	.-108    	; 0x244 <__trampolines_end+0x1ba>
     2b0:	a7 a7       	std	Z+47, r26	; 0x2f
     2b2:	fc 82       	std	Y+4, r15	; 0x04
     2b4:	7e 7e       	andi	r23, 0xEE	; 238
     2b6:	7a 47       	sbci	r23, 0x7A	; 122
     2b8:	3d 3d       	cpi	r19, 0xDD	; 221
     2ba:	c8 ac       	ldd	r12, Y+56	; 0x38
     2bc:	64 64       	ori	r22, 0x44	; 68
     2be:	ba e7       	ldi	r27, 0x7A	; 122
     2c0:	5d 5d       	subi	r21, 0xDD	; 221
     2c2:	32 2b       	or	r19, r18
     2c4:	19 19       	sub	r17, r9
     2c6:	e6 95       	lsr	r30
     2c8:	73 73       	andi	r23, 0x33	; 51
     2ca:	c0 a0       	ldd	r12, Z+32	; 0x20
     2cc:	60 60       	ori	r22, 0x00	; 0
     2ce:	19 98       	cbi	0x03, 1	; 3
     2d0:	81 81       	ldd	r24, Z+1	; 0x01
     2d2:	9e d1       	rcall	.+828    	; 0x610 <constant_table_AES_E3+0x186>
     2d4:	4f 4f       	sbci	r20, 0xFF	; 255
     2d6:	a3 7f       	andi	r26, 0xF3	; 243
     2d8:	dc dc       	rcall	.-1608   	; 0xfffffc92 <__eeprom_end+0xff7efc92>
     2da:	44 66       	ori	r20, 0x64	; 100
     2dc:	22 22       	and	r2, r18
     2de:	54 7e       	andi	r21, 0xE4	; 228
     2e0:	2a 2a       	or	r2, r26
     2e2:	3b ab       	std	Y+51, r19	; 0x33
     2e4:	90 90 0b 83 	lds	r9, 0x830B	; 0x80830b <__bss_end+0x7def>
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	8c ca       	rjmp	.-2792   	; 0xfffff804 <__eeprom_end+0xff7ef804>
     2ec:	46 46       	sbci	r20, 0x66	; 102
     2ee:	c7 29       	or	r28, r7
     2f0:	ee ee       	ldi	r30, 0xEE	; 238
     2f2:	6b d3       	rcall	.+1750   	; 0x9ca <__stack+0xcb>
     2f4:	b8 b8       	out	0x08, r11	; 8
     2f6:	28 3c       	cpi	r18, 0xC8	; 200
     2f8:	14 14       	cp	r1, r4
     2fa:	a7 79       	andi	r26, 0x97	; 151
     2fc:	de de       	rcall	.-580    	; 0xba <__trampolines_end+0x30>
     2fe:	bc e2       	ldi	r27, 0x2C	; 44
     300:	5e 5e       	subi	r21, 0xEE	; 238
     302:	16 1d       	adc	r17, r6
     304:	0b 0b       	sbc	r16, r27
     306:	ad 76       	andi	r26, 0x6D	; 109
     308:	db db       	rcall	.-2122   	; 0xfffffac0 <__eeprom_end+0xff7efac0>
     30a:	db 3b       	cpi	r29, 0xBB	; 187
     30c:	e0 e0       	ldi	r30, 0x00	; 0
     30e:	64 56       	subi	r22, 0x64	; 100
     310:	32 32       	cpi	r19, 0x22	; 34
     312:	74 4e       	sbci	r23, 0xE4	; 228
     314:	3a 3a       	cpi	r19, 0xAA	; 170
     316:	14 1e       	adc	r1, r20
     318:	0a 0a       	sbc	r0, r26
     31a:	92 db       	rcall	.-2268   	; 0xfffffa40 <__eeprom_end+0xff7efa40>
     31c:	49 49       	sbci	r20, 0x99	; 153
     31e:	0c 0a       	sbc	r0, r28
     320:	06 06       	cpc	r0, r22
     322:	48 6c       	ori	r20, 0xC8	; 200
     324:	24 24       	eor	r2, r4
     326:	b8 e4       	ldi	r27, 0x48	; 72
     328:	5c 5c       	subi	r21, 0xCC	; 204
     32a:	9f 5d       	subi	r25, 0xDF	; 223
     32c:	c2 c2       	rjmp	.+1412   	; 0x8b2 <constant_table_AES_E2+0x28>
     32e:	bd 6e       	ori	r27, 0xED	; 237
     330:	d3 d3       	rcall	.+1958   	; 0xad8 <__stack+0x1d9>
     332:	43 ef       	ldi	r20, 0xF3	; 243
     334:	ac ac       	ldd	r10, Y+60	; 0x3c
     336:	c4 a6       	std	Z+44, r12	; 0x2c
     338:	62 62       	ori	r22, 0x22	; 34
     33a:	39 a8       	ldd	r3, Y+49	; 0x31
     33c:	91 91       	ld	r25, Z+
     33e:	31 a4       	ldd	r3, Z+41	; 0x29
     340:	95 95       	asr	r25
     342:	d3 37       	cpi	r29, 0x73	; 115
     344:	e4 e4       	ldi	r30, 0x44	; 68
     346:	f2 8b       	std	Z+18, r31	; 0x12
     348:	79 79       	andi	r23, 0x99	; 153
     34a:	d5 32       	cpi	r29, 0x25	; 37
     34c:	e7 e7       	ldi	r30, 0x77	; 119
     34e:	8b 43       	sbci	r24, 0x3B	; 59
     350:	c8 c8       	rjmp	.-3696   	; 0xfffff4e2 <__eeprom_end+0xff7ef4e2>
     352:	6e 59       	subi	r22, 0x9E	; 158
     354:	37 37       	cpi	r19, 0x77	; 119
     356:	da b7       	in	r29, 0x3a	; 58
     358:	6d 6d       	ori	r22, 0xDD	; 221
     35a:	01 8c       	ldd	r0, Z+25	; 0x19
     35c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     35e:	b1 64       	ori	r27, 0x41	; 65
     360:	d5 d5       	rcall	.+2986   	; 0xf0c <constant_table_AES_E1+0x282>
     362:	9c d2       	rcall	.+1336   	; 0x89c <constant_table_AES_E2+0x12>
     364:	4e 4e       	sbci	r20, 0xEE	; 238
     366:	49 e0       	ldi	r20, 0x09	; 9
     368:	a9 a9       	ldd	r26, Y+49	; 0x31
     36a:	d8 b4       	in	r13, 0x28	; 40
     36c:	6c 6c       	ori	r22, 0xCC	; 204
     36e:	ac fa       	.word	0xfaac	; ????
     370:	56 56       	subi	r21, 0x66	; 102
     372:	f3 07       	cpc	r31, r19
     374:	f4 f4       	brge	.+60     	; 0x3b2 <__trampolines_end+0x328>
     376:	cf 25       	eor	r28, r15
     378:	ea ea       	ldi	r30, 0xAA	; 170
     37a:	ca af       	std	Y+58, r28	; 0x3a
     37c:	65 65       	ori	r22, 0x55	; 85
     37e:	f4 8e       	std	Z+28, r15	; 0x1c
     380:	7a 7a       	andi	r23, 0xAA	; 170
     382:	47 e9       	ldi	r20, 0x97	; 151
     384:	ae ae       	std	Y+62, r10	; 0x3e
     386:	10 18       	sub	r1, r0
     388:	08 08       	sbc	r0, r8
     38a:	6f d5       	rcall	.+2782   	; 0xe6a <constant_table_AES_E1+0x1e0>
     38c:	ba ba       	out	0x1a, r11	; 26
     38e:	f0 88       	ldd	r15, Z+16	; 0x10
     390:	78 78       	andi	r23, 0x88	; 136
     392:	4a 6f       	ori	r20, 0xFA	; 250
     394:	25 25       	eor	r18, r5
     396:	5c 72       	andi	r21, 0x2C	; 44
     398:	2e 2e       	mov	r2, r30
     39a:	38 24       	eor	r3, r8
     39c:	1c 1c       	adc	r1, r12
     39e:	57 f1       	brie	.+84     	; 0x3f4 <__trampolines_end+0x36a>
     3a0:	a6 a6       	std	Z+46, r10	; 0x2e
     3a2:	73 c7       	rjmp	.+3814   	; 0x128a <reportfunc+0x9a>
     3a4:	b4 b4       	in	r11, 0x24	; 36
     3a6:	97 51       	subi	r25, 0x17	; 23
     3a8:	c6 c6       	rjmp	.+3468   	; 0x1136 <constant_table_AES_S+0xac>
     3aa:	cb 23       	and	r28, r27
     3ac:	e8 e8       	ldi	r30, 0x88	; 136
     3ae:	a1 7c       	andi	r26, 0xC1	; 193
     3b0:	dd dd       	rcall	.-1094   	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     3b2:	e8 9c       	mul	r14, r8
     3b4:	74 74       	andi	r23, 0x44	; 68
     3b6:	3e 21       	and	r19, r14
     3b8:	1f 1f       	adc	r17, r31
     3ba:	96 dd       	rcall	.-1236   	; 0xfffffee8 <__eeprom_end+0xff7efee8>
     3bc:	4b 4b       	sbci	r20, 0xBB	; 187
     3be:	61 dc       	rcall	.-1854   	; 0xfffffc82 <__eeprom_end+0xff7efc82>
     3c0:	bd bd       	out	0x2d, r27	; 45
     3c2:	0d 86       	std	Y+13, r0	; 0x0d
     3c4:	8b 8b       	std	Y+19, r24	; 0x13
     3c6:	0f 85       	ldd	r16, Y+15	; 0x0f
     3c8:	8a 8a       	std	Y+18, r8	; 0x12
     3ca:	e0 90 70 70 	lds	r14, 0x7070	; 0x807070 <__bss_end+0x6b54>
     3ce:	7c 42       	sbci	r23, 0x2C	; 44
     3d0:	3e 3e       	cpi	r19, 0xEE	; 238
     3d2:	71 c4       	rjmp	.+2274   	; 0xcb6 <constant_table_AES_E1+0x2c>
     3d4:	b5 b5       	in	r27, 0x25	; 37
     3d6:	cc aa       	std	Y+52, r12	; 0x34
     3d8:	66 66       	ori	r22, 0x66	; 102
     3da:	90 d8       	rcall	.-3808   	; 0xfffff4fc <__eeprom_end+0xff7ef4fc>
     3dc:	48 48       	sbci	r20, 0x88	; 136
     3de:	06 05       	cpc	r16, r6
     3e0:	03 03       	mulsu	r16, r19
     3e2:	f7 01       	movw	r30, r14
     3e4:	f6 f6       	brtc	.-68     	; 0x3a2 <__trampolines_end+0x318>
     3e6:	1c 12       	cpse	r1, r28
     3e8:	0e 0e       	add	r0, r30
     3ea:	c2 a3       	std	Z+34, r28	; 0x22
     3ec:	61 61       	ori	r22, 0x11	; 17
     3ee:	6a 5f       	subi	r22, 0xFA	; 250
     3f0:	35 35       	cpi	r19, 0x55	; 85
     3f2:	ae f9       	.word	0xf9ae	; ????
     3f4:	57 57       	subi	r21, 0x77	; 119
     3f6:	69 d0       	rcall	.+210    	; 0x4ca <constant_table_AES_E3+0x40>
     3f8:	b9 b9       	out	0x09, r27	; 9
     3fa:	17 91       	elpm	r17, Z+
     3fc:	86 86       	std	Z+14, r8	; 0x0e
     3fe:	99 58       	subi	r25, 0x89	; 137
     400:	c1 c1       	rjmp	.+898    	; 0x784 <constant_table_AES_E3+0x2fa>
     402:	3a 27       	eor	r19, r26
     404:	1d 1d       	adc	r17, r13
     406:	27 b9       	out	0x07, r18	; 7
     408:	9e 9e       	mul	r9, r30
     40a:	d9 38       	cpi	r29, 0x89	; 137
     40c:	e1 e1       	ldi	r30, 0x11	; 17
     40e:	eb 13       	cpse	r30, r27
     410:	f8 f8       	.word	0xf8f8	; ????
     412:	2b b3       	in	r18, 0x1b	; 27
     414:	98 98       	cbi	0x13, 0	; 19
     416:	22 33       	cpi	r18, 0x32	; 50
     418:	11 11       	cpse	r17, r1
     41a:	d2 bb       	out	0x12, r29	; 18
     41c:	69 69       	ori	r22, 0x99	; 153
     41e:	a9 70       	andi	r26, 0x09	; 9
     420:	d9 d9       	rcall	.-3150   	; 0xfffff7d4 <__eeprom_end+0xff7ef7d4>
     422:	07 89       	ldd	r16, Z+23	; 0x17
     424:	8e 8e       	std	Y+30, r8	; 0x1e
     426:	33 a7       	std	Z+43, r19	; 0x2b
     428:	94 94       	.word	0x9494	; ????
     42a:	2d b6       	in	r2, 0x3d	; 61
     42c:	9b 9b       	sbis	0x13, 3	; 19
     42e:	3c 22       	and	r3, r28
     430:	1e 1e       	adc	r1, r30
     432:	15 92       	las	Z, r1
     434:	87 87       	std	Z+15, r24	; 0x0f
     436:	c9 20       	and	r12, r9
     438:	e9 e9       	ldi	r30, 0x99	; 153
     43a:	87 49       	sbci	r24, 0x97	; 151
     43c:	ce ce       	rjmp	.-612    	; 0x1da <__trampolines_end+0x150>
     43e:	aa ff       	.word	0xffaa	; ????
     440:	55 55       	subi	r21, 0x55	; 85
     442:	50 78       	andi	r21, 0x80	; 128
     444:	28 28       	or	r2, r8
     446:	a5 7a       	andi	r26, 0xA5	; 165
     448:	df df       	rcall	.-66     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     44a:	03 8f       	std	Z+27, r16	; 0x1b
     44c:	8c 8c       	ldd	r8, Y+28	; 0x1c
     44e:	59 f8       	.word	0xf859	; ????
     450:	a1 a1       	ldd	r26, Z+33	; 0x21
     452:	09 80       	ldd	r0, Y+1	; 0x01
     454:	89 89       	ldd	r24, Y+17	; 0x11
     456:	1a 17       	cp	r17, r26
     458:	0d 0d       	add	r16, r13
     45a:	65 da       	rcall	.-2870   	; 0xfffff926 <__eeprom_end+0xff7ef926>
     45c:	bf bf       	out	0x3f, r27	; 63
     45e:	d7 31       	cpi	r29, 0x17	; 23
     460:	e6 e6       	ldi	r30, 0x66	; 102
     462:	84 c6       	rjmp	.+3336   	; 0x116c <constant_table_AES_S+0xe2>
     464:	42 42       	sbci	r20, 0x22	; 34
     466:	d0 b8       	out	0x00, r13	; 0
     468:	68 68       	ori	r22, 0x88	; 136
     46a:	82 c3       	rjmp	.+1796   	; 0xb70 <__stack+0x271>
     46c:	41 41       	sbci	r20, 0x11	; 17
     46e:	29 b0       	in	r2, 0x09	; 9
     470:	99 99       	sbic	0x13, 1	; 19
     472:	5a 77       	andi	r21, 0x7A	; 122
     474:	2d 2d       	mov	r18, r13
     476:	1e 11       	cpse	r17, r14
     478:	0f 0f       	add	r16, r31
     47a:	7b cb       	rjmp	.-2314   	; 0xfffffb72 <__eeprom_end+0xff7efb72>
     47c:	b0 b0       	in	r11, 0x00	; 0
     47e:	a8 fc       	.word	0xfca8	; ????
     480:	54 54       	subi	r21, 0x44	; 68
     482:	6d d6       	rcall	.+3290   	; 0x115e <constant_table_AES_S+0xd4>
     484:	bb bb       	out	0x1b, r27	; 27
     486:	2c 3a       	cpi	r18, 0xAC	; 172
     488:	16 16       	cp	r1, r22

0000048a <constant_table_AES_E3>:
     48a:	63 c6 a5 63 7c f8 84 7c 77 ee 99 77 7b f6 8d 7b     c..c|..|w..w{..{
     49a:	f2 ff 0d f2 6b d6 bd 6b 6f de b1 6f c5 91 54 c5     ....k..ko..o..T.
     4aa:	30 60 50 30 01 02 03 01 67 ce a9 67 2b 56 7d 2b     0`P0....g..g+V}+
     4ba:	fe e7 19 fe d7 b5 62 d7 ab 4d e6 ab 76 ec 9a 76     ......b..M..v..v
     4ca:	ca 8f 45 ca 82 1f 9d 82 c9 89 40 c9 7d fa 87 7d     ..E.......@.}..}
     4da:	fa ef 15 fa 59 b2 eb 59 47 8e c9 47 f0 fb 0b f0     ....Y..YG..G....
     4ea:	ad 41 ec ad d4 b3 67 d4 a2 5f fd a2 af 45 ea af     .A....g.._...E..
     4fa:	9c 23 bf 9c a4 53 f7 a4 72 e4 96 72 c0 9b 5b c0     .#...S..r..r..[.
     50a:	b7 75 c2 b7 fd e1 1c fd 93 3d ae 93 26 4c 6a 26     .u.......=..&Lj&
     51a:	36 6c 5a 36 3f 7e 41 3f f7 f5 02 f7 cc 83 4f cc     6lZ6?~A?......O.
     52a:	34 68 5c 34 a5 51 f4 a5 e5 d1 34 e5 f1 f9 08 f1     4h\4.Q....4.....
     53a:	71 e2 93 71 d8 ab 73 d8 31 62 53 31 15 2a 3f 15     q..q..s.1bS1.*?.
     54a:	04 08 0c 04 c7 95 52 c7 23 46 65 23 c3 9d 5e c3     ......R.#Fe#..^.
     55a:	18 30 28 18 96 37 a1 96 05 0a 0f 05 9a 2f b5 9a     .0(..7......./..
     56a:	07 0e 09 07 12 24 36 12 80 1b 9b 80 e2 df 3d e2     .....$6.......=.
     57a:	eb cd 26 eb 27 4e 69 27 b2 7f cd b2 75 ea 9f 75     ..&.'Ni'....u..u
     58a:	09 12 1b 09 83 1d 9e 83 2c 58 74 2c 1a 34 2e 1a     ........,Xt,.4..
     59a:	1b 36 2d 1b 6e dc b2 6e 5a b4 ee 5a a0 5b fb a0     .6-.n..nZ..Z.[..
     5aa:	52 a4 f6 52 3b 76 4d 3b d6 b7 61 d6 b3 7d ce b3     R..R;vM;..a..}..
     5ba:	29 52 7b 29 e3 dd 3e e3 2f 5e 71 2f 84 13 97 84     )R{)..>./^q/....
     5ca:	53 a6 f5 53 d1 b9 68 d1 00 00 00 00 ed c1 2c ed     S..S..h.......,.
     5da:	20 40 60 20 fc e3 1f fc b1 79 c8 b1 5b b6 ed 5b      @` .....y..[..[
     5ea:	6a d4 be 6a cb 8d 46 cb be 67 d9 be 39 72 4b 39     j..j..F..g..9rK9
     5fa:	4a 94 de 4a 4c 98 d4 4c 58 b0 e8 58 cf 85 4a cf     J..JL..LX..X..J.
     60a:	d0 bb 6b d0 ef c5 2a ef aa 4f e5 aa fb ed 16 fb     ..k...*..O......
     61a:	43 86 c5 43 4d 9a d7 4d 33 66 55 33 85 11 94 85     C..CM..M3fU3....
     62a:	45 8a cf 45 f9 e9 10 f9 02 04 06 02 7f fe 81 7f     E..E............
     63a:	50 a0 f0 50 3c 78 44 3c 9f 25 ba 9f a8 4b e3 a8     P..P<xD<.%...K..
     64a:	51 a2 f3 51 a3 5d fe a3 40 80 c0 40 8f 05 8a 8f     Q..Q.]..@..@....
     65a:	92 3f ad 92 9d 21 bc 9d 38 70 48 38 f5 f1 04 f5     .?...!..8pH8....
     66a:	bc 63 df bc b6 77 c1 b6 da af 75 da 21 42 63 21     .c...w....u.!Bc!
     67a:	10 20 30 10 ff e5 1a ff f3 fd 0e f3 d2 bf 6d d2     . 0...........m.
     68a:	cd 81 4c cd 0c 18 14 0c 13 26 35 13 ec c3 2f ec     ..L......&5.../.
     69a:	5f be e1 5f 97 35 a2 97 44 88 cc 44 17 2e 39 17     _.._.5..D..D..9.
     6aa:	c4 93 57 c4 a7 55 f2 a7 7e fc 82 7e 3d 7a 47 3d     ..W..U..~..~=zG=
     6ba:	64 c8 ac 64 5d ba e7 5d 19 32 2b 19 73 e6 95 73     d..d]..].2+.s..s
     6ca:	60 c0 a0 60 81 19 98 81 4f 9e d1 4f dc a3 7f dc     `..`....O..O....
     6da:	22 44 66 22 2a 54 7e 2a 90 3b ab 90 88 0b 83 88     "Df"*T~*.;......
     6ea:	46 8c ca 46 ee c7 29 ee b8 6b d3 b8 14 28 3c 14     F..F..)..k...(<.
     6fa:	de a7 79 de 5e bc e2 5e 0b 16 1d 0b db ad 76 db     ..y.^..^......v.
     70a:	e0 db 3b e0 32 64 56 32 3a 74 4e 3a 0a 14 1e 0a     ..;.2dV2:tN:....
     71a:	49 92 db 49 06 0c 0a 06 24 48 6c 24 5c b8 e4 5c     I..I....$Hl$\..\
     72a:	c2 9f 5d c2 d3 bd 6e d3 ac 43 ef ac 62 c4 a6 62     ..]...n..C..b..b
     73a:	91 39 a8 91 95 31 a4 95 e4 d3 37 e4 79 f2 8b 79     .9...1....7.y..y
     74a:	e7 d5 32 e7 c8 8b 43 c8 37 6e 59 37 6d da b7 6d     ..2...C.7nY7m..m
     75a:	8d 01 8c 8d d5 b1 64 d5 4e 9c d2 4e a9 49 e0 a9     ......d.N..N.I..
     76a:	6c d8 b4 6c 56 ac fa 56 f4 f3 07 f4 ea cf 25 ea     l..lV..V......%.
     77a:	65 ca af 65 7a f4 8e 7a ae 47 e9 ae 08 10 18 08     e..ez..z.G......
     78a:	ba 6f d5 ba 78 f0 88 78 25 4a 6f 25 2e 5c 72 2e     .o..x..x%Jo%.\r.
     79a:	1c 38 24 1c a6 57 f1 a6 b4 73 c7 b4 c6 97 51 c6     .8$..W...s....Q.
     7aa:	e8 cb 23 e8 dd a1 7c dd 74 e8 9c 74 1f 3e 21 1f     ..#...|.t..t.>!.
     7ba:	4b 96 dd 4b bd 61 dc bd 8b 0d 86 8b 8a 0f 85 8a     K..K.a..........
     7ca:	70 e0 90 70 3e 7c 42 3e b5 71 c4 b5 66 cc aa 66     p..p>|B>.q..f..f
     7da:	48 90 d8 48 03 06 05 03 f6 f7 01 f6 0e 1c 12 0e     H..H............
     7ea:	61 c2 a3 61 35 6a 5f 35 57 ae f9 57 b9 69 d0 b9     a..a5j_5W..W.i..
     7fa:	86 17 91 86 c1 99 58 c1 1d 3a 27 1d 9e 27 b9 9e     ......X..:'..'..
     80a:	e1 d9 38 e1 f8 eb 13 f8 98 2b b3 98 11 22 33 11     ..8......+..."3.
     81a:	69 d2 bb 69 d9 a9 70 d9 8e 07 89 8e 94 33 a7 94     i..i..p......3..
     82a:	9b 2d b6 9b 1e 3c 22 1e 87 15 92 87 e9 c9 20 e9     .-...<"....... .
     83a:	ce 87 49 ce 55 aa ff 55 28 50 78 28 df a5 7a df     ..I.U..U(Px(..z.
     84a:	8c 03 8f 8c a1 59 f8 a1 89 09 80 89 0d 1a 17 0d     .....Y..........
     85a:	bf 65 da bf e6 d7 31 e6 42 84 c6 42 68 d0 b8 68     .e....1.B..Bh..h
     86a:	41 82 c3 41 99 29 b0 99 2d 5a 77 2d 0f 1e 11 0f     A..A.)..-Zw-....
     87a:	b0 7b cb b0 54 a8 fc 54 bb 6d d6 bb 16 2c 3a 16     .{..T..T.m...,:.

0000088a <constant_table_AES_E2>:
     88a:	63 63 c6 a5 7c 7c f8 84 77 77 ee 99 7b 7b f6 8d     cc..||..ww..{{..
     89a:	f2 f2 ff 0d 6b 6b d6 bd 6f 6f de b1 c5 c5 91 54     ....kk..oo.....T
     8aa:	30 30 60 50 01 01 02 03 67 67 ce a9 2b 2b 56 7d     00`P....gg..++V}
     8ba:	fe fe e7 19 d7 d7 b5 62 ab ab 4d e6 76 76 ec 9a     .......b..M.vv..
     8ca:	ca ca 8f 45 82 82 1f 9d c9 c9 89 40 7d 7d fa 87     ...E.......@}}..
     8da:	fa fa ef 15 59 59 b2 eb 47 47 8e c9 f0 f0 fb 0b     ....YY..GG......
     8ea:	ad ad 41 ec d4 d4 b3 67 a2 a2 5f fd af af 45 ea     ..A....g.._...E.
     8fa:	9c 9c 23 bf a4 a4 53 f7 72 72 e4 96 c0 c0 9b 5b     ..#...S.rr.....[
     90a:	b7 b7 75 c2 fd fd e1 1c 93 93 3d ae 26 26 4c 6a     ..u.......=.&&Lj
     91a:	36 36 6c 5a 3f 3f 7e 41 f7 f7 f5 02 cc cc 83 4f     66lZ??~A.......O
     92a:	34 34 68 5c a5 a5 51 f4 e5 e5 d1 34 f1 f1 f9 08     44h\..Q....4....
     93a:	71 71 e2 93 d8 d8 ab 73 31 31 62 53 15 15 2a 3f     qq.....s11bS..*?
     94a:	04 04 08 0c c7 c7 95 52 23 23 46 65 c3 c3 9d 5e     .......R##Fe...^
     95a:	18 18 30 28 96 96 37 a1 05 05 0a 0f 9a 9a 2f b5     ..0(..7......./.
     96a:	07 07 0e 09 12 12 24 36 80 80 1b 9b e2 e2 df 3d     ......$6.......=
     97a:	eb eb cd 26 27 27 4e 69 b2 b2 7f cd 75 75 ea 9f     ...&''Ni....uu..
     98a:	09 09 12 1b 83 83 1d 9e 2c 2c 58 74 1a 1a 34 2e     ........,,Xt..4.
     99a:	1b 1b 36 2d 6e 6e dc b2 5a 5a b4 ee a0 a0 5b fb     ..6-nn..ZZ....[.
     9aa:	52 52 a4 f6 3b 3b 76 4d d6 d6 b7 61 b3 b3 7d ce     RR..;;vM...a..}.
     9ba:	29 29 52 7b e3 e3 dd 3e 2f 2f 5e 71 84 84 13 97     ))R{...>//^q....
     9ca:	53 53 a6 f5 d1 d1 b9 68 00 00 00 00 ed ed c1 2c     SS.....h.......,
     9da:	20 20 40 60 fc fc e3 1f b1 b1 79 c8 5b 5b b6 ed       @`......y.[[..
     9ea:	6a 6a d4 be cb cb 8d 46 be be 67 d9 39 39 72 4b     jj.....F..g.99rK
     9fa:	4a 4a 94 de 4c 4c 98 d4 58 58 b0 e8 cf cf 85 4a     JJ..LL..XX.....J
     a0a:	d0 d0 bb 6b ef ef c5 2a aa aa 4f e5 fb fb ed 16     ...k...*..O.....
     a1a:	43 43 86 c5 4d 4d 9a d7 33 33 66 55 85 85 11 94     CC..MM..33fU....
     a2a:	45 45 8a cf f9 f9 e9 10 02 02 04 06 7f 7f fe 81     EE..............
     a3a:	50 50 a0 f0 3c 3c 78 44 9f 9f 25 ba a8 a8 4b e3     PP..<<xD..%...K.
     a4a:	51 51 a2 f3 a3 a3 5d fe 40 40 80 c0 8f 8f 05 8a     QQ....].@@......
     a5a:	92 92 3f ad 9d 9d 21 bc 38 38 70 48 f5 f5 f1 04     ..?...!.88pH....
     a6a:	bc bc 63 df b6 b6 77 c1 da da af 75 21 21 42 63     ..c...w....u!!Bc
     a7a:	10 10 20 30 ff ff e5 1a f3 f3 fd 0e d2 d2 bf 6d     .. 0...........m
     a8a:	cd cd 81 4c 0c 0c 18 14 13 13 26 35 ec ec c3 2f     ...L......&5.../
     a9a:	5f 5f be e1 97 97 35 a2 44 44 88 cc 17 17 2e 39     __....5.DD.....9
     aaa:	c4 c4 93 57 a7 a7 55 f2 7e 7e fc 82 3d 3d 7a 47     ...W..U.~~..==zG
     aba:	64 64 c8 ac 5d 5d ba e7 19 19 32 2b 73 73 e6 95     dd..]]....2+ss..
     aca:	60 60 c0 a0 81 81 19 98 4f 4f 9e d1 dc dc a3 7f     ``......OO......
     ada:	22 22 44 66 2a 2a 54 7e 90 90 3b ab 88 88 0b 83     ""Df**T~..;.....
     aea:	46 46 8c ca ee ee c7 29 b8 b8 6b d3 14 14 28 3c     FF.....)..k...(<
     afa:	de de a7 79 5e 5e bc e2 0b 0b 16 1d db db ad 76     ...y^^.........v
     b0a:	e0 e0 db 3b 32 32 64 56 3a 3a 74 4e 0a 0a 14 1e     ...;22dV::tN....
     b1a:	49 49 92 db 06 06 0c 0a 24 24 48 6c 5c 5c b8 e4     II......$$Hl\\..
     b2a:	c2 c2 9f 5d d3 d3 bd 6e ac ac 43 ef 62 62 c4 a6     ...]...n..C.bb..
     b3a:	91 91 39 a8 95 95 31 a4 e4 e4 d3 37 79 79 f2 8b     ..9...1....7yy..
     b4a:	e7 e7 d5 32 c8 c8 8b 43 37 37 6e 59 6d 6d da b7     ...2...C77nYmm..
     b5a:	8d 8d 01 8c d5 d5 b1 64 4e 4e 9c d2 a9 a9 49 e0     .......dNN....I.
     b6a:	6c 6c d8 b4 56 56 ac fa f4 f4 f3 07 ea ea cf 25     ll..VV.........%
     b7a:	65 65 ca af 7a 7a f4 8e ae ae 47 e9 08 08 10 18     ee..zz....G.....
     b8a:	ba ba 6f d5 78 78 f0 88 25 25 4a 6f 2e 2e 5c 72     ..o.xx..%%Jo..\r
     b9a:	1c 1c 38 24 a6 a6 57 f1 b4 b4 73 c7 c6 c6 97 51     ..8$..W...s....Q
     baa:	e8 e8 cb 23 dd dd a1 7c 74 74 e8 9c 1f 1f 3e 21     ...#...|tt....>!
     bba:	4b 4b 96 dd bd bd 61 dc 8b 8b 0d 86 8a 8a 0f 85     KK....a.........
     bca:	70 70 e0 90 3e 3e 7c 42 b5 b5 71 c4 66 66 cc aa     pp..>>|B..q.ff..
     bda:	48 48 90 d8 03 03 06 05 f6 f6 f7 01 0e 0e 1c 12     HH..............
     bea:	61 61 c2 a3 35 35 6a 5f 57 57 ae f9 b9 b9 69 d0     aa..55j_WW....i.
     bfa:	86 86 17 91 c1 c1 99 58 1d 1d 3a 27 9e 9e 27 b9     .......X..:'..'.
     c0a:	e1 e1 d9 38 f8 f8 eb 13 98 98 2b b3 11 11 22 33     ...8......+..."3
     c1a:	69 69 d2 bb d9 d9 a9 70 8e 8e 07 89 94 94 33 a7     ii.....p......3.
     c2a:	9b 9b 2d b6 1e 1e 3c 22 87 87 15 92 e9 e9 c9 20     ..-...<"....... 
     c3a:	ce ce 87 49 55 55 aa ff 28 28 50 78 df df a5 7a     ...IUU..((Px...z
     c4a:	8c 8c 03 8f a1 a1 59 f8 89 89 09 80 0d 0d 1a 17     ......Y.........
     c5a:	bf bf 65 da e6 e6 d7 31 42 42 84 c6 68 68 d0 b8     ..e....1BB..hh..
     c6a:	41 41 82 c3 99 99 29 b0 2d 2d 5a 77 0f 0f 1e 11     AA....).--Zw....
     c7a:	b0 b0 7b cb 54 54 a8 fc bb bb 6d d6 16 16 2c 3a     ..{.TT....m...,:

00000c8a <constant_table_AES_E1>:
     c8a:	a5 63 63 c6 84 7c 7c f8 99 77 77 ee 8d 7b 7b f6     .cc..||..ww..{{.
     c9a:	0d f2 f2 ff bd 6b 6b d6 b1 6f 6f de 54 c5 c5 91     .....kk..oo.T...
     caa:	50 30 30 60 03 01 01 02 a9 67 67 ce 7d 2b 2b 56     P00`.....gg.}++V
     cba:	19 fe fe e7 62 d7 d7 b5 e6 ab ab 4d 9a 76 76 ec     ....b......M.vv.
     cca:	45 ca ca 8f 9d 82 82 1f 40 c9 c9 89 87 7d 7d fa     E.......@....}}.
     cda:	15 fa fa ef eb 59 59 b2 c9 47 47 8e 0b f0 f0 fb     .....YY..GG.....
     cea:	ec ad ad 41 67 d4 d4 b3 fd a2 a2 5f ea af af 45     ...Ag......_...E
     cfa:	bf 9c 9c 23 f7 a4 a4 53 96 72 72 e4 5b c0 c0 9b     ...#...S.rr.[...
     d0a:	c2 b7 b7 75 1c fd fd e1 ae 93 93 3d 6a 26 26 4c     ...u.......=j&&L
     d1a:	5a 36 36 6c 41 3f 3f 7e 02 f7 f7 f5 4f cc cc 83     Z66lA??~....O...
     d2a:	5c 34 34 68 f4 a5 a5 51 34 e5 e5 d1 08 f1 f1 f9     \44h...Q4.......
     d3a:	93 71 71 e2 73 d8 d8 ab 53 31 31 62 3f 15 15 2a     .qq.s...S11b?..*
     d4a:	0c 04 04 08 52 c7 c7 95 65 23 23 46 5e c3 c3 9d     ....R...e##F^...
     d5a:	28 18 18 30 a1 96 96 37 0f 05 05 0a b5 9a 9a 2f     (..0...7......./
     d6a:	09 07 07 0e 36 12 12 24 9b 80 80 1b 3d e2 e2 df     ....6..$....=...
     d7a:	26 eb eb cd 69 27 27 4e cd b2 b2 7f 9f 75 75 ea     &...i''N.....uu.
     d8a:	1b 09 09 12 9e 83 83 1d 74 2c 2c 58 2e 1a 1a 34     ........t,,X...4
     d9a:	2d 1b 1b 36 b2 6e 6e dc ee 5a 5a b4 fb a0 a0 5b     -..6.nn..ZZ....[
     daa:	f6 52 52 a4 4d 3b 3b 76 61 d6 d6 b7 ce b3 b3 7d     .RR.M;;va......}
     dba:	7b 29 29 52 3e e3 e3 dd 71 2f 2f 5e 97 84 84 13     {))R>...q//^....
     dca:	f5 53 53 a6 68 d1 d1 b9 00 00 00 00 2c ed ed c1     .SS.h.......,...
     dda:	60 20 20 40 1f fc fc e3 c8 b1 b1 79 ed 5b 5b b6     `  @.......y.[[.
     dea:	be 6a 6a d4 46 cb cb 8d d9 be be 67 4b 39 39 72     .jj.F......gK99r
     dfa:	de 4a 4a 94 d4 4c 4c 98 e8 58 58 b0 4a cf cf 85     .JJ..LL..XX.J...
     e0a:	6b d0 d0 bb 2a ef ef c5 e5 aa aa 4f 16 fb fb ed     k...*......O....
     e1a:	c5 43 43 86 d7 4d 4d 9a 55 33 33 66 94 85 85 11     .CC..MM.U33f....
     e2a:	cf 45 45 8a 10 f9 f9 e9 06 02 02 04 81 7f 7f fe     .EE.............
     e3a:	f0 50 50 a0 44 3c 3c 78 ba 9f 9f 25 e3 a8 a8 4b     .PP.D<<x...%...K
     e4a:	f3 51 51 a2 fe a3 a3 5d c0 40 40 80 8a 8f 8f 05     .QQ....].@@.....
     e5a:	ad 92 92 3f bc 9d 9d 21 48 38 38 70 04 f5 f5 f1     ...?...!H88p....
     e6a:	df bc bc 63 c1 b6 b6 77 75 da da af 63 21 21 42     ...c...wu...c!!B
     e7a:	30 10 10 20 1a ff ff e5 0e f3 f3 fd 6d d2 d2 bf     0.. ........m...
     e8a:	4c cd cd 81 14 0c 0c 18 35 13 13 26 2f ec ec c3     L.......5..&/...
     e9a:	e1 5f 5f be a2 97 97 35 cc 44 44 88 39 17 17 2e     .__....5.DD.9...
     eaa:	57 c4 c4 93 f2 a7 a7 55 82 7e 7e fc 47 3d 3d 7a     W......U.~~.G==z
     eba:	ac 64 64 c8 e7 5d 5d ba 2b 19 19 32 95 73 73 e6     .dd..]].+..2.ss.
     eca:	a0 60 60 c0 98 81 81 19 d1 4f 4f 9e 7f dc dc a3     .``......OO.....
     eda:	66 22 22 44 7e 2a 2a 54 ab 90 90 3b 83 88 88 0b     f""D~**T...;....
     eea:	ca 46 46 8c 29 ee ee c7 d3 b8 b8 6b 3c 14 14 28     .FF.)......k<..(
     efa:	79 de de a7 e2 5e 5e bc 1d 0b 0b 16 76 db db ad     y....^^.....v...
     f0a:	3b e0 e0 db 56 32 32 64 4e 3a 3a 74 1e 0a 0a 14     ;...V22dN::t....
     f1a:	db 49 49 92 0a 06 06 0c 6c 24 24 48 e4 5c 5c b8     .II.....l$$H.\\.
     f2a:	5d c2 c2 9f 6e d3 d3 bd ef ac ac 43 a6 62 62 c4     ]...n......C.bb.
     f3a:	a8 91 91 39 a4 95 95 31 37 e4 e4 d3 8b 79 79 f2     ...9...17....yy.
     f4a:	32 e7 e7 d5 43 c8 c8 8b 59 37 37 6e b7 6d 6d da     2...C...Y77n.mm.
     f5a:	8c 8d 8d 01 64 d5 d5 b1 d2 4e 4e 9c e0 a9 a9 49     ....d....NN....I
     f6a:	b4 6c 6c d8 fa 56 56 ac 07 f4 f4 f3 25 ea ea cf     .ll..VV.....%...
     f7a:	af 65 65 ca 8e 7a 7a f4 e9 ae ae 47 18 08 08 10     .ee..zz....G....
     f8a:	d5 ba ba 6f 88 78 78 f0 6f 25 25 4a 72 2e 2e 5c     ...o.xx.o%%Jr..\
     f9a:	24 1c 1c 38 f1 a6 a6 57 c7 b4 b4 73 51 c6 c6 97     $..8...W...sQ...
     faa:	23 e8 e8 cb 7c dd dd a1 9c 74 74 e8 21 1f 1f 3e     #...|....tt.!..>
     fba:	dd 4b 4b 96 dc bd bd 61 86 8b 8b 0d 85 8a 8a 0f     .KK....a........
     fca:	90 70 70 e0 42 3e 3e 7c c4 b5 b5 71 aa 66 66 cc     .pp.B>>|...q.ff.
     fda:	d8 48 48 90 05 03 03 06 01 f6 f6 f7 12 0e 0e 1c     .HH.............
     fea:	a3 61 61 c2 5f 35 35 6a f9 57 57 ae d0 b9 b9 69     .aa._55j.WW....i
     ffa:	91 86 86 17 58 c1 c1 99 27 1d 1d 3a b9 9e 9e 27     ....X...'..:...'
    100a:	38 e1 e1 d9 13 f8 f8 eb b3 98 98 2b 33 11 11 22     8..........+3.."
    101a:	bb 69 69 d2 70 d9 d9 a9 89 8e 8e 07 a7 94 94 33     .ii.p..........3
    102a:	b6 9b 9b 2d 22 1e 1e 3c 92 87 87 15 20 e9 e9 c9     ...-"..<.... ...
    103a:	49 ce ce 87 ff 55 55 aa 78 28 28 50 7a df df a5     I....UU.x((Pz...
    104a:	8f 8c 8c 03 f8 a1 a1 59 80 89 89 09 17 0d 0d 1a     .......Y........
    105a:	da bf bf 65 31 e6 e6 d7 c6 42 42 84 b8 68 68 d0     ...e1....BB..hh.
    106a:	c3 41 41 82 b0 99 99 29 77 2d 2d 5a 11 0f 0f 1e     .AA....)w--Z....
    107a:	cb b0 b0 7b fc 54 54 a8 d6 bb bb 6d 3a 16 16 2c     ...{.TT....m:..,

0000108a <constant_table_AES_S>:
    108a:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
    109a:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
    10aa:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
    10ba:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
    10ca:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
    10da:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
    10ea:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
    10fa:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
    110a:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
    111a:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
    112a:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
    113a:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
    114a:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
    115a:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
    116a:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
    117a:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

0000118a <constant_table_AES_RCON>:
    118a:	00 00 00 01 00 00 00 02 00 00 00 04 00 00 00 08     ................
    119a:	00 00 00 10 00 00 00 20 00 00 00 40 00 00 00 80     ....... ...@....
    11aa:	00 00 00 1b 00 00 00 36                             .......6

000011b2 <__ctors_end>:
    11b2:	11 24       	eor	r1, r1
    11b4:	1f be       	out	0x3f, r1	; 63
    11b6:	cf ef       	ldi	r28, 0xFF	; 255
    11b8:	d8 e0       	ldi	r29, 0x08	; 8
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	cd bf       	out	0x3d, r28	; 61

000011be <__do_copy_data>:
    11be:	11 e0       	ldi	r17, 0x01	; 1
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b1 e0       	ldi	r27, 0x01	; 1
    11c4:	e4 e5       	ldi	r30, 0x54	; 84
    11c6:	f8 e6       	ldi	r31, 0x68	; 104
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <__do_copy_data+0x10>
    11ca:	05 90       	lpm	r0, Z+
    11cc:	0d 92       	st	X+, r0
    11ce:	a8 3f       	cpi	r26, 0xF8	; 248
    11d0:	b1 07       	cpc	r27, r17
    11d2:	d9 f7       	brne	.-10     	; 0x11ca <__do_copy_data+0xc>

000011d4 <__do_clear_bss>:
    11d4:	25 e0       	ldi	r18, 0x05	; 5
    11d6:	a8 ef       	ldi	r26, 0xF8	; 248
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	01 c0       	rjmp	.+2      	; 0x11de <.do_clear_bss_start>

000011dc <.do_clear_bss_loop>:
    11dc:	1d 92       	st	X+, r1

000011de <.do_clear_bss_start>:
    11de:	ac 31       	cpi	r26, 0x1C	; 28
    11e0:	b2 07       	cpc	r27, r18
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <.do_clear_bss_loop>
    11e4:	0e 94 b7 0a 	call	0x156e	; 0x156e <main>
    11e8:	0c 94 28 34 	jmp	0x6850	; 0x6850 <_exit>

000011ec <__bad_interrupt>:
    11ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011f0 <reportfunc>:
#endif     /* -----  not OW_SENSORS  ----- */


#ifdef  GPS_TRECKER
static void reportfunc(osjob_t* j)
{
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
	uint32_t res;
	res = ((data_gps.latitude[0] * 10) + data_gps.latitude[1]) * (uint32_t)(10000)
    11fe:	e8 e9       	ldi	r30, 0x98	; 152
    1200:	f2 e0       	ldi	r31, 0x02	; 2
    1202:	86 81       	ldd	r24, Z+6	; 0x06
    1204:	a7 81       	ldd	r26, Z+7	; 0x07
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	82 9f       	mul	r24, r18
    120c:	a0 0d       	add	r26, r0
    120e:	b1 1d       	adc	r27, r1
    1210:	11 24       	eor	r1, r1
		+ ((data_gps.latitude[2] * 10) + data_gps.latitude[3]) * (uint32_t)(100)
    1212:	80 85       	ldd	r24, Z+8	; 0x08
    1214:	41 85       	ldd	r20, Z+9	; 0x09
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	9a e0       	ldi	r25, 0x0A	; 10
    121a:	89 9f       	mul	r24, r25
    121c:	40 0d       	add	r20, r0
    121e:	51 1d       	adc	r21, r1
    1220:	11 24       	eor	r1, r1
		+ (data_gps.latitude[4] * 10) + data_gps.latitude[5];
    1222:	c2 84       	ldd	r12, Z+10	; 0x0a

#ifdef  GPS_TRECKER
static void reportfunc(osjob_t* j)
{
	uint32_t res;
	res = ((data_gps.latitude[0] * 10) + data_gps.latitude[1]) * (uint32_t)(10000)
    1224:	2a e0       	ldi	r18, 0x0A	; 10
    1226:	c2 9e       	mul	r12, r18
    1228:	60 01       	movw	r12, r0
    122a:	11 24       	eor	r1, r1
    122c:	0d 2c       	mov	r0, r13
    122e:	00 0c       	add	r0, r0
    1230:	ee 08       	sbc	r14, r14
    1232:	ff 08       	sbc	r15, r15
    1234:	83 85       	ldd	r24, Z+11	; 0x0b
    1236:	c8 0e       	add	r12, r24
    1238:	d1 1c       	adc	r13, r1
    123a:	e1 1c       	adc	r14, r1
    123c:	f1 1c       	adc	r15, r1
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	37 e2       	ldi	r19, 0x27	; 39
    1242:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    1246:	c6 0e       	add	r12, r22
    1248:	d7 1e       	adc	r13, r23
    124a:	e8 1e       	adc	r14, r24
    124c:	f9 1e       	adc	r15, r25
    124e:	24 e6       	ldi	r18, 0x64	; 100
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	da 01       	movw	r26, r20
    1254:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	8c 0d       	add	r24, r12
    125e:	9d 1d       	adc	r25, r13
    1260:	ae 1d       	adc	r26, r14
    1262:	bf 1d       	adc	r27, r15
		+ ((data_gps.latitude[2] * 10) + data_gps.latitude[3]) * (uint32_t)(100)
		+ (data_gps.latitude[4] * 10) + data_gps.latitude[5];
	LMIC.frame[0] = (data_gps.time[0] << 4) | (data_gps.time[1] & 0x0F);
    1264:	20 81       	ld	r18, Z
    1266:	40 e1       	ldi	r20, 0x10	; 16
    1268:	24 9f       	mul	r18, r20
    126a:	90 01       	movw	r18, r0
    126c:	11 24       	eor	r1, r1
    126e:	31 81       	ldd	r19, Z+1	; 0x01
    1270:	3f 70       	andi	r19, 0x0F	; 15
    1272:	23 2b       	or	r18, r19
    1274:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <LMIC+0x141>
	LMIC.frame[1] = (data_gps.time[2] << 4) | (data_gps.time[3] & 0x0F);
    1278:	22 81       	ldd	r18, Z+2	; 0x02
    127a:	40 e1       	ldi	r20, 0x10	; 16
    127c:	24 9f       	mul	r18, r20
    127e:	90 01       	movw	r18, r0
    1280:	11 24       	eor	r1, r1
    1282:	33 81       	ldd	r19, Z+3	; 0x03
    1284:	3f 70       	andi	r19, 0x0F	; 15
    1286:	23 2b       	or	r18, r19
    1288:	20 93 fa 03 	sts	0x03FA, r18	; 0x8003fa <LMIC+0x142>
	LMIC.frame[2] = (data_gps.time[4] << 4) | (data_gps.time[5] & 0x0F);
    128c:	24 81       	ldd	r18, Z+4	; 0x04
    128e:	40 e1       	ldi	r20, 0x10	; 16
    1290:	24 9f       	mul	r18, r20
    1292:	90 01       	movw	r18, r0
    1294:	11 24       	eor	r1, r1
    1296:	35 81       	ldd	r19, Z+5	; 0x05
    1298:	3f 70       	andi	r19, 0x0F	; 15
    129a:	23 2b       	or	r18, r19
    129c:	20 93 fb 03 	sts	0x03FB, r18	; 0x8003fb <LMIC+0x143>
	LMIC.frame[3] = res >> 16;
    12a0:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <LMIC+0x144>
	LMIC.frame[4] = res >> 8;
    12a4:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <LMIC+0x145>
	LMIC.frame[5] = res;
    12a8:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <LMIC+0x146>
	LMIC.frame[6] = (data_gps.dir_latit);
    12ac:	83 89       	ldd	r24, Z+19	; 0x13
    12ae:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <LMIC+0x147>
	res = ((data_gps.longitude[1] * 10) + data_gps.longitude[2]) * (uint32_t)(10000)
    12b2:	85 85       	ldd	r24, Z+13	; 0x0d
    12b4:	a6 85       	ldd	r26, Z+14	; 0x0e
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	9a e0       	ldi	r25, 0x0A	; 10
    12ba:	89 9f       	mul	r24, r25
    12bc:	a0 0d       	add	r26, r0
    12be:	b1 1d       	adc	r27, r1
    12c0:	11 24       	eor	r1, r1
		+ ((data_gps.longitude[3] * 10) + data_gps.longitude[4]) * (uint32_t)(100)
    12c2:	87 85       	ldd	r24, Z+15	; 0x0f
    12c4:	40 89       	ldd	r20, Z+16	; 0x10
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	82 9f       	mul	r24, r18
    12cc:	40 0d       	add	r20, r0
    12ce:	51 1d       	adc	r21, r1
    12d0:	11 24       	eor	r1, r1
		+ (data_gps.longitude[5] * 10) + data_gps.longitude[6];
    12d2:	c1 88       	ldd	r12, Z+17	; 0x11
	LMIC.frame[2] = (data_gps.time[4] << 4) | (data_gps.time[5] & 0x0F);
	LMIC.frame[3] = res >> 16;
	LMIC.frame[4] = res >> 8;
	LMIC.frame[5] = res;
	LMIC.frame[6] = (data_gps.dir_latit);
	res = ((data_gps.longitude[1] * 10) + data_gps.longitude[2]) * (uint32_t)(10000)
    12d4:	8a e0       	ldi	r24, 0x0A	; 10
    12d6:	c8 9e       	mul	r12, r24
    12d8:	60 01       	movw	r12, r0
    12da:	11 24       	eor	r1, r1
    12dc:	0d 2c       	mov	r0, r13
    12de:	00 0c       	add	r0, r0
    12e0:	ee 08       	sbc	r14, r14
    12e2:	ff 08       	sbc	r15, r15
    12e4:	82 89       	ldd	r24, Z+18	; 0x12
    12e6:	c8 0e       	add	r12, r24
    12e8:	d1 1c       	adc	r13, r1
    12ea:	e1 1c       	adc	r14, r1
    12ec:	f1 1c       	adc	r15, r1
    12ee:	20 e1       	ldi	r18, 0x10	; 16
    12f0:	37 e2       	ldi	r19, 0x27	; 39
    12f2:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    12f6:	c6 0e       	add	r12, r22
    12f8:	d7 1e       	adc	r13, r23
    12fa:	e8 1e       	adc	r14, r24
    12fc:	f9 1e       	adc	r15, r25
    12fe:	24 e6       	ldi	r18, 0x64	; 100
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	da 01       	movw	r26, r20
    1304:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	8c 0d       	add	r24, r12
    130e:	9d 1d       	adc	r25, r13
    1310:	ae 1d       	adc	r26, r14
    1312:	bf 1d       	adc	r27, r15
		+ ((data_gps.longitude[3] * 10) + data_gps.longitude[4]) * (uint32_t)(100)
		+ (data_gps.longitude[5] * 10) + data_gps.longitude[6];
	LMIC.frame[7] = res >> 16;
    1314:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <LMIC+0x148>
	LMIC.frame[8] = res >> 8;
    1318:	90 93 01 04 	sts	0x0401, r25	; 0x800401 <LMIC+0x149>
	LMIC.frame[9] = res;
    131c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <LMIC+0x14a>
	LMIC.frame[10] = (data_gps.dir_longit);
    1320:	84 89       	ldd	r24, Z+20	; 0x14
    1322:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <LMIC+0x14b>
	LMIC.frame[11] = (data_gps.quality);
    1326:	85 89       	ldd	r24, Z+21	; 0x15
    1328:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <LMIC+0x14c>
	LMIC.frame[12] = data_gps.num_satelites[0] * 10 + data_gps.num_satelites[1];
    132c:	96 89       	ldd	r25, Z+22	; 0x16
    132e:	87 89       	ldd	r24, Z+23	; 0x17
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	92 9f       	mul	r25, r18
    1334:	80 0d       	add	r24, r0
    1336:	11 24       	eor	r1, r1
    1338:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <LMIC+0x14d>
	uint16_t hight = ((data_gps.height[0] * 10) + data_gps.height[1]) * 100 +
    133c:	80 8d       	ldd	r24, Z+24	; 0x18
		(data_gps.height[2] * 10) + data_gps.height[3];
    133e:	42 8d       	ldd	r20, Z+26	; 0x1a
    1340:	21 8d       	ldd	r18, Z+25	; 0x19
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	9a e0       	ldi	r25, 0x0A	; 10
    1346:	89 9f       	mul	r24, r25
    1348:	20 0d       	add	r18, r0
    134a:	31 1d       	adc	r19, r1
    134c:	11 24       	eor	r1, r1
    134e:	54 e6       	ldi	r21, 0x64	; 100
    1350:	52 9f       	mul	r21, r18
    1352:	c0 01       	movw	r24, r0
    1354:	53 9f       	mul	r21, r19
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	42 9f       	mul	r20, r18
    135e:	80 0d       	add	r24, r0
    1360:	91 1d       	adc	r25, r1
    1362:	11 24       	eor	r1, r1
    1364:	23 8d       	ldd	r18, Z+27	; 0x1b
    1366:	82 0f       	add	r24, r18
    1368:	91 1d       	adc	r25, r1
	LMIC.frame[13] = hight >> 8;
    136a:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <LMIC+0x14e>
	LMIC.frame[14] = hight;
    136e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <LMIC+0x14f>
	LMIC_setTxData2(1, LMIC.frame, 15, 0);
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	4f e0       	ldi	r20, 0x0F	; 15
    1376:	69 ef       	ldi	r22, 0xF9	; 249
    1378:	73 e0       	ldi	r23, 0x03	; 3
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	0e 94 02 28 	call	0x5004	; 0x5004 <LMIC_setTxData2>
	os_setTimedCallback(j, os_getTime() + sec2osticks(10), reportfunc);
    1380:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    1384:	ab 01       	movw	r20, r22
    1386:	bc 01       	movw	r22, r24
    1388:	4c 54       	subi	r20, 0x4C	; 76
    138a:	5b 43       	sbci	r21, 0x3B	; 59
    138c:	6b 4f       	sbci	r22, 0xFB	; 251
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	28 ef       	ldi	r18, 0xF8	; 248
    1392:	38 e0       	ldi	r19, 0x08	; 8
    1394:	ce 01       	movw	r24, r28
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
	uint16_t hight = ((data_gps.height[0] * 10) + data_gps.height[1]) * 100 +
		(data_gps.height[2] * 10) + data_gps.height[3];
	LMIC.frame[13] = hight >> 8;
	LMIC.frame[14] = hight;
	LMIC_setTxData2(1, LMIC.frame, 15, 0);
	os_setTimedCallback(j, os_getTime() + sec2osticks(10), reportfunc);
    13a2:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>

000013a6 <tikfunc>:

osjob_t tikjob;

static void tikfunc(osjob_t* j)
{
	if (LED_PORT & (1 << LED_PIN)) 
    13a6:	41 9b       	sbis	0x08, 1	; 8
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <tikfunc+0x8>
	{
		LED_PORT &= ~(1 << LED_PIN);
    13aa:	41 98       	cbi	0x08, 1	; 8
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <tikfunc+0xa>
	}
	else LED_PORT |= (1 << LED_PIN);
    13ae:	41 9a       	sbi	0x08, 1	; 8
	/* _delay_ms(1000); */
	/* os_setCallback(&tikjob, tikfunc); */
	/* printf("Ticks: %lu\r\n", hal_ticks()); */
	os_setTimedCallback(&tikjob, os_getTime() + sec2osticks(1), tikfunc);
    13b0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    13b4:	ab 01       	movw	r20, r22
    13b6:	bc 01       	movw	r22, r24
    13b8:	4e 5e       	subi	r20, 0xEE	; 238
    13ba:	55 48       	sbci	r21, 0x85	; 133
    13bc:	6f 4f       	sbci	r22, 0xFF	; 255
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	23 ed       	ldi	r18, 0xD3	; 211
    13c2:	39 e0       	ldi	r19, 0x09	; 9
    13c4:	80 e9       	ldi	r24, 0x90	; 144
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>

000013cc <initfunc>:
	LMIC_setTxData2(1, LMIC.frame, 15, 0);
	os_setTimedCallback(j, os_getTime() + sec2osticks(10), reportfunc);
}
#endif     /* -----  not GPS_TRECKER  ----- */

static void initfunc (osjob_t* j) {
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	a0 97       	sbiw	r28, 0x20	; 32
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	6c 01       	movw	r12, r24
	LMIC_reset();
    13ee:	0e 94 81 27 	call	0x4f02	; 0x4f02 <LMIC_reset>
	// start joining
	LMIC_startJoining();
    13f2:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...

	//   ABP
	uint8_t appskey[sizeof(APPSKEY)];
	uint8_t nwkskey[sizeof(NWKSKEY)];
	memcpy(appskey, APPSKEY, sizeof(APPSKEY));
    13f6:	80 e1       	ldi	r24, 0x10	; 16
    13f8:	e3 e1       	ldi	r30, 0x13	; 19
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	de 01       	movw	r26, r28
    13fe:	51 96       	adiw	r26, 0x11	; 17
    1400:	01 90       	ld	r0, Z+
    1402:	0d 92       	st	X+, r0
    1404:	8a 95       	dec	r24
    1406:	e1 f7       	brne	.-8      	; 0x1400 <initfunc+0x34>
	memcpy(nwkskey, NWKSKEY, sizeof(NWKSKEY));
    1408:	80 e1       	ldi	r24, 0x10	; 16
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f1 e0       	ldi	r31, 0x01	; 1
    140e:	de 01       	movw	r26, r28
    1410:	11 96       	adiw	r26, 0x01	; 1
    1412:	01 90       	ld	r0, Z+
    1414:	0d 92       	st	X+, r0
    1416:	8a 95       	dec	r24
    1418:	e1 f7       	brne	.-8      	; 0x1412 <initfunc+0x46>
	LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
    141a:	ce 01       	movw	r24, r28
    141c:	41 96       	adiw	r24, 0x11	; 17
    141e:	7c 01       	movw	r14, r24
    1420:	8e 01       	movw	r16, r28
    1422:	0f 5f       	subi	r16, 0xFF	; 255
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	2f ed       	ldi	r18, 0xDF	; 223
    1428:	31 e1       	ldi	r19, 0x11	; 17
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	56 e2       	ldi	r21, 0x26	; 38
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 35 28 	call	0x506a	; 0x506a <LMIC_setSession>

	LMIC_setupChannel(0, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    143a:	01 e0       	ldi	r16, 0x01	; 1
    143c:	2f e3       	ldi	r18, 0x3F	; 63
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 ea       	ldi	r20, 0xA0	; 160
    1442:	57 e2       	ldi	r21, 0x27	; 39
    1444:	6e eb       	ldi	r22, 0xBE	; 190
    1446:	73 e3       	ldi	r23, 0x33	; 51
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(1, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
    144e:	2f e7       	ldi	r18, 0x7F	; 127
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 ea       	ldi	r20, 0xA0	; 160
    1454:	57 e2       	ldi	r21, 0x27	; 39
    1456:	6e eb       	ldi	r22, 0xBE	; 190
    1458:	73 e3       	ldi	r23, 0x33	; 51
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(2, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    1460:	2f e3       	ldi	r18, 0x3F	; 63
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 ea       	ldi	r20, 0xA0	; 160
    1466:	57 e2       	ldi	r21, 0x27	; 39
    1468:	6e eb       	ldi	r22, 0xBE	; 190
    146a:	73 e3       	ldi	r23, 0x33	; 51
    146c:	82 e0       	ldi	r24, 0x02	; 2
    146e:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(3, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    1472:	2f e3       	ldi	r18, 0x3F	; 63
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 ea       	ldi	r20, 0xA0	; 160
    1478:	57 e2       	ldi	r21, 0x27	; 39
    147a:	6e eb       	ldi	r22, 0xBE	; 190
    147c:	73 e3       	ldi	r23, 0x33	; 51
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(4, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    1484:	2f e3       	ldi	r18, 0x3F	; 63
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	40 ea       	ldi	r20, 0xA0	; 160
    148a:	57 e2       	ldi	r21, 0x27	; 39
    148c:	6e eb       	ldi	r22, 0xBE	; 190
    148e:	73 e3       	ldi	r23, 0x33	; 51
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(5, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    1496:	2f e3       	ldi	r18, 0x3F	; 63
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 ea       	ldi	r20, 0xA0	; 160
    149c:	57 e2       	ldi	r21, 0x27	; 39
    149e:	6e eb       	ldi	r22, 0xBE	; 190
    14a0:	73 e3       	ldi	r23, 0x33	; 51
    14a2:	85 e0       	ldi	r24, 0x05	; 5
    14a4:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(6, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    14a8:	2f e3       	ldi	r18, 0x3F	; 63
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 ea       	ldi	r20, 0xA0	; 160
    14ae:	57 e2       	ldi	r21, 0x27	; 39
    14b0:	6e eb       	ldi	r22, 0xBE	; 190
    14b2:	73 e3       	ldi	r23, 0x33	; 51
    14b4:	86 e0       	ldi	r24, 0x06	; 6
    14b6:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(7, 868100000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    14ba:	2f e3       	ldi	r18, 0x3F	; 63
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 ea       	ldi	r20, 0xA0	; 160
    14c0:	57 e2       	ldi	r21, 0x27	; 39
    14c2:	6e eb       	ldi	r22, 0xBE	; 190
    14c4:	73 e3       	ldi	r23, 0x33	; 51
    14c6:	87 e0       	ldi	r24, 0x07	; 7
    14c8:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
    14cc:	00 e0       	ldi	r16, 0x00	; 0
    14ce:	20 e8       	ldi	r18, 0x80	; 128
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	56 ed       	ldi	r21, 0xD6	; 214
    14d6:	68 ec       	ldi	r22, 0xC8	; 200
    14d8:	73 e3       	ldi	r23, 0x33	; 51
    14da:	88 e0       	ldi	r24, 0x08	; 8
    14dc:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
	/* LMIC_setupChannel(6, 867700000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band */
	/* LMIC_setupChannel(7, 867900000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band */
	/* LMIC_setupChannel(8, 868800000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band */

	// Disable link check validation
	LMIC_setLinkCheckMode(0);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 73 28 	call	0x50e6	; 0x50e6 <LMIC_setLinkCheckMode>
	// TTN uses SF9 for its RX2 window.
	LMIC.dn2Dr = DR_SF9;
    14e6:	83 e0       	ldi	r24, 0x03	; 3
    14e8:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <LMIC+0x124>
	// Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
	LMIC_setDrTxpow(DR_SF7,14);
    14ec:	6e e0       	ldi	r22, 0x0E	; 14
    14ee:	85 e0       	ldi	r24, 0x05	; 5
    14f0:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <LMIC_setDrTxpow>

#ifdef  GPS_TRECKER
	os_setTimedCallback(j, os_getTime(), reportfunc);
    14f4:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    14f8:	ab 01       	movw	r20, r22
    14fa:	bc 01       	movw	r22, r24
    14fc:	28 ef       	ldi	r18, 0xF8	; 248
    14fe:	38 e0       	ldi	r19, 0x08	; 8
    1500:	c6 01       	movw	r24, r12
    1502:	0e 94 35 0b 	call	0x166a	; 0x166a <os_setTimedCallback>
#endif     /* -----  not GPS_TRECKER  ----- */
	/* os_setTimedCallback(j, os_getTime(), reportfunc); */
}
    1506:	a0 96       	adiw	r28, 0x20	; 32
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	08 95       	ret

00001524 <os_getArtEui>:
static  u1_t NWKSKEY[16] = { 0x70, 0x9A, 0x66, 0x6B, 0x26, 0x11, 0x1E, 0x90, 0xDD, 0xD3, 0x7F, 0x4E, 0x59, 0x69, 0x73, 0xB2 };
static  u1_t APPSKEY[16] = { 0x9E, 0x3B, 0x6E, 0x84, 0x0D, 0xCE, 0xCA, 0x5E, 0x68, 0x85, 0x9B, 0xB9, 0xD0, 0x00, 0x10, 0xEB };
static  u4_t DEVADDR = 0x260111DF;

// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
    1524:	dc 01       	movw	r26, r24
    memcpy(buf, APPEUI, 8);
    1526:	98 e0       	ldi	r25, 0x08	; 8
    1528:	eb e4       	ldi	r30, 0x4B	; 75
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	01 90       	ld	r0, Z+
    152e:	0d 92       	st	X+, r0
    1530:	9a 95       	dec	r25
    1532:	e1 f7       	brne	.-8      	; 0x152c <os_getArtEui+0x8>
    1534:	08 95       	ret

00001536 <os_getDevEui>:
}

// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
    1536:	dc 01       	movw	r26, r24
    memcpy(buf, DEVEUI, 8);
    1538:	98 e0       	ldi	r25, 0x08	; 8
    153a:	e3 e4       	ldi	r30, 0x43	; 67
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	01 90       	ld	r0, Z+
    1540:	0d 92       	st	X+, r0
    1542:	9a 95       	dec	r25
    1544:	e1 f7       	brne	.-8      	; 0x153e <os_getDevEui+0x8>
    1546:	08 95       	ret

00001548 <os_getDevKey>:
}

// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
    1548:	dc 01       	movw	r26, r24
    memcpy(buf, DEVKEY, 16);
    154a:	90 e1       	ldi	r25, 0x10	; 16
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f1 e0       	ldi	r31, 0x01	; 1
    1550:	01 90       	ld	r0, Z+
    1552:	0d 92       	st	X+, r0
    1554:	9a 95       	dec	r25
    1556:	e1 f7       	brne	.-8      	; 0x1550 <os_getDevKey+0x8>
    1558:	08 95       	ret

0000155a <readsensor>:
}

u2_t readsensor(){
	u2_t value = 0xAA;    /// read from evrything ...make your own sensor
	return value;
}
    155a:	8a ea       	ldi	r24, 0xAA	; 170
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	08 95       	ret

00001560 <onEvent>:

#ifdef  DEBUG_LOG
	debug_event(ev);
#endif     /* -----  DEBUG_LOG  ----- */

	switch(ev) {
    1560:	86 30       	cpi	r24, 0x06	; 6
    1562:	21 f4       	brne	.+8      	; 0x156c <onEvent+0xc>
			/* usart_putstr("try joining\r\n"); */
			break;
		case EV_JOINED:
			/* debug_led(1); */
			// kick-off periodic sensor job
			reportfunc(&reportjob);
    1564:	88 ef       	ldi	r24, 0xF8	; 248
    1566:	91 e0       	ldi	r25, 0x01	; 1
    1568:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <reportfunc>
    156c:	08 95       	ret

0000156e <main>:
}



int main(void)
{
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	28 97       	sbiw	r28, 0x08	; 8
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
	osjob_t initjob;
	os_init();
    1582:	0e 94 ed 0a 	call	0x15da	; 0x15da <os_init>

#ifdef  OW_SENSORS
	ow_init();
	startmeasure(&reportjob);
#endif     /* -----  not OW_SENSORS  ----- */
	usart_putstr("Hello from node.\r\n");
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <usart_putstr>
	os_setCallback(&tikjob, tikfunc);
    158e:	63 ed       	ldi	r22, 0xD3	; 211
    1590:	79 e0       	ldi	r23, 0x09	; 9
    1592:	80 e9       	ldi	r24, 0x90	; 144
    1594:	92 e0       	ldi	r25, 0x02	; 2
    1596:	0e 94 0f 0b 	call	0x161e	; 0x161e <os_setCallback>
	os_setCallback(&initjob, initfunc);
    159a:	66 ee       	ldi	r22, 0xE6	; 230
    159c:	79 e0       	ldi	r23, 0x09	; 9
    159e:	ce 01       	movw	r24, r28
    15a0:	01 96       	adiw	r24, 0x01	; 1
    15a2:	0e 94 0f 0b 	call	0x161e	; 0x161e <os_setCallback>
	os_runloop();
    15a6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <os_runloop>
    15aa:	ff cf       	rjmp	.-2      	; 0x15aa <main+0x3c>

000015ac <unlinkjob>:
    return hal_ticks();
}

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    15ac:	fc 01       	movw	r30, r24
    15ae:	20 81       	ld	r18, Z
    15b0:	31 81       	ldd	r19, Z+1	; 0x01
    15b2:	21 15       	cp	r18, r1
    15b4:	31 05       	cpc	r19, r1
    15b6:	71 f0       	breq	.+28     	; 0x15d4 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
    15b8:	26 17       	cp	r18, r22
    15ba:	37 07       	cpc	r19, r23
    15bc:	49 f4       	brne	.+18     	; 0x15d0 <unlinkjob+0x24>
            *pnext = job->next;
    15be:	fb 01       	movw	r30, r22
    15c0:	20 81       	ld	r18, Z
    15c2:	31 81       	ldd	r19, Z+1	; 0x01
    15c4:	fc 01       	movw	r30, r24
    15c6:	31 83       	std	Z+1, r19	; 0x01
    15c8:	20 83       	st	Z, r18
            return 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	08 95       	ret
    return hal_ticks();
}

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
    for( ; *pnext; pnext = &((*pnext)->next)) {
    15d0:	c9 01       	movw	r24, r18
    15d2:	ec cf       	rjmp	.-40     	; 0x15ac <unlinkjob>
        if(*pnext == job) { // unlink
            *pnext = job->next;
            return 1;
        }
    }
    return 0;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
}
    15d8:	08 95       	ret

000015da <os_init>:
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
    memset(&OS, 0x00, sizeof(OS));
    15da:	84 e0       	ldi	r24, 0x04	; 4
    15dc:	e0 e0       	ldi	r30, 0x00	; 0
    15de:	f2 e0       	ldi	r31, 0x02	; 2
    15e0:	df 01       	movw	r26, r30
    15e2:	1d 92       	st	X+, r1
    15e4:	8a 95       	dec	r24
    15e6:	e9 f7       	brne	.-6      	; 0x15e2 <os_init+0x8>
    hal_init();
    15e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <hal_init>
    radio_init();
    15ec:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <radio_init>
    LMIC_init();
    15f0:	0c 94 d2 27 	jmp	0x4fa4	; 0x4fa4 <LMIC_init>

000015f4 <os_getTime>:
}

ostime_t os_getTime () {
    return hal_ticks();
    15f4:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <hal_ticks>

000015f8 <os_clearCallback>:
    }
    return 0;
}

// clear scheduled job
void os_clearCallback (osjob_t* job) {
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    hal_disableIRQs();
    15fe:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job); 
    1602:	be 01       	movw	r22, r28
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <unlinkjob>
	unlinkjob(&OS.runnablejobs, job);
    160c:	be 01       	movw	r22, r28
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <unlinkjob>
    hal_enableIRQs();
}
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
// clear scheduled job
void os_clearCallback (osjob_t* job) {
    hal_disableIRQs();
    unlinkjob(&OS.scheduledjobs, job); 
	unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
    161a:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <hal_enableIRQs>

0000161e <os_setCallback>:
}

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
    1628:	8b 01       	movw	r16, r22
    osjob_t** pnext;
    hal_disableIRQs();
    162a:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
    162e:	be 01       	movw	r22, r28
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <unlinkjob>
    // fill-in job
    job->func = cb;
    1638:	1f 83       	std	Y+7, r17	; 0x07
    163a:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	18 82       	st	Y, r1
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    1640:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <OS+0x2>
    1644:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <OS+0x3>
    1648:	a2 e0       	ldi	r26, 0x02	; 2
    164a:	b2 e0       	ldi	r27, 0x02	; 2
    164c:	30 97       	sbiw	r30, 0x00	; 0
    164e:	29 f0       	breq	.+10     	; 0x165a <os_setCallback+0x3c>
    1650:	df 01       	movw	r26, r30
    1652:	01 90       	ld	r0, Z+
    1654:	f0 81       	ld	r31, Z
    1656:	e0 2d       	mov	r30, r0
    1658:	f9 cf       	rjmp	.-14     	; 0x164c <os_setCallback+0x2e>
    *pnext = job;
    165a:	cd 93       	st	X+, r28
    165c:	dc 93       	st	X, r29
    hal_enableIRQs();
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    job->func = cb;
    job->next = NULL;
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
    *pnext = job;
    hal_enableIRQs();
    1666:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <hal_enableIRQs>

0000166a <os_setTimedCallback>:
}

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
    167c:	6a 01       	movw	r12, r20
    167e:	7b 01       	movw	r14, r22
    1680:	89 01       	movw	r16, r18
    osjob_t** pnext;
    hal_disableIRQs();
    1682:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
    1686:	be 01       	movw	r22, r28
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <unlinkjob>
    // fill-in job
    job->deadline = time;
    1690:	ca 82       	std	Y+2, r12	; 0x02
    1692:	db 82       	std	Y+3, r13	; 0x03
    1694:	ec 82       	std	Y+4, r14	; 0x04
    1696:	fd 82       	std	Y+5, r15	; 0x05
    job->func = cb;
    1698:	1f 83       	std	Y+7, r17	; 0x07
    169a:	0e 83       	std	Y+6, r16	; 0x06
    job->next = NULL;
    169c:	19 82       	std	Y+1, r1	; 0x01
    169e:	18 82       	st	Y, r1
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    16a0:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <OS>
    16a4:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <OS+0x1>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	32 e0       	ldi	r19, 0x02	; 2
    16ac:	30 97       	sbiw	r30, 0x00	; 0
    16ae:	a9 f0       	breq	.+42     	; 0x16da <os_setTimedCallback+0x70>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	a4 81       	ldd	r26, Z+4	; 0x04
    16b6:	b5 81       	ldd	r27, Z+5	; 0x05
    16b8:	8c 19       	sub	r24, r12
    16ba:	9d 09       	sbc	r25, r13
    16bc:	ae 09       	sbc	r26, r14
    16be:	bf 09       	sbc	r27, r15
    16c0:	18 16       	cp	r1, r24
    16c2:	19 06       	cpc	r1, r25
    16c4:	1a 06       	cpc	r1, r26
    16c6:	1b 06       	cpc	r1, r27
    16c8:	1c f4       	brge	.+6      	; 0x16d0 <os_setTimedCallback+0x66>
            // enqueue before next element and stop
            job->next = *pnext;
    16ca:	f9 83       	std	Y+1, r31	; 0x01
    16cc:	e8 83       	st	Y, r30
            break;
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <os_setTimedCallback+0x70>
    // fill-in job
    job->deadline = time;
    job->func = cb;
    job->next = NULL;
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
    16d0:	9f 01       	movw	r18, r30
    16d2:	01 90       	ld	r0, Z+
    16d4:	f0 81       	ld	r31, Z
    16d6:	e0 2d       	mov	r30, r0
    16d8:	e9 cf       	rjmp	.-46     	; 0x16ac <os_setTimedCallback+0x42>
            // enqueue before next element and stop
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    16da:	f9 01       	movw	r30, r18
    16dc:	d1 83       	std	Z+1, r29	; 0x01
    16de:	c0 83       	st	Z, r28
    hal_enableIRQs();
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	ef 90       	pop	r14
    16ec:	df 90       	pop	r13
    16ee:	cf 90       	pop	r12
            job->next = *pnext;
            break;
        }
    }
    *pnext = job;
    hal_enableIRQs();
    16f0:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <hal_enableIRQs>

000016f4 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
	while(1) {
        osjob_t* j = NULL;
        hal_disableIRQs();
    16f4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
    16f8:	c0 91 02 02 	lds	r28, 0x0202	; 0x800202 <OS+0x2>
    16fc:	d0 91 03 02 	lds	r29, 0x0203	; 0x800203 <OS+0x3>
    1700:	20 97       	sbiw	r28, 0x00	; 0
    1702:	39 f0       	breq	.+14     	; 0x1712 <os_runloop+0x1e>
            j = OS.runnablejobs;
            OS.runnablejobs = j->next;
    1704:	88 81       	ld	r24, Y
    1706:	99 81       	ldd	r25, Y+1	; 0x01
    1708:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <OS+0x3>
    170c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <OS+0x2>
    1710:	1b c0       	rjmp	.+54     	; 0x1748 <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
    1712:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <OS>
    1716:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <OS+0x1>
    171a:	30 97       	sbiw	r30, 0x00	; 0
    171c:	99 f0       	breq	.+38     	; 0x1744 <os_runloop+0x50>
    171e:	62 81       	ldd	r22, Z+2	; 0x02
    1720:	73 81       	ldd	r23, Z+3	; 0x03
    1722:	84 81       	ldd	r24, Z+4	; 0x04
    1724:	95 81       	ldd	r25, Z+5	; 0x05
    1726:	0e 94 b8 0c 	call	0x1970	; 0x1970 <hal_checkTimer>
    172a:	89 2b       	or	r24, r25
    172c:	59 f0       	breq	.+22     	; 0x1744 <os_runloop+0x50>
            j = OS.scheduledjobs;
    172e:	c0 91 00 02 	lds	r28, 0x0200	; 0x800200 <OS>
    1732:	d0 91 01 02 	lds	r29, 0x0201	; 0x800201 <OS+0x1>
            OS.scheduledjobs = j->next;
    1736:	88 81       	ld	r24, Y
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <OS+0x1>
    173e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <OS>
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
    1744:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <hal_sleep>
        }
        hal_enableIRQs();
    1748:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <hal_enableIRQs>
        if(j) { // run job callback
    174c:	20 97       	sbiw	r28, 0x00	; 0
    174e:	91 f2       	breq	.-92     	; 0x16f4 <os_runloop>
            j->func(j);
    1750:	ee 81       	ldd	r30, Y+6	; 0x06
    1752:	ff 81       	ldd	r31, Y+7	; 0x07
    1754:	ce 01       	movw	r24, r28
    1756:	09 95       	icall
    1758:	cd cf       	rjmp	.-102    	; 0x16f4 <os_runloop>

0000175a <usart_init>:
/* 	return 0; */
/* } */

void usart_init(void)
{
	cli();
    175a:	f8 94       	cli
	//Set baudrate
	UBRR0L = (uint8_t)(BAUD_PRESCALLE & 0xFF);
    175c:	83 e3       	ldi	r24, 0x33	; 51
    175e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UBRR0H = (uint8_t)(BAUD_PRESCALLE >> 8);
    1762:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	//Enable TX
	UCSR0B |= (1 << TXEN0);
    1766:	e1 ec       	ldi	r30, 0xC1	; 193
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 60       	ori	r24, 0x08	; 8
    176e:	80 83       	st	Z, r24
	//Enable RX
	UCSR0B |= (1 << RXEN0);
    1770:	80 81       	ld	r24, Z
    1772:	80 61       	ori	r24, 0x10	; 16
    1774:	80 83       	st	Z, r24
	//Enable TX interrupt
	UCSR0B |= (1 << TXCIE0);
    1776:	80 81       	ld	r24, Z
    1778:	80 64       	ori	r24, 0x40	; 64
    177a:	80 83       	st	Z, r24

#ifdef  GPS_TRECKER
	//Enable RX complete interrupt
	UCSR0B |= (1 << RXCIE0);
    177c:	80 81       	ld	r24, Z
    177e:	80 68       	ori	r24, 0x80	; 128
    1780:	80 83       	st	Z, r24
#endif     /* -----  not GPS_TRECKER  ----- */
	//Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1782:	e2 ec       	ldi	r30, 0xC2	; 194
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	86 60       	ori	r24, 0x06	; 6
    178a:	80 83       	st	Z, r24
	/* stdout = &mystdout; */
	sei();
    178c:	78 94       	sei
    178e:	08 95       	ret

00001790 <usart_putchar>:
}

void usart_putchar(uint8_t ch)
{
	if (bit_is_set(UCSR0A, UDRE0) && tx_countbuffer == 0) 
    1790:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    1794:	95 ff       	sbrs	r25, 5
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <usart_putchar+0x16>
    1798:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <tx_countbuffer>
    179c:	91 11       	cpse	r25, r1
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <usart_putchar+0x16>
		UDR0 = ch;
    17a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    17a4:	08 95       	ret
	else if (tx_countbuffer < USART_RX_BUFFER_SIZE) 
    17a6:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <tx_countbuffer>
    17aa:	94 31       	cpi	r25, 0x14	; 20
    17ac:	b0 f4       	brcc	.+44     	; 0x17da <usart_putchar+0x4a>
	{
		tx_countbuffer++;
    17ae:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <tx_countbuffer>
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <tx_countbuffer>
		usart_tx_buffer[tx_headbuffer] = ch;
    17b8:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <tx_headbuffer>
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	e9 5f       	subi	r30, 0xF9	; 249
    17c0:	fd 4f       	sbci	r31, 0xFD	; 253
    17c2:	80 83       	st	Z, r24
		tx_headbuffer++;
    17c4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <tx_headbuffer>
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <tx_headbuffer>
		if(tx_headbuffer == USART_TX_BUFFER_SIZE)
    17ce:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <tx_headbuffer>
    17d2:	84 31       	cpi	r24, 0x14	; 20
    17d4:	11 f4       	brne	.+4      	; 0x17da <usart_putchar+0x4a>
			tx_headbuffer = 0;
    17d6:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <tx_headbuffer>
    17da:	08 95       	ret

000017dc <usart_putstr>:
	}
}

void usart_putstr(char* str)
{
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
	while (*str) 
    17e2:	89 91       	ld	r24, Y+
    17e4:	88 23       	and	r24, r24
    17e6:	19 f0       	breq	.+6      	; 0x17ee <usart_putstr+0x12>
	{
		usart_putchar(*str);
    17e8:	0e 94 c8 0b 	call	0x1790	; 0x1790 <usart_putchar>
    17ec:	fa cf       	rjmp	.-12     	; 0x17e2 <usart_putstr+0x6>
		str++;
	}
}
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <spi_init>:

void spi_init(void)
{
	NSS_DDR |= (1 << NSS_PIN);//Port out
    17f4:	22 9a       	sbi	0x04, 2	; 4
	SPI_DDR |= (1 << SPI_MOSI) | (1 << SPI_SCK);
    17f6:	84 b1       	in	r24, 0x04	; 4
    17f8:	88 62       	ori	r24, 0x28	; 40
    17fa:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &= ~(1 << SPI_MISO);
    17fc:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1 << SPE) | (1 << MSTR) | (1 << SPR0); // Enable SPI, mode master, boud f_osc/16
    17fe:	8c b5       	in	r24, 0x2c	; 44
    1800:	81 65       	ori	r24, 0x51	; 81
    1802:	8c bd       	out	0x2c, r24	; 44
    1804:	08 95       	ret

00001806 <hal_init>:
}

void hal_init (void)
{
	LED_DDR |= (1 << LED_PIN);
    1806:	39 9a       	sbi	0x07, 1	; 7
	LED_PORT &= ~(1 << LED_PIN);
    1808:	41 98       	cbi	0x08, 1	; 8
	usart_init();
    180a:	0e 94 ad 0b 	call	0x175a	; 0x175a <usart_init>
	spi_init();
    180e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <spi_init>
	//Set timer1 
	TCCR0B = (1 << CS02); //Set clock source clkio/256
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0); //Enable overflow interrupt
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	//Int0
	EICRA |= (1 << ISC01) | ( 1 << ISC00);// Int0 rising edge
    181c:	e9 e6       	ldi	r30, 0x69	; 105
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	83 60       	ori	r24, 0x03	; 3
    1824:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); //Enable interrupt int0
    1826:	e8 9a       	sbi	0x1d, 0	; 29
	//Int PCI
	DDRD &= ~(1 << PORTD5);
    1828:	55 98       	cbi	0x0a, 5	; 10
	PORTD &= ~(1 << PORTD5);
    182a:	5d 98       	cbi	0x0b, 5	; 11
	PCICR |= (1 << PCIE2);
    182c:	e8 e6       	ldi	r30, 0x68	; 104
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	84 60       	ori	r24, 0x04	; 4
    1834:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT21);
    1836:	ed e6       	ldi	r30, 0x6D	; 109
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 62       	ori	r24, 0x20	; 32
    183e:	80 83       	st	Z, r24
	set_sleep_mode(SLEEP_MODE_IDLE);
    1840:	83 b7       	in	r24, 0x33	; 51
    1842:	81 7f       	andi	r24, 0xF1	; 241
    1844:	83 bf       	out	0x33, r24	; 51
	sei();
    1846:	78 94       	sei
    1848:	08 95       	ret

0000184a <hal_pin_nss>:
/*
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	11 f4       	brne	.+4      	; 0x1852 <hal_pin_nss+0x8>
		NSS_PORT |= (1 << NSS_PIN);
    184e:	2a 9a       	sbi	0x05, 2	; 5
    1850:	08 95       	ret
	else NSS_PORT &= ~(1 << NSS_PIN);
    1852:	2a 98       	cbi	0x05, 2	; 5
    1854:	08 95       	ret

00001856 <hal_pin_rxtx>:
}

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val)
{
    1856:	08 95       	ret

00001858 <hal_pin_rst>:
/*
 * control radio RST pin (0=low, 1=high, 2=floating)
 */
void hal_pin_rst (u1_t val)
{
	if (val == 0 || val == 1) 
    1858:	82 30       	cpi	r24, 0x02	; 2
    185a:	38 f4       	brcc	.+14     	; 0x186a <hal_pin_rst+0x12>
	{
		RST_DDR |= (1 << RST_PIN);//Port out
    185c:	21 9a       	sbi	0x04, 1	; 4
		if (val == 1) 
    185e:	81 30       	cpi	r24, 0x01	; 1
    1860:	11 f4       	brne	.+4      	; 0x1866 <hal_pin_rst+0xe>
			RST_PORT |= (1 << RST_PIN);
    1862:	29 9a       	sbi	0x05, 1	; 5
    1864:	08 95       	ret
		else RST_PORT &= ~(1 << RST_PIN);
    1866:	29 98       	cbi	0x05, 1	; 5
    1868:	08 95       	ret
	}
	else RST_DDR &= ~(1 << RST_PIN);//floating
    186a:	21 98       	cbi	0x04, 1	; 4
    186c:	08 95       	ret

0000186e <hal_spi>:
 *   - read byte and return value
 */
u1_t hal_spi (u1_t outval)
{
	u1_t ret;
	SPDR = outval;
    186e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
    1870:	0d b4       	in	r0, 0x2d	; 45
    1872:	07 fe       	sbrs	r0, 7
    1874:	fd cf       	rjmp	.-6      	; 0x1870 <hal_spi+0x2>
		ret = SPDR;
    1876:	8e b5       	in	r24, 0x2e	; 46
	return ret;
}
    1878:	08 95       	ret

0000187a <hal_spi_write>:
    }
	hal_pin_nss(1);
}

void hal_spi_write(u1_t cmd, const u1_t* buf, size_t len)
{
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	f8 2e       	mov	r15, r24
    1886:	eb 01       	movw	r28, r22
    1888:	8a 01       	movw	r16, r20
		ret = SPDR;
	return ret;
}
static void hal_spi_trx(u1_t cmd, u1_t* buf, size_t len, bit_t is_read) 
{
	hal_pin_nss(0);
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
	hal_spi(cmd);
    1890:	8f 2d       	mov	r24, r15
    1892:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    1896:	0c 0f       	add	r16, r28
    1898:	1d 1f       	adc	r17, r29
    for (; len > 0; --len, ++buf) {
    189a:	c0 17       	cp	r28, r16
    189c:	d1 07       	cpc	r29, r17
    189e:	21 f0       	breq	.+8      	; 0x18a8 <hal_spi_write+0x2e>
        u1_t data = is_read ? 0x00 : *buf;
        data = hal_spi(data);
    18a0:	89 91       	ld	r24, Y+
    18a2:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    18a6:	f9 cf       	rjmp	.-14     	; 0x189a <hal_spi_write+0x20>
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
		NSS_PORT |= (1 << NSS_PIN);
    18a8:	2a 9a       	sbi	0x05, 2	; 5
}

void hal_spi_write(u1_t cmd, const u1_t* buf, size_t len)
{
	hal_spi_trx(cmd, (u1_t*)buf, len, 0);
}
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	08 95       	ret

000018b6 <hal_spi_read>:

void hal_spi_read(u1_t cmd, u1_t* buf, size_t len)
{
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	f8 2e       	mov	r15, r24
    18c2:	eb 01       	movw	r28, r22
    18c4:	8a 01       	movw	r16, r20
		ret = SPDR;
	return ret;
}
static void hal_spi_trx(u1_t cmd, u1_t* buf, size_t len, bit_t is_read) 
{
	hal_pin_nss(0);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
	hal_spi(cmd);
    18cc:	8f 2d       	mov	r24, r15
    18ce:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    18d2:	0c 0f       	add	r16, r28
    18d4:	1d 1f       	adc	r17, r29
    for (; len > 0; --len, ++buf) {
    18d6:	c0 17       	cp	r28, r16
    18d8:	d1 07       	cpc	r29, r17
    18da:	29 f0       	breq	.+10     	; 0x18e6 <hal_spi_read+0x30>
        u1_t data = is_read ? 0x00 : *buf;
        data = hal_spi(data);
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
        if (is_read)
            *buf = data;
    18e2:	89 93       	st	Y+, r24
    18e4:	f8 cf       	rjmp	.-16     	; 0x18d6 <hal_spi_read+0x20>
 * drive radio NSS pin (0=low, 1=high).
 */
void hal_pin_nss (u1_t val)
{
	if(val ==1)
		NSS_PORT |= (1 << NSS_PIN);
    18e6:	2a 9a       	sbi	0x05, 2	; 5
}

void hal_spi_read(u1_t cmd, u1_t* buf, size_t len)
{
	hal_spi_trx(cmd, buf, len, 1);
}
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	ff 90       	pop	r15
    18f2:	08 95       	ret

000018f4 <hal_disableIRQs>:

void hal_disableIRQs (void)
{
	cli();
    18f4:	f8 94       	cli
    18f6:	08 95       	ret

000018f8 <hal_enableIRQs>:
}

void hal_enableIRQs (void)
{
	sei();
    18f8:	78 94       	sei
    18fa:	08 95       	ret

000018fc <hal_sleep>:
}

void hal_sleep (void)
{
	asm("sleep");
    18fc:	88 95       	sleep
    18fe:	08 95       	ret

00001900 <hal_ticks>:
}

u4_t hal_ticks (void)
{
	cli();
    1900:	f8 94       	cli
	u4_t t = hal_time;
    1902:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <hal_time>
    1906:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <hal_time+0x1>
    190a:	a0 91 b6 02 	lds	r26, 0x02B6	; 0x8002b6 <hal_time+0x2>
    190e:	b0 91 b7 02 	lds	r27, 0x02B7	; 0x8002b7 <hal_time+0x3>
	u1_t cnt = TCNT0;
    1912:	26 b5       	in	r18, 0x26	; 38
	sei();
    1914:	78 94       	sei
	return (t << 8) | cnt;
    1916:	ba 2f       	mov	r27, r26
    1918:	a9 2f       	mov	r26, r25
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	62 2b       	or	r22, r18
}
    1924:	08 95       	ret

00001926 <hal_waitUntil>:
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    return (u2_t)d;
}

void hal_waitUntil (u4_t time)
{
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	6b 01       	movw	r12, r22
    1930:	7c 01       	movw	r14, r24
}


// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
    u4_t t = hal_ticks();
    1932:	0e 94 80 0c 	call	0x1900	; 0x1900 <hal_ticks>
    s4_t d = time - t;
    1936:	a7 01       	movw	r20, r14
    1938:	96 01       	movw	r18, r12
    193a:	26 1b       	sub	r18, r22
    193c:	37 0b       	sbc	r19, r23
    193e:	48 0b       	sbc	r20, r24
    1940:	59 0b       	sbc	r21, r25
    1942:	da 01       	movw	r26, r20
    1944:	c9 01       	movw	r24, r18
    if( d<=0 ) return 0;    // in the past
    1946:	12 16       	cp	r1, r18
    1948:	13 06       	cpc	r1, r19
    194a:	14 06       	cpc	r1, r20
    194c:	15 06       	cpc	r1, r21
    194e:	5c f4       	brge	.+22     	; 0x1966 <hal_waitUntil+0x40>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    1950:	ad 01       	movw	r20, r26
    1952:	77 27       	eor	r23, r23
    1954:	57 fd       	sbrc	r21, 7
    1956:	70 95       	com	r23
    1958:	67 2f       	mov	r22, r23
    195a:	45 2b       	or	r20, r21
    195c:	46 2b       	or	r20, r22
    195e:	47 2b       	or	r20, r23
    1960:	41 f7       	brne	.-48     	; 0x1932 <hal_waitUntil+0xc>
    return (u2_t)d;
}

void hal_waitUntil (u4_t time)
{
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
    1962:	89 2b       	or	r24, r25
    1964:	31 f7       	brne	.-52     	; 0x1932 <hal_waitUntil+0xc>
}
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	08 95       	ret

00001970 <hal_checkTimer>:

u2_t hal_checkTimer (u4_t targettime)
{
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
}


// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
    u4_t t = hal_ticks();
    1980:	0e 94 80 0c 	call	0x1900	; 0x1900 <hal_ticks>
    s4_t d = time - t;
    1984:	97 01       	movw	r18, r14
    1986:	86 01       	movw	r16, r12
    1988:	06 1b       	sub	r16, r22
    198a:	17 0b       	sbc	r17, r23
    198c:	28 0b       	sbc	r18, r24
    198e:	39 0b       	sbc	r19, r25
    if( d<=0 ) return 0;    // in the past
    1990:	10 16       	cp	r1, r16
    1992:	11 06       	cpc	r1, r17
    1994:	12 06       	cpc	r1, r18
    1996:	13 06       	cpc	r1, r19
    1998:	84 f4       	brge	.+32     	; 0x19ba <hal_checkTimer+0x4a>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
    199a:	c9 01       	movw	r24, r18
    199c:	bb 27       	eor	r27, r27
    199e:	97 fd       	sbrc	r25, 7
    19a0:	b0 95       	com	r27
    19a2:	ab 2f       	mov	r26, r27
    19a4:	89 2b       	or	r24, r25
    19a6:	8a 2b       	or	r24, r26
    19a8:	8b 2b       	or	r24, r27
    19aa:	49 f4       	brne	.+18     	; 0x19be <hal_checkTimer+0x4e>

u2_t hal_checkTimer (u4_t targettime)
{
	u2_t dt;
	if((dt = deltaticks(targettime)) < 5)
		return 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	05 30       	cpi	r16, 0x05	; 5
    19b2:	11 05       	cpc	r17, r1
    19b4:	30 f0       	brcs	.+12     	; 0x19c2 <hal_checkTimer+0x52>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	04 c0       	rjmp	.+8      	; 0x19c2 <hal_checkTimer+0x52>
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <hal_checkTimer+0x50>
	else return 0;
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
}
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	08 95       	ret

000019d0 <hal_failed>:
    19d0:	08 95       	ret

000019d2 <hal_deep_sleep>:
{

}

void hal_deep_sleep (u2_t ticks)
{
    19d2:	08 95       	ret

000019d4 <hal_deep_sleep4ever>:

}

void hal_deep_sleep4ever (void)
{
    19d4:	08 95       	ret

000019d6 <__vector_16>:

}

ISR(TIMER0_OVF_vect)
{
    19d6:	1f 92       	push	r1
    19d8:	0f 92       	push	r0
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	0f 92       	push	r0
    19de:	11 24       	eor	r1, r1
    19e0:	8f 93       	push	r24
    19e2:	9f 93       	push	r25
    19e4:	af 93       	push	r26
    19e6:	bf 93       	push	r27
	hal_time++;
    19e8:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <hal_time>
    19ec:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <hal_time+0x1>
    19f0:	a0 91 b6 02 	lds	r26, 0x02B6	; 0x8002b6 <hal_time+0x2>
    19f4:	b0 91 b7 02 	lds	r27, 0x02B7	; 0x8002b7 <hal_time+0x3>
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	a1 1d       	adc	r26, r1
    19fc:	b1 1d       	adc	r27, r1
    19fe:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <hal_time>
    1a02:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <hal_time+0x1>
    1a06:	a0 93 b6 02 	sts	0x02B6, r26	; 0x8002b6 <hal_time+0x2>
    1a0a:	b0 93 b7 02 	sts	0x02B7, r27	; 0x8002b7 <hal_time+0x3>
}
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <__vector_20>:

ISR(USART_TX_vect)
{
    1a20:	1f 92       	push	r1
    1a22:	0f 92       	push	r0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	0f 92       	push	r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	8f 93       	push	r24
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
	if (tx_countbuffer) 
    1a30:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tx_countbuffer>
    1a34:	88 23       	and	r24, r24
    1a36:	c1 f0       	breq	.+48     	; 0x1a68 <__vector_20+0x48>
	{
		UDR0 = usart_tx_buffer[tx_tailbuffer];
    1a38:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <tx_tailbuffer>
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	e9 5f       	subi	r30, 0xF9	; 249
    1a40:	fd 4f       	sbci	r31, 0xFD	; 253
    1a42:	80 81       	ld	r24, Z
    1a44:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
		tx_countbuffer--;
    1a48:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <tx_countbuffer>
    1a4c:	81 50       	subi	r24, 0x01	; 1
    1a4e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <tx_countbuffer>
		tx_tailbuffer++;
    1a52:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tx_tailbuffer>
    1a56:	8f 5f       	subi	r24, 0xFF	; 255
    1a58:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tx_tailbuffer>
		if(tx_tailbuffer == USART_TX_BUFFER_SIZE)
    1a5c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <tx_tailbuffer>
    1a60:	84 31       	cpi	r24, 0x14	; 20
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <__vector_20+0x48>
			tx_tailbuffer = 0;
    1a64:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <tx_tailbuffer>
	}
}
    1a68:	ff 91       	pop	r31
    1a6a:	ef 91       	pop	r30
    1a6c:	8f 91       	pop	r24
    1a6e:	0f 90       	pop	r0
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	0f 90       	pop	r0
    1a74:	1f 90       	pop	r1
    1a76:	18 95       	reti

00001a78 <__vector_1>:

extern void radio_irq_handler(u1_t dio);

ISR(INT0_vect)
{
    1a78:	1f 92       	push	r1
    1a7a:	0f 92       	push	r0
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	0f 92       	push	r0
    1a80:	11 24       	eor	r1, r1
    1a82:	2f 93       	push	r18
    1a84:	3f 93       	push	r19
    1a86:	4f 93       	push	r20
    1a88:	5f 93       	push	r21
    1a8a:	6f 93       	push	r22
    1a8c:	7f 93       	push	r23
    1a8e:	8f 93       	push	r24
    1a90:	9f 93       	push	r25
    1a92:	af 93       	push	r26
    1a94:	bf 93       	push	r27
    1a96:	ef 93       	push	r30
    1a98:	ff 93       	push	r31
	/* usart_putstr("Int0\r\n"); */
	radio_irq_handler(0);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	0e 94 33 10 	call	0x2066	; 0x2066 <radio_irq_handler>
}
    1aa0:	ff 91       	pop	r31
    1aa2:	ef 91       	pop	r30
    1aa4:	bf 91       	pop	r27
    1aa6:	af 91       	pop	r26
    1aa8:	9f 91       	pop	r25
    1aaa:	8f 91       	pop	r24
    1aac:	7f 91       	pop	r23
    1aae:	6f 91       	pop	r22
    1ab0:	5f 91       	pop	r21
    1ab2:	4f 91       	pop	r20
    1ab4:	3f 91       	pop	r19
    1ab6:	2f 91       	pop	r18
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0
    1abe:	1f 90       	pop	r1
    1ac0:	18 95       	reti

00001ac2 <__vector_5>:

ISR(PCINT2_vect)
{
    1ac2:	1f 92       	push	r1
    1ac4:	0f 92       	push	r0
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	0f 92       	push	r0
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 93       	push	r18
    1ace:	3f 93       	push	r19
    1ad0:	4f 93       	push	r20
    1ad2:	5f 93       	push	r21
    1ad4:	6f 93       	push	r22
    1ad6:	7f 93       	push	r23
    1ad8:	8f 93       	push	r24
    1ada:	9f 93       	push	r25
    1adc:	af 93       	push	r26
    1ade:	bf 93       	push	r27
    1ae0:	ef 93       	push	r30
    1ae2:	ff 93       	push	r31
	if(PIND & (1 << PORTD5))
    1ae4:	4d 9b       	sbis	0x09, 5	; 9
    1ae6:	03 c0       	rjmp	.+6      	; 0x1aee <__vector_5+0x2c>
		radio_irq_handler(1);
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	0e 94 33 10 	call	0x2066	; 0x2066 <radio_irq_handler>
}
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	d8 2f       	mov	r29, r24
    1b16:	c6 2f       	mov	r28, r22
    hal_pin_nss(0);
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
    hal_spi(addr | 0x80);
    1b1e:	8d 2f       	mov	r24, r29
    1b20:	80 68       	ori	r24, 0x80	; 128
    1b22:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    hal_spi(data);
    1b26:	8c 2f       	mov	r24, r28
    1b28:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    hal_pin_nss(1);
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28

static void writeReg (u1_t addr, u1_t data ) {
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    hal_spi(data);
    hal_pin_nss(1);
    1b32:	0c 94 25 0c 	jmp	0x184a	; 0x184a <hal_pin_nss>

00001b36 <configLoraModem>:
#endif
    writeReg(RegOpMode, u);
}

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    sf_t sf = getSf(LMIC.rps);
    1b3a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    1b3e:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <LMIC+0xf>
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    1b42:	d8 2f       	mov	r29, r24
    1b44:	d7 70       	andi	r29, 0x07	; 7

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;

        switch (getBw(LMIC.rps)) {
    1b46:	53 e0       	ldi	r21, 0x03	; 3
    1b48:	96 95       	lsr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	5a 95       	dec	r21
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <configLoraModem+0x12>
    1b50:	83 70       	andi	r24, 0x03	; 3
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	29 f0       	breq	.+10     	; 0x1b60 <configLoraModem+0x2a>
    1b56:	50 f0       	brcs	.+20     	; 0x1b6c <configLoraModem+0x36>
    1b58:	82 30       	cpi	r24, 0x02	; 2
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <configLoraModem+0x2e>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
    1b5c:	80 e9       	ldi	r24, 0x90	; 144
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <configLoraModem+0x38>
#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;

        switch (getBw(LMIC.rps)) {
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
    1b60:	80 e8       	ldi	r24, 0x80	; 128
    1b62:	05 c0       	rjmp	.+10     	; 0x1b6e <configLoraModem+0x38>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
    1b64:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
    sf_t sf = getSf(LMIC.rps);

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <configLoraModem+0x38>

        switch (getBw(LMIC.rps)) {
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
    1b6c:	80 e7       	ldi	r24, 0x70	; 112
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
        }
        switch( getCr(LMIC.rps) ) {
    1b6e:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <LMIC+0xe>
    1b72:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <LMIC+0xf>
    1b76:	9b 01       	movw	r18, r22
    1b78:	45 e0       	ldi	r20, 0x05	; 5
    1b7a:	36 95       	lsr	r19
    1b7c:	27 95       	ror	r18
    1b7e:	4a 95       	dec	r20
    1b80:	e1 f7       	brne	.-8      	; 0x1b7a <configLoraModem+0x44>
    1b82:	23 70       	andi	r18, 0x03	; 3
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
    1b84:	c8 2f       	mov	r28, r24
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
        default:
            ASSERT(0);
        }
        switch( getCr(LMIC.rps) ) {
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	41 f0       	breq	.+16     	; 0x1b9a <configLoraModem+0x64>
    1b8a:	23 30       	cpi	r18, 0x03	; 3
    1b8c:	41 f0       	breq	.+16     	; 0x1b9e <configLoraModem+0x68>
    1b8e:	21 30       	cpi	r18, 0x01	; 1
    1b90:	11 f0       	breq	.+4      	; 0x1b96 <configLoraModem+0x60>
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
    1b92:	c2 60       	ori	r28, 0x02	; 2
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <configLoraModem+0x6a>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
    1b96:	c4 60       	ori	r28, 0x04	; 4
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <configLoraModem+0x6a>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
    1b9a:	c6 60       	ori	r28, 0x06	; 6
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <configLoraModem+0x6a>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
    1b9e:	c8 60       	ori	r28, 0x08	; 8
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
    1ba0:	67 2f       	mov	r22, r23
    1ba2:	77 27       	eor	r23, r23
        default:
            ASSERT(0);
        }

        if (getIh(LMIC.rps)) {
    1ba4:	61 15       	cp	r22, r1
    1ba6:	71 05       	cpc	r23, r1
    1ba8:	21 f0       	breq	.+8      	; 0x1bb2 <configLoraModem+0x7c>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
    1baa:	c1 60       	ori	r28, 0x01	; 1
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
    1bac:	82 e2       	ldi	r24, 0x22	; 34
    1bae:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
    1bb2:	6c 2f       	mov	r22, r28
    1bb4:	8d e1       	ldi	r24, 0x1D	; 29
    1bb6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
    1bba:	6d 2f       	mov	r22, r29
    1bbc:	62 95       	swap	r22
    1bbe:	60 7f       	andi	r22, 0xF0	; 240
    1bc0:	60 5a       	subi	r22, 0xA0	; 160
        if (getNocrc(LMIC.rps) == 0) {
    1bc2:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    1bc6:	87 ff       	sbrs	r24, 7
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
    1bc8:	64 60       	ori	r22, 0x04	; 4
        }
        writeReg(LORARegModemConfig2, mc2);
    1bca:	8e e1       	ldi	r24, 0x1E	; 30
    1bcc:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
    1bd0:	d5 50       	subi	r29, 0x05	; 5
    1bd2:	d2 30       	cpi	r29, 0x02	; 2
    1bd4:	68 f4       	brcc	.+26     	; 0x1bf0 <configLoraModem+0xba>
    1bd6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    1bda:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <LMIC+0xf>
    1bde:	23 e0       	ldi	r18, 0x03	; 3
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	2a 95       	dec	r18
    1be6:	e1 f7       	brne	.-8      	; 0x1be0 <configLoraModem+0xaa>
    1be8:	83 70       	andi	r24, 0x03	; 3
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <configLoraModem+0xba>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
    1bec:	6c e0       	ldi	r22, 0x0C	; 12
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <configLoraModem+0xbc>
        if (getNocrc(LMIC.rps) == 0) {
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
        }
        writeReg(LORARegModemConfig2, mc2);
        
        mc3 = SX1276_MC3_AGCAUTO;
    1bf0:	64 e0       	ldi	r22, 0x04	; 4
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
        }
        writeReg(LORARegModemConfig3, mc3);
    1bf2:	86 e2       	ldi	r24, 0x26	; 38
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
        
        mc3 = SX1276_MC3_AGCAUTO;
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
        }
        writeReg(LORARegModemConfig3, mc3);
    1bf8:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <writeReg>

00001bfc <configChannel>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}

static void configChannel () {
    1bfc:	af 92       	push	r10
    1bfe:	bf 92       	push	r11
    1c00:	cf 92       	push	r12
    1c02:	df 92       	push	r13
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
    1c10:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <LMIC+0x8>
    1c14:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <LMIC+0x9>
    1c18:	a0 91 c2 02 	lds	r26, 0x02C2	; 0x8002c2 <LMIC+0xa>
    1c1c:	b0 91 c3 02 	lds	r27, 0x02C3	; 0x8002c3 <LMIC+0xb>
    1c20:	9c 01       	movw	r18, r24
    1c22:	ad 01       	movw	r20, r26
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 e0       	ldi	r23, 0x00	; 0
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	03 e1       	ldi	r16, 0x13	; 19
    1c2e:	0e 94 c6 33 	call	0x678c	; 0x678c <__ashldi3>
    1c32:	a1 2c       	mov	r10, r1
    1c34:	e8 e4       	ldi	r30, 0x48	; 72
    1c36:	be 2e       	mov	r11, r30
    1c38:	f8 ee       	ldi	r31, 0xE8	; 232
    1c3a:	cf 2e       	mov	r12, r31
    1c3c:	dd 24       	eor	r13, r13
    1c3e:	d3 94       	inc	r13
    1c40:	e1 2c       	mov	r14, r1
    1c42:	f1 2c       	mov	r15, r1
    1c44:	00 e0       	ldi	r16, 0x00	; 0
    1c46:	10 e0       	ldi	r17, 0x00	; 0
    1c48:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivdi3>
    1c4c:	c2 2f       	mov	r28, r18
    1c4e:	b3 2e       	mov	r11, r19
    1c50:	6a 01       	movw	r12, r20
    1c52:	7b 01       	movw	r14, r22
    1c54:	18 2f       	mov	r17, r24
    1c56:	d9 2f       	mov	r29, r25
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
    1c58:	00 e1       	ldi	r16, 0x10	; 16
    1c5a:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <__lshrdi3>
    1c5e:	62 2f       	mov	r22, r18
    1c60:	86 e0       	ldi	r24, 0x06	; 6
    1c62:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
    1c66:	2c 2f       	mov	r18, r28
    1c68:	3b 2d       	mov	r19, r11
    1c6a:	a6 01       	movw	r20, r12
    1c6c:	b7 01       	movw	r22, r14
    1c6e:	81 2f       	mov	r24, r17
    1c70:	9d 2f       	mov	r25, r29
    1c72:	08 e0       	ldi	r16, 0x08	; 8
    1c74:	0e 94 e1 33 	call	0x67c2	; 0x67c2 <__lshrdi3>
    1c78:	62 2f       	mov	r22, r18
    1c7a:	87 e0       	ldi	r24, 0x07	; 7
    1c7c:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
    1c80:	6c 2f       	mov	r22, r28
    1c82:	88 e0       	ldi	r24, 0x08	; 8
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	cf 90       	pop	r12
    1c94:	bf 90       	pop	r11
    1c96:	af 90       	pop	r10
static void configChannel () {
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
    1c98:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <writeReg>

00001c9c <readReg>:
    hal_spi(addr | 0x80);
    hal_spi(data);
    hal_pin_nss(1);
}

static u1_t readReg (u1_t addr) {
    1c9c:	cf 93       	push	r28
    1c9e:	c8 2f       	mov	r28, r24
    hal_pin_nss(0);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
    hal_spi(addr & 0x7F);
    1ca6:	8c 2f       	mov	r24, r28
    1ca8:	8f 77       	andi	r24, 0x7F	; 127
    1caa:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    u1_t val = hal_spi(0x00);
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    1cb4:	c8 2f       	mov	r28, r24
    hal_pin_nss(1);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
    return val;
}
    1cbc:	8c 2f       	mov	r24, r28
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <opmode>:
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
}

static void opmode (u1_t mode) {
    1cc2:	cf 93       	push	r28
    1cc4:	c8 2f       	mov	r28, r24
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1ccc:	88 7f       	andi	r24, 0xF8	; 248
    1cce:	68 2f       	mov	r22, r24
    1cd0:	6c 2b       	or	r22, r28
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
}
    1cd4:	cf 91       	pop	r28
    }
    hal_pin_nss(1);
}

static void opmode (u1_t mode) {
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
    1cd6:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <writeReg>

00001cda <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
    1cda:	cf 93       	push	r28
    1cdc:	c8 2f       	mov	r28, r24
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    1cde:	68 e8       	ldi	r22, 0x88	; 136
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
    // select LoRa modem (from sleep mode)
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1cec:	87 ff       	sbrs	r24, 7
    1cee:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
    1cf8:	c2 30       	cpi	r28, 0x02	; 2
    1cfa:	49 f4       	brne	.+18     	; 0x1d0e <rxlora+0x34>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
    1cfc:	6a e0       	ldi	r22, 0x0A	; 10
    1cfe:	8d e1       	ldi	r24, 0x1D	; 29
    1d00:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
    1d04:	60 e7       	ldi	r22, 0x70	; 112
    1d06:	8e e1       	ldi	r24, 0x1E	; 30
    1d08:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <rxlora+0x3c>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
    1d0e:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <configLoraModem>
        // configure frequency
        configChannel();
    1d12:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
    1d16:	61 e2       	ldi	r22, 0x21	; 33
    1d18:	8c e0       	ldi	r24, 0x0C	; 12
    1d1a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
    1d1e:	60 e4       	ldi	r22, 0x40	; 64
    1d20:	83 e2       	ldi	r24, 0x23	; 35
    1d22:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
    1d26:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <LMIC+0x19b>
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <rxlora+0x60>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
    1d2e:	83 e3       	ldi	r24, 0x33	; 51
    1d30:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1d34:	68 2f       	mov	r22, r24
    1d36:	6f 7b       	andi	r22, 0xBF	; 191
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <rxlora+0x6a>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
    1d3a:	83 e3       	ldi	r24, 0x33	; 51
    1d3c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1d40:	68 2f       	mov	r22, r24
    1d42:	60 64       	ori	r22, 0x40	; 64
    1d44:	83 e3       	ldi	r24, 0x33	; 51
    1d46:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
    1d4a:	60 91 c8 02 	lds	r22, 0x02C8	; 0x8002c8 <LMIC+0x10>
    1d4e:	8f e1       	ldi	r24, 0x1F	; 31
    1d50:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    1d54:	64 e3       	ldi	r22, 0x34	; 52
    1d56:	89 e3       	ldi	r24, 0x39	; 57
    1d58:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
    1d5c:	60 ec       	ldi	r22, 0xC0	; 192
    1d5e:	80 e4       	ldi	r24, 0x40	; 64
    1d60:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    1d64:	6f ef       	ldi	r22, 0xFF	; 255
    1d66:	82 e1       	ldi	r24, 0x12	; 18
    1d68:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
    1d6c:	ec 2f       	mov	r30, r28
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	ef 59       	subi	r30, 0x9F	; 159
    1d72:	fe 4f       	sbci	r31, 0xFE	; 254
    1d74:	60 81       	ld	r22, Z
    1d76:	60 95       	com	r22
    1d78:	81 e1       	ldi	r24, 0x11	; 17
    1d7a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0e 94 2b 0c 	call	0x1856	; 0x1856 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
    1d84:	c1 11       	cpse	r28, r1
    1d86:	0c c0       	rjmp	.+24     	; 0x1da0 <rxlora+0xc6>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    1d88:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <LMIC+0x4>
    1d8c:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <LMIC+0x5>
    1d90:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <LMIC+0x6>
    1d94:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <LMIC+0x7>
    1d98:	0e 94 93 0c 	call	0x1926	; 0x1926 <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
    1d9c:	86 e0       	ldi	r24, 0x06	; 6
    1d9e:	01 c0       	rjmp	.+2      	; 0x1da2 <rxlora+0xc8>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    1da0:	85 e0       	ldi	r24, 0x05	; 5
    }
}
    1da2:	cf 91       	pop	r28
    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
        opmode(OPMODE_RX_SINGLE);
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    1da4:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <opmode>

00001da8 <configPower>:


static void configPower () {
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
    1da8:	60 91 ca 02 	lds	r22, 0x02CA	; 0x8002ca <LMIC+0x12>
    if(pw >= 17) {
    1dac:	61 31       	cpi	r22, 0x11	; 17
    1dae:	24 f4       	brge	.+8      	; 0x1db8 <configPower+0x10>
        pw = 15;
    } else if(pw < 2) {
    1db0:	62 30       	cpi	r22, 0x02	; 2
    1db2:	1c f4       	brge	.+6      	; 0x1dba <configPower+0x12>
        pw = 2;
    1db4:	62 e0       	ldi	r22, 0x02	; 2
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <configPower+0x12>
static void configPower () {
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
    if(pw >= 17) {
        pw = 15;
    1db8:	6f e0       	ldi	r22, 0x0F	; 15
    } else if(pw < 2) {
        pw = 2;
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
    1dba:	6f 70       	andi	r22, 0x0F	; 15
    1dbc:	60 68       	ori	r22, 0x80	; 128
    1dbe:	89 e0       	ldi	r24, 0x09	; 9
    1dc0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
    1dc4:	8a e5       	ldi	r24, 0x5A	; 90
    1dc6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1dca:	68 2f       	mov	r22, r24
    1dcc:	64 60       	ori	r22, 0x04	; 4
    1dce:	8a e5       	ldi	r24, 0x5A	; 90
    1dd0:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <writeReg>

00001dd4 <startrx>:
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    opmode(OPMODE_RX); // no single rx mode available in FSK
}

static void startrx (u1_t rxmode) {
    1dd4:	cf 93       	push	r28
    1dd6:	c8 2f       	mov	r28, r24
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1dde:	87 70       	andi	r24, 0x07	; 7
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <startrx+0x12>
    1de2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    1de6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    1dea:	87 70       	andi	r24, 0x07	; 7
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <startrx+0x1c>
    1dee:	67 c0       	rjmp	.+206    	; 0x1ebe <startrx+0xea>
    }
}

static void rxfsk (u1_t rxmode) {
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
    1df0:	c1 11       	cpse	r28, r1
    1df2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
static void opmodeFSK() {
    u1_t u = 0;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    1df6:	68 e0       	ldi	r22, 0x08	; 8
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1e04:	87 fd       	sbrc	r24, 7
    1e06:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    // configure frequency
    configChannel();
    1e10:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
    1e14:	61 e2       	ldi	r22, 0x21	; 33
    1e16:	8c e0       	ldi	r24, 0x0C	; 12
    1e18:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
    1e1c:	6e e1       	ldi	r22, 0x1E	; 30
    1e1e:	8d e0       	ldi	r24, 0x0D	; 13
    1e20:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
    1e24:	6b e0       	ldi	r22, 0x0B	; 11
    1e26:	82 e1       	ldi	r24, 0x12	; 18
    1e28:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
    1e2c:	62 e1       	ldi	r22, 0x12	; 18
    1e2e:	83 e1       	ldi	r24, 0x13	; 19
    1e30:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
    1e34:	6a ea       	ldi	r22, 0xAA	; 170
    1e36:	8f e1       	ldi	r24, 0x1F	; 31
    1e38:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
    1e3c:	62 e1       	ldi	r22, 0x12	; 18
    1e3e:	87 e2       	ldi	r24, 0x27	; 39
    1e40:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
    1e44:	68 ed       	ldi	r22, 0xD8	; 216
    1e46:	80 e3       	ldi	r24, 0x30	; 48
    1e48:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
    1e4c:	60 e4       	ldi	r22, 0x40	; 64
    1e4e:	81 e3       	ldi	r24, 0x31	; 49
    1e50:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
    1e54:	61 ec       	ldi	r22, 0xC1	; 193
    1e56:	88 e2       	ldi	r24, 0x28	; 40
    1e58:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    1e5c:	64 e9       	ldi	r22, 0x94	; 148
    1e5e:	89 e2       	ldi	r24, 0x29	; 41
    1e60:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    1e64:	61 ec       	ldi	r22, 0xC1	; 193
    1e66:	8a e2       	ldi	r24, 0x2A	; 42
    1e68:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
    1e6c:	6f ef       	ldi	r22, 0xFF	; 255
    1e6e:	81 e2       	ldi	r24, 0x21	; 33
    1e70:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    1e74:	62 e0       	ldi	r22, 0x02	; 2
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    1e7c:	60 e8       	ldi	r22, 0x80	; 128
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    1e8c:	69 e9       	ldi	r22, 0x99	; 153
    1e8e:	85 e0       	ldi	r24, 0x05	; 5
    1e90:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
    1e94:	68 e3       	ldi	r22, 0x38	; 56
    1e96:	80 e4       	ldi	r24, 0x40	; 64
    1e98:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
    1e9e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    1ea2:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <LMIC+0x4>
    1ea6:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <LMIC+0x5>
    1eaa:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <LMIC+0x6>
    1eae:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <LMIC+0x7>
    1eb2:	0e 94 93 0c 	call	0x1926	; 0x1926 <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
    1eb6:	85 e0       	ldi	r24, 0x05	; 5
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
    1eb8:	cf 91       	pop	r28
    // enable antenna switch for RX
    hal_pin_rxtx(0);
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
    opmode(OPMODE_RX); // no single rx mode available in FSK
    1eba:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <opmode>
static void startrx (u1_t rxmode) {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    if(getSf(LMIC.rps) == FSK) { // FSK modem
        rxfsk(rxmode);
    } else { // LoRa modem
        rxlora(rxmode);
    1ebe:	8c 2f       	mov	r24, r28
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
    1ec0:	cf 91       	pop	r28
static void startrx (u1_t rxmode) {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    if(getSf(LMIC.rps) == FSK) { // FSK modem
        rxfsk(rxmode);
    } else { // LoRa modem
        rxlora(rxmode);
    1ec2:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <rxlora>

00001ec6 <readBuf.constprop.0>:
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
}

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    1ec6:	0f 93       	push	r16
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	d8 2f       	mov	r29, r24
    hal_pin_nss(0);
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
    hal_spi(addr & 0x7F);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    1edc:	09 ef       	ldi	r16, 0xF9	; 249
    1ede:	13 e0       	ldi	r17, 0x03	; 3
    for (u1_t i=0; i<len; i++) {
    1ee0:	c0 e0       	ldi	r28, 0x00	; 0
    1ee2:	cd 17       	cp	r28, r29
    1ee4:	41 f0       	breq	.+16     	; 0x1ef6 <readBuf.constprop.0+0x30>
        buf[i] = hal_spi(0x00);
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    1eec:	f8 01       	movw	r30, r16
    1eee:	81 93       	st	Z+, r24
    1ef0:	8f 01       	movw	r16, r30
}

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    hal_pin_nss(0);
    hal_spi(addr & 0x7F);
    for (u1_t i=0; i<len; i++) {
    1ef2:	cf 5f       	subi	r28, 0xFF	; 255
    1ef4:	f6 cf       	rjmp	.-20     	; 0x1ee2 <readBuf.constprop.0+0x1c>
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    hal_pin_nss(0);
    hal_spi(addr & 0x7F);
    for (u1_t i=0; i<len; i++) {
        buf[i] = hal_spi(0x00);
    }
    hal_pin_nss(1);
    1f00:	0c 94 25 0c 	jmp	0x184a	; 0x184a <hal_pin_nss>

00001f04 <writeBuf.constprop.1>:
    u1_t val = hal_spi(0x00);
    hal_pin_nss(1);
    return val;
}

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	d8 2f       	mov	r29, r24
    hal_pin_nss(0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	0e 94 25 0c 	call	0x184a	; 0x184a <hal_pin_nss>
    hal_spi(addr | 0x80);
    1f14:	80 e8       	ldi	r24, 0x80	; 128
    1f16:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
    1f1a:	09 ef       	ldi	r16, 0xF9	; 249
    1f1c:	13 e0       	ldi	r17, 0x03	; 3
    for (u1_t i=0; i<len; i++) {
    1f1e:	c0 e0       	ldi	r28, 0x00	; 0
    1f20:	cd 17       	cp	r28, r29
    1f22:	39 f0       	breq	.+14     	; 0x1f32 <writeBuf.constprop.1+0x2e>
        hal_spi(buf[i]);
    1f24:	f8 01       	movw	r30, r16
    1f26:	81 91       	ld	r24, Z+
    1f28:	8f 01       	movw	r16, r30
    1f2a:	0e 94 37 0c 	call	0x186e	; 0x186e <hal_spi>
}

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    for (u1_t i=0; i<len; i++) {
    1f2e:	cf 5f       	subi	r28, 0xFF	; 255
    1f30:	f7 cf       	rjmp	.-18     	; 0x1f20 <writeBuf.constprop.1+0x1c>
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    hal_pin_nss(0);
    hal_spi(addr | 0x80);
    for (u1_t i=0; i<len; i++) {
        hal_spi(buf[i]);
    }
    hal_pin_nss(1);
    1f3c:	0c 94 25 0c 	jmp	0x184a	; 0x184a <hal_pin_nss>

00001f40 <radio_init>:
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}

// get random seed from wideband noise rssi
void radio_init () {
    1f40:	af 92       	push	r10
    1f42:	bf 92       	push	r11
    1f44:	cf 92       	push	r12
    1f46:	df 92       	push	r13
    1f48:	ef 92       	push	r14
    1f4a:	ff 92       	push	r15
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    hal_disableIRQs();
    1f52:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 2c 0c 	call	0x1858	; 0x1858 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
    1f5c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    1f60:	61 5e       	subi	r22, 0xE1	; 225
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	0e 94 93 0c 	call	0x1926	; 0x1926 <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
    1f72:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    1f76:	64 56       	subi	r22, 0x64	; 100
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	0e 94 93 0c 	call	0x1926	; 0x1926 <hal_waitUntil>

    opmode(OPMODE_SLEEP);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
    1f88:	82 e4       	ldi	r24, 0x42	; 66
    1f8a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
    1f8e:	82 31       	cpi	r24, 0x12	; 18
    1f90:	11 f0       	breq	.+4      	; 0x1f96 <radio_init+0x56>
    1f92:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1fa2:	87 70       	andi	r24, 0x07	; 7
    1fa4:	85 30       	cpi	r24, 0x05	; 5
    1fa6:	d1 f7       	brne	.-12     	; 0x1f9c <radio_init+0x5c>
    1fa8:	cb e1       	ldi	r28, 0x1B	; 27
    1faa:	d2 e0       	ldi	r29, 0x02	; 2
    1fac:	9a e2       	ldi	r25, 0x2A	; 42
    1fae:	a9 2e       	mov	r10, r25
    1fb0:	92 e0       	ldi	r25, 0x02	; 2
    1fb2:	b9 2e       	mov	r11, r25
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}

// get random seed from wideband noise rssi
void radio_init () {
    1fb4:	88 e0       	ldi	r24, 0x08	; 8
    1fb6:	e8 2e       	mov	r14, r24
    1fb8:	f1 2c       	mov	r15, r1
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
        for(int j=0; j<8; j++) {
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
    1fba:	8c e2       	ldi	r24, 0x2C	; 44
    1fbc:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1fc0:	18 2f       	mov	r17, r24
    1fc2:	11 70       	andi	r17, 0x01	; 1
    1fc4:	8c e2       	ldi	r24, 0x2C	; 44
    1fc6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    1fca:	21 2f       	mov	r18, r17
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	80 fb       	bst	r24, 0
    1fd0:	cc 24       	eor	r12, r12
    1fd2:	c0 f8       	bld	r12, 0
    1fd4:	d1 2c       	mov	r13, r1
    1fd6:	2c 15       	cp	r18, r12
    1fd8:	3d 05       	cpc	r19, r13
    1fda:	79 f3       	breq	.-34     	; 0x1fba <radio_init+0x7a>
            randbuf[i] = (randbuf[i] << 1) | b;
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	88 0f       	add	r24, r24
    1fe0:	18 2b       	or	r17, r24
    1fe2:	19 83       	std	Y+1, r17	; 0x01
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	e8 1a       	sub	r14, r24
    1fe8:	f1 08       	sbc	r15, r1
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
        for(int j=0; j<8; j++) {
    1fea:	39 f7       	brne	.-50     	; 0x1fba <radio_init+0x7a>
    1fec:	21 96       	adiw	r28, 0x01	; 1
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
    for(int i=1; i<16; i++) {
    1fee:	ac 16       	cp	r10, r28
    1ff0:	bd 06       	cpc	r11, r29
    1ff2:	01 f7       	brne	.-64     	; 0x1fb4 <radio_init+0x74>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
            randbuf[i] = (randbuf[i] << 1) | b;
        }
    }
    randbuf[0] = 16; // set initial index
    1ff4:	80 e1       	ldi	r24, 0x10	; 16
    1ff6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <randbuf>
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>

    hal_enableIRQs();
}
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	1f 91       	pop	r17
    2006:	ff 90       	pop	r15
    2008:	ef 90       	pop	r14
    200a:	df 90       	pop	r13
    200c:	cf 90       	pop	r12
    200e:	bf 90       	pop	r11
    2010:	af 90       	pop	r10
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);

    hal_enableIRQs();
    2012:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <hal_enableIRQs>

00002016 <radio_rand1>:
}

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
    2016:	cf 93       	push	r28
    u1_t i = randbuf[0];
    2018:	c0 91 1b 02 	lds	r28, 0x021B	; 0x80021b <randbuf>
    ASSERT( i != 0 );
    201c:	c1 11       	cpse	r28, r1
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <radio_rand1+0x10>
    2020:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    2024:	0a c0       	rjmp	.+20     	; 0x203a <radio_rand1+0x24>
    if( i==16 ) {
    2026:	c0 31       	cpi	r28, 0x10	; 16
    2028:	41 f4       	brne	.+16     	; 0x203a <radio_rand1+0x24>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
    202a:	40 e1       	ldi	r20, 0x10	; 16
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	6b e1       	ldi	r22, 0x1B	; 27
    2030:	72 e0       	ldi	r23, 0x02	; 2
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
        i = 0;
    2038:	c0 e0       	ldi	r28, 0x00	; 0
    }
    u1_t v = randbuf[i++];
    203a:	ec 2f       	mov	r30, r28
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	e5 5e       	subi	r30, 0xE5	; 229
    2040:	fd 4f       	sbci	r31, 0xFD	; 253
    2042:	80 81       	ld	r24, Z
    randbuf[0] = i;
    2044:	cf 5f       	subi	r28, 0xFF	; 255
    2046:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <randbuf>
    return v;
}
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <radio_rssi>:

u1_t radio_rssi () {
    204e:	cf 93       	push	r28
    hal_disableIRQs();
    2050:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
    u1_t r = readReg(LORARegRssiValue);
    2054:	8b e1       	ldi	r24, 0x1B	; 27
    2056:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    205a:	c8 2f       	mov	r28, r24
    hal_enableIRQs();
    205c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <hal_enableIRQs>
    return r;
}
    2060:	8c 2f       	mov	r24, r28
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	cf 93       	push	r28
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
    2070:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    2074:	6b 01       	movw	r12, r22
    2076:	7c 01       	movw	r14, r24
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    207e:	87 ff       	sbrs	r24, 7
    2080:	65 c0       	rjmp	.+202    	; 0x214c <radio_irq_handler+0xe6>
        u1_t flags = readReg(LORARegIrqFlags);
    2082:	82 e1       	ldi	r24, 0x12	; 18
    2084:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
        if( flags & IRQ_LORA_TXDONE_MASK ) {
    2088:	83 ff       	sbrs	r24, 3
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <radio_irq_handler+0x42>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	c8 1a       	sub	r12, r24
    2090:	d1 08       	sbc	r13, r1
    2092:	e1 08       	sbc	r14, r1
    2094:	f1 08       	sbc	r15, r1
    2096:	c0 92 b8 02 	sts	0x02B8, r12	; 0x8002b8 <LMIC>
    209a:	d0 92 b9 02 	sts	0x02B9, r13	; 0x8002b9 <LMIC+0x1>
    209e:	e0 92 ba 02 	sts	0x02BA, r14	; 0x8002ba <LMIC+0x2>
    20a2:	f0 92 bb 02 	sts	0x02BB, r15	; 0x8002bb <LMIC+0x3>
    20a6:	49 c0       	rjmp	.+146    	; 0x213a <radio_irq_handler+0xd4>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
    20a8:	86 ff       	sbrs	r24, 6
    20aa:	44 c0       	rjmp	.+136    	; 0x2134 <radio_irq_handler+0xce>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
    20ac:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    20b0:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <LMIC+0xf>
    20b4:	9c 01       	movw	r18, r24
    20b6:	93 e0       	ldi	r25, 0x03	; 3
    20b8:	36 95       	lsr	r19
    20ba:	27 95       	ror	r18
    20bc:	9a 95       	dec	r25
    20be:	e1 f7       	brne	.-8      	; 0x20b8 <radio_irq_handler+0x52>
    20c0:	23 70       	andi	r18, 0x03	; 3
    20c2:	69 f4       	brne	.+26     	; 0x20de <radio_irq_handler+0x78>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
    20c4:	87 70       	andi	r24, 0x07	; 7
    20c6:	e8 2f       	mov	r30, r24
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	ed 5a       	subi	r30, 0xAD	; 173
    20d0:	fe 4f       	sbci	r31, 0xFE	; 254
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	c8 1a       	sub	r12, r24
    20d8:	d9 0a       	sbc	r13, r25
    20da:	e1 08       	sbc	r14, r1
    20dc:	f1 08       	sbc	r15, r1
            }
            LMIC.rxtime = now;
    20de:	c0 92 bc 02 	sts	0x02BC, r12	; 0x8002bc <LMIC+0x4>
    20e2:	d0 92 bd 02 	sts	0x02BD, r13	; 0x8002bd <LMIC+0x5>
    20e6:	e0 92 be 02 	sts	0x02BE, r14	; 0x8002be <LMIC+0x6>
    20ea:	f0 92 bf 02 	sts	0x02BF, r15	; 0x8002bf <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
    20ee:	8d e1       	ldi	r24, 0x1D	; 29
    20f0:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    20f4:	82 ff       	sbrs	r24, 2
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <radio_irq_handler+0x96>
    20f8:	82 e2       	ldi	r24, 0x22	; 34
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <radio_irq_handler+0x98>
    20fc:	83 e1       	ldi	r24, 0x13	; 19
    20fe:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    2102:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <LMIC+0x140>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
    2106:	80 e1       	ldi	r24, 0x10	; 16
    2108:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    210c:	68 2f       	mov	r22, r24
    210e:	8d e0       	ldi	r24, 0x0D	; 13
    2110:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    2114:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    2118:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
    211c:	89 e1       	ldi	r24, 0x19	; 25
    211e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    2122:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <LMIC+0xd>
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
    2126:	8a e1       	ldi	r24, 0x1A	; 26
    2128:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    212c:	8d 53       	subi	r24, 0x3D	; 61
    212e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <LMIC+0xc>
    2132:	03 c0       	rjmp	.+6      	; 0x213a <radio_irq_handler+0xd4>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
    2134:	87 fd       	sbrc	r24, 7
            // indicate timeout
            LMIC.dataLen = 0;
    2136:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
    213a:	6f ef       	ldi	r22, 0xFF	; 255
    213c:	81 e1       	ldi	r24, 0x11	; 17
    213e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
    2142:	6f ef       	ldi	r22, 0xFF	; 255
    2144:	82 e1       	ldi	r24, 0x12	; 18
    2146:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    214a:	2e c0       	rjmp	.+92     	; 0x21a8 <radio_irq_handler+0x142>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
    214c:	8e e3       	ldi	r24, 0x3E	; 62
    214e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    2152:	c8 2f       	mov	r28, r24
        u1_t flags2 = readReg(FSKRegIrqFlags2);
    2154:	8f e3       	ldi	r24, 0x3F	; 63
    2156:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
    215a:	83 ff       	sbrs	r24, 3
    215c:	09 c0       	rjmp	.+18     	; 0x2170 <radio_irq_handler+0x10a>
            // save exact tx time
            LMIC.txend = now;
    215e:	c0 92 b8 02 	sts	0x02B8, r12	; 0x8002b8 <LMIC>
    2162:	d0 92 b9 02 	sts	0x02B9, r13	; 0x8002b9 <LMIC+0x1>
    2166:	e0 92 ba 02 	sts	0x02BA, r14	; 0x8002ba <LMIC+0x2>
    216a:	f0 92 bb 02 	sts	0x02BB, r15	; 0x8002bb <LMIC+0x3>
    216e:	1c c0       	rjmp	.+56     	; 0x21a8 <radio_irq_handler+0x142>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
    2170:	82 ff       	sbrs	r24, 2
    2172:	14 c0       	rjmp	.+40     	; 0x219c <radio_irq_handler+0x136>
            // save exact rx time
            LMIC.rxtime = now;
    2174:	c0 92 bc 02 	sts	0x02BC, r12	; 0x8002bc <LMIC+0x4>
    2178:	d0 92 bd 02 	sts	0x02BD, r13	; 0x8002bd <LMIC+0x5>
    217c:	e0 92 be 02 	sts	0x02BE, r14	; 0x8002be <LMIC+0x6>
    2180:	f0 92 bf 02 	sts	0x02BF, r15	; 0x8002bf <LMIC+0x7>
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
    2184:	82 e3       	ldi	r24, 0x32	; 50
    2186:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    218a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <LMIC+0x140>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    218e:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <readBuf.constprop.0>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
    2192:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <LMIC+0xd>
            LMIC.rssi = 0; // determine rssi
    2196:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <LMIC+0xc>
    219a:	06 c0       	rjmp	.+12     	; 0x21a8 <radio_irq_handler+0x142>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
    219c:	c2 ff       	sbrs	r28, 2
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <radio_irq_handler+0x140>
            // indicate timeout
            LMIC.dataLen = 0;
    21a0:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    21a4:	01 c0       	rjmp	.+2      	; 0x21a8 <radio_irq_handler+0x142>
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <radio_irq_handler+0x140>
        } else {
            while(1);
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    21ae:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <LMIC+0x19>
    21b2:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <LMIC+0x1a>
    21b6:	8b ec       	ldi	r24, 0xCB	; 203
    21b8:	92 e0       	ldi	r25, 0x02	; 2
#endif /* ! CFG_TxContinuousMode */
}
    21ba:	cf 91       	pop	r28
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
    21c4:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <os_setCallback>

000021c8 <os_radio>:
#endif /* ! CFG_TxContinuousMode */
}

void os_radio (u1_t mode) {
    21c8:	cf 93       	push	r28
    21ca:	c8 2f       	mov	r28, r24
    hal_disableIRQs();
    21cc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <hal_disableIRQs>
    switch (mode) {
    21d0:	c1 30       	cpi	r28, 0x01	; 1
    21d2:	59 f0       	breq	.+22     	; 0x21ea <os_radio+0x22>
    21d4:	40 f0       	brcs	.+16     	; 0x21e6 <os_radio+0x1e>
    21d6:	c2 30       	cpi	r28, 0x02	; 2
    21d8:	09 f4       	brne	.+2      	; 0x21dc <os_radio+0x14>
    21da:	a7 c0       	rjmp	.+334    	; 0x232a <os_radio+0x162>
    21dc:	c3 30       	cpi	r28, 0x03	; 3
    21de:	09 f0       	breq	.+2      	; 0x21e2 <os_radio+0x1a>
    21e0:	a7 c0       	rjmp	.+334    	; 0x2330 <os_radio+0x168>
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	a3 c0       	rjmp	.+326    	; 0x232c <os_radio+0x164>
void os_radio (u1_t mode) {
    hal_disableIRQs();
    switch (mode) {
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	65 c0       	rjmp	.+202    	; 0x22b4 <os_radio+0xec>
    opmode(OPMODE_TX);
}

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    21f0:	87 70       	andi	r24, 0x07	; 7
    21f2:	11 f0       	breq	.+4      	; 0x21f8 <os_radio+0x30>
    21f4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
    21f8:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    21fc:	87 70       	andi	r24, 0x07	; 7
    21fe:	09 f0       	breq	.+2      	; 0x2202 <os_radio+0x3a>
    2200:	5c c0       	rjmp	.+184    	; 0x22ba <os_radio+0xf2>
#endif /* CFG_sx1272_radio */
}

static void txfsk () {
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
    2202:	60 e1       	ldi	r22, 0x10	; 16
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    2210:	80 31       	cpi	r24, 0x10	; 16
    2212:	11 f0       	breq	.+4      	; 0x2218 <os_radio+0x50>
    2214:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	82 e0       	ldi	r24, 0x02	; 2
    2222:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
    2226:	60 e8       	ldi	r22, 0x80	; 128
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
    222e:	61 e0       	ldi	r22, 0x01	; 1
    2230:	84 e0       	ldi	r24, 0x04	; 4
    2232:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
    2236:	69 e9       	ldi	r22, 0x99	; 153
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	85 e2       	ldi	r24, 0x25	; 37
    2242:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
    2246:	65 e0       	ldi	r22, 0x05	; 5
    2248:	86 e2       	ldi	r24, 0x26	; 38
    224a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
    224e:	62 e1       	ldi	r22, 0x12	; 18
    2250:	87 e2       	ldi	r24, 0x27	; 39
    2252:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
    2256:	60 ed       	ldi	r22, 0xD0	; 208
    2258:	80 e3       	ldi	r24, 0x30	; 48
    225a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
    225e:	60 e4       	ldi	r22, 0x40	; 64
    2260:	81 e3       	ldi	r24, 0x31	; 49
    2262:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
    2266:	61 ec       	ldi	r22, 0xC1	; 193
    2268:	88 e2       	ldi	r24, 0x28	; 40
    226a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
    226e:	64 e9       	ldi	r22, 0x94	; 148
    2270:	89 e2       	ldi	r24, 0x29	; 41
    2272:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
    2276:	61 ec       	ldi	r22, 0xC1	; 193
    2278:	8a e2       	ldi	r24, 0x2A	; 42
    227a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // configure frequency
    configChannel();
    227e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <configChannel>
    // configure output power
    configPower();
    2282:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
    2286:	64 e3       	ldi	r22, 0x34	; 52
    2288:	80 e4       	ldi	r24, 0x40	; 64
    228a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
    228e:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <LMIC+0x140>
    2292:	6f 5f       	subi	r22, 0xFF	; 255
    2294:	82 e3       	ldi	r24, 0x32	; 50
    2296:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
    229a:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <LMIC+0x140>
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
    22a4:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    22a8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <writeBuf.constprop.1>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 2b 0c 	call	0x1856	; 0x1856 <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    22b8:	3b c0       	rjmp	.+118    	; 0x2330 <os_radio+0x168>
static void opmodeLora() {
    u1_t u = OPMODE_LORA;
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
#endif
    writeReg(RegOpMode, u);
    22ba:	68 e8       	ldi	r22, 0x88	; 136
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

static void txlora () {
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    22c8:	87 ff       	sbrs	r24, 7
    22ca:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
    22d4:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <configLoraModem>
    // configure frequency
    configChannel();
    22d8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
    22dc:	8a e0       	ldi	r24, 0x0A	; 10
    22de:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <readReg>
    22e2:	80 7f       	andi	r24, 0xF0	; 240
    22e4:	68 2f       	mov	r22, r24
    22e6:	68 60       	ori	r22, 0x08	; 8
    22e8:	8a e0       	ldi	r24, 0x0A	; 10
    22ea:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    configPower();
    22ee:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
    22f2:	64 e3       	ldi	r22, 0x34	; 52
    22f4:	89 e3       	ldi	r24, 0x39	; 57
    22f6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
    22fa:	60 ef       	ldi	r22, 0xF0	; 240
    22fc:	80 e4       	ldi	r24, 0x40	; 64
    22fe:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
    2302:	6f ef       	ldi	r22, 0xFF	; 255
    2304:	82 e1       	ldi	r24, 0x12	; 18
    2306:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
    230a:	67 ef       	ldi	r22, 0xF7	; 247
    230c:	81 e1       	ldi	r24, 0x11	; 17
    230e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	8e e0       	ldi	r24, 0x0E	; 14
    2316:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	8d e0       	ldi	r24, 0x0D	; 13
    231e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
    2322:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <LMIC+0x140>
    2326:	82 e2       	ldi	r24, 0x22	; 34
    2328:	bb cf       	rjmp	.-138    	; 0x22a0 <os_radio+0xd8>
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
        break;
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
    232a:	80 e0       	ldi	r24, 0x00	; 0
        break;

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
    232c:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <startrx>
        break;
    }
    hal_enableIRQs();
}
    2330:	cf 91       	pop	r28
      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
        break;
    }
    hal_enableIRQs();
    2332:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <hal_enableIRQs>

00002336 <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
    2336:	4f 92       	push	r4
    2338:	5f 92       	push	r5
    233a:	6f 92       	push	r6
    233c:	7f 92       	push	r7
    233e:	8f 92       	push	r8
    2340:	9f 92       	push	r9
    2342:	af 92       	push	r10
    2344:	bf 92       	push	r11
    2346:	cf 92       	push	r12
    2348:	df 92       	push	r13
    234a:	ef 92       	push	r14
    234c:	ff 92       	push	r15
    234e:	e6 2f       	mov	r30, r22
    2350:	a0 91 66 03 	lds	r26, 0x0366	; 0x800366 <LMIC+0xae>
    2354:	b0 91 67 03 	lds	r27, 0x0367	; 0x800367 <LMIC+0xaf>
    2358:	80 90 68 03 	lds	r8, 0x0368	; 0x800368 <LMIC+0xb0>
    235c:	90 90 69 03 	lds	r9, 0x0369	; 0x800369 <LMIC+0xb1>
    ostime_t rxoff, err;
    if( secs==0 ) {
    2360:	81 11       	cpse	r24, r1
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <calcRxWindow+0x40>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
    2364:	6d 01       	movw	r12, r26
    2366:	bb 0f       	add	r27, r27
    2368:	ee 08       	sbc	r14, r14
    236a:	ff 08       	sbc	r15, r15
        err = LMIC.lastDriftDiff;
    236c:	09 2c       	mov	r0, r9
    236e:	00 0c       	add	r0, r0
    2370:	aa 08       	sbc	r10, r10
    2372:	bb 08       	sbc	r11, r11
    2374:	1a c0       	rjmp	.+52     	; 0x23aa <calcRxWindow+0x74>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
    2376:	48 2f       	mov	r20, r24
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	9a 01       	movw	r18, r20
    237c:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    2380:	6b 01       	movw	r12, r22
    2382:	7c 01       	movw	r14, r24
    2384:	87 e0       	ldi	r24, 0x07	; 7
    2386:	f5 94       	asr	r15
    2388:	e7 94       	ror	r14
    238a:	d7 94       	ror	r13
    238c:	c7 94       	ror	r12
    238e:	8a 95       	dec	r24
    2390:	d1 f7       	brne	.-12     	; 0x2386 <calcRxWindow+0x50>
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
    2392:	d4 01       	movw	r26, r8
    2394:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    2398:	4b 01       	movw	r8, r22
    239a:	5c 01       	movw	r10, r24
    239c:	97 e0       	ldi	r25, 0x07	; 7
    239e:	b5 94       	asr	r11
    23a0:	a7 94       	ror	r10
    23a2:	97 94       	ror	r9
    23a4:	87 94       	ror	r8
    23a6:	9a 95       	dec	r25
    23a8:	d1 f7       	brne	.-12     	; 0x239e <calcRxWindow+0x68>
    }
    u1_t rxsyms = MINRX_SYMS;
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
    23aa:	a0 91 6a 03 	lds	r26, 0x036A	; 0x80036a <LMIC+0xb2>
    23ae:	b0 91 6b 03 	lds	r27, 0x036B	; 0x80036b <LMIC+0xb3>
    23b2:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <LMIC+0x12a>
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
    23b6:	84 e0       	ldi	r24, 0x04	; 4
    23b8:	e8 9f       	mul	r30, r24
    23ba:	f0 01       	movw	r30, r0
    23bc:	11 24       	eor	r1, r1
    23be:	ec 56       	subi	r30, 0x6C	; 108
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	40 80       	ld	r4, Z
    23c4:	51 80       	ldd	r5, Z+1	; 0x01
    23c6:	62 80       	ldd	r6, Z+2	; 0x02
    23c8:	73 80       	ldd	r7, Z+3	; 0x03
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    23d0:	68 0d       	add	r22, r8
    23d2:	79 1d       	adc	r23, r9
    23d4:	8a 1d       	adc	r24, r10
    23d6:	9b 1d       	adc	r25, r11
    23d8:	a3 01       	movw	r20, r6
    23da:	92 01       	movw	r18, r4
    23dc:	0e 94 16 32 	call	0x642c	; 0x642c <__divmodsi4>
    23e0:	2b 5f       	subi	r18, 0xFB	; 251
    23e2:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <LMIC+0x10>

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
    23e6:	ad ef       	ldi	r26, 0xFD	; 253
    23e8:	bf ef       	ldi	r27, 0xFF	; 255
    23ea:	a3 01       	movw	r20, r6
    23ec:	92 01       	movw	r18, r4
    23ee:	0e 94 66 32 	call	0x64cc	; 0x64cc <__mulohisi3>
    23f2:	6c 0d       	add	r22, r12
    23f4:	7d 1d       	adc	r23, r13
    23f6:	8e 1d       	adc	r24, r14
    23f8:	9f 1d       	adc	r25, r15
}
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	bf 90       	pop	r11
    2404:	af 90       	pop	r10
    2406:	9f 90       	pop	r9
    2408:	8f 90       	pop	r8
    240a:	7f 90       	pop	r7
    240c:	6f 90       	pop	r6
    240e:	5f 90       	pop	r5
    2410:	4f 90       	pop	r4
    2412:	08 95       	ret

00002414 <setBcnRxParams>:
        }
    } while(1);
}


static void setBcnRxParams (void) {
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    LMIC.dataLen = 0;
    2418:	c8 eb       	ldi	r28, 0xB8	; 184
    241a:	d2 e0       	ldi	r29, 0x02	; 2
    241c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
    2420:	e0 91 39 04 	lds	r30, 0x0439	; 0x800439 <LMIC+0x181>
    2424:	84 e0       	ldi	r24, 0x04	; 4
    2426:	e8 9f       	mul	r30, r24
    2428:	f0 01       	movw	r30, r0
    242a:	11 24       	eor	r1, r1
    242c:	e8 54       	subi	r30, 0x48	; 72
    242e:	fd 4f       	sbci	r31, 0xFD	; 253
    2430:	83 ad       	ldd	r24, Z+59	; 0x3b
    2432:	94 ad       	ldd	r25, Z+60	; 0x3c
    2434:	a5 ad       	ldd	r26, Z+61	; 0x3d
    2436:	b6 ad       	ldd	r27, Z+62	; 0x3e
    2438:	8c 7f       	andi	r24, 0xFC	; 252
    243a:	88 87       	std	Y+8, r24	; 0x08
    243c:	99 87       	std	Y+9, r25	; 0x09
    243e:	aa 87       	std	Y+10, r26	; 0x0a
    2440:	bb 87       	std	Y+11, r27	; 0x0b
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
    2442:	83 e8       	ldi	r24, 0x83	; 131
    2444:	91 e1       	ldi	r25, 0x11	; 17
    2446:	9f 87       	std	Y+15, r25	; 0x0f
    2448:	8e 87       	std	Y+14, r24	; 0x0e
}
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <stateJustJoined>:
    LMIC_startJoining();
    reportEvent(EV_RESET);
}

static void stateJustJoined (void) {
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
    2450:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <LMIC+0x115>
    2454:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <LMIC+0x116>
    2458:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <LMIC+0x117>
    245c:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <LMIC+0x118>
    2460:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <LMIC+0x111>
    2464:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <LMIC+0x112>
    2468:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <LMIC+0x113>
    246c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <LMIC+0x114>
    LMIC.rejoinCnt   = 0;
    2470:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <LMIC+0xad>
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
    2474:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <LMIC+0x11f>
    2478:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <LMIC+0x11e>
    247c:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <LMIC+0x11b>
    2480:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <LMIC+0x119>
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
    2484:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <LMIC+0x122>
    2488:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <LMIC+0x123>
    248c:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <LMIC+0x129>
    2490:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <LMIC+0x121>
    LMIC.pingSetAns  = 0;
    2494:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <LMIC+0x12c>
    LMIC.upRepeat    = 0;
    2498:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <LMIC+0xa9>
    LMIC.adrAckReq   = LINK_CHECK_INIT;
    249c:	84 ef       	ldi	r24, 0xF4	; 244
    249e:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <LMIC+0x11a>
    LMIC.dn2Dr       = DR_DNW2;
    24a2:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <LMIC+0x124>
    LMIC.dn2Freq     = FREQ_DNW2;
    24a6:	88 e0       	ldi	r24, 0x08	; 8
    24a8:	96 ee       	ldi	r25, 0xE6	; 230
    24aa:	a3 ed       	ldi	r26, 0xD3	; 211
    24ac:	b3 e3       	ldi	r27, 0x33	; 51
    24ae:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <LMIC+0x125>
    24b2:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <LMIC+0x126>
    24b6:	a0 93 df 03 	sts	0x03DF, r26	; 0x8003df <LMIC+0x127>
    24ba:	b0 93 e0 03 	sts	0x03E0, r27	; 0x8003e0 <LMIC+0x128>
    LMIC.bcnChnl     = CHNL_BCN;
    24be:	25 e0       	ldi	r18, 0x05	; 5
    24c0:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <LMIC+0x181>
    LMIC.ping.freq   = FREQ_PING;
    24c4:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <LMIC+0x139>
    24c8:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <LMIC+0x13a>
    24cc:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <LMIC+0x13b>
    24d0:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <LMIC+0x13c>
    LMIC.ping.dr     = DR_PING;
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <LMIC+0x12d>
    24da:	08 95       	ret

000024dc <rndDelay>:
    rxsched->rxsyms = LMIC.rxsyms;
    goto again;
}


static ostime_t rndDelay (u1_t secSpan) {
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	d8 2f       	mov	r29, r24
    u2_t r = os_getRndU2();
    24ea:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    24ee:	c8 2f       	mov	r28, r24
    24f0:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    24f4:	2c 2f       	mov	r18, r28
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	32 2f       	mov	r19, r18
    24fa:	22 27       	eor	r18, r18
    24fc:	28 2b       	or	r18, r24
    ostime_t delay = r;
    if( delay > OSTICKS_PER_SEC )
    24fe:	23 31       	cpi	r18, 0x13	; 19
    2500:	8a e7       	ldi	r24, 0x7A	; 122
    2502:	38 07       	cpc	r19, r24
    2504:	10 f4       	brcc	.+4      	; 0x250a <rndDelay+0x2e>
}


static ostime_t rndDelay (u1_t secSpan) {
    u2_t r = os_getRndU2();
    ostime_t delay = r;
    2506:	69 01       	movw	r12, r18
    2508:	06 c0       	rjmp	.+12     	; 0x2516 <rndDelay+0x3a>
    if( delay > OSTICKS_PER_SEC )
        delay = r % (u2_t)OSTICKS_PER_SEC;
    250a:	c9 01       	movw	r24, r18
    250c:	62 e1       	ldi	r22, 0x12	; 18
    250e:	7a e7       	ldi	r23, 0x7A	; 122
    2510:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__udivmodhi4>
    2514:	6c 01       	movw	r12, r24
    2516:	e1 2c       	mov	r14, r1
    2518:	f1 2c       	mov	r15, r1
    if( secSpan > 0 )
    251a:	dd 23       	and	r29, r29
    251c:	c1 f0       	breq	.+48     	; 0x254e <rndDelay+0x72>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
    251e:	c9 01       	movw	r24, r18
    2520:	99 27       	eor	r25, r25
    2522:	6d 2f       	mov	r22, r29
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	0e 94 02 32 	call	0x6404	; 0x6404 <__divmodhi4>
    252a:	ac 01       	movw	r20, r24
    252c:	22 e1       	ldi	r18, 0x12	; 18
    252e:	3a e7       	ldi	r19, 0x7A	; 122
    2530:	42 9f       	mul	r20, r18
    2532:	c0 01       	movw	r24, r0
    2534:	43 9f       	mul	r20, r19
    2536:	90 0d       	add	r25, r0
    2538:	52 9f       	mul	r21, r18
    253a:	90 0d       	add	r25, r0
    253c:	11 24       	eor	r1, r1
    253e:	09 2e       	mov	r0, r25
    2540:	00 0c       	add	r0, r0
    2542:	aa 0b       	sbc	r26, r26
    2544:	bb 0b       	sbc	r27, r27
    2546:	c8 0e       	add	r12, r24
    2548:	d9 1e       	adc	r13, r25
    254a:	ea 1e       	adc	r14, r26
    254c:	fb 1e       	adc	r15, r27
    return delay;
}
    254e:	c7 01       	movw	r24, r14
    2550:	b6 01       	movw	r22, r12
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	ff 90       	pop	r15
    2558:	ef 90       	pop	r14
    255a:	df 90       	pop	r13
    255c:	cf 90       	pop	r12
    255e:	08 95       	ret

00002560 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
    2560:	cf 92       	push	r12
    2562:	df 92       	push	r13
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	6b 01       	movw	r12, r22
    256a:	7c 01       	movw	r14, r24
    256c:	84 2f       	mov	r24, r20
    reftime += rndDelay(secSpan);
    256e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <rndDelay>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8c 0d       	add	r24, r12
    2578:	9d 1d       	adc	r25, r13
    257a:	ae 1d       	adc	r26, r14
    257c:	bf 1d       	adc	r27, r15
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
    257e:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <LMIC+0x9e>
    2582:	22 23       	and	r18, r18
    2584:	99 f0       	breq	.+38     	; 0x25ac <txDelay+0x4c>
    2586:	c0 90 57 03 	lds	r12, 0x0357	; 0x800357 <LMIC+0x9f>
    258a:	d0 90 58 03 	lds	r13, 0x0358	; 0x800358 <LMIC+0xa0>
    258e:	e0 90 59 03 	lds	r14, 0x0359	; 0x800359 <LMIC+0xa1>
    2592:	f0 90 5a 03 	lds	r15, 0x035A	; 0x80035a <LMIC+0xa2>
    2596:	9c 01       	movw	r18, r24
    2598:	ad 01       	movw	r20, r26
    259a:	2c 19       	sub	r18, r12
    259c:	3d 09       	sbc	r19, r13
    259e:	4e 09       	sbc	r20, r14
    25a0:	5f 09       	sbc	r21, r15
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	14 06       	cpc	r1, r20
    25a8:	15 06       	cpc	r1, r21
    25aa:	8c f4       	brge	.+34     	; 0x25ce <txDelay+0x6e>
        LMIC.globalDutyAvail = reftime;
    25ac:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <LMIC+0x9f>
    25b0:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <LMIC+0xa0>
    25b4:	a0 93 59 03 	sts	0x0359, r26	; 0x800359 <LMIC+0xa1>
    25b8:	b0 93 5a 03 	sts	0x035A, r27	; 0x80035a <LMIC+0xa2>
        LMIC.opmode |= OP_RNDTX;
    25bc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    25c0:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    25c4:	91 60       	ori	r25, 0x01	; 1
    25c6:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    25ca:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    }
}
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	08 95       	ret

000025d8 <schedRx2>:
    LMIC.dataLen = 0;
    os_radio(RADIO_RX);
}


static void schedRx2 (ostime_t delay, osjobcb_t func) {
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	6b 01       	movw	r12, r22
    25ea:	7c 01       	movw	r14, r24
    25ec:	fa 01       	movw	r30, r20
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    25ee:	c8 eb       	ldi	r28, 0xB8	; 184
    25f0:	d2 e0       	ldi	r29, 0x02	; 2
    25f2:	a0 91 dc 03 	lds	r26, 0x03DC	; 0x8003dc <LMIC+0x124>
    25f6:	84 e0       	ldi	r24, 0x04	; 4
    25f8:	a8 9f       	mul	r26, r24
    25fa:	d0 01       	movw	r26, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	ac 56       	subi	r26, 0x6C	; 108
    2600:	be 4f       	sbci	r27, 0xFE	; 254
    2602:	2d 91       	ld	r18, X+
    2604:	3d 91       	ld	r19, X+
    2606:	4d 91       	ld	r20, X+
    2608:	5c 91       	ld	r21, X
    260a:	a3 e0       	ldi	r26, 0x03	; 3
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    2612:	08 81       	ld	r16, Y
    2614:	19 81       	ldd	r17, Y+1	; 0x01
    2616:	2a 81       	ldd	r18, Y+2	; 0x02
    2618:	3b 81       	ldd	r19, Y+3	; 0x03
    261a:	c0 0e       	add	r12, r16
    261c:	d1 1e       	adc	r13, r17
    261e:	e2 1e       	adc	r14, r18
    2620:	f3 1e       	adc	r15, r19
    2622:	ab 01       	movw	r20, r22
    2624:	bc 01       	movw	r22, r24
    2626:	4c 0d       	add	r20, r12
    2628:	5d 1d       	adc	r21, r13
    262a:	6e 1d       	adc	r22, r14
    262c:	7f 1d       	adc	r23, r15
    262e:	4c 83       	std	Y+4, r20	; 0x04
    2630:	5d 83       	std	Y+5, r21	; 0x05
    2632:	6e 83       	std	Y+6, r22	; 0x06
    2634:	7f 83       	std	Y+7, r23	; 0x07
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    2636:	4e 53       	subi	r20, 0x3E	; 62
    2638:	51 09       	sbc	r21, r1
    263a:	61 09       	sbc	r22, r1
    263c:	71 09       	sbc	r23, r1
    263e:	9f 01       	movw	r18, r30
    2640:	8b ec       	ldi	r24, 0xCB	; 203
    2642:	92 e0       	ldi	r25, 0x02	; 2
}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12


static void schedRx2 (ostime_t delay, osjobcb_t func) {
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    2654:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>

00002658 <startRxBcn>:
    reportEvent(ev);
}


static void startRxBcn (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
    2658:	84 e8       	ldi	r24, 0x84	; 132
    265a:	93 e2       	ldi	r25, 0x23	; 35
    265c:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    2660:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
    os_radio(RADIO_RX);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>

0000266a <startRxPing>:
}


static void startRxPing (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
    266a:	81 e6       	ldi	r24, 0x61	; 97
    266c:	96 e2       	ldi	r25, 0x26	; 38
    266e:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    2672:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
    os_radio(RADIO_RX);
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>

0000267c <setupRx1>:
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
}

static void setupRx1 (osjobcb_t func) {
    LMIC.txrxFlags = TXRX_DNW1;
    267c:	e8 eb       	ldi	r30, 0xB8	; 184
    267e:	f2 e0       	ldi	r31, 0x02	; 2
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	20 93 f6 03 	sts	0x03F6, r18	; 0x8003f6 <LMIC+0x13e>
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
    2686:	26 85       	ldd	r18, Z+14	; 0x0e
    2688:	37 85       	ldd	r19, Z+15	; 0x0f
    268a:	20 68       	ori	r18, 0x80	; 128
    268c:	37 87       	std	Z+15, r19	; 0x0f
    268e:	26 87       	std	Z+14, r18	; 0x0e
    LMIC.dataLen = 0;
    2690:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    LMIC.osjob.func = func;
    2694:	92 8f       	std	Z+26, r25	; 0x1a
    2696:	81 8f       	std	Z+25, r24	; 0x19
    os_radio(RADIO_RX);
    2698:	82 e0       	ldi	r24, 0x02	; 2
    269a:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>

0000269e <setupRx1DnData>:
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
}


static void setupRx1DnData (xref2osjob_t osjob) {
    setupRx1(FUNC_ADDR(processRx1DnData));
    269e:	8b e1       	ldi	r24, 0x1B	; 27
    26a0:	97 e2       	ldi	r25, 0x27	; 39
    26a2:	0c 94 3e 13 	jmp	0x267c	; 0x267c <setupRx1>

000026a6 <setupRx1Jacc>:
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
}


static void setupRx1Jacc (xref2osjob_t osjob) {
    setupRx1(FUNC_ADDR(processRx1Jacc));
    26a6:	80 e4       	ldi	r24, 0x40	; 64
    26a8:	96 e2       	ldi	r25, 0x26	; 38
    26aa:	0c 94 3e 13 	jmp	0x267c	; 0x267c <setupRx1>

000026ae <setupRx2>:
// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
    LMIC.txrxFlags = TXRX_DNW2;
    26ae:	a8 eb       	ldi	r26, 0xB8	; 184
    26b0:	b2 e0       	ldi	r27, 0x02	; 2
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    26b8:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <LMIC+0x124>
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	ed 51       	subi	r30, 0x1D	; 29
    26c0:	fe 4f       	sbci	r31, 0xFE	; 254
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
    26c2:	81 81       	ldd	r24, Z+1	; 0x01
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	8f 77       	andi	r24, 0x7F	; 127
    26c8:	80 68       	ori	r24, 0x80	; 128
    26ca:	1f 96       	adiw	r26, 0x0f	; 15
    26cc:	9c 93       	st	X, r25
    26ce:	8e 93       	st	-X, r24
    26d0:	1e 97       	sbiw	r26, 0x0e	; 14
    LMIC.freq = LMIC.dn2Freq;
    26d2:	40 91 dd 03 	lds	r20, 0x03DD	; 0x8003dd <LMIC+0x125>
    26d6:	50 91 de 03 	lds	r21, 0x03DE	; 0x8003de <LMIC+0x126>
    26da:	60 91 df 03 	lds	r22, 0x03DF	; 0x8003df <LMIC+0x127>
    26de:	70 91 e0 03 	lds	r23, 0x03E0	; 0x8003e0 <LMIC+0x128>
    26e2:	18 96       	adiw	r26, 0x08	; 8
    26e4:	4d 93       	st	X+, r20
    26e6:	5d 93       	st	X+, r21
    26e8:	6d 93       	st	X+, r22
    26ea:	7c 93       	st	X, r23
    26ec:	1b 97       	sbiw	r26, 0x0b	; 11
    LMIC.dataLen = 0;
    26ee:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    os_radio(RADIO_RX);
    26f2:	82 e0       	ldi	r24, 0x02	; 2
    26f4:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>

000026f8 <setupRx2DnData>:
    processDnData();
}


static void setupRx2DnData (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
    26f8:	80 e3       	ldi	r24, 0x30	; 48
    26fa:	97 e2       	ldi	r25, 0x27	; 39
    26fc:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    2700:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
    setupRx2();
    2704:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <setupRx2>

00002708 <setupRx2Jacc>:
    processJoinAccept();
}


static void setupRx2Jacc (xref2osjob_t osjob) {
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
    2708:	81 e5       	ldi	r24, 0x51	; 81
    270a:	96 e2       	ldi	r25, 0x26	; 38
    270c:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    2710:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
    setupRx2();
    2714:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <setupRx2>

00002718 <startScan>:
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
    2718:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    271c:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    2720:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    2724:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <LMIC+0x110>
    2728:	89 2b       	or	r24, r25
    272a:	8a 2b       	or	r24, r26
    272c:	8b 2b       	or	r24, r27
    272e:	19 f0       	breq	.+6      	; 0x2736 <startScan+0x1e>
    2730:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    2734:	82 fd       	sbrc	r24, 2
    2736:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
    273a:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    273e:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    2742:	86 fd       	sbrc	r24, 6
    2744:	2f c0       	rjmp	.+94     	; 0x27a4 <startScan+0x8c>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
    2746:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <LMIC+0x18d>
    274a:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <LMIC+0x119>
    274e:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <LMIC+0x13d>
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
    2752:	8e 77       	andi	r24, 0x7E	; 126
    2754:	81 60       	ori	r24, 0x01	; 1
    2756:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    275a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    setBcnRxParams();
    275e:	0e 94 0a 12 	call	0x2414	; 0x2414 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
    2762:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    2766:	ab 01       	movw	r20, r22
    2768:	bc 01       	movw	r22, r24
    276a:	4e 5e       	subi	r20, 0xEE	; 238
    276c:	5c 47       	sbci	r21, 0x7C	; 124
    276e:	62 4c       	sbci	r22, 0xC2	; 194
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <LMIC+0x187>
    2776:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <LMIC+0x188>
    277a:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <LMIC+0x189>
    277e:	70 93 42 04 	sts	0x0442, r23	; 0x800442 <LMIC+0x18a>
    2782:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <LMIC+0x4>
    2786:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <LMIC+0x5>
    278a:	60 93 be 02 	sts	0x02BE, r22	; 0x8002be <LMIC+0x6>
    278e:	70 93 bf 02 	sts	0x02BF, r23	; 0x8002bf <LMIC+0x7>
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
    2792:	23 e2       	ldi	r18, 0x23	; 35
    2794:	33 e2       	ldi	r19, 0x23	; 35
    2796:	8b ec       	ldi	r24, 0xCB	; 203
    2798:	92 e0       	ldi	r25, 0x02	; 2
    279a:	0e 94 35 0b 	call	0x166a	; 0x166a <os_setTimedCallback>
    os_radio(RADIO_RXON);
    279e:	83 e0       	ldi	r24, 0x03	; 3
    27a0:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>
    27a4:	08 95       	ret

000027a6 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
    27aa:	90 e4       	ldi	r25, 0x40	; 64
    27ac:	e3 ef       	ldi	r30, 0xF3	; 243
    27ae:	f2 e0       	ldi	r31, 0x02	; 2
    27b0:	df 01       	movw	r26, r30
    27b2:	1d 92       	st	X+, r1
    27b4:	9a 95       	dec	r25
    27b6:	e9 f7       	brne	.-6      	; 0x27b2 <initDefaultChannels+0xc>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
    27b8:	90 e2       	ldi	r25, 0x20	; 32
    27ba:	e3 e3       	ldi	r30, 0x33	; 51
    27bc:	f3 e0       	ldi	r31, 0x03	; 3
    27be:	df 01       	movw	r26, r30
    27c0:	29 2f       	mov	r18, r25
    27c2:	1d 92       	st	X+, r1
    27c4:	2a 95       	dec	r18
    27c6:	e9 f7       	brne	.-6      	; 0x27c2 <initDefaultChannels+0x1c>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
    27c8:	e3 ed       	ldi	r30, 0xD3	; 211
    27ca:	f2 e0       	ldi	r31, 0x02	; 2
    27cc:	df 01       	movw	r26, r30
    27ce:	1d 92       	st	X+, r1
    27d0:	9a 95       	dec	r25
    27d2:	e9 f7       	brne	.-6      	; 0x27ce <initDefaultChannels+0x28>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    27d4:	2f e3       	ldi	r18, 0x3F	; 63
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	30 93 54 03 	sts	0x0354, r19	; 0x800354 <LMIC+0x9c>
    27dc:	20 93 53 03 	sts	0x0353, r18	; 0x800353 <LMIC+0x9b>
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    27e0:	81 11       	cpse	r24, r1
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <initDefaultChannels+0x42>
    27e4:	86 e0       	ldi	r24, 0x06	; 6
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <initDefaultChannels+0x44>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	c3 ef       	ldi	r28, 0xF3	; 243
    27ec:	d2 e0       	ldi	r29, 0x02	; 2
    27ee:	a3 e3       	ldi	r26, 0x33	; 51
    27f0:	b3 e0       	ldi	r27, 0x03	; 3
    27f2:	96 e0       	ldi	r25, 0x06	; 6
    27f4:	98 0f       	add	r25, r24
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
    27f6:	2f e3       	ldi	r18, 0x3F	; 63
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
    27fa:	44 e0       	ldi	r20, 0x04	; 4
    27fc:	84 9f       	mul	r24, r20
    27fe:	f0 01       	movw	r30, r0
    2800:	11 24       	eor	r1, r1
    2802:	ec 59       	subi	r30, 0x9C	; 156
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	40 81       	ld	r20, Z
    2808:	51 81       	ldd	r21, Z+1	; 0x01
    280a:	62 81       	ldd	r22, Z+2	; 0x02
    280c:	73 81       	ldd	r23, Z+3	; 0x03
    280e:	49 93       	st	Y+, r20
    2810:	59 93       	st	Y+, r21
    2812:	69 93       	st	Y+, r22
    2814:	79 93       	st	Y+, r23
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
    2816:	2d 93       	st	X+, r18
    2818:	3d 93       	st	X+, r19
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
    281a:	8f 5f       	subi	r24, 0xFF	; 255
    281c:	89 13       	cpse	r24, r25
    281e:	ed cf       	rjmp	.-38     	; 0x27fa <initDefaultChannels+0x54>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
    2820:	88 ee       	ldi	r24, 0xE8	; 232
    2822:	93 e0       	ldi	r25, 0x03	; 3
    2824:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <LMIC+0x1c>
    2828:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <LMIC+0x1b>
    LMIC.bands[BAND_MILLI].txpow    = 14;
    282c:	ce e0       	ldi	r28, 0x0E	; 14
    282e:	c0 93 d5 02 	sts	0x02D5, r28	; 0x8002d5 <LMIC+0x1d>
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    2832:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    2836:	8f 70       	andi	r24, 0x0F	; 15
    2838:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <LMIC+0x1e>
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
    283c:	84 e6       	ldi	r24, 0x64	; 100
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <LMIC+0x24>
    2844:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <LMIC+0x23>
    LMIC.bands[BAND_CENTI].txpow    = 14;
    2848:	c0 93 dd 02 	sts	0x02DD, r28	; 0x8002dd <LMIC+0x25>
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    284c:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    2850:	8f 70       	andi	r24, 0x0F	; 15
    2852:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <LMIC+0x26>
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    2856:	8a e0       	ldi	r24, 0x0A	; 10
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <LMIC+0x2c>
    285e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <LMIC+0x2b>
    LMIC.bands[BAND_DECI ].txpow    = 27;
    2862:	8b e1       	ldi	r24, 0x1B	; 27
    2864:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <LMIC+0x2d>
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    2868:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    286c:	8f 70       	andi	r24, 0x0F	; 15
    286e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <LMIC+0x2e>
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
    2872:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    2876:	60 93 e7 02 	sts	0x02E7, r22	; 0x8002e7 <LMIC+0x2f>
    287a:	70 93 e8 02 	sts	0x02E8, r23	; 0x8002e8 <LMIC+0x30>
    287e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <LMIC+0x31>
    2882:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <LMIC+0x32>
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    LMIC.bands[BAND_DECI ].txpow    = 27;
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    2886:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <LMIC+0x27>
    288a:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <LMIC+0x28>
    288e:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <LMIC+0x29>
    2892:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <LMIC+0x2a>
    LMIC.bands[BAND_CENTI].txpow    = 14;
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
    LMIC.bands[BAND_DECI ].txpow    = 27;
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
    LMIC.bands[BAND_MILLI].avail = 
    2896:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <LMIC+0x1f>
    289a:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <LMIC+0x20>
    289e:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <LMIC+0x21>
    28a2:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <LMIC+0x22>
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	08 95       	ret

000028ac <setDrTxpow.isra.1>:
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
    28ac:	60 38       	cpi	r22, 0x80	; 128
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <setDrTxpow.isra.1+0x8>
        LMIC.adrTxPow = pow;
    28b0:	60 93 62 03 	sts	0x0362, r22	; 0x800362 <LMIC+0xaa>
    if( LMIC.datarate != dr ) {
    28b4:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <LMIC+0xab>
    28b8:	98 17       	cp	r25, r24
    28ba:	59 f0       	breq	.+22     	; 0x28d2 <setDrTxpow.isra.1+0x26>
        LMIC.datarate = dr;
    28bc:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <LMIC+0xab>
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
    28c0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    28c4:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    28c8:	98 60       	ori	r25, 0x08	; 8
    28ca:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    28ce:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    28d2:	08 95       	ret

000028d4 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    28d4:	87 70       	andi	r24, 0x07	; 7
    28d6:	08 95       	ret

000028d8 <setSf>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
    28d8:	88 7f       	andi	r24, 0xF8	; 248
    28da:	86 2b       	or	r24, r22
    28dc:	08 95       	ret

000028de <getBw>:
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
    28de:	23 e0       	ldi	r18, 0x03	; 3
    28e0:	96 95       	lsr	r25
    28e2:	87 95       	ror	r24
    28e4:	2a 95       	dec	r18
    28e6:	e1 f7       	brne	.-8      	; 0x28e0 <getBw+0x2>
    28e8:	83 70       	andi	r24, 0x03	; 3
    28ea:	08 95       	ret

000028ec <setBw>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
    28ec:	87 7e       	andi	r24, 0xE7	; 231
    28ee:	28 e0       	ldi	r18, 0x08	; 8
    28f0:	62 9f       	mul	r22, r18
    28f2:	b0 01       	movw	r22, r0
    28f4:	11 24       	eor	r1, r1
    28f6:	86 2b       	or	r24, r22
    28f8:	97 2b       	or	r25, r23
    28fa:	08 95       	ret

000028fc <getCr>:
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
    28fc:	25 e0       	ldi	r18, 0x05	; 5
    28fe:	96 95       	lsr	r25
    2900:	87 95       	ror	r24
    2902:	2a 95       	dec	r18
    2904:	e1 f7       	brne	.-8      	; 0x28fe <getCr+0x2>
    2906:	83 70       	andi	r24, 0x03	; 3
    2908:	08 95       	ret

0000290a <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
    290a:	8f 79       	andi	r24, 0x9F	; 159
    290c:	20 e2       	ldi	r18, 0x20	; 32
    290e:	62 9f       	mul	r22, r18
    2910:	b0 01       	movw	r22, r0
    2912:	11 24       	eor	r1, r1
    2914:	86 2b       	or	r24, r22
    2916:	97 2b       	or	r25, r23
    2918:	08 95       	ret

0000291a <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
    291a:	87 fb       	bst	r24, 7
    291c:	88 27       	eor	r24, r24
    291e:	80 f9       	bld	r24, 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	08 95       	ret

00002924 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
    2924:	8f 77       	andi	r24, 0x7F	; 127
    2926:	76 95       	lsr	r23
    2928:	76 2f       	mov	r23, r22
    292a:	66 27       	eor	r22, r22
    292c:	77 95       	ror	r23
    292e:	67 95       	ror	r22
    2930:	86 2b       	or	r24, r22
    2932:	97 2b       	or	r25, r23
    2934:	08 95       	ret

00002936 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
    2936:	89 2f       	mov	r24, r25
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	08 95       	ret

0000293c <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	36 2f       	mov	r19, r22
    2942:	a9 01       	movw	r20, r18
    2944:	48 2b       	or	r20, r24
    2946:	ca 01       	movw	r24, r20
    2948:	08 95       	ret

0000294a <makeRps>:
inline rps_t makeRps (sf_t sf, bw_t bw, cr_t cr, int ih, int nocrc) {
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    return sf | (bw<<3) | (cr<<5) | (nocrc?(1<<7):0) | ((ih&0xFF)<<8);
    294e:	e8 2f       	mov	r30, r24
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	88 e0       	ldi	r24, 0x08	; 8
    2954:	68 9f       	mul	r22, r24
    2956:	b0 01       	movw	r22, r0
    2958:	11 24       	eor	r1, r1
    295a:	80 e2       	ldi	r24, 0x20	; 32
    295c:	48 9f       	mul	r20, r24
    295e:	a0 01       	movw	r20, r0
    2960:	11 24       	eor	r1, r1
    2962:	01 2b       	or	r16, r17
    2964:	19 f4       	brne	.+6      	; 0x296c <makeRps+0x22>
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <makeRps+0x26>
    296c:	a0 e8       	ldi	r26, 0x80	; 128
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	92 2f       	mov	r25, r18
    2976:	84 2b       	or	r24, r20
    2978:	95 2b       	or	r25, r21
    297a:	8e 2b       	or	r24, r30
    297c:	9f 2b       	or	r25, r31
    297e:	86 2b       	or	r24, r22
    2980:	97 2b       	or	r25, r23
}
    2982:	8a 2b       	or	r24, r26
    2984:	9b 2b       	or	r25, r27
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <sameSfBw>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }
    298c:	86 27       	eor	r24, r22
    298e:	97 27       	eor	r25, r23
    2990:	bc 01       	movw	r22, r24
    2992:	6f 71       	andi	r22, 0x1F	; 31
    2994:	77 27       	eor	r23, r23
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	67 2b       	or	r22, r23
    299c:	11 f0       	breq	.+4      	; 0x29a2 <sameSfBw+0x16>
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	08 95       	ret

000029a4 <updr2rps>:

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    29a4:	e8 2f       	mov	r30, r24
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	ed 51       	subi	r30, 0x1D	; 29
    29aa:	fe 4f       	sbci	r31, 0xFE	; 254
    29ac:	81 81       	ldd	r24, Z+1	; 0x01
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	08 95       	ret

000029b2 <dndr2rps>:
    29b2:	e8 2f       	mov	r30, r24
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	ed 51       	subi	r30, 0x1D	; 29
    29b8:	fe 4f       	sbci	r31, 0xFE	; 254
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
    29ba:	81 81       	ldd	r24, Z+1	; 0x01
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	8f 77       	andi	r24, 0x7F	; 127
    29c0:	80 68       	ori	r24, 0x80	; 128
    29c2:	08 95       	ret

000029c4 <isFasterDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
    29c4:	21 e0       	ldi	r18, 0x01	; 1
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	68 17       	cp	r22, r24
    29ca:	10 f0       	brcs	.+4      	; 0x29d0 <isFasterDR+0xc>
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	c9 01       	movw	r24, r18
    29d2:	08 95       	ret

000029d4 <isSlowerDR>:
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
    29d4:	21 e0       	ldi	r18, 0x01	; 1
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	86 17       	cp	r24, r22
    29da:	10 f0       	brcs	.+4      	; 0x29e0 <isSlowerDR+0xc>
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	c9 01       	movw	r24, r18
    29e2:	08 95       	ret

000029e4 <incDR>:
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
    29e4:	e8 2f       	mov	r30, r24
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	ed 51       	subi	r30, 0x1D	; 29
    29ea:	fe 4f       	sbci	r31, 0xFE	; 254
    29ec:	92 81       	ldd	r25, Z+2	; 0x02
    29ee:	9f 3f       	cpi	r25, 0xFF	; 255
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <incDR+0x10>
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	08 95       	ret

000029f6 <decDR>:
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    29f6:	e8 2f       	mov	r30, r24
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	ed 51       	subi	r30, 0x1D	; 29
    29fc:	fe 4f       	sbci	r31, 0xFE	; 254
    29fe:	90 81       	ld	r25, Z
    2a00:	9f 3f       	cpi	r25, 0xFF	; 255
    2a02:	09 f0       	breq	.+2      	; 0x2a06 <decDR+0x10>
    2a04:	81 50       	subi	r24, 0x01	; 1
    2a06:	08 95       	ret

00002a08 <assertDR>:
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
    2a08:	e8 2f       	mov	r30, r24
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	ed 51       	subi	r30, 0x1D	; 29
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	9f 3f       	cpi	r25, 0xFF	; 255
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <assertDR+0x10>
    2a16:	85 e0       	ldi	r24, 0x05	; 5
    2a18:	08 95       	ret

00002a1a <validDR>:
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
    2a1a:	e8 2f       	mov	r30, r24
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ed 51       	subi	r30, 0x1D	; 29
    2a20:	fe 4f       	sbci	r31, 0xFE	; 254
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	91 81       	ldd	r25, Z+1	; 0x01
    2a26:	9f 3f       	cpi	r25, 0xFF	; 255
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <validDR+0x12>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	08 95       	ret

00002a2e <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    2a2e:	61 50       	subi	r22, 0x01	; 1
    2a30:	48 f0       	brcs	.+18     	; 0x2a44 <lowerDR+0x16>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    2a32:	e8 2f       	mov	r30, r24
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	ed 51       	subi	r30, 0x1D	; 29
    2a38:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3a:	90 81       	ld	r25, Z
    2a3c:	9f 3f       	cpi	r25, 0xFF	; 255
    2a3e:	b9 f3       	breq	.-18     	; 0x2a2e <lowerDR>
    2a40:	81 50       	subi	r24, 0x01	; 1
    2a42:	f5 cf       	rjmp	.-22     	; 0x2a2e <lowerDR>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    2a44:	08 95       	ret

00002a46 <os_rlsbf2>:
#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
    return (u2_t)(buf[0] | (buf[1]<<8));
}
    2a46:	fc 01       	movw	r30, r24
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	08 95       	ret

00002a4e <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
    2a4e:	fc 01       	movw	r30, r24
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
    2a50:	22 81       	ldd	r18, Z+2	; 0x02
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	cb 01       	movw	r24, r22
    2a58:	77 0f       	add	r23, r23
    2a5a:	aa 0b       	sbc	r26, r26
    2a5c:	bb 0b       	sbc	r27, r27
    2a5e:	a2 2b       	or	r26, r18
    2a60:	23 81       	ldd	r18, Z+3	; 0x03
    2a62:	bc 01       	movw	r22, r24
    2a64:	cd 01       	movw	r24, r26
    2a66:	92 2b       	or	r25, r18
}
    2a68:	08 95       	ret

00002a6a <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
    2a6e:	01 97       	sbiw	r24, 0x01	; 1
    2a70:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    2a74:	27 2f       	mov	r18, r23
    2a76:	38 2f       	mov	r19, r24
    2a78:	49 2f       	mov	r20, r25
    2a7a:	55 27       	eor	r21, r21
    2a7c:	a4 e6       	ldi	r26, 0x64	; 100
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
    2a84:	8b 01       	movw	r16, r22
    2a86:	9c 01       	movw	r18, r24
    2a88:	00 5c       	subi	r16, 0xC0	; 192
    2a8a:	15 45       	sbci	r17, 0x55	; 85
    2a8c:	20 47       	sbci	r18, 0x70	; 112
    2a8e:	33 43       	sbci	r19, 0x33	; 51
    2a90:	01 3c       	cpi	r16, 0xC1	; 193
    2a92:	1f 4c       	sbci	r17, 0xCF	; 207
    2a94:	2a 46       	sbci	r18, 0x6A	; 106
    2a96:	31 05       	cpc	r19, r1
    2a98:	18 f0       	brcs	.+6      	; 0x2aa0 <convFreq+0x36>
        freq = 0;
    2a9a:	60 e0       	ldi	r22, 0x00	; 0
    2a9c:	70 e0       	ldi	r23, 0x00	; 0
    2a9e:	cb 01       	movw	r24, r22
    return freq;
}
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	08 95       	ret

00002aa6 <os_rmsbf4>:
}
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	fc 01       	movw	r30, r24
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
    2aac:	21 81       	ldd	r18, Z+1	; 0x01
    2aae:	60 81       	ld	r22, Z
    2ab0:	86 2f       	mov	r24, r22
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e0       	ldi	r26, 0x00	; 0
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	b8 2f       	mov	r27, r24
    2aba:	aa 27       	eor	r26, r26
    2abc:	99 27       	eor	r25, r25
    2abe:	88 27       	eor	r24, r24
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	bd 01       	movw	r22, r26
    2ac4:	62 2b       	or	r22, r18
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	98 27       	eor	r25, r24
    2acc:	89 27       	eor	r24, r25
    2ace:	98 27       	eor	r25, r24
    2ad0:	09 2e       	mov	r0, r25
    2ad2:	00 0c       	add	r0, r0
    2ad4:	aa 0b       	sbc	r26, r26
    2ad6:	bb 0b       	sbc	r27, r27
    2ad8:	8a 01       	movw	r16, r20
    2ada:	9b 01       	movw	r18, r22
    2adc:	08 2b       	or	r16, r24
    2ade:	19 2b       	or	r17, r25
    2ae0:	2a 2b       	or	r18, r26
    2ae2:	3b 2b       	or	r19, r27
    2ae4:	c9 01       	movw	r24, r18
    2ae6:	b8 01       	movw	r22, r16
}
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    2aee:	fc 01       	movw	r30, r24
    2af0:	60 83       	st	Z, r22
    buf[1] = v>>8;
    2af2:	71 83       	std	Z+1, r23	; 0x01
    2af4:	08 95       	ret

00002af6 <os_wlsbf4>:
}
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
    2af6:	fc 01       	movw	r30, r24
    buf[0] = v;
    2af8:	40 83       	st	Z, r20
    buf[1] = v>>8;
    2afa:	51 83       	std	Z+1, r21	; 0x01
    buf[2] = v>>16;
    2afc:	62 83       	std	Z+2, r22	; 0x02
    buf[3] = v>>24;
    2afe:	73 83       	std	Z+3, r23	; 0x03
    2b00:	08 95       	ret

00002b02 <aes_cipher.part.2>:
    os_getDevKey(AESkey);
    os_aes(AES_ENC, pdu, len);
}


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
    2b02:	4f 92       	push	r4
    2b04:	5f 92       	push	r5
    2b06:	6f 92       	push	r6
    2b08:	7f 92       	push	r7
    2b0a:	af 92       	push	r10
    2b0c:	bf 92       	push	r11
    2b0e:	cf 92       	push	r12
    2b10:	df 92       	push	r13
    2b12:	ef 92       	push	r14
    2b14:	ff 92       	push	r15
    2b16:	0f 93       	push	r16
    2b18:	1f 93       	push	r17
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	ec 01       	movw	r28, r24
    2b20:	28 01       	movw	r4, r16
    2b22:	39 01       	movw	r6, r18
    if( len <= 0 )
        return;
    os_clearMem(AESaux, 16);
    2b24:	80 e1       	ldi	r24, 0x10	; 16
    2b26:	e4 e0       	ldi	r30, 0x04	; 4
    2b28:	f5 e0       	ldi	r31, 0x05	; 5
    2b2a:	df 01       	movw	r26, r30
    2b2c:	1d 92       	st	X+, r1
    2b2e:	8a 95       	dec	r24
    2b30:	e9 f7       	brne	.-6      	; 0x2b2c <aes_cipher.part.2+0x2a>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	80 93 13 05 	sts	0x0513, r24	; 0x800513 <AESAUX+0xf>
    2b38:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <AESAUX>
    AESaux[5] = dndir?1:0;
    2b3c:	ef 28       	or	r14, r15
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <aes_cipher.part.2+0x40>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <AESAUX+0x5>
    os_wlsbf4(AESaux+ 6,devaddr);
    2b46:	8a e0       	ldi	r24, 0x0A	; 10
    2b48:	95 e0       	ldi	r25, 0x05	; 5
    2b4a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    2b4e:	b3 01       	movw	r22, r6
    2b50:	a2 01       	movw	r20, r4
    2b52:	8e e0       	ldi	r24, 0x0E	; 14
    2b54:	95 e0       	ldi	r25, 0x05	; 5
    2b56:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
    2b5a:	80 e1       	ldi	r24, 0x10	; 16
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	a4 e5       	ldi	r26, 0x54	; 84
    2b60:	b4 e0       	ldi	r27, 0x04	; 4
    2b62:	01 90       	ld	r0, Z+
    2b64:	0d 92       	st	X+, r0
    2b66:	8a 95       	dec	r24
    2b68:	e1 f7       	brne	.-8      	; 0x2b62 <aes_cipher.part.2+0x60>
    os_aes(AES_CTR, payload, len);
    2b6a:	a5 01       	movw	r20, r10
    2b6c:	b6 01       	movw	r22, r12
    2b6e:	84 e0       	ldi	r24, 0x04	; 4
}
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	df 90       	pop	r13
    2b7e:	cf 90       	pop	r12
    2b80:	bf 90       	pop	r11
    2b82:	af 90       	pop	r10
    2b84:	7f 90       	pop	r7
    2b86:	6f 90       	pop	r6
    2b88:	5f 90       	pop	r5
    2b8a:	4f 90       	pop	r4
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
    AESaux[5] = dndir?1:0;
    os_wlsbf4(AESaux+ 6,devaddr);
    os_wlsbf4(AESaux+10,seqno);
    os_copyMem(AESkey,key,16);
    os_aes(AES_CTR, payload, len);
    2b8c:	0c 94 89 28 	jmp	0x5112	; 0x5112 <os_aes>

00002b90 <rxschedInit.constprop.10>:
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
}


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
    2b90:	8f 92       	push	r8
    2b92:	9f 92       	push	r9
    2b94:	af 92       	push	r10
    2b96:	bf 92       	push	r11
    2b98:	cf 92       	push	r12
    2b9a:	df 92       	push	r13
    2b9c:	ef 92       	push	r14
    2b9e:	ff 92       	push	r15
    2ba0:	0f 93       	push	r16
    2ba2:	1f 93       	push	r17
    2ba4:	cf 93       	push	r28
    os_clearMem(AESkey,16);
    2ba6:	80 e1       	ldi	r24, 0x10	; 16
    2ba8:	e4 e5       	ldi	r30, 0x54	; 84
    2baa:	f4 e0       	ldi	r31, 0x04	; 4
    2bac:	df 01       	movw	r26, r30
    2bae:	1d 92       	st	X+, r1
    2bb0:	8a 95       	dec	r24
    2bb2:	e9 f7       	brne	.-6      	; 0x2bae <rxschedInit.constprop.10+0x1e>
    os_clearMem(LMIC.frame+8,8);
    2bb4:	88 e0       	ldi	r24, 0x08	; 8
    2bb6:	e1 e0       	ldi	r30, 0x01	; 1
    2bb8:	f4 e0       	ldi	r31, 0x04	; 4
    2bba:	df 01       	movw	r26, r30
    2bbc:	1d 92       	st	X+, r1
    2bbe:	8a 95       	dec	r24
    2bc0:	e9 f7       	brne	.-6      	; 0x2bbc <rxschedInit.constprop.10+0x2c>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
    2bc2:	40 91 46 04 	lds	r20, 0x0446	; 0x800446 <LMIC+0x18e>
    2bc6:	50 91 47 04 	lds	r21, 0x0447	; 0x800447 <LMIC+0x18f>
    2bca:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <LMIC+0x190>
    2bce:	70 91 49 04 	lds	r23, 0x0449	; 0x800449 <LMIC+0x191>
    2bd2:	89 ef       	ldi	r24, 0xF9	; 249
    2bd4:	93 e0       	ldi	r25, 0x03	; 3
    2bd6:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
    2bda:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    2bde:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    2be2:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    2be6:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>
    2bea:	8d ef       	ldi	r24, 0xFD	; 253
    2bec:	93 e0       	ldi	r25, 0x03	; 3
    2bee:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
    2bf2:	40 e1       	ldi	r20, 0x10	; 16
    2bf4:	50 e0       	ldi	r21, 0x00	; 0
    2bf6:	69 ef       	ldi	r22, 0xF9	; 249
    2bf8:	73 e0       	ldi	r23, 0x03	; 3
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    u1_t intvExp = rxsched->intvExp;
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
    2c00:	c0 91 e6 03 	lds	r28, 0x03E6	; 0x8003e6 <LMIC+0x12e>
    rxsched->rxbase = (LMIC.bcninfo.txtime +
                       BCN_RESERVE_osticks +
    2c04:	87 e0       	ldi	r24, 0x07	; 7
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	8c 1b       	sub	r24, r28
    2c0a:	91 09       	sbc	r25, r1
    2c0c:	4f ef       	ldi	r20, 0xFF	; 255
    2c0e:	5f e0       	ldi	r21, 0x0F	; 15
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <rxschedInit.constprop.10+0x86>
    2c12:	55 95       	asr	r21
    2c14:	47 95       	ror	r20
    2c16:	8a 95       	dec	r24
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <rxschedInit.constprop.10+0x82>
    2c1a:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x141>
    2c1e:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <LMIC+0x142>
    2c22:	48 23       	and	r20, r24
    2c24:	59 23       	and	r21, r25
    2c26:	8c e1       	ldi	r24, 0x1C	; 28
    2c28:	a8 2e       	mov	r10, r24
    2c2a:	9e e4       	ldi	r25, 0x4E	; 78
    2c2c:	b9 2e       	mov	r11, r25
    2c2e:	2e e0       	ldi	r18, 0x0E	; 14
    2c30:	c2 2e       	mov	r12, r18
    2c32:	d1 2c       	mov	r13, r1
    2c34:	e1 2c       	mov	r14, r1
    2c36:	f1 2c       	mov	r15, r1
    2c38:	00 e0       	ldi	r16, 0x00	; 0
    2c3a:	10 e0       	ldi	r17, 0x00	; 0
    2c3c:	9a 01       	movw	r18, r20
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	60 e0       	ldi	r22, 0x00	; 0
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__muldi3>
    2c4e:	e8 ee       	ldi	r30, 0xE8	; 232
    2c50:	ae 2e       	mov	r10, r30
    2c52:	f3 e0       	ldi	r31, 0x03	; 3
    2c54:	bf 2e       	mov	r11, r31
    2c56:	c1 2c       	mov	r12, r1
    2c58:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__divdi3>
    2c5c:	49 01       	movw	r8, r18
    2c5e:	5a 01       	movw	r10, r20
    2c60:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <LMIC+0x187>
    2c64:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <LMIC+0x188>
    2c68:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <LMIC+0x189>
    2c6c:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <LMIC+0x18a>
    2c70:	86 53       	subi	r24, 0x36	; 54
    2c72:	9d 4f       	sbci	r25, 0xFD	; 253
    2c74:	ae 4f       	sbci	r26, 0xFE	; 254
    2c76:	bf 4f       	sbci	r27, 0xFF	; 255
    2c78:	88 0e       	add	r8, r24
    2c7a:	99 1e       	adc	r9, r25
    2c7c:	aa 1e       	adc	r10, r26
    2c7e:	bb 1e       	adc	r11, r27
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
    os_aes(AES_ENC,LMIC.frame,16);
    u1_t intvExp = rxsched->intvExp;
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
    rxsched->rxbase = (LMIC.bcninfo.txtime +
    2c80:	80 92 e9 03 	sts	0x03E9, r8	; 0x8003e9 <LMIC+0x131>
    2c84:	90 92 ea 03 	sts	0x03EA, r9	; 0x8003ea <LMIC+0x132>
    2c88:	a0 92 eb 03 	sts	0x03EB, r10	; 0x8003eb <LMIC+0x133>
    2c8c:	b0 92 ec 03 	sts	0x03EC, r11	; 0x8003ec <LMIC+0x134>
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
    rxsched->slot   = 0;
    2c90:	10 92 e7 03 	sts	0x03E7, r1	; 0x8003e7 <LMIC+0x12f>
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	01 c0       	rjmp	.+2      	; 0x2c9c <rxschedInit.constprop.10+0x10c>
    2c9a:	88 0f       	add	r24, r24
    2c9c:	ca 95       	dec	r28
    2c9e:	ea f7       	brpl	.-6      	; 0x2c9a <rxschedInit.constprop.10+0x10a>
    2ca0:	60 91 e5 03 	lds	r22, 0x03E5	; 0x8003e5 <LMIC+0x12d>
    2ca4:	8e 5f       	subi	r24, 0xFE	; 254
    2ca6:	0e 94 9b 11 	call	0x2336	; 0x2336 <calcRxWindow>
    2caa:	86 1a       	sub	r8, r22
    2cac:	97 0a       	sbc	r9, r23
    2cae:	a8 0a       	sbc	r10, r24
    2cb0:	b9 0a       	sbc	r11, r25
    2cb2:	80 92 ed 03 	sts	0x03ED, r8	; 0x8003ed <LMIC+0x135>
    2cb6:	90 92 ee 03 	sts	0x03EE, r9	; 0x8003ee <LMIC+0x136>
    2cba:	a0 92 ef 03 	sts	0x03EF, r10	; 0x8003ef <LMIC+0x137>
    2cbe:	b0 92 f0 03 	sts	0x03F0, r11	; 0x8003f0 <LMIC+0x138>
    rxsched->rxsyms = LMIC.rxsyms;
    2cc2:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <LMIC+0x10>
    2cc6:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <LMIC+0x130>
}
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	ff 90       	pop	r15
    2cd2:	ef 90       	pop	r14
    2cd4:	df 90       	pop	r13
    2cd6:	cf 90       	pop	r12
    2cd8:	bf 90       	pop	r11
    2cda:	af 90       	pop	r10
    2cdc:	9f 90       	pop	r9
    2cde:	8f 90       	pop	r8
    2ce0:	08 95       	ret

00002ce2 <txDone>:
    os_radio(RADIO_RX);
}


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
    2ce2:	8f 92       	push	r8
    2ce4:	9f 92       	push	r9
    2ce6:	af 92       	push	r10
    2ce8:	bf 92       	push	r11
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	cf 93       	push	r28
    2cf4:	df 93       	push	r29
    2cf6:	4b 01       	movw	r8, r22
    2cf8:	5c 01       	movw	r10, r24
    2cfa:	ea 01       	movw	r28, r20
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
    2cfc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    2d00:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    2d04:	82 70       	andi	r24, 0x02	; 2
    2d06:	96 70       	andi	r25, 0x06	; 6
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	94 40       	sbci	r25, 0x04	; 4
    2d0c:	59 f4       	brne	.+22     	; 0x2d24 <txDone+0x42>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
    2d0e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <rxschedInit.constprop.10>
        LMIC.opmode |= OP_PINGINI;
    2d12:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    2d16:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    2d1a:	92 60       	ori	r25, 0x02	; 2
    2d1c:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    2d20:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
    2d24:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <LMIC+0x10>
    2d28:	c0 90 b8 02 	lds	r12, 0x02B8	; 0x8002b8 <LMIC>
    2d2c:	d0 90 b9 02 	lds	r13, 0x02B9	; 0x8002b9 <LMIC+0x1>
    2d30:	e0 90 ba 02 	lds	r14, 0x02BA	; 0x8002ba <LMIC+0x2>
    2d34:	f0 90 bb 02 	lds	r15, 0x02BB	; 0x8002bb <LMIC+0x3>
    2d38:	87 30       	cpi	r24, 0x07	; 7
    2d3a:	99 f4       	brne	.+38     	; 0x2d62 <txDone+0x80>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
    2d3c:	c8 0c       	add	r12, r8
    2d3e:	d9 1c       	adc	r13, r9
    2d40:	ea 1c       	adc	r14, r10
    2d42:	fb 1c       	adc	r15, r11
    2d44:	85 e0       	ldi	r24, 0x05	; 5
    2d46:	c8 1a       	sub	r12, r24
    2d48:	d1 08       	sbc	r13, r1
    2d4a:	e1 08       	sbc	r14, r1
    2d4c:	f1 08       	sbc	r15, r1
    2d4e:	c0 92 bc 02 	sts	0x02BC, r12	; 0x8002bc <LMIC+0x4>
    2d52:	d0 92 bd 02 	sts	0x02BD, r13	; 0x8002bd <LMIC+0x5>
    2d56:	e0 92 be 02 	sts	0x02BE, r14	; 0x8002be <LMIC+0x6>
    2d5a:	f0 92 bf 02 	sts	0x02BF, r15	; 0x8002bf <LMIC+0x7>
        LMIC.rxsyms = RXLEN_FSK;
    2d5e:	88 e0       	ldi	r24, 0x08	; 8
    2d60:	23 c0       	rjmp	.+70     	; 0x2da8 <txDone+0xc6>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
    2d62:	e0 91 c9 02 	lds	r30, 0x02C9	; 0x8002c9 <LMIC+0x11>
    2d66:	24 e0       	ldi	r18, 0x04	; 4
    2d68:	e2 9f       	mul	r30, r18
    2d6a:	f0 01       	movw	r30, r0
    2d6c:	11 24       	eor	r1, r1
    2d6e:	ec 56       	subi	r30, 0x6C	; 108
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	20 81       	ld	r18, Z
    2d74:	31 81       	ldd	r19, Z+1	; 0x01
    2d76:	42 81       	ldd	r20, Z+2	; 0x02
    2d78:	53 81       	ldd	r21, Z+3	; 0x03
    2d7a:	a3 e0       	ldi	r26, 0x03	; 3
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    2d82:	c8 0c       	add	r12, r8
    2d84:	d9 1c       	adc	r13, r9
    2d86:	ea 1c       	adc	r14, r10
    2d88:	fb 1c       	adc	r15, r11
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8c 0d       	add	r24, r12
    2d90:	9d 1d       	adc	r25, r13
    2d92:	ae 1d       	adc	r26, r14
    2d94:	bf 1d       	adc	r27, r15
    2d96:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <LMIC+0x4>
    2d9a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <LMIC+0x5>
    2d9e:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <LMIC+0x6>
    2da2:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <LMIC+0x7>
        LMIC.rxsyms = MINRX_SYMS;
    2da6:	85 e0       	ldi	r24, 0x05	; 5
    2da8:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <LMIC+0x10>
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    2dac:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <LMIC+0x4>
    2db0:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <LMIC+0x5>
    2db4:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <LMIC+0x6>
    2db8:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <LMIC+0x7>
    2dbc:	4e 53       	subi	r20, 0x3E	; 62
    2dbe:	51 09       	sbc	r21, r1
    2dc0:	61 09       	sbc	r22, r1
    2dc2:	71 09       	sbc	r23, r1
    2dc4:	9e 01       	movw	r18, r28
    2dc6:	8b ec       	ldi	r24, 0xCB	; 203
    2dc8:	92 e0       	ldi	r25, 0x02	; 2
}
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	ff 90       	pop	r15
    2dd0:	ef 90       	pop	r14
    2dd2:	df 90       	pop	r13
    2dd4:	cf 90       	pop	r12
    2dd6:	bf 90       	pop	r11
    2dd8:	af 90       	pop	r10
    2dda:	9f 90       	pop	r9
    2ddc:	8f 90       	pop	r8
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
        LMIC.rxsyms = MINRX_SYMS;
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
    2dde:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>

00002de2 <updataDone>:
    setupRx1(FUNC_ADDR(processRx1DnData));
}


static void updataDone (xref2osjob_t osjob) {
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
    2de2:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <LMIC+0x11c>
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	a2 e1       	ldi	r26, 0x12	; 18
    2dea:	ba e7       	ldi	r27, 0x7A	; 122
    2dec:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    2df0:	4f e4       	ldi	r20, 0x4F	; 79
    2df2:	53 e1       	ldi	r21, 0x13	; 19
    2df4:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <txDone>

00002df8 <jreqDone>:
    setupRx1(FUNC_ADDR(processRx1Jacc));
}


static void jreqDone (xref2osjob_t osjob) {
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
    2df8:	43 e5       	ldi	r20, 0x53	; 83
    2dfa:	53 e1       	ldi	r21, 0x13	; 19
    2dfc:	6a e5       	ldi	r22, 0x5A	; 90
    2dfe:	72 e6       	ldi	r23, 0x62	; 98
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0c 94 71 16 	jmp	0x2ce2	; 0x2ce2 <txDone>

00002e08 <os_wmsbf4>:
    buf[3] = v>>24;
}
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
    2e08:	fc 01       	movw	r30, r24
    buf[3] = v;
    2e0a:	43 83       	std	Z+3, r20	; 0x03
    buf[2] = v>>8;
    2e0c:	52 83       	std	Z+2, r21	; 0x02
    buf[1] = v>>16;
    2e0e:	61 83       	std	Z+1, r22	; 0x01
    buf[0] = v>>24;
    2e10:	70 83       	st	Z, r23
    2e12:	08 95       	ret

00002e14 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
    return MCMD_DEVS_BATT_NOINFO;
}
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
    2e16:	08 95       	ret

00002e18 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
    2e18:	fc 01       	movw	r30, r24
    2e1a:	68 0f       	add	r22, r24
    2e1c:	79 1f       	adc	r23, r25
    u2_t remainder = 0;
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    u2_t polynomial = 0x1021;
    for( uint i = 0; i < len; i++ ) {
    2e22:	e6 17       	cp	r30, r22
    2e24:	f7 07       	cpc	r31, r23
    2e26:	91 f0       	breq	.+36     	; 0x2e4c <os_crc16+0x34>
        remainder ^= data[i] << 8;
    2e28:	21 91       	ld	r18, Z+
    2e2a:	92 27       	eor	r25, r18
    2e2c:	28 e0       	ldi	r18, 0x08	; 8
    2e2e:	ac 01       	movw	r20, r24
    2e30:	44 0f       	add	r20, r20
    2e32:	55 1f       	adc	r21, r21
        for( u1_t bit = 8; bit > 0; bit--) {
            if( (remainder & 0x8000) )
    2e34:	97 ff       	sbrs	r25, 7
    2e36:	06 c0       	rjmp	.+12     	; 0x2e44 <os_crc16+0x2c>
                remainder = (remainder << 1) ^ polynomial;
    2e38:	ca 01       	movw	r24, r20
    2e3a:	31 e2       	ldi	r19, 0x21	; 33
    2e3c:	83 27       	eor	r24, r19
    2e3e:	30 e1       	ldi	r19, 0x10	; 16
    2e40:	93 27       	eor	r25, r19
    2e42:	01 c0       	rjmp	.+2      	; 0x2e46 <os_crc16+0x2e>
            else 
                remainder <<= 1;
    2e44:	ca 01       	movw	r24, r20
    2e46:	21 50       	subi	r18, 0x01	; 1
u2_t os_crc16 (xref2u1_t data, uint len) {
    u2_t remainder = 0;
    u2_t polynomial = 0x1021;
    for( uint i = 0; i < len; i++ ) {
        remainder ^= data[i] << 8;
        for( u1_t bit = 8; bit > 0; bit--) {
    2e48:	91 f7       	brne	.-28     	; 0x2e2e <os_crc16+0x16>
    2e4a:	eb cf       	rjmp	.-42     	; 0x2e22 <os_crc16+0xa>
            else 
                remainder <<= 1;
        }
    }
    return remainder;
}
    2e4c:	08 95       	ret

00002e4e <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	cf 93       	push	r28
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
    2e54:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    2e58:	81 31       	cpi	r24, 0x11	; 17
    2e5a:	11 f0       	breq	.+4      	; 0x2e60 <decodeBeacon+0x12>
    2e5c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    xref2u1_t d = LMIC.frame;
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
    2e60:	67 e0       	ldi	r22, 0x07	; 7
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	89 ef       	ldi	r24, 0xF9	; 249
    2e66:	93 e0       	ldi	r25, 0x03	; 3
    2e68:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <os_crc16>

// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
    xref2u1_t d = LMIC.frame;
    if(
    2e6c:	20 91 00 04 	lds	r18, 0x0400	; 0x800400 <LMIC+0x148>
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	99 27       	eor	r25, r25
    2e74:	28 17       	cp	r18, r24
    2e76:	39 07       	cpc	r19, r25
    2e78:	09 f0       	breq	.+2      	; 0x2e7c <decodeBeacon+0x2e>
    2e7a:	81 c0       	rjmp	.+258    	; 0x2f7e <decodeBeacon+0x130>
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
    2e7c:	89 ef       	ldi	r24, 0xF9	; 249
    2e7e:	93 e0       	ldi	r25, 0x03	; 3
    2e80:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    if( bcnnetid != LMIC.netid )
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bb 27       	eor	r27, r27
    2e8a:	00 91 5b 03 	lds	r16, 0x035B	; 0x80035b <LMIC+0xa3>
    2e8e:	10 91 5c 03 	lds	r17, 0x035C	; 0x80035c <LMIC+0xa4>
    2e92:	20 91 5d 03 	lds	r18, 0x035D	; 0x80035d <LMIC+0xa5>
    2e96:	30 91 5e 03 	lds	r19, 0x035E	; 0x80035e <LMIC+0xa6>
    2e9a:	80 17       	cp	r24, r16
    2e9c:	91 07       	cpc	r25, r17
    2e9e:	a2 07       	cpc	r26, r18
    2ea0:	b3 07       	cpc	r27, r19
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <decodeBeacon+0x58>
    2ea4:	6f c0       	rjmp	.+222    	; 0x2f84 <decodeBeacon+0x136>
        return -1;  // not the beacon we're looking for

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
    2ea6:	c0 91 45 04 	lds	r28, 0x0445	; 0x800445 <LMIC+0x18d>
    2eaa:	cc 7f       	andi	r28, 0xFC	; 252
    2eac:	c0 93 45 04 	sts	0x0445, r28	; 0x800445 <LMIC+0x18d>
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
    2eb0:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <LMIC+0xd>
    2eb4:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <LMIC+0x18c>
    LMIC.bcninfo.rssi   = LMIC.rssi;
    2eb8:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <LMIC+0xc>
    2ebc:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <LMIC+0x18b>
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
    2ec0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <LMIC+0x4>
    2ec4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <LMIC+0x5>
    2ec8:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <LMIC+0x6>
    2ecc:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <LMIC+0x7>
    2ed0:	80 5a       	subi	r24, 0xA0	; 160
    2ed2:	91 41       	sbci	r25, 0x11	; 17
    2ed4:	a1 09       	sbc	r26, r1
    2ed6:	b1 09       	sbc	r27, r1
    2ed8:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <LMIC+0x187>
    2edc:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <LMIC+0x188>
    2ee0:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <LMIC+0x189>
    2ee4:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <LMIC+0x18a>
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
    2ee8:	8c ef       	ldi	r24, 0xFC	; 252
    2eea:	93 e0       	ldi	r25, 0x03	; 3
    2eec:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    2ef0:	60 93 46 04 	sts	0x0446, r22	; 0x800446 <LMIC+0x18e>
    2ef4:	70 93 47 04 	sts	0x0447, r23	; 0x800447 <LMIC+0x18f>
    2ef8:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <LMIC+0x190>
    2efc:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <LMIC+0x191>
    LMIC.bcninfo.flags |= BCN_PARTIAL;
    2f00:	8c 2f       	mov	r24, r28
    2f02:	81 60       	ori	r24, 0x01	; 1
    2f04:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <LMIC+0x18d>
    2f08:	00 91 08 04 	lds	r16, 0x0408	; 0x800408 <LMIC+0x150>
    2f0c:	10 91 09 04 	lds	r17, 0x0409	; 0x800409 <LMIC+0x151>

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
    2f10:	6f e0       	ldi	r22, 0x0F	; 15
    2f12:	70 e0       	ldi	r23, 0x00	; 0
    2f14:	89 ef       	ldi	r24, 0xF9	; 249
    2f16:	93 e0       	ldi	r25, 0x03	; 3
    2f18:	0e 94 0c 17 	call	0x2e18	; 0x2e18 <os_crc16>
    2f1c:	80 17       	cp	r24, r16
    2f1e:	91 07       	cpc	r25, r17
    2f20:	a1 f5       	brne	.+104    	; 0x2f8a <decodeBeacon+0x13c>
        return 1;
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	94 e0       	ldi	r25, 0x04	; 4
    2f26:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    2f2a:	bb 27       	eor	r27, r27
    2f2c:	97 fd       	sbrc	r25, 7
    2f2e:	ba 95       	dec	r27
    2f30:	a9 2f       	mov	r26, r25
    2f32:	98 2f       	mov	r25, r24
    2f34:	87 2f       	mov	r24, r23
    2f36:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <LMIC+0x193>
    2f3a:	90 93 4c 04 	sts	0x044C, r25	; 0x80044c <LMIC+0x194>
    2f3e:	a0 93 4d 04 	sts	0x044D, r26	; 0x80044d <LMIC+0x195>
    2f42:	b0 93 4e 04 	sts	0x044E, r27	; 0x80044e <LMIC+0x196>
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
    2f46:	84 e0       	ldi	r24, 0x04	; 4
    2f48:	94 e0       	ldi	r25, 0x04	; 4
    2f4a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    2f4e:	bb 27       	eor	r27, r27
    2f50:	97 fd       	sbrc	r25, 7
    2f52:	ba 95       	dec	r27
    2f54:	a9 2f       	mov	r26, r25
    2f56:	98 2f       	mov	r25, r24
    2f58:	87 2f       	mov	r24, r23
    2f5a:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <LMIC+0x197>
    2f5e:	90 93 50 04 	sts	0x0450, r25	; 0x800450 <LMIC+0x198>
    2f62:	a0 93 51 04 	sts	0x0451, r26	; 0x800451 <LMIC+0x199>
    2f66:	b0 93 52 04 	sts	0x0452, r27	; 0x800452 <LMIC+0x19a>
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
    2f6a:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <LMIC+0x149>
    2f6e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <LMIC+0x192>
    LMIC.bcninfo.flags |= BCN_FULL;
    2f72:	c3 60       	ori	r28, 0x03	; 3
    2f74:	c0 93 45 04 	sts	0x0445, r28	; 0x800445 <LMIC+0x18d>
    return 2;
    2f78:	82 e0       	ldi	r24, 0x02	; 2
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	08 c0       	rjmp	.+16     	; 0x2f8e <decodeBeacon+0x140>
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	05 c0       	rjmp	.+10     	; 0x2f8e <decodeBeacon+0x140>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
    if( bcnnetid != LMIC.netid )
        return -1;  // not the beacon we're looking for
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	02 c0       	rjmp	.+4      	; 0x2f8e <decodeBeacon+0x140>
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
    LMIC.bcninfo.flags |= BCN_PARTIAL;

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
        return 1;
    2f8a:	81 e0       	ldi	r24, 0x01	; 1
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
    LMIC.bcninfo.flags |= BCN_FULL;
    return 2;
}
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	08 95       	ret

00002f96 <getSensitivity>:
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
    2f96:	28 2f       	mov	r18, r24
    2f98:	27 70       	andi	r18, 0x07	; 7
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	43 e0       	ldi	r20, 0x03	; 3
    2f9e:	96 95       	lsr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	4a 95       	dec	r20
    2fa4:	e1 f7       	brne	.-8      	; 0x2f9e <getSensitivity+0x8>
    2fa6:	83 70       	andi	r24, 0x03	; 3
    2fa8:	f9 01       	movw	r30, r18
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	e2 54       	subi	r30, 0x42	; 66
    2fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fb6:	e8 0f       	add	r30, r24
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	80 81       	ld	r24, Z
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
}
    2fbe:	8d 58       	subi	r24, 0x8D	; 141
    2fc0:	91 09       	sbc	r25, r1
    2fc2:	08 95       	ret

00002fc4 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
    2fc4:	ef 92       	push	r14
    2fc6:	ff 92       	push	r15
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	fc 01       	movw	r30, r24
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
    2fce:	38 2f       	mov	r19, r24
    2fd0:	37 70       	andi	r19, 0x07	; 7
    2fd2:	a6 2f       	mov	r26, r22
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
    if( sf == FSK ) {
    2fd6:	31 f4       	brne	.+12     	; 0x2fe4 <calcAirTime+0x20>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
    2fd8:	1b 96       	adiw	r26, 0x0b	; 11
    2fda:	25 e0       	ldi	r18, 0x05	; 5
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    2fe2:	8b c0       	rjmp	.+278    	; 0x30fa <calcAirTime+0x136>
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
    }
    u1_t sfx = 4*(sf+(7-SF7));
    2fe4:	63 2f       	mov	r22, r19
    2fe6:	66 0f       	add	r22, r22
    2fe8:	66 0f       	add	r22, r22
    2fea:	68 5e       	subi	r22, 0xE8	; 232
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
    2fec:	35 30       	cpi	r19, 0x05	; 5
    2fee:	10 f4       	brcc	.+4      	; 0x2ff4 <calcAirTime+0x30>
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	01 c0       	rjmp	.+2      	; 0x2ff6 <calcAirTime+0x32>
    2ff4:	28 e0       	ldi	r18, 0x08	; 8
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
    2ff6:	13 e0       	ldi	r17, 0x03	; 3
    2ff8:	aa 0f       	add	r26, r26
    2ffa:	bb 1f       	adc	r27, r27
    2ffc:	1a 95       	dec	r17
    2ffe:	e1 f7       	brne	.-8      	; 0x2ff8 <calcAirTime+0x34>
    3000:	cd 01       	movw	r24, r26
    3002:	86 1b       	sub	r24, r22
    3004:	91 09       	sbc	r25, r1
    3006:	dc 01       	movw	r26, r24
    3008:	5c 96       	adiw	r26, 0x1c	; 28
    300a:	e7 fd       	sbrc	r30, 7
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <calcAirTime+0x50>
    300e:	80 e1       	ldi	r24, 0x10	; 16
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	02 c0       	rjmp	.+4      	; 0x3018 <calcAirTime+0x54>
    3014:	80 e0       	ldi	r24, 0x00	; 0
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	8a 0f       	add	r24, r26
    301a:	9b 1f       	adc	r25, r27
    301c:	4f 2f       	mov	r20, r31
    301e:	55 27       	eor	r21, r21
    3020:	45 2b       	or	r20, r21
    3022:	19 f4       	brne	.+6      	; 0x302a <calcAirTime+0x66>
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	02 c0       	rjmp	.+4      	; 0x302e <calcAirTime+0x6a>
    302a:	44 e1       	ldi	r20, 0x14	; 20
    302c:	50 e0       	ldi	r21, 0x00	; 0
    302e:	84 1b       	sub	r24, r20
    3030:	95 0b       	sbc	r25, r21
    if( tmp > 0 ) {
    3032:	18 16       	cp	r1, r24
    3034:	19 06       	cpc	r1, r25
    3036:	d4 f4       	brge	.+52     	; 0x306c <calcAirTime+0xa8>
        tmp = (tmp + q - 1) / q;
    3038:	62 1b       	sub	r22, r18
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	86 0f       	add	r24, r22
    303e:	97 1f       	adc	r25, r23
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	0e 94 02 32 	call	0x6404	; 0x6404 <__divmodhi4>
        tmp *= getCr(rps)+5;
    3046:	af 01       	movw	r20, r30
    3048:	a5 e0       	ldi	r26, 0x05	; 5
    304a:	56 95       	lsr	r21
    304c:	47 95       	ror	r20
    304e:	aa 95       	dec	r26
    3050:	e1 f7       	brne	.-8      	; 0x304a <calcAirTime+0x86>
    3052:	43 70       	andi	r20, 0x03	; 3
    3054:	50 e0       	ldi	r21, 0x00	; 0
    3056:	4b 5f       	subi	r20, 0xFB	; 251
    3058:	5f 4f       	sbci	r21, 0xFF	; 255
    305a:	46 9f       	mul	r20, r22
    305c:	c0 01       	movw	r24, r0
    305e:	47 9f       	mul	r20, r23
    3060:	90 0d       	add	r25, r0
    3062:	56 9f       	mul	r21, r22
    3064:	90 0d       	add	r25, r0
    3066:	11 24       	eor	r1, r1
        tmp += 8;
    3068:	08 96       	adiw	r24, 0x08	; 8
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <calcAirTime+0xac>
    } else {
        tmp = 8;
    306c:	88 e0       	ldi	r24, 0x08	; 8
    306e:	90 e0       	ldi	r25, 0x00	; 0
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	c1 96       	adiw	r24, 0x31	; 49
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
    307a:	3f 5f       	subi	r19, 0xFF	; 255
    307c:	63 e0       	ldi	r22, 0x03	; 3
    307e:	f6 95       	lsr	r31
    3080:	e7 95       	ror	r30
    3082:	6a 95       	dec	r22
    3084:	e1 f7       	brne	.-8      	; 0x307e <calcAirTime+0xba>
    3086:	e3 70       	andi	r30, 0x03	; 3
    3088:	3e 1b       	sub	r19, r30
    int div = 15625;
    if( sfx > 4 ) {
    308a:	35 30       	cpi	r19, 0x05	; 5
    308c:	50 f0       	brcs	.+20     	; 0x30a2 <calcAirTime+0xde>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
    308e:	34 50       	subi	r19, 0x04	; 4
    3090:	e9 e0       	ldi	r30, 0x09	; 9
    3092:	fd e3       	ldi	r31, 0x3D	; 61
    3094:	02 c0       	rjmp	.+4      	; 0x309a <calcAirTime+0xd6>
    3096:	f5 95       	asr	r31
    3098:	e7 95       	ror	r30
    309a:	3a 95       	dec	r19
    309c:	e2 f7       	brpl	.-8      	; 0x3096 <calcAirTime+0xd2>
        sfx = 4;
    309e:	34 e0       	ldi	r19, 0x04	; 4
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <calcAirTime+0xe2>
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
    int div = 15625;
    30a2:	e9 e0       	ldi	r30, 0x09	; 9
    30a4:	fd e3       	ldi	r31, 0x3D	; 61
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
        sfx = 4;
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
    30a6:	09 2e       	mov	r0, r25
    30a8:	00 0c       	add	r0, r0
    30aa:	aa 0b       	sbc	r26, r26
    30ac:	bb 0b       	sbc	r27, r27
    30ae:	7c 01       	movw	r14, r24
    30b0:	8d 01       	movw	r16, r26
    30b2:	04 c0       	rjmp	.+8      	; 0x30bc <calcAirTime+0xf8>
    30b4:	ee 0c       	add	r14, r14
    30b6:	ff 1c       	adc	r15, r15
    30b8:	00 1f       	adc	r16, r16
    30ba:	11 1f       	adc	r17, r17
    30bc:	3a 95       	dec	r19
    30be:	d2 f7       	brpl	.-12     	; 0x30b4 <calcAirTime+0xf0>
    30c0:	a8 01       	movw	r20, r16
    30c2:	97 01       	movw	r18, r14
    30c4:	a2 e1       	ldi	r26, 0x12	; 18
    30c6:	ba e7       	ldi	r27, 0x7A	; 122
    30c8:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    30cc:	9f 01       	movw	r18, r30
    30ce:	f7 ff       	sbrs	r31, 7
    30d0:	02 c0       	rjmp	.+4      	; 0x30d6 <calcAirTime+0x112>
    30d2:	2f 5f       	subi	r18, 0xFF	; 255
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	35 95       	asr	r19
    30d8:	27 95       	ror	r18
    30da:	89 01       	movw	r16, r18
    30dc:	33 0f       	add	r19, r19
    30de:	22 0b       	sbc	r18, r18
    30e0:	33 0b       	sbc	r19, r19
    30e2:	60 0f       	add	r22, r16
    30e4:	71 1f       	adc	r23, r17
    30e6:	82 1f       	adc	r24, r18
    30e8:	93 1f       	adc	r25, r19
    30ea:	9f 01       	movw	r18, r30
    30ec:	ff 0f       	add	r31, r31
    30ee:	44 0b       	sbc	r20, r20
    30f0:	55 0b       	sbc	r21, r21
    30f2:	0e 94 16 32 	call	0x642c	; 0x642c <__divmodsi4>
    30f6:	ca 01       	movw	r24, r20
    30f8:	b9 01       	movw	r22, r18
}
    30fa:	1f 91       	pop	r17
    30fc:	0f 91       	pop	r16
    30fe:	ff 90       	pop	r15
    3100:	ef 90       	pop	r14
    3102:	08 95       	ret

00003104 <LMIC_stopPingable>:
    }
}


void LMIC_stopPingable (void) {
    LMIC.opmode &= ~(OP_PINGABLE|OP_PINGINI);
    3104:	ef e5       	ldi	r30, 0x5F	; 95
    3106:	f3 e0       	ldi	r31, 0x03	; 3
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	99 7f       	andi	r25, 0xF9	; 249
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	08 95       	ret

00003114 <LMIC_setupBand>:
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}

bit_t LMIC_setupBand (u1_t bandidx, s1_t txpow, u2_t txcap) {
    3114:	cf 93       	push	r28
    3116:	df 93       	push	r29
    if( bandidx > BAND_AUX ) return 0;
    3118:	84 30       	cpi	r24, 0x04	; 4
    311a:	a8 f4       	brcc	.+42     	; 0x3146 <LMIC_setupBand+0x32>
    //band_t* b = &LMIC.bands[bandidx];
    xref2band_t b = &LMIC.bands[bandidx];
    b->txpow = txpow;
    311c:	98 e0       	ldi	r25, 0x08	; 8
    311e:	89 9f       	mul	r24, r25
    3120:	e0 01       	movw	r28, r0
    3122:	11 24       	eor	r1, r1
    3124:	c8 54       	subi	r28, 0x48	; 72
    3126:	dd 4f       	sbci	r29, 0xFD	; 253
    3128:	6d 8f       	std	Y+29, r22	; 0x1d
    b->txcap = txcap;
    312a:	5c 8f       	std	Y+28, r21	; 0x1c
    312c:	4b 8f       	std	Y+27, r20	; 0x1b
    b->avail = os_getTime();
    312e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    3132:	6f 8f       	std	Y+31, r22	; 0x1f
    3134:	78 a3       	std	Y+32, r23	; 0x20
    3136:	89 a3       	std	Y+33, r24	; 0x21
    3138:	9a a3       	std	Y+34, r25	; 0x22
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    313a:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    313e:	8f 70       	andi	r24, 0x0F	; 15
    3140:	8e 8f       	std	Y+30, r24	; 0x1e
    return 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	01 c0       	rjmp	.+2      	; 0x3148 <LMIC_setupBand+0x34>
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
}

bit_t LMIC_setupBand (u1_t bandidx, s1_t txpow, u2_t txcap) {
    if( bandidx > BAND_AUX ) return 0;
    3146:	80 e0       	ldi	r24, 0x00	; 0
    b->txpow = txpow;
    b->txcap = txcap;
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}
    3148:	df 91       	pop	r29
    314a:	cf 91       	pop	r28
    314c:	08 95       	ret

0000314e <LMIC_setupChannel>:

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	0f 93       	push	r16
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	a8 2f       	mov	r26, r24
    if( chidx >= MAX_CHANNELS )
    315e:	80 31       	cpi	r24, 0x10	; 16
    3160:	08 f0       	brcs	.+2      	; 0x3164 <LMIC_setupChannel+0x16>
    3162:	74 c0       	rjmp	.+232    	; 0x324c <LMIC_setupChannel+0xfe>
        return 0;
    if( band == -1 ) {
    3164:	0f 3f       	cpi	r16, 0xFF	; 255
    3166:	c1 f5       	brne	.+112    	; 0x31d8 <LMIC_setupChannel+0x8a>
        if( freq >= 869400000 && freq <= 869650000 )
    3168:	6a 01       	movw	r12, r20
    316a:	7b 01       	movw	r14, r22
    316c:	80 ec       	ldi	r24, 0xC0	; 192
    316e:	c8 1a       	sub	r12, r24
    3170:	8d ef       	ldi	r24, 0xFD	; 253
    3172:	d8 0a       	sbc	r13, r24
    3174:	81 ed       	ldi	r24, 0xD1	; 209
    3176:	e8 0a       	sbc	r14, r24
    3178:	83 e3       	ldi	r24, 0x33	; 51
    317a:	f8 0a       	sbc	r15, r24
    317c:	81 e9       	ldi	r24, 0x91	; 145
    317e:	c8 16       	cp	r12, r24
    3180:	80 ed       	ldi	r24, 0xD0	; 208
    3182:	d8 06       	cpc	r13, r24
    3184:	83 e0       	ldi	r24, 0x03	; 3
    3186:	e8 06       	cpc	r14, r24
    3188:	f1 04       	cpc	r15, r1
    318a:	10 f4       	brcc	.+4      	; 0x3190 <LMIC_setupChannel+0x42>
            freq |= BAND_DECI;   // 10% 27dBm
    318c:	42 60       	ori	r20, 0x02	; 2
    318e:	30 c0       	rjmp	.+96     	; 0x31f0 <LMIC_setupChannel+0xa2>
        else if( (freq >= 868000000 && freq <= 868600000) ||
    3190:	6a 01       	movw	r12, r20
    3192:	7b 01       	movw	r14, r22
    3194:	81 ea       	ldi	r24, 0xA1	; 161
    3196:	d8 1a       	sub	r13, r24
    3198:	8c eb       	ldi	r24, 0xBC	; 188
    319a:	e8 0a       	sbc	r14, r24
    319c:	83 e3       	ldi	r24, 0x33	; 51
    319e:	f8 0a       	sbc	r15, r24
    31a0:	81 ec       	ldi	r24, 0xC1	; 193
    31a2:	c8 16       	cp	r12, r24
    31a4:	87 e2       	ldi	r24, 0x27	; 39
    31a6:	d8 06       	cpc	r13, r24
    31a8:	89 e0       	ldi	r24, 0x09	; 9
    31aa:	e8 06       	cpc	r14, r24
    31ac:	f1 04       	cpc	r15, r1
    31ae:	90 f0       	brcs	.+36     	; 0x31d4 <LMIC_setupChannel+0x86>
    31b0:	6a 01       	movw	r12, r20
    31b2:	7b 01       	movw	r14, r22
    31b4:	80 ea       	ldi	r24, 0xA0	; 160
    31b6:	c8 1a       	sub	r12, r24
    31b8:	81 e9       	ldi	r24, 0x91	; 145
    31ba:	d8 0a       	sbc	r13, r24
    31bc:	86 ed       	ldi	r24, 0xD6	; 214
    31be:	e8 0a       	sbc	r14, r24
    31c0:	83 e3       	ldi	r24, 0x33	; 51
    31c2:	f8 0a       	sbc	r15, r24
    31c4:	81 ee       	ldi	r24, 0xE1	; 225
    31c6:	c8 16       	cp	r12, r24
    31c8:	83 e9       	ldi	r24, 0x93	; 147
    31ca:	d8 06       	cpc	r13, r24
    31cc:	84 e0       	ldi	r24, 0x04	; 4
    31ce:	e8 06       	cpc	r14, r24
    31d0:	f1 04       	cpc	r15, r1
    31d2:	70 f4       	brcc	.+28     	; 0x31f0 <LMIC_setupChannel+0xa2>
                 (freq >= 869700000 && freq <= 870000000)  )
            freq |= BAND_CENTI;  // 1% 14dBm 
    31d4:	41 60       	ori	r20, 0x01	; 1
    31d6:	0c c0       	rjmp	.+24     	; 0x31f0 <LMIC_setupChannel+0xa2>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
    31d8:	04 30       	cpi	r16, 0x04	; 4
    31da:	c4 f5       	brge	.+112    	; 0x324c <LMIC_setupChannel+0xfe>
        freq = (freq&~3) | band;
    31dc:	4c 7f       	andi	r20, 0xFC	; 252
    31de:	c0 2e       	mov	r12, r16
    31e0:	00 0f       	add	r16, r16
    31e2:	dd 08       	sbc	r13, r13
    31e4:	ee 08       	sbc	r14, r14
    31e6:	ff 08       	sbc	r15, r15
    31e8:	4c 29       	or	r20, r12
    31ea:	5d 29       	or	r21, r13
    31ec:	6e 29       	or	r22, r14
    31ee:	7f 29       	or	r23, r15
    }
    LMIC.channelFreq [chidx] = freq;
    31f0:	ea 2f       	mov	r30, r26
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	ef 01       	movw	r28, r30
    31f6:	cc 0f       	add	r28, r28
    31f8:	dd 1f       	adc	r29, r29
    31fa:	cc 0f       	add	r28, r28
    31fc:	dd 1f       	adc	r29, r29
    31fe:	c8 54       	subi	r28, 0x48	; 72
    3200:	dd 4f       	sbci	r29, 0xFD	; 253
    3202:	4b af       	std	Y+59, r20	; 0x3b
    3204:	5c af       	std	Y+60, r21	; 0x3c
    3206:	6d af       	std	Y+61, r22	; 0x3d
    3208:	7e af       	std	Y+62, r23	; 0x3e
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    320a:	21 15       	cp	r18, r1
    320c:	31 05       	cpc	r19, r1
    320e:	19 f0       	breq	.+6      	; 0x3216 <LMIC_setupChannel+0xc8>
    3210:	92 2f       	mov	r25, r18
    3212:	83 2f       	mov	r24, r19
    3214:	02 c0       	rjmp	.+4      	; 0x321a <LMIC_setupChannel+0xcc>
    3216:	9f e3       	ldi	r25, 0x3F	; 63
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	ee 0f       	add	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	ed 5c       	subi	r30, 0xCD	; 205
    3220:	fc 4f       	sbci	r31, 0xFC	; 252
    3222:	90 83       	st	Z, r25
    3224:	81 83       	std	Z+1, r24	; 0x01
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <LMIC_setupChannel+0xe2>
    322c:	88 0f       	add	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	aa 95       	dec	r26
    3232:	e2 f7       	brpl	.-8      	; 0x322c <LMIC_setupChannel+0xde>
    3234:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <LMIC+0x9b>
    3238:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <LMIC+0x9c>
    323c:	82 2b       	or	r24, r18
    323e:	93 2b       	or	r25, r19
    3240:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <LMIC+0x9c>
    3244:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <LMIC+0x9b>
    return 1;
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	01 c0       	rjmp	.+2      	; 0x324e <LMIC_setupChannel+0x100>
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
    if( chidx >= MAX_CHANNELS )
        return 0;
    324c:	80 e0       	ldi	r24, 0x00	; 0
    }
    LMIC.channelFreq [chidx] = freq;
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    return 1;
}
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	df 90       	pop	r13
    325a:	cf 90       	pop	r12
    325c:	08 95       	ret

0000325e <decodeFrame>:
    LMIC.bcninfo.flags |= BCN_FULL;
    return 2;
}


static bit_t decodeFrame (void) {
    325e:	2f 92       	push	r2
    3260:	3f 92       	push	r3
    3262:	4f 92       	push	r4
    3264:	5f 92       	push	r5
    3266:	6f 92       	push	r6
    3268:	7f 92       	push	r7
    326a:	8f 92       	push	r8
    326c:	9f 92       	push	r9
    326e:	af 92       	push	r10
    3270:	bf 92       	push	r11
    3272:	cf 92       	push	r12
    3274:	df 92       	push	r13
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	cf 93       	push	r28
    3280:	df 93       	push	r29
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	29 97       	sbiw	r28, 0x09	; 9
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    u1_t ftype  = hdr & HDR_FTYPE;
    int  dlen   = LMIC.dataLen;
    3292:	00 91 f8 03 	lds	r16, 0x03F8	; 0x8003f8 <LMIC+0x140>
    3296:	10 e0       	ldi	r17, 0x00	; 0
    if( dlen < OFF_DAT_OPTS+4 ||
    3298:	0c 30       	cpi	r16, 0x0C	; 12
    329a:	11 05       	cpc	r17, r1
    329c:	24 f4       	brge	.+8      	; 0x32a6 <decodeFrame+0x48>
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
        LMIC.dataLen = 0;
    329e:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
        return 0;
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	35 c3       	rjmp	.+1642   	; 0x3910 <decodeFrame+0x6b2>
}


static bit_t decodeFrame (void) {
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    32a6:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <LMIC+0x141>
    32aa:	29 83       	std	Y+1, r18	; 0x01
    32ac:	23 70       	andi	r18, 0x03	; 3
    32ae:	28 87       	std	Y+8, r18	; 0x08
    u1_t ftype  = hdr & HDR_FTYPE;
    int  dlen   = LMIC.dataLen;
    if( dlen < OFF_DAT_OPTS+4 ||
    32b0:	21 11       	cpse	r18, r1
    32b2:	f5 cf       	rjmp	.-22     	; 0x329e <decodeFrame+0x40>


static bit_t decodeFrame (void) {
    xref2u1_t d = LMIC.frame;
    u1_t hdr    = d[0];
    u1_t ftype  = hdr & HDR_FTYPE;
    32b4:	39 81       	ldd	r19, Y+1	; 0x01
    32b6:	30 7e       	andi	r19, 0xE0	; 224
    32b8:	3e 83       	std	Y+6, r19	; 0x06
    int  dlen   = LMIC.dataLen;
    if( dlen < OFF_DAT_OPTS+4 ||
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
    32ba:	30 36       	cpi	r19, 0x60	; 96
    32bc:	11 f0       	breq	.+4      	; 0x32c2 <decodeFrame+0x64>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
    32be:	30 3a       	cpi	r19, 0xA0	; 160
    32c0:	71 f7       	brne	.-36     	; 0x329e <decodeFrame+0x40>
        return 0;
    }
    // Validate exact frame length
    // Note: device address was already read+evaluated in order to arrive here.
    int  fct   = d[OFF_DAT_FCT];
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
    32c2:	8a ef       	ldi	r24, 0xFA	; 250
    32c4:	93 e0       	ldi	r25, 0x03	; 3
    32c6:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    32ca:	ab 01       	movw	r20, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	80 91 ff 03 	lds	r24, 0x03FF	; 0x8003ff <LMIC+0x147>
    32d2:	90 91 00 04 	lds	r25, 0x0400	; 0x800400 <LMIC+0x148>
    int  olen  = fct & FCT_OPTLEN;
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
    int  poff  = OFF_DAT_OPTS+olen;
    int  pend  = dlen-4;  // MIC

    if( addr != LMIC.devaddr ) {
    32d6:	c0 90 c5 03 	lds	r12, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    32da:	d0 90 c6 03 	lds	r13, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    32de:	e0 90 c7 03 	lds	r14, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    32e2:	f0 90 c8 03 	lds	r15, 0x03C8	; 0x8003c8 <LMIC+0x110>
    32e6:	4c 15       	cp	r20, r12
    32e8:	5d 05       	cpc	r21, r13
    32ea:	6e 05       	cpc	r22, r14
    32ec:	7f 05       	cpc	r23, r15
    32ee:	b9 f6       	brne	.-82     	; 0x329e <decodeFrame+0x40>
        LMIC.dataLen = 0;
        return 0;
    }
    // Validate exact frame length
    // Note: device address was already read+evaluated in order to arrive here.
    int  fct   = d[OFF_DAT_FCT];
    32f0:	a0 91 fe 03 	lds	r26, 0x03FE	; 0x8003fe <LMIC+0x146>
    32f4:	ab 83       	std	Y+3, r26	; 0x03
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
    int  olen  = fct & FCT_OPTLEN;
    32f6:	2a 2f       	mov	r18, r26
    32f8:	2f 70       	andi	r18, 0x0F	; 15
    32fa:	e2 2f       	mov	r30, r18
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	fd 83       	std	Y+5, r31	; 0x05
    3300:	ec 83       	std	Y+4, r30	; 0x04
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
    int  poff  = OFF_DAT_OPTS+olen;
    3302:	4f 01       	movw	r8, r30
    3304:	f8 e0       	ldi	r31, 0x08	; 8
    3306:	8f 0e       	add	r8, r31
    3308:	91 1c       	adc	r9, r1
    int  pend  = dlen-4;  // MIC
    330a:	18 01       	movw	r2, r16
    330c:	24 e0       	ldi	r18, 0x04	; 4
    330e:	22 1a       	sub	r2, r18
    3310:	31 08       	sbc	r3, r1
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
    }
    if( poff > pend ) {
    3312:	28 14       	cp	r2, r8
    3314:	39 04       	cpc	r3, r9
    3316:	1c f2       	brlt	.-122    	; 0x329e <decodeFrame+0x40>
    }

    int port = -1;
    int replayConf = 0;

    if( pend > poff )
    3318:	82 14       	cp	r8, r2
    331a:	93 04       	cpc	r9, r3
    331c:	6c f4       	brge	.+26     	; 0x3338 <decodeFrame+0xda>
        port = d[poff++];
    331e:	f4 01       	movw	r30, r8
    3320:	e7 50       	subi	r30, 0x07	; 7
    3322:	fc 4f       	sbci	r31, 0xFC	; 252
    3324:	20 81       	ld	r18, Z
    3326:	a2 2f       	mov	r26, r18
    3328:	b0 e0       	ldi	r27, 0x00	; 0
    332a:	ba 83       	std	Y+2, r27	; 0x02
    332c:	a9 83       	std	Y+1, r26	; 0x01
    332e:	ec 81       	ldd	r30, Y+4	; 0x04
    3330:	fd 81       	ldd	r31, Y+5	; 0x05
    3332:	39 96       	adiw	r30, 0x09	; 9
    3334:	4f 01       	movw	r8, r30
    3336:	04 c0       	rjmp	.+8      	; 0x3340 <decodeFrame+0xe2>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
    }

    int port = -1;
    3338:	2f ef       	ldi	r18, 0xFF	; 255
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	3a 83       	std	Y+2, r19	; 0x02
    333e:	29 83       	std	Y+1, r18	; 0x01
    int replayConf = 0;

    if( pend > poff )
        port = d[poff++];

    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
    3340:	40 90 c9 03 	lds	r4, 0x03C9	; 0x8003c9 <LMIC+0x111>
    3344:	50 90 ca 03 	lds	r5, 0x03CA	; 0x8003ca <LMIC+0x112>
    3348:	60 90 cb 03 	lds	r6, 0x03CB	; 0x8003cb <LMIC+0x113>
    334c:	70 90 cc 03 	lds	r7, 0x03CC	; 0x8003cc <LMIC+0x114>
    3350:	84 19       	sub	r24, r4
    3352:	95 09       	sbc	r25, r5
    3354:	48 0e       	add	r4, r24
    3356:	59 1e       	adc	r5, r25
    3358:	61 1c       	adc	r6, r1
    335a:	71 1c       	adc	r7, r1

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
    os_clearMem(AESaux,16);
    335c:	10 e1       	ldi	r17, 0x10	; 16
    335e:	e4 e0       	ldi	r30, 0x04	; 4
    3360:	f5 e0       	ldi	r31, 0x05	; 5
    3362:	df 01       	movw	r26, r30
    3364:	21 2f       	mov	r18, r17
    3366:	1d 92       	st	X+, r1
    3368:	2a 95       	dec	r18
    336a:	e9 f7       	brne	.-6      	; 0x3366 <decodeFrame+0x108>
    AESaux[0]  = 0x49;
    336c:	89 e4       	ldi	r24, 0x49	; 73
    336e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <AESAUX>
    AESaux[5]  = dndir?1:0;
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <AESAUX+0x5>
    AESaux[15] = len;
    3378:	20 92 13 05 	sts	0x0513, r2	; 0x800513 <AESAUX+0xf>
    os_wlsbf4(AESaux+ 6,devaddr);
    337c:	8a e0       	ldi	r24, 0x0A	; 10
    337e:	95 e0       	ldi	r25, 0x05	; 5
    3380:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    3384:	b3 01       	movw	r22, r6
    3386:	a2 01       	movw	r20, r4
    3388:	8e e0       	ldi	r24, 0x0E	; 14
    338a:	95 e0       	ldi	r25, 0x05	; 5
    338c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
}


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
    micB0(devaddr, seqno, dndir, len);
    os_copyMem(AESkey,key,16);
    3390:	e5 ea       	ldi	r30, 0xA5	; 165
    3392:	f3 e0       	ldi	r31, 0x03	; 3
    3394:	a4 e5       	ldi	r26, 0x54	; 84
    3396:	b4 e0       	ldi	r27, 0x04	; 4
    3398:	01 90       	ld	r0, Z+
    339a:	0d 92       	st	X+, r0
    339c:	1a 95       	dec	r17
    339e:	e1 f7       	brne	.-8      	; 0x3398 <decodeFrame+0x13a>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
    33a0:	a1 01       	movw	r20, r2
    33a2:	69 ef       	ldi	r22, 0xF9	; 249
    33a4:	73 e0       	ldi	r23, 0x03	; 3
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    33ac:	6b 01       	movw	r12, r22
    33ae:	7c 01       	movw	r14, r24
    33b0:	c1 01       	movw	r24, r2
    33b2:	87 50       	subi	r24, 0x07	; 7
    33b4:	9c 4f       	sbci	r25, 0xFC	; 252
    33b6:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <os_rmsbf4>
    if( pend > poff )
        port = d[poff++];

    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);

    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
    33ba:	c6 16       	cp	r12, r22
    33bc:	d7 06       	cpc	r13, r23
    33be:	e8 06       	cpc	r14, r24
    33c0:	f9 06       	cpc	r15, r25
    33c2:	09 f0       	breq	.+2      	; 0x33c6 <decodeFrame+0x168>
    33c4:	6c cf       	rjmp	.-296    	; 0x329e <decodeFrame+0x40>
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
    }
    if( seqno < LMIC.seqnoDn ) {
    33c6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <LMIC+0x111>
    33ca:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <LMIC+0x112>
    33ce:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <LMIC+0x113>
    33d2:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <LMIC+0x114>
    33d6:	48 16       	cp	r4, r24
    33d8:	59 06       	cpc	r5, r25
    33da:	6a 06       	cpc	r6, r26
    33dc:	7b 06       	cpc	r7, r27
    33de:	e8 f4       	brcc	.+58     	; 0x341a <decodeFrame+0x1bc>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
    33e0:	84 15       	cp	r24, r4
    33e2:	95 05       	cpc	r25, r5
    33e4:	a6 05       	cpc	r26, r6
    33e6:	b7 05       	cpc	r27, r7
    33e8:	0c f4       	brge	.+2      	; 0x33ec <decodeFrame+0x18e>
    33ea:	59 cf       	rjmp	.-334    	; 0x329e <decodeFrame+0x40>
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
        }
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	a1 09       	sbc	r26, r1
    33f0:	b1 09       	sbc	r27, r1
    33f2:	48 16       	cp	r4, r24
    33f4:	59 06       	cpc	r5, r25
    33f6:	6a 06       	cpc	r6, r26
    33f8:	7b 06       	cpc	r7, r27
    33fa:	09 f0       	breq	.+2      	; 0x33fe <decodeFrame+0x1a0>
    33fc:	50 cf       	rjmp	.-352    	; 0x329e <decodeFrame+0x40>
    33fe:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <LMIC+0x119>
    3402:	88 23       	and	r24, r24
    3404:	09 f4       	brne	.+2      	; 0x3408 <decodeFrame+0x1aa>
    3406:	4b cf       	rjmp	.-362    	; 0x329e <decodeFrame+0x40>
    3408:	3e 81       	ldd	r19, Y+6	; 0x06
    340a:	30 3a       	cpi	r19, 0xA0	; 160
    340c:	09 f0       	breq	.+2      	; 0x3410 <decodeFrame+0x1b2>
    340e:	47 cf       	rjmp	.-370    	; 0x329e <decodeFrame+0x40>
                                e_.info2  = seqno));
            goto norx;
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
    3410:	81 e0       	ldi	r24, 0x01	; 1
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	9f 83       	std	Y+7, r25	; 0x07
    3416:	8e 83       	std	Y+6, r24	; 0x06
    3418:	17 c0       	rjmp	.+46     	; 0x3448 <decodeFrame+0x1ea>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
    341a:	d3 01       	movw	r26, r6
    341c:	c2 01       	movw	r24, r4
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	a1 1d       	adc	r26, r1
    3422:	b1 1d       	adc	r27, r1
    3424:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <LMIC+0x111>
    3428:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <LMIC+0x112>
    342c:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <LMIC+0x113>
    3430:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <LMIC+0x114>
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
    3434:	9e 81       	ldd	r25, Y+6	; 0x06
    3436:	90 3a       	cpi	r25, 0xA0	; 160
    3438:	11 f4       	brne	.+4      	; 0x343e <decodeFrame+0x1e0>
    343a:	80 e2       	ldi	r24, 0x20	; 32
    343c:	01 c0       	rjmp	.+2      	; 0x3440 <decodeFrame+0x1e2>
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <LMIC+0x119>
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
    }

    int port = -1;
    int replayConf = 0;
    3444:	1f 82       	std	Y+7, r1	; 0x07
    3446:	1e 82       	std	Y+6, r1	; 0x06
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
    3448:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <LMIC+0x119>
    344c:	81 11       	cpse	r24, r1
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <decodeFrame+0x1f8>
    3450:	ab 81       	ldd	r26, Y+3	; 0x03
    3452:	a4 ff       	sbrs	r26, 4
    3454:	09 c0       	rjmp	.+18     	; 0x3468 <decodeFrame+0x20a>
        LMIC.opmode |= OP_POLL;
    3456:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    345a:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    345e:	80 61       	ori	r24, 0x10	; 16
    3460:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    3464:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
    3468:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <LMIC+0xad>
    346c:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <LMIC+0x11b>
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
    3470:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <LMIC+0x11a>
    3474:	80 38       	cpi	r24, 0x80	; 128
    3476:	19 f0       	breq	.+6      	; 0x347e <decodeFrame+0x220>
        LMIC.adrAckReq = LINK_CHECK_INIT;
    3478:	84 ef       	ldi	r24, 0xF4	; 244
    347a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <LMIC+0x11a>

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
    347e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <LMIC+0xe>
    3482:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <LMIC+0xf>
    3486:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <getSensitivity>
    348a:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <LMIC+0xc>
    348e:	02 2e       	mov	r0, r18
    3490:	00 0c       	add	r0, r0
    3492:	33 0b       	sbc	r19, r19
    3494:	20 54       	subi	r18, 0x40	; 64
    3496:	31 09       	sbc	r19, r1
    3498:	28 1b       	sub	r18, r24
    349a:	39 0b       	sbc	r19, r25
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
    349c:	37 fd       	sbrc	r19, 7
    349e:	06 c0       	rjmp	.+12     	; 0x34ac <decodeFrame+0x24e>
    34a0:	2f 3f       	cpi	r18, 0xFF	; 255
    34a2:	31 05       	cpc	r19, r1
    34a4:	14 f0       	brlt	.+4      	; 0x34aa <decodeFrame+0x24c>
    34a6:	2e ef       	ldi	r18, 0xFE	; 254
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	28 87       	std	Y+8, r18	; 0x08
    34ac:	b8 85       	ldd	r27, Y+8	; 0x08
    34ae:	b0 93 d5 03 	sts	0x03D5, r27	; 0x8003d5 <LMIC+0x11d>

    xref2u1_t opts = &d[OFF_DAT_OPTS];
    int oidx = 0;
    34b2:	19 86       	std	Y+9, r1	; 0x09
    34b4:	18 86       	std	Y+8, r1	; 0x08
    while( oidx < olen ) {
    34b6:	88 85       	ldd	r24, Y+8	; 0x08
    34b8:	99 85       	ldd	r25, Y+9	; 0x09
    34ba:	ac 81       	ldd	r26, Y+4	; 0x04
    34bc:	bd 81       	ldd	r27, Y+5	; 0x05
    34be:	8a 17       	cp	r24, r26
    34c0:	9b 07       	cpc	r25, r27
    34c2:	0c f0       	brlt	.+2      	; 0x34c6 <decodeFrame+0x268>
    34c4:	c6 c1       	rjmp	.+908    	; 0x3852 <decodeFrame+0x5f4>
        switch( opts[oidx] ) {
    34c6:	e8 85       	ldd	r30, Y+8	; 0x08
    34c8:	f9 85       	ldd	r31, Y+9	; 0x09
    34ca:	ef 5f       	subi	r30, 0xFF	; 255
    34cc:	fb 4f       	sbci	r31, 0xFB	; 251
    34ce:	e0 81       	ld	r30, Z
    34d0:	8e 2f       	mov	r24, r30
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	fc 01       	movw	r30, r24
    34d6:	32 97       	sbiw	r30, 0x02	; 2
    34d8:	e1 31       	cpi	r30, 0x11	; 17
    34da:	f1 05       	cpc	r31, r1
    34dc:	08 f0       	brcs	.+2      	; 0x34e0 <decodeFrame+0x282>
    34de:	b9 c1       	rjmp	.+882    	; 0x3852 <decodeFrame+0x5f4>
    34e0:	ec 5c       	subi	r30, 0xCC	; 204
    34e2:	ff 4f       	sbci	r31, 0xFF	; 255
    34e4:	0c 94 35 32 	jmp	0x646a	; 0x646a <__tablejump2__>
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
    34e8:	e8 85       	ldd	r30, Y+8	; 0x08
    34ea:	f9 85       	ldd	r31, Y+9	; 0x09
    34ec:	33 96       	adiw	r30, 0x03	; 3
    34ee:	f9 87       	std	Y+9, r31	; 0x09
    34f0:	e8 87       	std	Y+8, r30	; 0x08
            continue;
    34f2:	e1 cf       	rjmp	.-62     	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
    34f4:	e8 85       	ldd	r30, Y+8	; 0x08
    34f6:	f9 85       	ldd	r31, Y+9	; 0x09
    34f8:	ee 5f       	subi	r30, 0xFE	; 254
    34fa:	fb 4f       	sbci	r31, 0xFB	; 251
    34fc:	a0 81       	ld	r26, Z
    34fe:	e8 85       	ldd	r30, Y+8	; 0x08
    3500:	f9 85       	ldd	r31, Y+9	; 0x09
    3502:	ed 5f       	subi	r30, 0xFD	; 253
    3504:	fb 4f       	sbci	r31, 0xFB	; 251
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
    350a:	e8 85       	ldd	r30, Y+8	; 0x08
    350c:	f9 85       	ldd	r31, Y+9	; 0x09
    350e:	eb 5f       	subi	r30, 0xFB	; 251
    3510:	fb 4f       	sbci	r31, 0xFB	; 251
    3512:	b0 81       	ld	r27, Z
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
            oidx += 5;
    3514:	28 85       	ldd	r18, Y+8	; 0x08
    3516:	39 85       	ldd	r19, Y+9	; 0x09
    3518:	2b 5f       	subi	r18, 0xFB	; 251
    351a:	3f 4f       	sbci	r19, 0xFF	; 255
    351c:	39 87       	std	Y+9, r19	; 0x09
    351e:	28 87       	std	Y+8, r18	; 0x08

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
    3520:	37 e8       	ldi	r19, 0x87	; 135
    3522:	30 93 d6 03 	sts	0x03D6, r19	; 0x8003d6 <LMIC+0x11e>
    return freq;
}

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
    3526:	2b 2f       	mov	r18, r27
    3528:	20 7f       	andi	r18, 0xF0	; 240
    352a:	09 f0       	breq	.+2      	; 0x352e <decodeFrame+0x2d0>
    352c:	e4 c1       	rjmp	.+968    	; 0x38f6 <decodeFrame+0x698>
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	09 f4       	brne	.+2      	; 0x3534 <decodeFrame+0x2d6>
    3532:	e1 c1       	rjmp	.+962    	; 0x38f6 <decodeFrame+0x698>
    3534:	20 91 53 03 	lds	r18, 0x0353	; 0x800353 <LMIC+0x9b>
    3538:	30 91 54 03 	lds	r19, 0x0354	; 0x800354 <LMIC+0x9c>
    353c:	20 95       	com	r18
    353e:	30 95       	com	r19
    3540:	28 23       	and	r18, r24
    3542:	39 23       	and	r19, r25
    3544:	23 2b       	or	r18, r19
    3546:	09 f0       	breq	.+2      	; 0x354a <decodeFrame+0x2ec>
    3548:	d6 c1       	rjmp	.+940    	; 0x38f6 <decodeFrame+0x698>
    354a:	e8 eb       	ldi	r30, 0xB8	; 184
    354c:	f2 e0       	ldi	r31, 0x02	; 2
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
        return 0;  // illegal input
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	02 2e       	mov	r0, r18
    3558:	02 c0       	rjmp	.+4      	; 0x355e <decodeFrame+0x300>
    355a:	44 0f       	add	r20, r20
    355c:	55 1f       	adc	r21, r21
    355e:	0a 94       	dec	r0
    3560:	e2 f7       	brpl	.-8      	; 0x355a <decodeFrame+0x2fc>
    3562:	ba 01       	movw	r22, r20
    3564:	68 23       	and	r22, r24
    3566:	79 23       	and	r23, r25
    3568:	67 2b       	or	r22, r23
    356a:	61 f0       	breq	.+24     	; 0x3584 <decodeFrame+0x326>
    356c:	c3 ac       	ldd	r12, Z+59	; 0x3b
    356e:	d4 ac       	ldd	r13, Z+60	; 0x3c
    3570:	e5 ac       	ldd	r14, Z+61	; 0x3d
    3572:	f6 ac       	ldd	r15, Z+62	; 0x3e
    3574:	cd 28       	or	r12, r13
    3576:	ce 28       	or	r12, r14
    3578:	cf 28       	or	r12, r15
    357a:	21 f4       	brne	.+8      	; 0x3584 <decodeFrame+0x326>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
    357c:	40 95       	com	r20
    357e:	50 95       	com	r21
    3580:	84 23       	and	r24, r20
    3582:	95 23       	and	r25, r21
    3584:	2f 5f       	subi	r18, 0xFF	; 255
    3586:	3f 4f       	sbci	r19, 0xFF	; 255
    3588:	34 96       	adiw	r30, 0x04	; 4

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
        return 0;  // illegal input
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
    358a:	20 31       	cpi	r18, 0x10	; 16
    358c:	31 05       	cpc	r19, r1
    358e:	09 f7       	brne	.-62     	; 0x3552 <decodeFrame+0x2f4>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
            chmap &= ~(1<<chnl); // ignore - channel is not defined
    }
    LMIC.channelMap = chmap;
    3590:	90 93 54 03 	sts	0x0354, r25	; 0x800354 <LMIC+0x9c>
    3594:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <LMIC+0x9b>

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
    3598:	8a 2f       	mov	r24, r26
    359a:	82 95       	swap	r24
    359c:	8f 70       	andi	r24, 0x0F	; 15
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
    359e:	e8 2f       	mov	r30, r24
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	ed 51       	subi	r30, 0x1D	; 29
    35a4:	fe 4f       	sbci	r31, 0xFE	; 254
            if( !validDR(dr) ) {
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	9f 3f       	cpi	r25, 0xFF	; 255
    35aa:	29 f4       	brne	.+10     	; 0x35b6 <decodeFrame+0x358>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
    35ac:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <LMIC+0x11e>
    35b0:	9d 7f       	andi	r25, 0xFD	; 253
    35b2:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <LMIC+0x11e>
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
    35b6:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <LMIC+0x11e>
    35ba:	9f 77       	andi	r25, 0x7F	; 127
    35bc:	97 30       	cpi	r25, 0x07	; 7
    35be:	51 f4       	brne	.+20     	; 0x35d4 <decodeFrame+0x376>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
    35c0:	bf 70       	andi	r27, 0x0F	; 15
    35c2:	b0 93 61 03 	sts	0x0361, r27	; 0x800361 <LMIC+0xa9>
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
    35c6:	af 70       	andi	r26, 0x0F	; 15
    35c8:	b0 e0       	ldi	r27, 0x00	; 0
    35ca:	ad 52       	subi	r26, 0x2D	; 45
    35cc:	be 4f       	sbci	r27, 0xFE	; 254
    35ce:	6c 91       	ld	r22, X
    35d0:	0e 94 56 14 	call	0x28ac	; 0x28ac <setDrTxpow.isra.1>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <LMIC+0x11b>
            continue;
    35da:	6d cf       	rjmp	.-294    	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <LMIC+0x11f>
            oidx += 1;
    35e2:	a8 85       	ldd	r26, Y+8	; 0x08
    35e4:	b9 85       	ldd	r27, Y+9	; 0x09
    35e6:	11 96       	adiw	r26, 0x01	; 1
    35e8:	b9 87       	std	Y+9, r27	; 0x09
    35ea:	a8 87       	std	Y+8, r26	; 0x08
            continue;
    35ec:	64 cf       	rjmp	.-312    	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
    35ee:	e8 85       	ldd	r30, Y+8	; 0x08
    35f0:	f9 85       	ldd	r31, Y+9	; 0x09
    35f2:	ee 5f       	subi	r30, 0xFE	; 254
    35f4:	fb 4f       	sbci	r31, 0xFB	; 251
    35f6:	10 81       	ld	r17, Z
    35f8:	1f 70       	andi	r17, 0x0F	; 15
            u4_t freq = convFreq(&opts[oidx+2]);
    35fa:	88 85       	ldd	r24, Y+8	; 0x08
    35fc:	99 85       	ldd	r25, Y+9	; 0x09
    35fe:	8d 5f       	subi	r24, 0xFD	; 253
    3600:	9b 4f       	sbci	r25, 0xFB	; 251
    3602:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <convFreq>
            oidx += 5;
    3606:	e8 85       	ldd	r30, Y+8	; 0x08
    3608:	f9 85       	ldd	r31, Y+9	; 0x09
    360a:	35 96       	adiw	r30, 0x05	; 5
    360c:	f9 87       	std	Y+9, r31	; 0x09
    360e:	e8 87       	std	Y+8, r30	; 0x08
            LMIC.dn2Ans = 0x80;   // answer pending
    3610:	f0 e8       	ldi	r31, 0x80	; 128
    3612:	f0 93 e1 03 	sts	0x03E1, r31	; 0x8003e1 <LMIC+0x129>
    3616:	e1 2f       	mov	r30, r17
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	ed 51       	subi	r30, 0x1D	; 29
    361c:	fe 4f       	sbci	r31, 0xFE	; 254
            if( validDR(dr) )
    361e:	21 81       	ldd	r18, Z+1	; 0x01
    3620:	2f 3f       	cpi	r18, 0xFF	; 255
    3622:	09 f4       	brne	.+2      	; 0x3626 <decodeFrame+0x3c8>
    3624:	6c c1       	rjmp	.+728    	; 0x38fe <decodeFrame+0x6a0>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
    3626:	22 e8       	ldi	r18, 0x82	; 130
    3628:	20 93 e1 03 	sts	0x03E1, r18	; 0x8003e1 <LMIC+0x129>
            if( freq != 0 )
    362c:	61 15       	cp	r22, r1
    362e:	71 05       	cpc	r23, r1
    3630:	81 05       	cpc	r24, r1
    3632:	91 05       	cpc	r25, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <decodeFrame+0x3da>
    3636:	3f cf       	rjmp	.-386    	; 0x34b6 <decodeFrame+0x258>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
    3638:	33 e8       	ldi	r19, 0x83	; 131
    363a:	30 93 e1 03 	sts	0x03E1, r19	; 0x8003e1 <LMIC+0x129>
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
                LMIC.dn2Dr = dr;
    363e:	10 93 dc 03 	sts	0x03DC, r17	; 0x8003dc <LMIC+0x124>
                LMIC.dn2Freq = freq;
    3642:	60 93 dd 03 	sts	0x03DD, r22	; 0x8003dd <LMIC+0x125>
    3646:	70 93 de 03 	sts	0x03DE, r23	; 0x8003de <LMIC+0x126>
    364a:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <LMIC+0x127>
    364e:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <LMIC+0x128>
    3652:	31 cf       	rjmp	.-414    	; 0x34b6 <decodeFrame+0x258>
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
    3654:	e8 85       	ldd	r30, Y+8	; 0x08
    3656:	f9 85       	ldd	r31, Y+9	; 0x09
    3658:	ee 5f       	subi	r30, 0xFE	; 254
    365a:	fb 4f       	sbci	r31, 0xFB	; 251
    365c:	20 81       	ld	r18, Z
            oidx += 2;
    365e:	88 85       	ldd	r24, Y+8	; 0x08
    3660:	99 85       	ldd	r25, Y+9	; 0x09
    3662:	02 96       	adiw	r24, 0x02	; 2
    3664:	99 87       	std	Y+9, r25	; 0x09
    3666:	88 87       	std	Y+8, r24	; 0x08
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
    3668:	2f 3f       	cpi	r18, 0xFF	; 255
    366a:	49 f4       	brne	.+18     	; 0x367e <decodeFrame+0x420>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
    366c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3670:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3674:	80 64       	ori	r24, 0x40	; 64
    3676:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    367a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
            LMIC.globalDutyRate  = cap & 0xF;
    367e:	2f 70       	andi	r18, 0x0F	; 15
    3680:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <LMIC+0x9e>
            LMIC.globalDutyAvail = os_getTime();
    3684:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    3688:	60 93 57 03 	sts	0x0357, r22	; 0x800357 <LMIC+0x9f>
    368c:	70 93 58 03 	sts	0x0358, r23	; 0x800358 <LMIC+0xa0>
    3690:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <LMIC+0xa1>
    3694:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <LMIC+0xa2>
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
    3698:	91 e0       	ldi	r25, 0x01	; 1
    369a:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <LMIC+0x122>
            continue;
    369e:	0b cf       	rjmp	.-490    	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
    36a0:	e8 85       	ldd	r30, Y+8	; 0x08
    36a2:	f9 85       	ldd	r31, Y+9	; 0x09
    36a4:	ee 5f       	subi	r30, 0xFE	; 254
    36a6:	fb 4f       	sbci	r31, 0xFB	; 251
    36a8:	d0 80       	ld	r13, Z
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
    36aa:	88 85       	ldd	r24, Y+8	; 0x08
    36ac:	99 85       	ldd	r25, Y+9	; 0x09
    36ae:	8d 5f       	subi	r24, 0xFD	; 253
    36b0:	9b 4f       	sbci	r25, 0xFB	; 251
    36b2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <convFreq>
    36b6:	ab 01       	movw	r20, r22
    36b8:	bc 01       	movw	r22, r24
            u1_t drs   = opts[oidx+5];  // datarate span
    36ba:	e8 85       	ldd	r30, Y+8	; 0x08
    36bc:	f9 85       	ldd	r31, Y+9	; 0x09
    36be:	ea 5f       	subi	r30, 0xFA	; 250
    36c0:	fb 4f       	sbci	r31, 0xFB	; 251
    36c2:	e0 81       	ld	r30, Z
            LMIC.snchAns = 0x80;
    36c4:	a0 e8       	ldi	r26, 0x80	; 128
    36c6:	a0 93 db 03 	sts	0x03DB, r26	; 0x8003db <LMIC+0x123>
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
    36ca:	41 15       	cp	r20, r1
    36cc:	51 05       	cpc	r21, r1
    36ce:	61 05       	cpc	r22, r1
    36d0:	71 05       	cpc	r23, r1
    36d2:	21 f1       	breq	.+72     	; 0x371c <decodeFrame+0x4be>
    36d4:	8e 2f       	mov	r24, r30
    36d6:	82 95       	swap	r24
    36d8:	8f 70       	andi	r24, 0x0F	; 15
    36da:	2f e0       	ldi	r18, 0x0F	; 15
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	28 1b       	sub	r18, r24
    36e0:	31 09       	sbc	r19, r1
    36e2:	c9 01       	movw	r24, r18
    36e4:	2f ef       	ldi	r18, 0xFF	; 255
    36e6:	3f ef       	ldi	r19, 0xFF	; 255
    36e8:	02 c0       	rjmp	.+4      	; 0x36ee <decodeFrame+0x490>
    36ea:	36 95       	lsr	r19
    36ec:	27 95       	ror	r18
    36ee:	8a 95       	dec	r24
    36f0:	e2 f7       	brpl	.-8      	; 0x36ea <decodeFrame+0x48c>
    36f2:	ef 70       	andi	r30, 0x0F	; 15
    36f4:	8f ef       	ldi	r24, 0xFF	; 255
    36f6:	9f ef       	ldi	r25, 0xFF	; 255
    36f8:	02 c0       	rjmp	.+4      	; 0x36fe <decodeFrame+0x4a0>
    36fa:	88 0f       	add	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	ea 95       	dec	r30
    3700:	e2 f7       	brpl	.-8      	; 0x36fa <decodeFrame+0x49c>
    3702:	28 23       	and	r18, r24
    3704:	39 23       	and	r19, r25
    3706:	0f ef       	ldi	r16, 0xFF	; 255
    3708:	8d 2d       	mov	r24, r13
    370a:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
    370e:	88 23       	and	r24, r24
    3710:	29 f0       	breq	.+10     	; 0x371c <decodeFrame+0x4be>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
    3712:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <LMIC+0x123>
    3716:	83 60       	ori	r24, 0x03	; 3
    3718:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <LMIC+0x123>
            oidx += 6;
    371c:	88 85       	ldd	r24, Y+8	; 0x08
    371e:	99 85       	ldd	r25, Y+9	; 0x09
    3720:	06 96       	adiw	r24, 0x06	; 6
    3722:	99 87       	std	Y+9, r25	; 0x09
    3724:	88 87       	std	Y+8, r24	; 0x08
            continue;
    3726:	c7 ce       	rjmp	.-626    	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
    3728:	88 85       	ldd	r24, Y+8	; 0x08
    372a:	99 85       	ldd	r25, Y+9	; 0x09
    372c:	8e 5f       	subi	r24, 0xFE	; 254
    372e:	9b 4f       	sbci	r25, 0xFB	; 251
    3730:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <convFreq>
            oidx += 4;
    3734:	a8 85       	ldd	r26, Y+8	; 0x08
    3736:	b9 85       	ldd	r27, Y+9	; 0x09
    3738:	14 96       	adiw	r26, 0x04	; 4
    373a:	b9 87       	std	Y+9, r27	; 0x09
    373c:	a8 87       	std	Y+8, r26	; 0x08
            u1_t flags = 0x80;
            if( freq != 0 ) {
    373e:	61 15       	cp	r22, r1
    3740:	71 05       	cpc	r23, r1
    3742:	81 05       	cpc	r24, r1
    3744:	91 05       	cpc	r25, r1
    3746:	51 f0       	breq	.+20     	; 0x375c <decodeFrame+0x4fe>
                flags |= MCMD_PING_ANS_FQACK;
                LMIC.ping.freq = freq;
    3748:	60 93 f1 03 	sts	0x03F1, r22	; 0x8003f1 <LMIC+0x139>
    374c:	70 93 f2 03 	sts	0x03F2, r23	; 0x8003f2 <LMIC+0x13a>
    3750:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <LMIC+0x13b>
    3754:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <LMIC+0x13c>
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
            oidx += 4;
            u1_t flags = 0x80;
            if( freq != 0 ) {
                flags |= MCMD_PING_ANS_FQACK;
    3758:	81 e8       	ldi	r24, 0x81	; 129
    375a:	01 c0       	rjmp	.+2      	; 0x375e <decodeFrame+0x500>
            continue;
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
            oidx += 4;
            u1_t flags = 0x80;
    375c:	80 e8       	ldi	r24, 0x80	; 128
                LMIC.ping.freq = freq;
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
    375e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <LMIC+0x12c>
            continue;
    3762:	a9 ce       	rjmp	.-686    	; 0x34b6 <decodeFrame+0x258>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
    3764:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3768:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    376c:	81 fd       	sbrc	r24, 1
    376e:	6a c0       	rjmp	.+212    	; 0x3844 <decodeFrame+0x5e6>
                LMIC.bcnChnl = opts[oidx+3];
    3770:	e8 85       	ldd	r30, Y+8	; 0x08
    3772:	f9 85       	ldd	r31, Y+9	; 0x09
    3774:	ec 5f       	subi	r30, 0xFC	; 252
    3776:	fb 4f       	sbci	r31, 0xFB	; 251
    3778:	20 81       	ld	r18, Z
    377a:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <LMIC+0x181>
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
    377e:	82 60       	ori	r24, 0x02	; 2
    3780:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    3784:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
    3788:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <LMIC+0x12b>
    378c:	81 11       	cpse	r24, r1
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <decodeFrame+0x536>
    3790:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    3794:	e8 85       	ldd	r30, Y+8	; 0x08
    3796:	f9 85       	ldd	r31, Y+9	; 0x09
    3798:	ee 5f       	subi	r30, 0xFE	; 254
    379a:	fb 4f       	sbci	r31, 0xFB	; 251
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	be e1       	ldi	r27, 0x1E	; 30
    37a2:	b8 9f       	mul	r27, r24
    37a4:	b0 01       	movw	r22, r0
    37a6:	b9 9f       	mul	r27, r25
    37a8:	70 0d       	add	r23, r0
    37aa:	11 24       	eor	r1, r1
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	22 e1       	ldi	r18, 0x12	; 18
    37b2:	3a e7       	ldi	r19, 0x7A	; 122
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	50 e0       	ldi	r21, 0x00	; 0
    37b8:	0e 94 c4 32 	call	0x6588	; 0x6588 <__umulsidi3>
    37bc:	e8 ee       	ldi	r30, 0xE8	; 232
    37be:	ae 2e       	mov	r10, r30
    37c0:	f3 e0       	ldi	r31, 0x03	; 3
    37c2:	bf 2e       	mov	r11, r31
    37c4:	c1 2c       	mov	r12, r1
    37c6:	d1 2c       	mov	r13, r1
    37c8:	e1 2c       	mov	r14, r1
    37ca:	f1 2c       	mov	r15, r1
    37cc:	00 e0       	ldi	r16, 0x00	; 0
    37ce:	10 e0       	ldi	r17, 0x00	; 0
    37d0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__divdi3>
    37d4:	59 01       	movw	r10, r18
    37d6:	6a 01       	movw	r12, r20
    37d8:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <LMIC+0x4>
    37dc:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <LMIC+0x5>
    37e0:	a0 91 be 02 	lds	r26, 0x02BE	; 0x8002be <LMIC+0x6>
    37e4:	b0 91 bf 02 	lds	r27, 0x02BF	; 0x8002bf <LMIC+0x7>
    37e8:	8a 0d       	add	r24, r10
    37ea:	9b 1d       	adc	r25, r11
    37ec:	ac 1d       	adc	r26, r12
    37ee:	bd 1d       	adc	r27, r13
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
    37f0:	ac 01       	movw	r20, r24
    37f2:	bd 01       	movw	r22, r26
    37f4:	4b 52       	subi	r20, 0x2B	; 43
    37f6:	57 40       	sbci	r21, 0x07	; 7
    37f8:	6d 43       	sbci	r22, 0x3D	; 61
    37fa:	71 09       	sbc	r23, r1
    37fc:	40 93 3f 04 	sts	0x043F, r20	; 0x80043f <LMIC+0x187>
    3800:	50 93 40 04 	sts	0x0440, r21	; 0x800440 <LMIC+0x188>
    3804:	60 93 41 04 	sts	0x0441, r22	; 0x800441 <LMIC+0x189>
    3808:	70 93 42 04 	sts	0x0442, r23	; 0x800442 <LMIC+0x18a>


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
    if( ini ) {
        LMIC.drift = 0;
    380c:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <LMIC+0xaf>
    3810:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <LMIC+0xae>
        LMIC.maxDriftDiff = 0;
    3814:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <LMIC+0xb3>
    3818:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <LMIC+0xb2>
        LMIC.missedBcns = 0;
    381c:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <LMIC+0x12a>
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    3820:	ec e0       	ldi	r30, 0x0C	; 12
    3822:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <LMIC+0x18d>
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    3826:	f3 e1       	ldi	r31, 0x13	; 19
    3828:	f0 93 3a 04 	sts	0x043A, r31	; 0x80043a <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    382c:	8b 5e       	subi	r24, 0xEB	; 235
    382e:	91 09       	sbc	r25, r1
    3830:	a1 09       	sbc	r26, r1
    3832:	b1 09       	sbc	r27, r1
    3834:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <LMIC+0x183>
    3838:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <LMIC+0x184>
    383c:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <LMIC+0x185>
    3840:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <LMIC+0x186>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
    3844:	28 85       	ldd	r18, Y+8	; 0x08
    3846:	39 85       	ldd	r19, Y+9	; 0x09
    3848:	2c 5f       	subi	r18, 0xFC	; 252
    384a:	3f 4f       	sbci	r19, 0xFF	; 255
    384c:	39 87       	std	Y+9, r19	; 0x09
    384e:	28 87       	std	Y+8, r18	; 0x08
            continue;
    3850:	32 ce       	rjmp	.-924    	; 0x34b6 <decodeFrame+0x258>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
    3852:	ee 81       	ldd	r30, Y+6	; 0x06
    3854:	ff 81       	ldd	r31, Y+7	; 0x07
    3856:	ef 2b       	or	r30, r31
    3858:	31 f5       	brne	.+76     	; 0x38a6 <decodeFrame+0x648>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
    385a:	29 81       	ldd	r18, Y+1	; 0x01
    385c:	3a 81       	ldd	r19, Y+2	; 0x02
    385e:	2f 3f       	cpi	r18, 0xFF	; 255
    3860:	8f ef       	ldi	r24, 0xFF	; 255
    3862:	38 07       	cpc	r19, r24
    3864:	01 f1       	breq	.+64     	; 0x38a6 <decodeFrame+0x648>
    3866:	51 01       	movw	r10, r2
    3868:	a8 18       	sub	r10, r8
    386a:	b9 08       	sbc	r11, r9
    386c:	1a 14       	cp	r1, r10
    386e:	1b 04       	cpc	r1, r11
    3870:	d4 f4       	brge	.+52     	; 0x38a6 <decodeFrame+0x648>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
    3872:	d4 01       	movw	r26, r8
    3874:	a7 50       	subi	r26, 0x07	; 7
    3876:	bc 4f       	sbci	r27, 0xFC	; 252
    3878:	6d 01       	movw	r12, r26
    387a:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    387e:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    3882:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    3886:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>
    388a:	23 2b       	or	r18, r19
    388c:	19 f4       	brne	.+6      	; 0x3894 <decodeFrame+0x636>
    388e:	85 ea       	ldi	r24, 0xA5	; 165
    3890:	93 e0       	ldi	r25, 0x03	; 3
    3892:	02 c0       	rjmp	.+4      	; 0x3898 <decodeFrame+0x63a>
    3894:	85 eb       	ldi	r24, 0xB5	; 181
    3896:	93 e0       	ldi	r25, 0x03	; 3
    3898:	ee 24       	eor	r14, r14
    389a:	e3 94       	inc	r14
    389c:	f1 2c       	mov	r15, r1
    389e:	93 01       	movw	r18, r6
    38a0:	82 01       	movw	r16, r4
    38a2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <aes_cipher.part.2>
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
    38a6:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <LMIC+0x13d>
    38aa:	88 23       	and	r24, r24
    38ac:	59 f0       	breq	.+22     	; 0x38c4 <decodeFrame+0x666>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
    38ae:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <LMIC+0x13e>
    38b2:	bb 81       	ldd	r27, Y+3	; 0x03
    38b4:	b5 ff       	sbrs	r27, 5
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <decodeFrame+0x65e>
    38b8:	90 e8       	ldi	r25, 0x80	; 128
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <decodeFrame+0x660>
    38bc:	90 e4       	ldi	r25, 0x40	; 64
    38be:	89 2b       	or	r24, r25
    38c0:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
    38c4:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <LMIC+0x13e>

    if( port < 0 ) {
    38c8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ca:	fa 81       	ldd	r31, Y+2	; 0x02
    38cc:	31 96       	adiw	r30, 0x01	; 1
    38ce:	41 f4       	brne	.+16     	; 0x38e0 <decodeFrame+0x682>
        LMIC.txrxFlags |= TXRX_NOPORT;
    38d0:	80 62       	ori	r24, 0x20	; 32
    38d2:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
        LMIC.dataBeg = poff;
    38d6:	80 92 f7 03 	sts	0x03F7, r8	; 0x8003f7 <LMIC+0x13f>
        LMIC.dataLen = 0;
    38da:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    38de:	09 c0       	rjmp	.+18     	; 0x38f2 <decodeFrame+0x694>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
    38e0:	80 61       	ori	r24, 0x10	; 16
    38e2:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
        LMIC.dataBeg = poff;
    38e6:	80 92 f7 03 	sts	0x03F7, r8	; 0x8003f7 <LMIC+0x13f>
        LMIC.dataLen = pend-poff;
    38ea:	82 2d       	mov	r24, r2
    38ec:	88 19       	sub	r24, r8
    38ee:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <LMIC+0x140>
    }
    return 1;
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	0d c0       	rjmp	.+26     	; 0x3910 <decodeFrame+0x6b2>
            oidx += 5;

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
    38f6:	86 e8       	ldi	r24, 0x86	; 134
    38f8:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <LMIC+0x11e>
    38fc:	4d ce       	rjmp	.-870    	; 0x3598 <decodeFrame+0x33a>
            u4_t freq = convFreq(&opts[oidx+2]);
            oidx += 5;
            LMIC.dn2Ans = 0x80;   // answer pending
            if( validDR(dr) )
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
            if( freq != 0 )
    38fe:	67 2b       	or	r22, r23
    3900:	68 2b       	or	r22, r24
    3902:	69 2b       	or	r22, r25
    3904:	09 f4       	brne	.+2      	; 0x3908 <decodeFrame+0x6aa>
    3906:	d7 cd       	rjmp	.-1106   	; 0x34b6 <decodeFrame+0x258>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
    3908:	31 e8       	ldi	r19, 0x81	; 129
    390a:	30 93 e1 03 	sts	0x03E1, r19	; 0x8003e1 <LMIC+0x129>
    390e:	d3 cd       	rjmp	.-1114   	; 0x34b6 <decodeFrame+0x258>
        LMIC.txrxFlags |= TXRX_PORT;
        LMIC.dataBeg = poff;
        LMIC.dataLen = pend-poff;
    }
    return 1;
}
    3910:	29 96       	adiw	r28, 0x09	; 9
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	1f 91       	pop	r17
    3922:	0f 91       	pop	r16
    3924:	ff 90       	pop	r15
    3926:	ef 90       	pop	r14
    3928:	df 90       	pop	r13
    392a:	cf 90       	pop	r12
    392c:	bf 90       	pop	r11
    392e:	af 90       	pop	r10
    3930:	9f 90       	pop	r9
    3932:	8f 90       	pop	r8
    3934:	7f 90       	pop	r7
    3936:	6f 90       	pop	r6
    3938:	5f 90       	pop	r5
    393a:	4f 90       	pop	r4
    393c:	3f 90       	pop	r3
    393e:	2f 90       	pop	r2
    3940:	08 95       	ret

00003942 <LMIC_disableChannel>:
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
    LMIC.channelMap |= 1<<chidx;  // enabled right away
    return 1;
}

void LMIC_disableChannel (u1_t channel) {
    3942:	48 2f       	mov	r20, r24
    LMIC.channelFreq[channel] = 0;
    3944:	28 2f       	mov	r18, r24
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	f9 01       	movw	r30, r18
    394a:	ee 0f       	add	r30, r30
    394c:	ff 1f       	adc	r31, r31
    394e:	ee 0f       	add	r30, r30
    3950:	ff 1f       	adc	r31, r31
    3952:	e8 54       	subi	r30, 0x48	; 72
    3954:	fd 4f       	sbci	r31, 0xFD	; 253
    3956:	13 ae       	std	Z+59, r1	; 0x3b
    3958:	14 ae       	std	Z+60, r1	; 0x3c
    395a:	15 ae       	std	Z+61, r1	; 0x3d
    395c:	16 ae       	std	Z+62, r1	; 0x3e
    LMIC.channelDrMap[channel] = 0;
    395e:	22 0f       	add	r18, r18
    3960:	33 1f       	adc	r19, r19
    3962:	f9 01       	movw	r30, r18
    3964:	ed 5c       	subi	r30, 0xCD	; 205
    3966:	fc 4f       	sbci	r31, 0xFC	; 252
    3968:	11 82       	std	Z+1, r1	; 0x01
    396a:	10 82       	st	Z, r1
    LMIC.channelMap &= ~(1<<channel);
    396c:	e3 e5       	ldi	r30, 0x53	; 83
    396e:	f3 e0       	ldi	r31, 0x03	; 3
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	02 c0       	rjmp	.+4      	; 0x397a <LMIC_disableChannel+0x38>
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	4a 95       	dec	r20
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <LMIC_disableChannel+0x34>
    397e:	80 95       	com	r24
    3980:	90 95       	com	r25
    3982:	20 81       	ld	r18, Z
    3984:	31 81       	ldd	r19, Z+1	; 0x01
    3986:	82 23       	and	r24, r18
    3988:	93 23       	and	r25, r19
    398a:	91 83       	std	Z+1, r25	; 0x01
    398c:	80 83       	st	Z, r24
    398e:	08 95       	ret

00003990 <LMIC_enableTracking>:
    os_radio(RADIO_RXON);
}


bit_t LMIC_enableTracking (u1_t tryBcnInfo) {
    if( (LMIC.opmode & (OP_SCAN|OP_TRACK|OP_SHUTDOWN)) != 0 )
    3990:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <LMIC+0xa7>
    3994:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <LMIC+0xa8>
    3998:	23 74       	andi	r18, 0x43	; 67
    399a:	33 27       	eor	r19, r19
    399c:	23 2b       	or	r18, r19
    399e:	39 f4       	brne	.+14     	; 0x39ae <LMIC_enableTracking+0x1e>
        return 0;  // already in progress or failed to enable
    // If BCN info requested from NWK then app has to take are
    // of sending data up so that MCMD_BCNI_REQ can be attached.
    if( (LMIC.bcninfoTries = tryBcnInfo) == 0 )
    39a0:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <LMIC+0x12b>
    39a4:	81 11       	cpse	r24, r1
    39a6:	05 c0       	rjmp	.+10     	; 0x39b2 <LMIC_enableTracking+0x22>
        startScan();
    39a8:	0e 94 8c 13 	call	0x2718	; 0x2718 <startScan>
    39ac:	02 c0       	rjmp	.+4      	; 0x39b2 <LMIC_enableTracking+0x22>
}


bit_t LMIC_enableTracking (u1_t tryBcnInfo) {
    if( (LMIC.opmode & (OP_SCAN|OP_TRACK|OP_SHUTDOWN)) != 0 )
        return 0;  // already in progress or failed to enable
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	08 95       	ret
    // If BCN info requested from NWK then app has to take are
    // of sending data up so that MCMD_BCNI_REQ can be attached.
    if( (LMIC.bcninfoTries = tryBcnInfo) == 0 )
    39b2:	81 e0       	ldi	r24, 0x01	; 1
        startScan();
    return 1;  // enabled
}
    39b4:	08 95       	ret

000039b6 <LMIC_setPingable>:
}


void LMIC_setPingable (u1_t intvExp) {
    // Change setting
    LMIC.ping.intvExp = (intvExp & 0x7);
    39b6:	87 70       	andi	r24, 0x07	; 7
    39b8:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <LMIC+0x12e>
    LMIC.opmode |= OP_PINGABLE;
    39bc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    39c0:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    39c4:	9c 01       	movw	r18, r24
    39c6:	34 60       	ori	r19, 0x04	; 4
    39c8:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <LMIC+0xa8>
    39cc:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <LMIC+0xa7>
    // App may call LMIC_enableTracking() explicitely before
    // Otherwise tracking is implicitly enabled here
    if( (LMIC.opmode & (OP_TRACK|OP_SCAN)) == 0  &&  LMIC.bcninfoTries == 0 )
    39d0:	83 70       	andi	r24, 0x03	; 3
    39d2:	99 27       	eor	r25, r25
    39d4:	89 2b       	or	r24, r25
    39d6:	31 f4       	brne	.+12     	; 0x39e4 <LMIC_setPingable+0x2e>
    39d8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <LMIC+0x12b>
    39dc:	81 11       	cpse	r24, r1
    39de:	02 c0       	rjmp	.+4      	; 0x39e4 <LMIC_setPingable+0x2e>
        LMIC_enableTracking(0);
    39e0:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <LMIC_enableTracking>
    39e4:	08 95       	ret

000039e6 <LMIC_startJoining>:
static void startJoining (xref2osjob_t osjob) {
    reportEvent(EV_JOINING);
}

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
    39e6:	cf 92       	push	r12
    39e8:	df 92       	push	r13
    39ea:	ef 92       	push	r14
    39ec:	ff 92       	push	r15
    if( LMIC.devaddr == 0 ) {
    39ee:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    39f2:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    39f6:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    39fa:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <LMIC+0x110>
    39fe:	89 2b       	or	r24, r25
    3a00:	8a 2b       	or	r24, r26
    3a02:	8b 2b       	or	r24, r27
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <LMIC_startJoining+0x22>
    3a06:	5d c0       	rjmp	.+186    	; 0x3ac2 <LMIC_startJoining+0xdc>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
    3a08:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3a0c:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3a10:	80 79       	andi	r24, 0x90	; 144
    3a12:	99 27       	eor	r25, r25
    3a14:	89 2b       	or	r24, r25
    3a16:	11 f0       	breq	.+4      	; 0x3a1c <LMIC_startJoining+0x36>
    3a18:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
    3a1c:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <LMIC+0x9e>
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
    3a20:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3a24:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3a28:	8e 7d       	andi	r24, 0xDE	; 222
    3a2a:	97 7e       	andi	r25, 0xE7	; 231
    3a2c:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    3a30:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
    3a34:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <LMIC+0xb5>
    3a38:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <LMIC+0x13d>
    3a3c:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <LMIC+0xad>

static void initJoinLoop (void) {
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
    3a40:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    3a44:	66 e0       	ldi	r22, 0x06	; 6
    3a46:	0e 94 e2 31 	call	0x63c4	; 0x63c4 <__udivmodqi4>
    3a4a:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <LMIC+0x9d>
#endif
    LMIC.adrTxPow = 14;
    3a4e:	8e e0       	ldi	r24, 0x0E	; 14
    3a50:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <LMIC+0xaa>
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <LMIC+0xab>
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
#endif
    LMIC.adrTxPow = 14;
    setDrJoin(DRCHG_SET, DR_SF9);
    initDefaultChannels(1);
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
    3a60:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3a64:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3a68:	93 fd       	sbrc	r25, 3
    3a6a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
    3a6e:	c0 90 d7 02 	lds	r12, 0x02D7	; 0x8002d7 <LMIC+0x1f>
    3a72:	d0 90 d8 02 	lds	r13, 0x02D8	; 0x8002d8 <LMIC+0x20>
    3a76:	e0 90 d9 02 	lds	r14, 0x02D9	; 0x8002d9 <LMIC+0x21>
    3a7a:	f0 90 da 02 	lds	r15, 0x02DA	; 0x8002da <LMIC+0x22>
    3a7e:	88 e0       	ldi	r24, 0x08	; 8
    3a80:	0e 94 6e 12 	call	0x24dc	; 0x24dc <rndDelay>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	8c 0d       	add	r24, r12
    3a8a:	9d 1d       	adc	r25, r13
    3a8c:	ae 1d       	adc	r26, r14
    3a8e:	bf 1d       	adc	r27, r15
    3a90:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <LMIC>
    3a94:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <LMIC+0x1>
    3a98:	a0 93 ba 02 	sts	0x02BA, r26	; 0x8002ba <LMIC+0x2>
    3a9c:	b0 93 bb 02 	sts	0x02BB, r27	; 0x8002bb <LMIC+0x3>
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
        initJoinLoop();
        LMIC.opmode |= OP_JOINING;
    3aa0:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3aa4:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3aa8:	84 60       	ori	r24, 0x04	; 4
    3aaa:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    3aae:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
    3ab2:	6c e5       	ldi	r22, 0x5C	; 92
    3ab4:	76 e2       	ldi	r23, 0x26	; 38
    3ab6:	8b ec       	ldi	r24, 0xCB	; 203
    3ab8:	92 e0       	ldi	r25, 0x02	; 2
    3aba:	0e 94 0f 0b 	call	0x161e	; 0x161e <os_setCallback>
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	01 c0       	rjmp	.+2      	; 0x3ac4 <LMIC_startJoining+0xde>
        return 1;
    }
    return 0; // already joined
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
}
    3ac4:	ff 90       	pop	r15
    3ac6:	ef 90       	pop	r14
    3ac8:	df 90       	pop	r13
    3aca:	cf 90       	pop	r12
    3acc:	08 95       	ret

00003ace <engineUpdate>:
    os_radio(RADIO_RX);
}


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
    3ace:	2f 92       	push	r2
    3ad0:	3f 92       	push	r3
    3ad2:	4f 92       	push	r4
    3ad4:	5f 92       	push	r5
    3ad6:	6f 92       	push	r6
    3ad8:	7f 92       	push	r7
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	0f 93       	push	r16
    3aec:	1f 93       	push	r17
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	62 97       	sbiw	r28, 0x12	; 18
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	f8 94       	cli
    3afc:	de bf       	out	0x3e, r29	; 62
    3afe:	0f be       	out	0x3f, r0	; 63
    3b00:	cd bf       	out	0x3d, r28	; 61
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
    3b02:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3b06:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3b0a:	9c 01       	movw	r18, r24
    3b0c:	21 7c       	andi	r18, 0xC1	; 193
    3b0e:	33 27       	eor	r19, r19
    3b10:	23 2b       	or	r18, r19
    3b12:	09 f0       	breq	.+2      	; 0x3b16 <engineUpdate+0x48>
    3b14:	7b c5       	rjmp	.+2806   	; 0x460c <engineUpdate+0xb3e>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
    3b16:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    3b1a:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    3b1e:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    3b22:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>
    3b26:	45 2b       	or	r20, r21
    3b28:	46 2b       	or	r20, r22
    3b2a:	47 2b       	or	r20, r23
    3b2c:	e1 f4       	brne	.+56     	; 0x3b66 <engineUpdate+0x98>
    3b2e:	82 fd       	sbrc	r24, 2
    3b30:	1a c0       	rjmp	.+52     	; 0x3b66 <engineUpdate+0x98>
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    3b32:	62 96       	adiw	r28, 0x12	; 18
    3b34:	0f b6       	in	r0, 0x3f	; 63
    3b36:	f8 94       	cli
    3b38:	de bf       	out	0x3e, r29	; 62
    3b3a:	0f be       	out	0x3f, r0	; 63
    3b3c:	cd bf       	out	0x3d, r28	; 61
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	ff 90       	pop	r15
    3b48:	ef 90       	pop	r14
    3b4a:	df 90       	pop	r13
    3b4c:	cf 90       	pop	r12
    3b4e:	bf 90       	pop	r11
    3b50:	af 90       	pop	r10
    3b52:	9f 90       	pop	r9
    3b54:	8f 90       	pop	r8
    3b56:	7f 90       	pop	r7
    3b58:	6f 90       	pop	r6
    3b5a:	5f 90       	pop	r5
    3b5c:	4f 90       	pop	r4
    3b5e:	3f 90       	pop	r3
    3b60:	2f 90       	pop	r2
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
        LMIC_startJoining();
    3b62:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <LMIC_startJoining>
        return;
    }

    ostime_t now    = os_getTime();
    3b66:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    3b6a:	2b 01       	movw	r4, r22
    3b6c:	3c 01       	movw	r6, r24
    ostime_t rxtime = 0;
    ostime_t txbeg  = 0;

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
    3b6e:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3b72:	81 ff       	sbrs	r24, 1
    3b74:	2b c0       	rjmp	.+86     	; 0x3bcc <engineUpdate+0xfe>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
    3b76:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <LMIC+0x183>
    3b7a:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <LMIC+0x184>
    3b7e:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <LMIC+0x185>
    3b82:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <LMIC+0x186>
    3b86:	d3 01       	movw	r26, r6
    3b88:	c2 01       	movw	r24, r4
    3b8a:	ce 96       	adiw	r24, 0x3e	; 62
    3b8c:	a1 1d       	adc	r26, r1
    3b8e:	b1 1d       	adc	r27, r1
    3b90:	84 1b       	sub	r24, r20
    3b92:	95 0b       	sbc	r25, r21
    3b94:	a6 0b       	sbc	r26, r22
    3b96:	b7 0b       	sbc	r27, r23
    3b98:	18 16       	cp	r1, r24
    3b9a:	19 06       	cpc	r1, r25
    3b9c:	1a 06       	cpc	r1, r26
    3b9e:	1b 06       	cpc	r1, r27
    3ba0:	14 f4       	brge	.+4      	; 0x3ba6 <engineUpdate+0xd8>
    3ba2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
    3ba6:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <LMIC+0x183>
    3baa:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <LMIC+0x184>
    3bae:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <LMIC+0x185>
    3bb2:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <LMIC+0x186>
    3bb6:	8c 01       	movw	r16, r24
    3bb8:	9d 01       	movw	r18, r26
    3bba:	0e 53       	subi	r16, 0x3E	; 62
    3bbc:	11 09       	sbc	r17, r1
    3bbe:	21 09       	sbc	r18, r1
    3bc0:	31 09       	sbc	r19, r1
    3bc2:	09 83       	std	Y+1, r16	; 0x01
    3bc4:	1a 83       	std	Y+2, r17	; 0x02
    3bc6:	2b 83       	std	Y+3, r18	; 0x03
    3bc8:	3c 83       	std	Y+4, r19	; 0x04
    3bca:	04 c0       	rjmp	.+8      	; 0x3bd4 <engineUpdate+0x106>
        LMIC_startJoining();
        return;
    }

    ostime_t now    = os_getTime();
    ostime_t rxtime = 0;
    3bcc:	19 82       	std	Y+1, r1	; 0x01
    3bce:	1a 82       	std	Y+2, r1	; 0x02
    3bd0:	1b 82       	std	Y+3, r1	; 0x03
    3bd2:	1c 82       	std	Y+4, r1	; 0x04
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
    3bd4:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <LMIC+0xa7>
    3bd8:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <LMIC+0xa8>
    3bdc:	3a 8b       	std	Y+18, r19	; 0x12
    3bde:	29 8b       	std	Y+17, r18	; 0x11
    3be0:	c9 01       	movw	r24, r18
    3be2:	8c 73       	andi	r24, 0x3C	; 60
    3be4:	99 27       	eor	r25, r25
    3be6:	89 2b       	or	r24, r25
    3be8:	09 f4       	brne	.+2      	; 0x3bec <engineUpdate+0x11e>
    3bea:	ce c3       	rjmp	.+1948   	; 0x4388 <engineUpdate+0x8ba>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
    3bec:	19 01       	movw	r2, r18
    3bee:	34 e2       	ldi	r19, 0x24	; 36
    3bf0:	23 22       	and	r2, r19
    3bf2:	33 24       	eor	r3, r3
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
    3bf4:	49 89       	ldd	r20, Y+17	; 0x11
    3bf6:	5a 89       	ldd	r21, Y+18	; 0x12
    3bf8:	53 ff       	sbrs	r21, 3
    3bfa:	ba c0       	rjmp	.+372    	; 0x3d70 <engineUpdate+0x2a2>
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    3bfc:	60 91 53 03 	lds	r22, 0x0353	; 0x800353 <LMIC+0x9b>
    3c00:	70 91 54 03 	lds	r23, 0x0354	; 0x800354 <LMIC+0x9c>
    3c04:	7a 87       	std	Y+10, r23	; 0x0a
    3c06:	69 87       	std	Y+9, r22	; 0x09
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3c08:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <LMIC+0xab>
    3c0c:	8f 70       	andi	r24, 0x0F	; 15
    3c0e:	21 e0       	ldi	r18, 0x01	; 1
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	d9 01       	movw	r26, r18
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <engineUpdate+0x14c>
    3c16:	aa 0f       	add	r26, r26
    3c18:	bb 1f       	adc	r27, r27
    3c1a:	8a 95       	dec	r24
    3c1c:	e2 f7       	brpl	.-8      	; 0x3c16 <engineUpdate+0x148>
    3c1e:	bc 87       	std	Y+12, r27	; 0x0c
    3c20:	ab 87       	std	Y+11, r26	; 0x0b
    3c22:	af e0       	ldi	r26, 0x0F	; 15
}

static ostime_t nextTx (ostime_t now) {
    u1_t bmap=0xF;
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
    3c24:	93 01       	movw	r18, r6
    3c26:	82 01       	movw	r16, r4
    3c28:	00 5c       	subi	r16, 0xC0	; 192
    3c2a:	1c 4d       	sbci	r17, 0xDC	; 220
    3c2c:	21 4f       	sbci	r18, 0xF1	; 241
    3c2e:	3c 4b       	sbci	r19, 0xBC	; 188
    3c30:	0d 87       	std	Y+13, r16	; 0x0d
    3c32:	1e 87       	std	Y+14, r17	; 0x0e
    3c34:	2f 87       	std	Y+15, r18	; 0x0f
    3c36:	38 8b       	std	Y+16, r19	; 0x10
    3c38:	cd 84       	ldd	r12, Y+13	; 0x0d
    3c3a:	de 84       	ldd	r13, Y+14	; 0x0e
    3c3c:	ef 84       	ldd	r14, Y+15	; 0x0f
    3c3e:	f8 88       	ldd	r15, Y+16	; 0x10
    3c40:	e8 eb       	ldi	r30, 0xB8	; 184
    3c42:	f2 e0       	ldi	r31, 0x02	; 2
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
        u1_t band=0;
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
        for( u1_t bi=0; bi<4; bi++ ) {
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
    3c4a:	2a 2f       	mov	r18, r26
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	a9 01       	movw	r20, r18
    3c50:	08 2e       	mov	r0, r24
    3c52:	02 c0       	rjmp	.+4      	; 0x3c58 <engineUpdate+0x18a>
    3c54:	55 95       	asr	r21
    3c56:	47 95       	ror	r20
    3c58:	0a 94       	dec	r0
    3c5a:	e2 f7       	brpl	.-8      	; 0x3c54 <engineUpdate+0x186>
    3c5c:	40 ff       	sbrs	r20, 0
    3c5e:	12 c0       	rjmp	.+36     	; 0x3c84 <engineUpdate+0x1b6>
    3c60:	47 8d       	ldd	r20, Z+31	; 0x1f
    3c62:	50 a1       	ldd	r21, Z+32	; 0x20
    3c64:	61 a1       	ldd	r22, Z+33	; 0x21
    3c66:	72 a1       	ldd	r23, Z+34	; 0x22
    3c68:	46 01       	movw	r8, r12
    3c6a:	57 01       	movw	r10, r14
    3c6c:	84 1a       	sub	r8, r20
    3c6e:	95 0a       	sbc	r9, r21
    3c70:	a6 0a       	sbc	r10, r22
    3c72:	b7 0a       	sbc	r11, r23
    3c74:	18 14       	cp	r1, r8
    3c76:	19 04       	cpc	r1, r9
    3c78:	1a 04       	cpc	r1, r10
    3c7a:	1b 04       	cpc	r1, r11
    3c7c:	1c f4       	brge	.+6      	; 0x3c84 <engineUpdate+0x1b6>
    3c7e:	b8 2f       	mov	r27, r24
                mintime = LMIC.bands[band = bi].avail;
    3c80:	6a 01       	movw	r12, r20
    3c82:	7b 01       	movw	r14, r22
    3c84:	01 96       	adiw	r24, 0x01	; 1
    3c86:	38 96       	adiw	r30, 0x08	; 8
static ostime_t nextTx (ostime_t now) {
    u1_t bmap=0xF;
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
        u1_t band=0;
        for( u1_t bi=0; bi<4; bi++ ) {
    3c88:	84 30       	cpi	r24, 0x04	; 4
    3c8a:	91 05       	cpc	r25, r1
    3c8c:	01 f7       	brne	.-64     	; 0x3c4e <engineUpdate+0x180>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
    3c8e:	2b 2f       	mov	r18, r27
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	3e 83       	std	Y+6, r19	; 0x06
    3c94:	2d 83       	std	Y+5, r18	; 0x05
    3c96:	89 01       	movw	r16, r18
    3c98:	63 e0       	ldi	r22, 0x03	; 3
    3c9a:	00 0f       	add	r16, r16
    3c9c:	11 1f       	adc	r17, r17
    3c9e:	6a 95       	dec	r22
    3ca0:	e1 f7       	brne	.-8      	; 0x3c9a <engineUpdate+0x1cc>
    3ca2:	f8 01       	movw	r30, r16
    3ca4:	e8 54       	subi	r30, 0x48	; 72
    3ca6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ca8:	26 8d       	ldd	r18, Z+30	; 0x1e
    3caa:	90 e1       	ldi	r25, 0x10	; 16
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3cac:	8b 2e       	mov	r8, r27
    3cae:	91 2c       	mov	r9, r1
    3cb0:	a1 2c       	mov	r10, r1
    3cb2:	b1 2c       	mov	r11, r1
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	82 0f       	add	r24, r18
    3cb8:	80 31       	cpi	r24, 0x10	; 16
    3cba:	10 f0       	brcs	.+4      	; 0x3cc0 <engineUpdate+0x1f2>
                chnl -=  MAX_CHANNELS;
    3cbc:	81 ef       	ldi	r24, 0xF1	; 241
    3cbe:	82 0f       	add	r24, r18
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    3cc0:	28 2f       	mov	r18, r24
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	08 2e       	mov	r0, r24
    3cca:	02 c0       	rjmp	.+4      	; 0x3cd0 <engineUpdate+0x202>
    3ccc:	44 0f       	add	r20, r20
    3cce:	55 1f       	adc	r21, r21
    3cd0:	0a 94       	dec	r0
    3cd2:	e2 f7       	brpl	.-8      	; 0x3ccc <engineUpdate+0x1fe>
    3cd4:	69 85       	ldd	r22, Y+9	; 0x09
    3cd6:	7a 85       	ldd	r23, Y+10	; 0x0a
    3cd8:	46 23       	and	r20, r22
    3cda:	57 23       	and	r21, r23
    3cdc:	45 2b       	or	r20, r21
    3cde:	41 f1       	breq	.+80     	; 0x3d30 <engineUpdate+0x262>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3ce0:	f9 01       	movw	r30, r18
    3ce2:	ee 0f       	add	r30, r30
    3ce4:	ff 1f       	adc	r31, r31
    3ce6:	ed 5c       	subi	r30, 0xCD	; 205
    3ce8:	fc 4f       	sbci	r31, 0xFC	; 252
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
    3cea:	40 81       	ld	r20, Z
    3cec:	51 81       	ldd	r21, Z+1	; 0x01
    3cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf2:	46 23       	and	r20, r22
    3cf4:	57 23       	and	r21, r23
    3cf6:	45 2b       	or	r20, r21
    3cf8:	d9 f0       	breq	.+54     	; 0x3d30 <engineUpdate+0x262>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
    3cfa:	22 0f       	add	r18, r18
    3cfc:	33 1f       	adc	r19, r19
    3cfe:	22 0f       	add	r18, r18
    3d00:	33 1f       	adc	r19, r19
    3d02:	f9 01       	movw	r30, r18
    3d04:	e8 54       	subi	r30, 0x48	; 72
    3d06:	fd 4f       	sbci	r31, 0xFD	; 253
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
                chnl -=  MAX_CHANNELS;
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
    3d08:	43 ad       	ldd	r20, Z+59	; 0x3b
    3d0a:	54 ad       	ldd	r21, Z+60	; 0x3c
    3d0c:	65 ad       	ldd	r22, Z+61	; 0x3d
    3d0e:	76 ad       	ldd	r23, Z+62	; 0x3e
    3d10:	43 70       	andi	r20, 0x03	; 3
    3d12:	55 27       	eor	r21, r21
    3d14:	66 27       	eor	r22, r22
    3d16:	77 27       	eor	r23, r23
    3d18:	84 16       	cp	r8, r20
    3d1a:	95 06       	cpc	r9, r21
    3d1c:	a6 06       	cpc	r10, r22
    3d1e:	b7 06       	cpc	r11, r23
    3d20:	39 f4       	brne	.+14     	; 0x3d30 <engineUpdate+0x262>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
    3d22:	f8 01       	movw	r30, r16
    3d24:	e8 54       	subi	r30, 0x48	; 72
    3d26:	fd 4f       	sbci	r31, 0xFD	; 253
    3d28:	86 8f       	std	Z+30, r24	; 0x1e
    3d2a:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <LMIC+0x9d>
    3d2e:	10 c0       	rjmp	.+32     	; 0x3d50 <engineUpdate+0x282>
    3d30:	91 50       	subi	r25, 0x01	; 1
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
                mintime = LMIC.bands[band = bi].avail;
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
    3d32:	11 f0       	breq	.+4      	; 0x3d38 <engineUpdate+0x26a>
    3d34:	28 2f       	mov	r18, r24
    3d36:	be cf       	rjmp	.-132    	; 0x3cb4 <engineUpdate+0x1e6>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
                return mintime;
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	0d 80       	ldd	r0, Y+5	; 0x05
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <engineUpdate+0x276>
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	0a 94       	dec	r0
    3d46:	e2 f7       	brpl	.-8      	; 0x3d40 <engineUpdate+0x272>
    3d48:	80 95       	com	r24
    3d4a:	a8 23       	and	r26, r24
    3d4c:	09 f0       	breq	.+2      	; 0x3d50 <engineUpdate+0x282>
    3d4e:	74 cf       	rjmp	.-280    	; 0x3c38 <engineUpdate+0x16a>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
            txbeg = LMIC.txend = nextTx(now);
    3d50:	c0 92 b8 02 	sts	0x02B8, r12	; 0x8002b8 <LMIC>
    3d54:	d0 92 b9 02 	sts	0x02B9, r13	; 0x8002b9 <LMIC+0x1>
    3d58:	e0 92 ba 02 	sts	0x02BA, r14	; 0x8002ba <LMIC+0x2>
    3d5c:	f0 92 bb 02 	sts	0x02BB, r15	; 0x8002bb <LMIC+0x3>
            LMIC.opmode &= ~OP_NEXTCHNL;
    3d60:	89 89       	ldd	r24, Y+17	; 0x11
    3d62:	9a 89       	ldd	r25, Y+18	; 0x12
    3d64:	97 7f       	andi	r25, 0xF7	; 247
    3d66:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    3d6a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    3d6e:	08 c0       	rjmp	.+16     	; 0x3d80 <engineUpdate+0x2b2>
        } else {
            txbeg = LMIC.txend;
    3d70:	c0 90 b8 02 	lds	r12, 0x02B8	; 0x8002b8 <LMIC>
    3d74:	d0 90 b9 02 	lds	r13, 0x02B9	; 0x8002b9 <LMIC+0x1>
    3d78:	e0 90 ba 02 	lds	r14, 0x02BA	; 0x8002ba <LMIC+0x2>
    3d7c:	f0 90 bb 02 	lds	r15, 0x02BB	; 0x8002bb <LMIC+0x3>
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
    3d80:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <LMIC+0x9e>
    3d84:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    3d88:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    3d8c:	21 11       	cpse	r18, r1
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <engineUpdate+0x2c6>
    3d90:	90 ff       	sbrs	r25, 0
    3d92:	12 c0       	rjmp	.+36     	; 0x3db8 <engineUpdate+0x2ea>
    3d94:	40 91 57 03 	lds	r20, 0x0357	; 0x800357 <LMIC+0x9f>
    3d98:	50 91 58 03 	lds	r21, 0x0358	; 0x800358 <LMIC+0xa0>
    3d9c:	60 91 59 03 	lds	r22, 0x0359	; 0x800359 <LMIC+0xa1>
    3da0:	70 91 5a 03 	lds	r23, 0x035A	; 0x80035a <LMIC+0xa2>
    3da4:	97 01       	movw	r18, r14
    3da6:	86 01       	movw	r16, r12
    3da8:	04 1b       	sub	r16, r20
    3daa:	15 0b       	sbc	r17, r21
    3dac:	26 0b       	sbc	r18, r22
    3dae:	37 0b       	sbc	r19, r23
    3db0:	37 ff       	sbrs	r19, 7
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <engineUpdate+0x2ea>
            txbeg = LMIC.globalDutyAvail;
    3db4:	6a 01       	movw	r12, r20
    3db6:	7b 01       	movw	r14, r22
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
    3db8:	9c 01       	movw	r18, r24
    3dba:	22 70       	andi	r18, 0x02	; 2
    3dbc:	33 27       	eor	r19, r19
    3dbe:	81 ff       	sbrs	r24, 1
    3dc0:	27 c0       	rjmp	.+78     	; 0x3e10 <engineUpdate+0x342>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
    3dc2:	21 14       	cp	r2, r1
    3dc4:	31 04       	cpc	r3, r1
    3dc6:	29 f4       	brne	.+10     	; 0x3dd2 <engineUpdate+0x304>
    3dc8:	4c e6       	ldi	r20, 0x6C	; 108
    3dca:	5c ed       	ldi	r21, 0xDC	; 220
    3dcc:	62 e0       	ldi	r22, 0x02	; 2
    3dce:	70 e0       	ldi	r23, 0x00	; 0
    3dd0:	04 c0       	rjmp	.+8      	; 0x3dda <engineUpdate+0x30c>
    3dd2:	42 ea       	ldi	r20, 0xA2	; 162
    3dd4:	5a e4       	ldi	r21, 0x4A	; 74
    3dd6:	64 e0       	ldi	r22, 0x04	; 4
    3dd8:	70 e0       	ldi	r23, 0x00	; 0
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
            txbeg = LMIC.globalDutyAvail;
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
    3dda:	4c 0d       	add	r20, r12
    3ddc:	5d 1d       	adc	r21, r13
    3dde:	6e 1d       	adc	r22, r14
    3de0:	7f 1d       	adc	r23, r15
    3de2:	89 80       	ldd	r8, Y+1	; 0x01
    3de4:	9a 80       	ldd	r9, Y+2	; 0x02
    3de6:	ab 80       	ldd	r10, Y+3	; 0x03
    3de8:	bc 80       	ldd	r11, Y+4	; 0x04
    3dea:	48 19       	sub	r20, r8
    3dec:	59 09       	sbc	r21, r9
    3dee:	6a 09       	sbc	r22, r10
    3df0:	7b 09       	sbc	r23, r11
    3df2:	14 16       	cp	r1, r20
    3df4:	15 06       	cpc	r1, r21
    3df6:	16 06       	cpc	r1, r22
    3df8:	17 06       	cpc	r1, r23
    3dfa:	54 f4       	brge	.+20     	; 0x3e10 <engineUpdate+0x342>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
    3dfc:	40 e1       	ldi	r20, 0x10	; 16
    3dfe:	c5 01       	movw	r24, r10
    3e00:	b4 01       	movw	r22, r8
    3e02:	66 53       	subi	r22, 0x36	; 54
    3e04:	7d 4f       	sbci	r23, 0xFD	; 253
    3e06:	8e 4f       	sbci	r24, 0xFE	; 254
    3e08:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0a:	0e 94 b0 12 	call	0x2560	; 0x2560 <txDelay>
    3e0e:	bf c2       	rjmp	.+1406   	; 0x438e <engineUpdate+0x8c0>
            txbeg = 0;
            goto checkrx;
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
    3e10:	b3 01       	movw	r22, r6
    3e12:	a2 01       	movw	r20, r4
    3e14:	42 5c       	subi	r20, 0xC2	; 194
    3e16:	5f 4f       	sbci	r21, 0xFF	; 255
    3e18:	6f 4f       	sbci	r22, 0xFF	; 255
    3e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e1c:	46 01       	movw	r8, r12
    3e1e:	57 01       	movw	r10, r14
    3e20:	84 1a       	sub	r8, r20
    3e22:	95 0a       	sbc	r9, r21
    3e24:	a6 0a       	sbc	r10, r22
    3e26:	b7 0a       	sbc	r11, r23
    3e28:	b7 fe       	sbrs	r11, 7
    3e2a:	a1 c2       	rjmp	.+1346   	; 0x436e <engineUpdate+0x8a0>
            // We could send right now!
        txbeg = now;
            dr_t txdr = (dr_t)LMIC.datarate;
    3e2c:	90 90 63 03 	lds	r9, 0x0363	; 0x800363 <LMIC+0xab>
            if( jacc ) {
    3e30:	23 28       	or	r2, r3
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <engineUpdate+0x368>
    3e34:	44 c0       	rjmp	.+136    	; 0x3ebe <engineUpdate+0x3f0>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
    3e36:	85 ff       	sbrs	r24, 5
    3e38:	0f c0       	rjmp	.+30     	; 0x3e58 <engineUpdate+0x38a>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
    3e3a:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <LMIC+0xad>
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    3e3e:	81 50       	subi	r24, 0x01	; 1
    3e40:	48 f0       	brcs	.+18     	; 0x3e54 <engineUpdate+0x386>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    3e42:	e9 2d       	mov	r30, r9
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	ed 51       	subi	r30, 0x1D	; 29
    3e48:	fe 4f       	sbci	r31, 0xFE	; 254
    3e4a:	90 81       	ld	r25, Z
    3e4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e4e:	b9 f3       	breq	.-18     	; 0x3e3e <engineUpdate+0x370>
    3e50:	9a 94       	dec	r9
    3e52:	f5 cf       	rjmp	.-22     	; 0x3e3e <engineUpdate+0x370>
                    ftype = HDR_FTYPE_REJOIN;
    3e54:	80 ec       	ldi	r24, 0xC0	; 192
    3e56:	01 c0       	rjmp	.+2      	; 0x3e5a <engineUpdate+0x38c>
                } else {
                    ftype = HDR_FTYPE_JREQ;
    3e58:	80 e0       	ldi	r24, 0x00	; 0

static void buildJoinRequest (u1_t ftype) {
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
    d[OFF_JR_HDR] = ftype;
    3e5a:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x141>
    os_getArtEui(d + OFF_JR_ARTEUI);
    3e5e:	8a ef       	ldi	r24, 0xFA	; 250
    3e60:	93 e0       	ldi	r25, 0x03	; 3
    3e62:	0e 94 92 0a 	call	0x1524	; 0x1524 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
    3e66:	82 e0       	ldi	r24, 0x02	; 2
    3e68:	94 e0       	ldi	r25, 0x04	; 4
    3e6a:	0e 94 9b 0a 	call	0x1536	; 0x1536 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
    3e6e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <LMIC+0xeb>
    3e72:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <LMIC+0xec>
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    3e76:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <LMIC+0x152>
    buf[1] = v>>8;
    3e7a:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <LMIC+0x153>
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
}


static void aes_appendMic0 (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    3e7e:	84 e5       	ldi	r24, 0x54	; 84
    3e80:	94 e0       	ldi	r25, 0x04	; 4
    3e82:	0e 94 a4 0a 	call	0x1548	; 0x1548 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
    3e86:	43 e1       	ldi	r20, 0x13	; 19
    3e88:	50 e0       	ldi	r21, 0x00	; 0
    3e8a:	69 ef       	ldi	r22, 0xF9	; 249
    3e8c:	73 e0       	ldi	r23, 0x03	; 3
    3e8e:	8a e0       	ldi	r24, 0x0A	; 10
    3e90:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    3e94:	ab 01       	movw	r20, r22
    3e96:	bc 01       	movw	r22, r24
    3e98:	8c e0       	ldi	r24, 0x0C	; 12
    3e9a:	94 e0       	ldi	r25, 0x04	; 4
    3e9c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <os_wmsbf4>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
    3ea0:	87 e1       	ldi	r24, 0x17	; 23
    3ea2:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <LMIC+0x140>
    LMIC.devNonce++;
    3ea6:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <LMIC+0xeb>
    3eaa:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <LMIC+0xec>
    3eae:	01 96       	adiw	r24, 0x01	; 1
    3eb0:	90 93 a4 03 	sts	0x03A4, r25	; 0x8003a4 <LMIC+0xec>
    3eb4:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <LMIC+0xeb>
                    ftype = HDR_FTYPE_REJOIN;
                } else {
                    ftype = HDR_FTYPE_JREQ;
                }
                buildJoinRequest(ftype);
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
    3eb8:	8c ef       	ldi	r24, 0xFC	; 252
    3eba:	96 e1       	ldi	r25, 0x16	; 22
    3ebc:	dc c1       	rjmp	.+952    	; 0x4276 <engineUpdate+0x7a8>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
    3ebe:	40 91 c9 03 	lds	r20, 0x03C9	; 0x8003c9 <LMIC+0x111>
    3ec2:	50 91 ca 03 	lds	r21, 0x03CA	; 0x8003ca <LMIC+0x112>
    3ec6:	60 91 cb 03 	lds	r22, 0x03CB	; 0x8003cb <LMIC+0x113>
    3eca:	70 91 cc 03 	lds	r23, 0x03CC	; 0x8003cc <LMIC+0x114>
    3ece:	40 38       	cpi	r20, 0x80	; 128
    3ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    3ed2:	6f 4f       	sbci	r22, 0xFF	; 255
    3ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed6:	f0 f0       	brcs	.+60     	; 0x3f14 <engineUpdate+0x446>
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
    3ed8:	6b ec       	ldi	r22, 0xCB	; 203
    3eda:	77 e2       	ldi	r23, 0x27	; 39
    3edc:	8b ec       	ldi	r24, 0xCB	; 203
    3ede:	92 e0       	ldi	r25, 0x02	; 2
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    3ee0:	62 96       	adiw	r28, 0x12	; 18
    3ee2:	0f b6       	in	r0, 0x3f	; 63
    3ee4:	f8 94       	cli
    3ee6:	de bf       	out	0x3e, r29	; 62
    3ee8:	0f be       	out	0x3f, r0	; 63
    3eea:	cd bf       	out	0x3d, r28	; 61
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	ff 90       	pop	r15
    3ef6:	ef 90       	pop	r14
    3ef8:	df 90       	pop	r13
    3efa:	cf 90       	pop	r12
    3efc:	bf 90       	pop	r11
    3efe:	af 90       	pop	r10
    3f00:	9f 90       	pop	r9
    3f02:	8f 90       	pop	r8
    3f04:	7f 90       	pop	r7
    3f06:	6f 90       	pop	r6
    3f08:	5f 90       	pop	r5
    3f0a:	4f 90       	pop	r4
    3f0c:	3f 90       	pop	r3
    3f0e:	2f 90       	pop	r2
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
    3f10:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <os_setCallback>
                    return;
                }
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
    3f14:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <LMIC+0x13d>
    3f18:	21 11       	cpse	r18, r1
    3f1a:	0d c0       	rjmp	.+26     	; 0x3f36 <engineUpdate+0x468>
    3f1c:	40 91 cd 03 	lds	r20, 0x03CD	; 0x8003cd <LMIC+0x115>
    3f20:	50 91 ce 03 	lds	r21, 0x03CE	; 0x8003ce <LMIC+0x116>
    3f24:	60 91 cf 03 	lds	r22, 0x03CF	; 0x8003cf <LMIC+0x117>
    3f28:	70 91 d0 03 	lds	r23, 0x03D0	; 0x8003d0 <LMIC+0x118>
    3f2c:	4f 3f       	cpi	r20, 0xFF	; 255
    3f2e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f30:	6f 4f       	sbci	r22, 0xFF	; 255
    3f32:	7f 4f       	sbci	r23, 0xFF	; 255
    3f34:	89 f2       	breq	.-94     	; 0x3ed8 <engineUpdate+0x40a>

// ======================================== 


static void buildDataFrame (void) {
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    3f36:	9c 01       	movw	r18, r24
    3f38:	28 71       	andi	r18, 0x18	; 24
    3f3a:	33 27       	eor	r19, r19
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
    3f3c:	20 31       	cpi	r18, 0x10	; 16
    3f3e:	31 05       	cpc	r19, r1
    3f40:	21 f0       	breq	.+8      	; 0x3f4a <engineUpdate+0x47c>
    3f42:	80 90 6e 03 	lds	r8, 0x036E	; 0x80036e <LMIC+0xb6>
    3f46:	8d 82       	std	Y+5, r8	; 0x05
    3f48:	01 c0       	rjmp	.+2      	; 0x3f4c <engineUpdate+0x47e>
    3f4a:	1d 82       	std	Y+5, r1	; 0x05

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
    3f4c:	82 70       	andi	r24, 0x02	; 2
    3f4e:	94 70       	andi	r25, 0x04	; 4
    3f50:	82 30       	cpi	r24, 0x02	; 2
    3f52:	94 40       	sbci	r25, 0x04	; 4
    3f54:	89 f4       	brne	.+34     	; 0x3f78 <engineUpdate+0x4aa>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
    3f56:	80 e1       	ldi	r24, 0x10	; 16
    3f58:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <LMIC+0x149>
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
    3f5c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <LMIC+0x12e>
    3f60:	10 e1       	ldi	r17, 0x10	; 16
    3f62:	81 9f       	mul	r24, r17
    3f64:	c0 01       	movw	r24, r0
    3f66:	11 24       	eor	r1, r1
    3f68:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <LMIC+0x12d>
    3f6c:	89 2b       	or	r24, r25
    3f6e:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <LMIC+0x14a>
        end += 2;
    3f72:	0a e0       	ldi	r16, 0x0A	; 10
    3f74:	10 e0       	ldi	r17, 0x00	; 0
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <engineUpdate+0x4ae>
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
    3f78:	08 e0       	ldi	r16, 0x08	; 8
    3f7a:	10 e0       	ldi	r17, 0x00	; 0
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
        end += 2;
    }
    if( LMIC.dutyCapAns ) {
    3f7c:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <LMIC+0x122>
    3f80:	88 23       	and	r24, r24
    3f82:	49 f0       	breq	.+18     	; 0x3f96 <engineUpdate+0x4c8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
    3f84:	f8 01       	movw	r30, r16
    3f86:	e7 50       	subi	r30, 0x07	; 7
    3f88:	fc 4f       	sbci	r31, 0xFC	; 252
    3f8a:	84 e0       	ldi	r24, 0x04	; 4
    3f8c:	80 83       	st	Z, r24
        end += 1;
    3f8e:	0f 5f       	subi	r16, 0xFF	; 255
    3f90:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.dutyCapAns = 0;
    3f92:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <LMIC+0x122>
    }
    if( LMIC.dn2Ans ) {
    3f96:	40 91 e1 03 	lds	r20, 0x03E1	; 0x8003e1 <LMIC+0x129>
    3f9a:	44 23       	and	r20, r20
    3f9c:	79 f0       	breq	.+30     	; 0x3fbc <engineUpdate+0x4ee>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	88 54       	subi	r24, 0x48	; 72
    3fa2:	9d 4f       	sbci	r25, 0xFD	; 253
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	ef 5b       	subi	r30, 0xBF	; 191
    3fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    3faa:	55 e0       	ldi	r21, 0x05	; 5
    3fac:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
    3fae:	31 96       	adiw	r30, 0x01	; 1
    3fb0:	43 70       	andi	r20, 0x03	; 3
    3fb2:	40 83       	st	Z, r20
        end += 2;
    3fb4:	0e 5f       	subi	r16, 0xFE	; 254
    3fb6:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.dn2Ans = 0;
    3fb8:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <LMIC+0x129>
    }
    if( LMIC.devsAns ) {  // answer to device status
    3fbc:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <LMIC+0x11f>
    3fc0:	88 23       	and	r24, r24
    3fc2:	99 f0       	breq	.+38     	; 0x3fea <engineUpdate+0x51c>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
    3fc4:	c8 01       	movw	r24, r16
    3fc6:	88 54       	subi	r24, 0x48	; 72
    3fc8:	9d 4f       	sbci	r25, 0xFD	; 253
    3fca:	fc 01       	movw	r30, r24
    3fcc:	ef 5b       	subi	r30, 0xBF	; 191
    3fce:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd0:	46 e0       	ldi	r20, 0x06	; 6
    3fd2:	40 83       	st	Z, r20
        LMIC.frame[end+1] = os_getBattLevel();
    3fd4:	31 96       	adiw	r30, 0x01	; 1
    3fd6:	4f ef       	ldi	r20, 0xFF	; 255
    3fd8:	40 83       	st	Z, r20
        LMIC.frame[end+2] = LMIC.margin;
    3fda:	31 96       	adiw	r30, 0x01	; 1
    3fdc:	40 91 d5 03 	lds	r20, 0x03D5	; 0x8003d5 <LMIC+0x11d>
    3fe0:	40 83       	st	Z, r20
        end += 3;
    3fe2:	0d 5f       	subi	r16, 0xFD	; 253
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.devsAns = 0;
    3fe6:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <LMIC+0x11f>
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
    3fea:	40 91 d6 03 	lds	r20, 0x03D6	; 0x8003d6 <LMIC+0x11e>
    3fee:	44 23       	and	r20, r20
    3ff0:	79 f0       	breq	.+30     	; 0x4010 <engineUpdate+0x542>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
    3ff2:	c8 01       	movw	r24, r16
    3ff4:	88 54       	subi	r24, 0x48	; 72
    3ff6:	9d 4f       	sbci	r25, 0xFD	; 253
    3ff8:	fc 01       	movw	r30, r24
    3ffa:	ef 5b       	subi	r30, 0xBF	; 191
    3ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ffe:	53 e0       	ldi	r21, 0x03	; 3
    4000:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
    4002:	31 96       	adiw	r30, 0x01	; 1
    4004:	47 70       	andi	r20, 0x07	; 7
    4006:	40 83       	st	Z, r20
        end += 2;
    4008:	0e 5f       	subi	r16, 0xFE	; 254
    400a:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.ladrAns = 0;
    400c:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <LMIC+0x11e>
    }
    if( LMIC.bcninfoTries > 0 ) {
    4010:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <LMIC+0x12b>
    4014:	88 23       	and	r24, r24
    4016:	39 f0       	breq	.+14     	; 0x4026 <engineUpdate+0x558>
        LMIC.frame[end] = MCMD_BCNI_REQ;
    4018:	f8 01       	movw	r30, r16
    401a:	e7 50       	subi	r30, 0x07	; 7
    401c:	fc 4f       	sbci	r31, 0xFC	; 252
    401e:	82 e1       	ldi	r24, 0x12	; 18
    4020:	80 83       	st	Z, r24
        end += 1;
    4022:	0f 5f       	subi	r16, 0xFF	; 255
    4024:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    if( LMIC.adrChanged ) {
    4026:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <LMIC+0x11b>
    402a:	88 23       	and	r24, r24
    402c:	39 f0       	breq	.+14     	; 0x403c <engineUpdate+0x56e>
        if( LMIC.adrAckReq < 0 )
    402e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <LMIC+0x11a>
    4032:	87 fd       	sbrc	r24, 7
            LMIC.adrAckReq = 0;
    4034:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <LMIC+0x11a>
        LMIC.adrChanged = 0;
    4038:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <LMIC+0x11b>
    }
    if( LMIC.pingSetAns != 0 ) {
    403c:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <LMIC+0x12c>
    4040:	44 23       	and	r20, r20
    4042:	79 f0       	breq	.+30     	; 0x4062 <engineUpdate+0x594>
        LMIC.frame[end+0] = MCMD_PING_ANS;
    4044:	c8 01       	movw	r24, r16
    4046:	88 54       	subi	r24, 0x48	; 72
    4048:	9d 4f       	sbci	r25, 0xFD	; 253
    404a:	fc 01       	movw	r30, r24
    404c:	ef 5b       	subi	r30, 0xBF	; 191
    404e:	fe 4f       	sbci	r31, 0xFE	; 254
    4050:	51 e1       	ldi	r21, 0x11	; 17
    4052:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
    4054:	31 96       	adiw	r30, 0x01	; 1
    4056:	41 70       	andi	r20, 0x01	; 1
    4058:	40 83       	st	Z, r20
        end += 2;
    405a:	0e 5f       	subi	r16, 0xFE	; 254
    405c:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.pingSetAns = 0;
    405e:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <LMIC+0x12c>
    }
    if( LMIC.snchAns ) {
    4062:	40 91 db 03 	lds	r20, 0x03DB	; 0x8003db <LMIC+0x123>
    4066:	44 23       	and	r20, r20
    4068:	79 f0       	breq	.+30     	; 0x4088 <engineUpdate+0x5ba>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
    406a:	c8 01       	movw	r24, r16
    406c:	88 54       	subi	r24, 0x48	; 72
    406e:	9d 4f       	sbci	r25, 0xFD	; 253
    4070:	fc 01       	movw	r30, r24
    4072:	ef 5b       	subi	r30, 0xBF	; 191
    4074:	fe 4f       	sbci	r31, 0xFE	; 254
    4076:	57 e0       	ldi	r21, 0x07	; 7
    4078:	50 83       	st	Z, r21
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
    407a:	31 96       	adiw	r30, 0x01	; 1
    407c:	43 70       	andi	r20, 0x03	; 3
    407e:	40 83       	st	Z, r20
        end += 2;
    4080:	0e 5f       	subi	r16, 0xFE	; 254
    4082:	1f 4f       	sbci	r17, 0xFF	; 255
        LMIC.snchAns = 0;
    4084:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <LMIC+0x123>
    }
    ASSERT(end <= OFF_DAT_OPTS+16);

    u1_t flen = end + (txdata ? 5+dlen : 4);
    4088:	20 31       	cpi	r18, 0x10	; 16
    408a:	31 05       	cpc	r19, r1
    408c:	21 f0       	breq	.+8      	; 0x4096 <engineUpdate+0x5c8>
    408e:	4d 81       	ldd	r20, Y+5	; 0x05
    4090:	4b 5f       	subi	r20, 0xFB	; 251
    4092:	49 83       	std	Y+1, r20	; 0x01
    4094:	02 c0       	rjmp	.+4      	; 0x409a <engineUpdate+0x5cc>
    4096:	54 e0       	ldi	r21, 0x04	; 4
    4098:	59 83       	std	Y+1, r21	; 0x01
    409a:	40 2f       	mov	r20, r16
    409c:	89 80       	ldd	r8, Y+1	; 0x01
    409e:	80 0e       	add	r8, r16
    40a0:	89 82       	std	Y+1, r8	; 0x01
    if( flen > MAX_LEN_FRAME ) {
    40a2:	58 2d       	mov	r21, r8
    40a4:	51 34       	cpi	r21, 0x41	; 65
    40a6:	30 f4       	brcc	.+12     	; 0x40b4 <engineUpdate+0x5e6>

// ======================================== 


static void buildDataFrame (void) {
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
    40a8:	ff 24       	eor	r15, r15
    40aa:	f3 94       	inc	r15
    40ac:	20 31       	cpi	r18, 0x10	; 16
    40ae:	31 05       	cpc	r19, r1
    40b0:	31 f4       	brne	.+12     	; 0x40be <engineUpdate+0x5f0>
    40b2:	04 c0       	rjmp	.+8      	; 0x40bc <engineUpdate+0x5ee>

    u1_t flen = end + (txdata ? 5+dlen : 4);
    if( flen > MAX_LEN_FRAME ) {
        // Options and payload too big - delay payload
        txdata = 0;
        flen = end+4;
    40b4:	94 e0       	ldi	r25, 0x04	; 4
    40b6:	89 2e       	mov	r8, r25
    40b8:	80 0e       	add	r8, r16
    40ba:	89 82       	std	Y+1, r8	; 0x01
    ASSERT(end <= OFF_DAT_OPTS+16);

    u1_t flen = end + (txdata ? 5+dlen : 4);
    if( flen > MAX_LEN_FRAME ) {
        // Options and payload too big - delay payload
        txdata = 0;
    40bc:	f1 2c       	mov	r15, r1
        flen = end+4;
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
    40be:	80 e4       	ldi	r24, 0x40	; 64
    40c0:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x141>
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
    40c4:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <LMIC+0x119>
    40c8:	20 91 d8 03 	lds	r18, 0x03D8	; 0x8003d8 <LMIC+0x120>
    40cc:	29 2b       	or	r18, r25
    40ce:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <LMIC+0x11a>
    40d2:	90 95       	com	r25
    40d4:	89 2f       	mov	r24, r25
    40d6:	88 1f       	adc	r24, r24
    40d8:	88 27       	eor	r24, r24
    40da:	88 1f       	adc	r24, r24
    40dc:	82 95       	swap	r24
    40de:	88 0f       	add	r24, r24
    40e0:	88 0f       	add	r24, r24
    40e2:	80 7c       	andi	r24, 0xC0	; 192
    40e4:	98 ef       	ldi	r25, 0xF8	; 248
    40e6:	94 0f       	add	r25, r20
    40e8:	92 2b       	or	r25, r18
    40ea:	89 2b       	or	r24, r25
    40ec:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <LMIC+0x146>
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
                              | (end-OFF_DAT_OPTS));
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
    40f0:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    40f4:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    40f8:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    40fc:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>
    4100:	8a ef       	ldi	r24, 0xFA	; 250
    4102:	93 e0       	ldi	r25, 0x03	; 3
    4104:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
    4108:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <LMIC+0x13d>
    410c:	21 11       	cpse	r18, r1
    410e:	13 c0       	rjmp	.+38     	; 0x4136 <engineUpdate+0x668>
        LMIC.seqnoUp += 1;
    4110:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <LMIC+0x115>
    4114:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <LMIC+0x116>
    4118:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <LMIC+0x117>
    411c:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <LMIC+0x118>
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	a1 1d       	adc	r26, r1
    4124:	b1 1d       	adc	r27, r1
    4126:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <LMIC+0x115>
    412a:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <LMIC+0x116>
    412e:	a0 93 cf 03 	sts	0x03CF, r26	; 0x8003cf <LMIC+0x117>
    4132:	b0 93 d0 03 	sts	0x03D0, r27	; 0x8003d0 <LMIC+0x118>
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
    4136:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <LMIC+0x115>
    413a:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <LMIC+0x116>
    413e:	01 97       	sbiw	r24, 0x01	; 1
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    4140:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <LMIC+0x147>
    buf[1] = v>>8;
    4144:	90 93 00 04 	sts	0x0400, r25	; 0x800400 <LMIC+0x148>
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
    4148:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <LMIC+0x119>

    if( txdata ) {
    414c:	ff 20       	and	r15, r15
    414e:	09 f4       	brne	.+2      	; 0x4152 <engineUpdate+0x684>
    4150:	43 c0       	rjmp	.+134    	; 0x41d8 <engineUpdate+0x70a>
        if( LMIC.pendTxConf ) {
    4152:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <LMIC+0xb5>
    4156:	88 23       	and	r24, r24
    4158:	41 f0       	breq	.+16     	; 0x416a <engineUpdate+0x69c>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
    415a:	80 e8       	ldi	r24, 0x80	; 128
    415c:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <LMIC+0x141>
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
    4160:	21 11       	cpse	r18, r1
    4162:	03 c0       	rjmp	.+6      	; 0x416a <engineUpdate+0x69c>
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <LMIC+0x13d>
        }
        LMIC.frame[end] = LMIC.pendTxPort;
    416a:	f8 01       	movw	r30, r16
    416c:	e7 50       	subi	r30, 0x07	; 7
    416e:	fc 4f       	sbci	r31, 0xFC	; 252
    4170:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <LMIC+0xb4>
    4174:	80 83       	st	Z, r24
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
    4176:	98 01       	movw	r18, r16
    4178:	26 50       	subi	r18, 0x06	; 6
    417a:	3c 4f       	sbci	r19, 0xFC	; 252
    417c:	69 01       	movw	r12, r18
    417e:	8d 80       	ldd	r8, Y+5	; 0x05
    4180:	a8 2c       	mov	r10, r8
    4182:	b1 2c       	mov	r11, r1
    4184:	a5 01       	movw	r20, r10
    4186:	6f e6       	ldi	r22, 0x6F	; 111
    4188:	73 e0       	ldi	r23, 0x03	; 3
    418a:	c9 01       	movw	r24, r18
    418c:	0e 94 1f 34 	call	0x683e	; 0x683e <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
    4190:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <LMIC+0xb4>
    4194:	88 23       	and	r24, r24
    4196:	19 f0       	breq	.+6      	; 0x419e <engineUpdate+0x6d0>
    4198:	85 eb       	ldi	r24, 0xB5	; 181
    419a:	93 e0       	ldi	r25, 0x03	; 3
    419c:	02 c0       	rjmp	.+4      	; 0x41a2 <engineUpdate+0x6d4>
    419e:	85 ea       	ldi	r24, 0xA5	; 165
    41a0:	93 e0       	ldi	r25, 0x03	; 3
    os_aes(AES_ENC, pdu, len);
}


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
    if( len <= 0 )
    41a2:	a1 14       	cp	r10, r1
    41a4:	b1 04       	cpc	r11, r1
    41a6:	c1 f0       	breq	.+48     	; 0x41d8 <engineUpdate+0x70a>
    41a8:	00 91 cd 03 	lds	r16, 0x03CD	; 0x8003cd <LMIC+0x115>
    41ac:	10 91 ce 03 	lds	r17, 0x03CE	; 0x8003ce <LMIC+0x116>
    41b0:	20 91 cf 03 	lds	r18, 0x03CF	; 0x8003cf <LMIC+0x117>
    41b4:	30 91 d0 03 	lds	r19, 0x03D0	; 0x8003d0 <LMIC+0x118>
    41b8:	01 50       	subi	r16, 0x01	; 1
    41ba:	11 09       	sbc	r17, r1
    41bc:	21 09       	sbc	r18, r1
    41be:	31 09       	sbc	r19, r1
    41c0:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    41c4:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    41c8:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    41cc:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>
    41d0:	e1 2c       	mov	r14, r1
    41d2:	f1 2c       	mov	r15, r1
    41d4:	0e 94 81 15 	call	0x2b02	; 0x2b02 <aes_cipher.part.2>
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
                   LMIC.devaddr, LMIC.seqnoUp-1,
                   /*up*/0, LMIC.frame+end+1, dlen);
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
    41d8:	89 80       	ldd	r8, Y+1	; 0x01
    41da:	08 2d       	mov	r16, r8
    41dc:	10 e0       	ldi	r17, 0x00	; 0
    41de:	04 50       	subi	r16, 0x04	; 4
    41e0:	11 09       	sbc	r17, r1
    41e2:	c0 90 cd 03 	lds	r12, 0x03CD	; 0x8003cd <LMIC+0x115>
    41e6:	d0 90 ce 03 	lds	r13, 0x03CE	; 0x8003ce <LMIC+0x116>
    41ea:	e0 90 cf 03 	lds	r14, 0x03CF	; 0x8003cf <LMIC+0x117>
    41ee:	f0 90 d0 03 	lds	r15, 0x03D0	; 0x8003d0 <LMIC+0x118>
    41f2:	21 e0       	ldi	r18, 0x01	; 1
    41f4:	c2 1a       	sub	r12, r18
    41f6:	d1 08       	sbc	r13, r1
    41f8:	e1 08       	sbc	r14, r1
    41fa:	f1 08       	sbc	r15, r1
    41fc:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <LMIC+0x10d>
    4200:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <LMIC+0x10e>
    4204:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <LMIC+0x10f>
    4208:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <LMIC+0x110>

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
    os_clearMem(AESaux,16);
    420c:	e4 e0       	ldi	r30, 0x04	; 4
    420e:	f5 e0       	ldi	r31, 0x05	; 5
    4210:	df 01       	movw	r26, r30
    4212:	e0 e1       	ldi	r30, 0x10	; 16
    4214:	8e 2e       	mov	r8, r30
    4216:	1d 92       	st	X+, r1
    4218:	8a 94       	dec	r8
    421a:	e9 f7       	brne	.-6      	; 0x4216 <engineUpdate+0x748>
    AESaux[0]  = 0x49;
    421c:	89 e4       	ldi	r24, 0x49	; 73
    421e:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <AESAUX>
    AESaux[5]  = dndir?1:0;
    4222:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <AESAUX+0x5>
    AESaux[15] = len;
    4226:	00 93 13 05 	sts	0x0513, r16	; 0x800513 <AESAUX+0xf>
    os_wlsbf4(AESaux+ 6,devaddr);
    422a:	8a e0       	ldi	r24, 0x0A	; 10
    422c:	95 e0       	ldi	r25, 0x05	; 5
    422e:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
    4232:	b7 01       	movw	r22, r14
    4234:	a6 01       	movw	r20, r12
    4236:	8e e0       	ldi	r24, 0x0E	; 14
    4238:	95 e0       	ldi	r25, 0x05	; 5
    423a:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <os_wlsbf4>
}


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
    micB0(devaddr, seqno, dndir, len);
    os_copyMem(AESkey,key,16);
    423e:	e5 ea       	ldi	r30, 0xA5	; 165
    4240:	f3 e0       	ldi	r31, 0x03	; 3
    4242:	a4 e5       	ldi	r26, 0x54	; 84
    4244:	b4 e0       	ldi	r27, 0x04	; 4
    4246:	80 e1       	ldi	r24, 0x10	; 16
    4248:	a8 2e       	mov	r10, r24
    424a:	01 90       	ld	r0, Z+
    424c:	0d 92       	st	X+, r0
    424e:	aa 94       	dec	r10
    4250:	e1 f7       	brne	.-8      	; 0x424a <engineUpdate+0x77c>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
    4252:	a8 01       	movw	r20, r16
    4254:	69 ef       	ldi	r22, 0xF9	; 249
    4256:	73 e0       	ldi	r23, 0x03	; 3
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    425e:	ab 01       	movw	r20, r22
    4260:	bc 01       	movw	r22, r24
    4262:	c8 01       	movw	r24, r16
    4264:	87 50       	subi	r24, 0x07	; 7
    4266:	9c 4f       	sbci	r25, 0xFC	; 252
    4268:	0e 94 04 17 	call	0x2e08	; 0x2e08 <os_wmsbf4>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
    426c:	89 80       	ldd	r8, Y+1	; 0x01
    426e:	80 92 f8 03 	sts	0x03F8, r8	; 0x8003f8 <LMIC+0x140>
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
                }
                buildDataFrame();
                LMIC.osjob.func = FUNC_ADDR(updataDone);
    4272:	81 ef       	ldi	r24, 0xF1	; 241
    4274:	96 e1       	ldi	r25, 0x16	; 22
    4276:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    427a:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    427e:	e9 2d       	mov	r30, r9
    4280:	f0 e0       	ldi	r31, 0x00	; 0
    4282:	ed 51       	subi	r30, 0x1D	; 29
    4284:	fe 4f       	sbci	r31, 0xFE	; 254
inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
    4286:	21 81       	ldd	r18, Z+1	; 0x01
    4288:	2f 79       	andi	r18, 0x9F	; 159
    428a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <LMIC+0xac>
    428e:	00 e2       	ldi	r16, 0x20	; 32
    4290:	80 9f       	mul	r24, r16
    4292:	c0 01       	movw	r24, r0
    4294:	11 24       	eor	r1, r1
    4296:	82 2b       	or	r24, r18
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
    4298:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <LMIC+0xf>
    429c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <LMIC+0xe>
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
    42a0:	90 92 c9 02 	sts	0x02C9, r9	; 0x8002c9 <LMIC+0x11>
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
    42a4:	20 91 5f 03 	lds	r18, 0x035F	; 0x80035f <LMIC+0xa7>
    42a8:	30 91 60 03 	lds	r19, 0x0360	; 0x800360 <LMIC+0xa8>
    42ac:	2f 76       	andi	r18, 0x6F	; 111
    42ae:	36 7f       	andi	r19, 0xF6	; 246
    42b0:	20 68       	ori	r18, 0x80	; 128
    42b2:	38 60       	ori	r19, 0x08	; 8
    42b4:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <LMIC+0xa8>
    42b8:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <LMIC+0xa7>
    return 1;
}


static void updateTx (ostime_t txbeg) {
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
    42bc:	e0 91 55 03 	lds	r30, 0x0355	; 0x800355 <LMIC+0x9d>
    42c0:	14 e0       	ldi	r17, 0x04	; 4
    42c2:	e1 9f       	mul	r30, r17
    42c4:	f0 01       	movw	r30, r0
    42c6:	11 24       	eor	r1, r1
    42c8:	e8 54       	subi	r30, 0x48	; 72
    42ca:	fd 4f       	sbci	r31, 0xFD	; 253
    42cc:	83 ac       	ldd	r8, Z+59	; 0x3b
    42ce:	94 ac       	ldd	r9, Z+60	; 0x3c
    42d0:	a5 ac       	ldd	r10, Z+61	; 0x3d
    42d2:	b6 ac       	ldd	r11, Z+62	; 0x3e
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
    42d4:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <LMIC+0x140>
    42d8:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <calcAirTime>
    42dc:	6b 01       	movw	r12, r22
    42de:	7c 01       	movw	r14, r24
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
    42e0:	d5 01       	movw	r26, r10
    42e2:	c4 01       	movw	r24, r8
    42e4:	83 70       	andi	r24, 0x03	; 3
    42e6:	99 27       	eor	r25, r25
    42e8:	aa 27       	eor	r26, r26
    42ea:	bb 27       	eor	r27, r27
    LMIC.freq  = freq & ~(u4_t)3;
    42ec:	2c ef       	ldi	r18, 0xFC	; 252
    42ee:	82 22       	and	r8, r18
    42f0:	80 92 c0 02 	sts	0x02C0, r8	; 0x8002c0 <LMIC+0x8>
    42f4:	90 92 c1 02 	sts	0x02C1, r9	; 0x8002c1 <LMIC+0x9>
    42f8:	a0 92 c2 02 	sts	0x02C2, r10	; 0x8002c2 <LMIC+0xa>
    42fc:	b0 92 c3 02 	sts	0x02C3, r11	; 0x8002c3 <LMIC+0xb>
    LMIC.txpow = band->txpow;
    4300:	43 e0       	ldi	r20, 0x03	; 3
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	4a 95       	dec	r20
    4308:	e1 f7       	brne	.-8      	; 0x4302 <engineUpdate+0x834>
    430a:	fc 01       	movw	r30, r24
    430c:	e8 54       	subi	r30, 0x48	; 72
    430e:	fd 4f       	sbci	r31, 0xFD	; 253
    4310:	85 8d       	ldd	r24, Z+29	; 0x1d
    4312:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <LMIC+0x12>
    band->avail = txbeg + airtime * band->txcap;
    4316:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4318:	b4 8d       	ldd	r27, Z+28	; 0x1c
    431a:	a7 01       	movw	r20, r14
    431c:	96 01       	movw	r18, r12
    431e:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    4322:	dc 01       	movw	r26, r24
    4324:	cb 01       	movw	r24, r22
    4326:	84 0d       	add	r24, r4
    4328:	95 1d       	adc	r25, r5
    432a:	a6 1d       	adc	r26, r6
    432c:	b7 1d       	adc	r27, r7
    432e:	87 8f       	std	Z+31, r24	; 0x1f
    4330:	90 a3       	std	Z+32, r25	; 0x20
    4332:	a1 a3       	std	Z+33, r26	; 0x21
    4334:	b2 a3       	std	Z+34, r27	; 0x22
    if( LMIC.globalDutyRate != 0 )
    4336:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <LMIC+0x9e>
    433a:	88 23       	and	r24, r24
    433c:	99 f0       	breq	.+38     	; 0x4364 <engineUpdate+0x896>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
    433e:	04 c0       	rjmp	.+8      	; 0x4348 <engineUpdate+0x87a>
    4340:	cc 0c       	add	r12, r12
    4342:	dd 1c       	adc	r13, r13
    4344:	ee 1c       	adc	r14, r14
    4346:	ff 1c       	adc	r15, r15
    4348:	8a 95       	dec	r24
    434a:	d2 f7       	brpl	.-12     	; 0x4340 <engineUpdate+0x872>
    434c:	c4 0c       	add	r12, r4
    434e:	d5 1c       	adc	r13, r5
    4350:	e6 1c       	adc	r14, r6
    4352:	f7 1c       	adc	r15, r7
    4354:	c0 92 57 03 	sts	0x0357, r12	; 0x800357 <LMIC+0x9f>
    4358:	d0 92 58 03 	sts	0x0358, r13	; 0x800358 <LMIC+0xa0>
    435c:	e0 92 59 03 	sts	0x0359, r14	; 0x800359 <LMIC+0xa1>
    4360:	f0 92 5a 03 	sts	0x035A, r15	; 0x80035a <LMIC+0xa2>
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
            updateTx(txbeg);
            reportEvent(EV_TXSTART);
    4364:	81 e1       	ldi	r24, 0x11	; 17
    4366:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
            os_radio(RADIO_TX);
    436a:	81 e0       	ldi	r24, 0x01	; 1
    436c:	b8 c0       	rjmp	.+368    	; 0x44de <engineUpdate+0xa10>
            return;
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
    436e:	23 2b       	or	r18, r19
    4370:	09 f4       	brne	.+2      	; 0x4374 <engineUpdate+0x8a6>
    4372:	dc c0       	rjmp	.+440    	; 0x452c <engineUpdate+0xa5e>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
    4374:	c1 14       	cp	r12, r1
    4376:	d1 04       	cpc	r13, r1
    4378:	e1 04       	cpc	r14, r1
    437a:	f1 04       	cpc	r15, r1
    437c:	59 f4       	brne	.+22     	; 0x4394 <engineUpdate+0x8c6>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
    437e:	c1 2c       	mov	r12, r1
    4380:	d1 2c       	mov	r13, r1
    4382:	76 01       	movw	r14, r12
    4384:	c3 94       	inc	r12
    4386:	06 c0       	rjmp	.+12     	; 0x4394 <engineUpdate+0x8c6>
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
    4388:	39 89       	ldd	r19, Y+17	; 0x11
    438a:	31 ff       	sbrs	r19, 1
    438c:	3f c1       	rjmp	.+638    	; 0x460c <engineUpdate+0xb3e>
        return;
    }

    ostime_t now    = os_getTime();
    ostime_t rxtime = 0;
    ostime_t txbeg  = 0;
    438e:	c1 2c       	mov	r12, r1
    4390:	d1 2c       	mov	r13, r1
    4392:	76 01       	movw	r14, r12
            return;
    }

    // Are we pingable?
  checkrx:
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
    4394:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4398:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    439c:	91 ff       	sbrs	r25, 1
    439e:	65 c0       	rjmp	.+202    	; 0x446a <engineUpdate+0x99c>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
    43a0:	b3 01       	movw	r22, r6
    43a2:	a2 01       	movw	r20, r4
    43a4:	42 5c       	subi	r20, 0xC2	; 194
    43a6:	5f 4f       	sbci	r21, 0xFF	; 255
    43a8:	6f 4f       	sbci	r22, 0xFF	; 255
    43aa:	7f 4f       	sbci	r23, 0xFF	; 255
    43ac:	4d 83       	std	Y+5, r20	; 0x05
    43ae:	5e 83       	std	Y+6, r21	; 0x06
    43b0:	6f 83       	std	Y+7, r22	; 0x07
    43b2:	78 87       	std	Y+8, r23	; 0x08
}


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
  again:
    if( rxsched->rxtime - cando >= 0 )
    43b4:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <LMIC+0x135>
    43b8:	50 91 ee 03 	lds	r21, 0x03EE	; 0x8003ee <LMIC+0x136>
    43bc:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <LMIC+0x137>
    43c0:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <LMIC+0x138>
    43c4:	db 01       	movw	r26, r22
    43c6:	ca 01       	movw	r24, r20
    43c8:	8d 80       	ldd	r8, Y+5	; 0x05
    43ca:	9e 80       	ldd	r9, Y+6	; 0x06
    43cc:	af 80       	ldd	r10, Y+7	; 0x07
    43ce:	b8 84       	ldd	r11, Y+8	; 0x08
    43d0:	88 19       	sub	r24, r8
    43d2:	99 09       	sbc	r25, r9
    43d4:	aa 09       	sbc	r26, r10
    43d6:	bb 09       	sbc	r27, r11
    43d8:	b7 ff       	sbrs	r27, 7
    43da:	9b c0       	rjmp	.+310    	; 0x4512 <engineUpdate+0xa44>
        return 1;
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
    43dc:	10 91 e7 03 	lds	r17, 0x03E7	; 0x8003e7 <LMIC+0x12f>
    43e0:	17 fd       	sbrc	r17, 7
    43e2:	43 c0       	rjmp	.+134    	; 0x446a <engineUpdate+0x99c>
        return 0;
    u1_t intv = 1<<rxsched->intvExp;
    43e4:	e1 e0       	ldi	r30, 0x01	; 1
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	00 90 e6 03 	lds	r0, 0x03E6	; 0x8003e6 <LMIC+0x12e>
    43ec:	02 c0       	rjmp	.+4      	; 0x43f2 <engineUpdate+0x924>
    43ee:	ee 0f       	add	r30, r30
    43f0:	ff 1f       	adc	r31, r31
    43f2:	0a 94       	dec	r0
    43f4:	e2 f7       	brpl	.-8      	; 0x43ee <engineUpdate+0x920>
    if( (rxsched->slot = (slot += (intv))) >= 128 )
    43f6:	1e 0f       	add	r17, r30
    43f8:	10 93 e7 03 	sts	0x03E7, r17	; 0x8003e7 <LMIC+0x12f>
    43fc:	17 fd       	sbrc	r17, 7
    43fe:	35 c0       	rjmp	.+106    	; 0x446a <engineUpdate+0x99c>
        return 0;
    rxsched->rxtime = rxsched->rxbase
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
    4400:	a1 2f       	mov	r26, r17
    4402:	b0 e0       	ldi	r27, 0x00	; 0
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	38 e9       	ldi	r19, 0x98	; 152
    4408:	4a e3       	ldi	r20, 0x3A	; 58
    440a:	50 e0       	ldi	r21, 0x00	; 0
    440c:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	27 e0       	ldi	r18, 0x07	; 7
    4416:	b5 95       	asr	r27
    4418:	a7 95       	ror	r26
    441a:	97 95       	ror	r25
    441c:	87 95       	ror	r24
    441e:	2a 95       	dec	r18
    4420:	d1 f7       	brne	.-12     	; 0x4416 <engineUpdate+0x948>
    4422:	80 90 e9 03 	lds	r8, 0x03E9	; 0x8003e9 <LMIC+0x131>
    4426:	90 90 ea 03 	lds	r9, 0x03EA	; 0x8003ea <LMIC+0x132>
    442a:	a0 90 eb 03 	lds	r10, 0x03EB	; 0x8003eb <LMIC+0x133>
    442e:	b0 90 ec 03 	lds	r11, 0x03EC	; 0x8003ec <LMIC+0x134>
    4432:	88 0e       	add	r8, r24
    4434:	99 1e       	adc	r9, r25
    4436:	aa 1e       	adc	r10, r26
    4438:	bb 1e       	adc	r11, r27
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
    443a:	82 e0       	ldi	r24, 0x02	; 2
    443c:	8e 0f       	add	r24, r30
    443e:	60 91 e5 03 	lds	r22, 0x03E5	; 0x8003e5 <LMIC+0x12d>
    4442:	81 0f       	add	r24, r17
    4444:	0e 94 9b 11 	call	0x2336	; 0x2336 <calcRxWindow>
    if( (slot=rxsched->slot) >= 128 )
        return 0;
    u1_t intv = 1<<rxsched->intvExp;
    if( (rxsched->slot = (slot += (intv))) >= 128 )
        return 0;
    rxsched->rxtime = rxsched->rxbase
    4448:	86 1a       	sub	r8, r22
    444a:	97 0a       	sbc	r9, r23
    444c:	a8 0a       	sbc	r10, r24
    444e:	b9 0a       	sbc	r11, r25
    4450:	80 92 ed 03 	sts	0x03ED, r8	; 0x8003ed <LMIC+0x135>
    4454:	90 92 ee 03 	sts	0x03EE, r9	; 0x8003ee <LMIC+0x136>
    4458:	a0 92 ef 03 	sts	0x03EF, r10	; 0x8003ef <LMIC+0x137>
    445c:	b0 92 f0 03 	sts	0x03F0, r11	; 0x8003f0 <LMIC+0x138>
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
    rxsched->rxsyms = LMIC.rxsyms;
    4460:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <LMIC+0x10>
    4464:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <LMIC+0x130>
    4468:	a5 cf       	rjmp	.-182    	; 0x43b4 <engineUpdate+0x8e6>
            return;
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
    446a:	c1 14       	cp	r12, r1
    446c:	d1 04       	cpc	r13, r1
    446e:	e1 04       	cpc	r14, r1
    4470:	f1 04       	cpc	r15, r1
    4472:	61 f0       	breq	.+24     	; 0x448c <engineUpdate+0x9be>
    4474:	d7 01       	movw	r26, r14
    4476:	c6 01       	movw	r24, r12
    4478:	89 80       	ldd	r8, Y+1	; 0x01
    447a:	9a 80       	ldd	r9, Y+2	; 0x02
    447c:	ab 80       	ldd	r10, Y+3	; 0x03
    447e:	bc 80       	ldd	r11, Y+4	; 0x04
    4480:	88 19       	sub	r24, r8
    4482:	99 09       	sbc	r25, r9
    4484:	aa 09       	sbc	r26, r10
    4486:	bb 09       	sbc	r27, r11
    4488:	b7 fd       	sbrc	r27, 7
    448a:	50 c0       	rjmp	.+160    	; 0x452c <engineUpdate+0xa5e>
        goto txdelay;

    setBcnRxParams();
    448c:	0e 94 0a 12 	call	0x2414	; 0x2414 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
    4490:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <LMIC+0x182>
    4494:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <LMIC+0x10>
    LMIC.rxtime = LMIC.bcnRxtime;
    4498:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <LMIC+0x183>
    449c:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <LMIC+0x184>
    44a0:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <LMIC+0x185>
    44a4:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <LMIC+0x186>
    44a8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <LMIC+0x4>
    44ac:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <LMIC+0x5>
    44b0:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <LMIC+0x6>
    44b4:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <LMIC+0x7>
    if( now - rxtime >= 0 ) {
    44b8:	d3 01       	movw	r26, r6
    44ba:	c2 01       	movw	r24, r4
    44bc:	89 80       	ldd	r8, Y+1	; 0x01
    44be:	9a 80       	ldd	r9, Y+2	; 0x02
    44c0:	ab 80       	ldd	r10, Y+3	; 0x03
    44c2:	bc 80       	ldd	r11, Y+4	; 0x04
    44c4:	88 19       	sub	r24, r8
    44c6:	99 09       	sbc	r25, r9
    44c8:	aa 09       	sbc	r26, r10
    44ca:	bb 09       	sbc	r27, r11
    44cc:	b7 fd       	sbrc	r27, 7
    44ce:	52 c0       	rjmp	.+164    	; 0x4574 <engineUpdate+0xaa6>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
    44d0:	84 e8       	ldi	r24, 0x84	; 132
    44d2:	93 e2       	ldi	r25, 0x23	; 35
    44d4:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <LMIC+0x1a>
    44d8:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <LMIC+0x19>
        os_radio(RADIO_RX);
    44dc:	82 e0       	ldi	r24, 0x02	; 2
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    44de:	62 96       	adiw	r28, 0x12	; 18
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	ef 90       	pop	r14
    44f6:	df 90       	pop	r13
    44f8:	cf 90       	pop	r12
    44fa:	bf 90       	pop	r11
    44fc:	af 90       	pop	r10
    44fe:	9f 90       	pop	r9
    4500:	8f 90       	pop	r8
    4502:	7f 90       	pop	r7
    4504:	6f 90       	pop	r6
    4506:	5f 90       	pop	r5
    4508:	4f 90       	pop	r4
    450a:	3f 90       	pop	r3
    450c:	2f 90       	pop	r2
    setBcnRxParams();
    LMIC.rxsyms = LMIC.bcnRxsyms;
    LMIC.rxtime = LMIC.bcnRxtime;
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
        os_radio(RADIO_RX);
    450e:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <os_radio>
    // Are we pingable?
  checkrx:
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
    4512:	c1 14       	cp	r12, r1
    4514:	d1 04       	cpc	r13, r1
    4516:	e1 04       	cpc	r14, r1
    4518:	f1 04       	cpc	r15, r1
    451a:	99 f1       	breq	.+102    	; 0x4582 <engineUpdate+0xab4>
    451c:	d7 01       	movw	r26, r14
    451e:	c6 01       	movw	r24, r12
    4520:	84 1b       	sub	r24, r20
    4522:	95 0b       	sbc	r25, r21
    4524:	a6 0b       	sbc	r26, r22
    4526:	b7 0b       	sbc	r27, r23
    4528:	b7 ff       	sbrs	r27, 7
    452a:	2b c0       	rjmp	.+86     	; 0x4582 <engineUpdate+0xab4>
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
    452c:	b7 01       	movw	r22, r14
    452e:	a6 01       	movw	r20, r12
    4530:	4e 53       	subi	r20, 0x3E	; 62
    4532:	51 09       	sbc	r21, r1
    4534:	61 09       	sbc	r22, r1
    4536:	71 09       	sbc	r23, r1
    4538:	2f e5       	ldi	r18, 0x5F	; 95
    453a:	36 e2       	ldi	r19, 0x26	; 38
    453c:	8b ec       	ldi	r24, 0xCB	; 203
    453e:	92 e0       	ldi	r25, 0x02	; 2
}
    4540:	62 96       	adiw	r28, 0x12	; 18
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	f8 94       	cli
    4546:	de bf       	out	0x3e, r29	; 62
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	cd bf       	out	0x3d, r28	; 61
    454c:	df 91       	pop	r29
    454e:	cf 91       	pop	r28
    4550:	1f 91       	pop	r17
    4552:	0f 91       	pop	r16
    4554:	ff 90       	pop	r15
    4556:	ef 90       	pop	r14
    4558:	df 90       	pop	r13
    455a:	cf 90       	pop	r12
    455c:	bf 90       	pop	r11
    455e:	af 90       	pop	r10
    4560:	9f 90       	pop	r9
    4562:	8f 90       	pop	r8
    4564:	7f 90       	pop	r7
    4566:	6f 90       	pop	r6
    4568:	5f 90       	pop	r5
    456a:	4f 90       	pop	r4
    456c:	3f 90       	pop	r3
    456e:	2f 90       	pop	r2
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
    4570:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
        os_radio(RADIO_RX);
        return;
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
    4574:	2c e2       	ldi	r18, 0x2C	; 44
    4576:	33 e1       	ldi	r19, 0x13	; 19
    4578:	49 81       	ldd	r20, Y+1	; 0x01
    457a:	5a 81       	ldd	r21, Y+2	; 0x02
    457c:	6b 81       	ldd	r22, Y+3	; 0x03
    457e:	7c 81       	ldd	r23, Y+4	; 0x04
    4580:	dd cf       	rjmp	.-70     	; 0x453c <engineUpdate+0xa6e>
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
    4582:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <LMIC+0x130>
    4586:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <LMIC+0x10>
            LMIC.rxtime  = LMIC.ping.rxtime;
    458a:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <LMIC+0x4>
    458e:	50 93 bd 02 	sts	0x02BD, r21	; 0x8002bd <LMIC+0x5>
    4592:	60 93 be 02 	sts	0x02BE, r22	; 0x8002be <LMIC+0x6>
    4596:	70 93 bf 02 	sts	0x02BF, r23	; 0x8002bf <LMIC+0x7>
            LMIC.freq    = LMIC.ping.freq;
    459a:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <LMIC+0x139>
    459e:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <LMIC+0x13a>
    45a2:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <LMIC+0x13b>
    45a6:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <LMIC+0x13c>
    45aa:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <LMIC+0x8>
    45ae:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <LMIC+0x9>
    45b2:	a0 93 c2 02 	sts	0x02C2, r26	; 0x8002c2 <LMIC+0xa>
    45b6:	b0 93 c3 02 	sts	0x02C3, r27	; 0x8002c3 <LMIC+0xb>
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
    45ba:	e0 91 e5 03 	lds	r30, 0x03E5	; 0x8003e5 <LMIC+0x12d>
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	ed 51       	subi	r30, 0x1D	; 29
    45c2:	fe 4f       	sbci	r31, 0xFE	; 254
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
    45c4:	81 81       	ldd	r24, Z+1	; 0x01
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	8f 77       	andi	r24, 0x7F	; 127
    45ca:	80 68       	ori	r24, 0x80	; 128
    45cc:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <LMIC+0xf>
    45d0:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <LMIC+0xe>
            LMIC.dataLen = 0;
    45d4:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
    45d8:	44 19       	sub	r20, r4
    45da:	55 09       	sbc	r21, r5
    45dc:	66 09       	sbc	r22, r6
    45de:	77 09       	sbc	r23, r7
    45e0:	42 3c       	cpi	r20, 0xC2	; 194
    45e2:	5f 4f       	sbci	r21, 0xFF	; 255
    45e4:	6f 4f       	sbci	r22, 0xFF	; 255
    45e6:	7f 4f       	sbci	r23, 0xFF	; 255
    45e8:	14 f4       	brge	.+4      	; 0x45ee <engineUpdate+0xb20>
    45ea:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
    45ee:	40 91 bc 02 	lds	r20, 0x02BC	; 0x8002bc <LMIC+0x4>
    45f2:	50 91 bd 02 	lds	r21, 0x02BD	; 0x8002bd <LMIC+0x5>
    45f6:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <LMIC+0x6>
    45fa:	70 91 bf 02 	lds	r23, 0x02BF	; 0x8002bf <LMIC+0x7>
    45fe:	4e 53       	subi	r20, 0x3E	; 62
    4600:	51 09       	sbc	r21, r1
    4602:	61 09       	sbc	r22, r1
    4604:	71 09       	sbc	r23, r1
    4606:	25 e3       	ldi	r18, 0x35	; 53
    4608:	33 e1       	ldi	r19, 0x13	; 19
    460a:	98 cf       	rjmp	.-208    	; 0x453c <engineUpdate+0xa6e>
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}
    460c:	62 96       	adiw	r28, 0x12	; 18
    460e:	0f b6       	in	r0, 0x3f	; 63
    4610:	f8 94       	cli
    4612:	de bf       	out	0x3e, r29	; 62
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	cd bf       	out	0x3d, r28	; 61
    4618:	df 91       	pop	r29
    461a:	cf 91       	pop	r28
    461c:	1f 91       	pop	r17
    461e:	0f 91       	pop	r16
    4620:	ff 90       	pop	r15
    4622:	ef 90       	pop	r14
    4624:	df 90       	pop	r13
    4626:	cf 90       	pop	r12
    4628:	bf 90       	pop	r11
    462a:	af 90       	pop	r10
    462c:	9f 90       	pop	r9
    462e:	8f 90       	pop	r8
    4630:	7f 90       	pop	r7
    4632:	6f 90       	pop	r6
    4634:	5f 90       	pop	r5
    4636:	4f 90       	pop	r4
    4638:	3f 90       	pop	r3
    463a:	2f 90       	pop	r2
    463c:	08 95       	ret

0000463e <reportEvent>:

static void reportEvent (ev_t ev) {
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
    463e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <onEvent>
    engineUpdate();
    4642:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00004646 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
    4646:	80 e0       	ldi	r24, 0x00	; 0
    4648:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <os_radio>
    os_clearCallback(&LMIC.osjob);
    464c:	8b ec       	ldi	r24, 0xCB	; 203
    464e:	92 e0       	ldi	r25, 0x02	; 2
    4650:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
    4654:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4658:	81 11       	cpse	r24, r1
    465a:	0b c0       	rjmp	.+22     	; 0x4672 <onBcnRx+0x2c>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
    465c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4660:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4664:	8c 7f       	andi	r24, 0xFC	; 252
    4666:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    466a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
        reportEvent(EV_SCAN_TIMEOUT);
    466e:	81 e0       	ldi	r24, 0x01	; 1
    4670:	49 c0       	rjmp	.+146    	; 0x4704 <onBcnRx+0xbe>
        return;
    }
    if( decodeBeacon() <= 0 ) {
    4672:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <decodeBeacon>
    4676:	18 16       	cp	r1, r24
    4678:	19 06       	cpc	r1, r25
    467a:	9c f0       	brlt	.+38     	; 0x46a2 <onBcnRx+0x5c>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
    467c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
        os_radio(RADIO_RXON);
    4680:	83 e0       	ldi	r24, 0x03	; 3
    4682:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
    4686:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <LMIC+0x187>
    468a:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <LMIC+0x188>
    468e:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <LMIC+0x189>
    4692:	70 91 42 04 	lds	r23, 0x0442	; 0x800442 <LMIC+0x18a>
    4696:	23 e2       	ldi	r18, 0x23	; 35
    4698:	33 e2       	ldi	r19, 0x23	; 35
    469a:	8b ec       	ldi	r24, 0xCB	; 203
    469c:	92 e0       	ldi	r25, 0x02	; 2
    469e:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
    if( ini ) {
        LMIC.drift = 0;
    46a2:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <LMIC+0xaf>
    46a6:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <LMIC+0xae>
        LMIC.maxDriftDiff = 0;
    46aa:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <LMIC+0xb3>
    46ae:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <LMIC+0xb2>
        LMIC.missedBcns = 0;
    46b2:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <LMIC+0x12a>
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    46b6:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <LMIC+0x18d>
    46ba:	8c 60       	ori	r24, 0x0C	; 12
    46bc:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <LMIC+0x18d>
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    46c0:	8b e0       	ldi	r24, 0x0B	; 11
    46c2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    46c6:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <LMIC+0x187>
    46ca:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <LMIC+0x188>
    46ce:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <LMIC+0x189>
    46d2:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <LMIC+0x18a>
    46d6:	80 5c       	subi	r24, 0xC0	; 192
    46d8:	97 4f       	sbci	r25, 0xF7	; 247
    46da:	a2 4c       	sbci	r26, 0xC2	; 194
    46dc:	bf 4f       	sbci	r27, 0xFF	; 255
    46de:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <LMIC+0x183>
    46e2:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <LMIC+0x184>
    46e6:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <LMIC+0x185>
    46ea:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <LMIC+0x186>
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
    46ee:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    46f2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    46f6:	8e 7f       	andi	r24, 0xFE	; 254
    46f8:	82 60       	ori	r24, 0x02	; 2
    46fa:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    46fe:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
    4702:	82 e0       	ldi	r24, 0x02	; 2
    4704:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>

00004708 <processBeacon>:
    }
    goto txcomplete;
}


static void processBeacon (xref2osjob_t osjob) {
    4708:	cf 92       	push	r12
    470a:	df 92       	push	r13
    470c:	ef 92       	push	r14
    470e:	ff 92       	push	r15
    4710:	cf 93       	push	r28
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
    4712:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4716:	88 23       	and	r24, r24
    4718:	09 f4       	brne	.+2      	; 0x471c <processBeacon+0x14>
    471a:	7b c0       	rjmp	.+246    	; 0x4812 <processBeacon+0x10a>
    goto txcomplete;
}


static void processBeacon (xref2osjob_t osjob) {
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    471c:	c0 90 3f 04 	lds	r12, 0x043F	; 0x80043f <LMIC+0x187>
    4720:	d0 90 40 04 	lds	r13, 0x0440	; 0x800440 <LMIC+0x188>
    4724:	e0 90 41 04 	lds	r14, 0x0441	; 0x800441 <LMIC+0x189>
    4728:	f0 90 42 04 	lds	r15, 0x0442	; 0x800442 <LMIC+0x18a>
    u1_t flags = LMIC.bcninfo.flags;
    472c:	c0 91 45 04 	lds	r28, 0x0445	; 0x800445 <LMIC+0x18d>
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
    4730:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <decodeBeacon>
    4734:	18 16       	cp	r1, r24
    4736:	19 06       	cpc	r1, r25
    4738:	0c f0       	brlt	.+2      	; 0x473c <processBeacon+0x34>
    473a:	6b c0       	rjmp	.+214    	; 0x4812 <processBeacon+0x10a>
        ev = EV_BEACON_TRACKED;
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
    473c:	c3 70       	andi	r28, 0x03	; 3
    473e:	c9 f4       	brne	.+50     	; 0x4772 <processBeacon+0x6a>
        LMIC.maxDriftDiff = 0;
        LMIC.missedBcns = 0;
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
    }
    ostime_t hsym = dr2hsym(DR_BCN);
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
    4740:	8b e0       	ldi	r24, 0x0B	; 11
    4742:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <LMIC+0x182>
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
    4746:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <LMIC+0x187>
    474a:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <LMIC+0x188>
    474e:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <LMIC+0x189>
    4752:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <LMIC+0x18a>
    4756:	80 5c       	subi	r24, 0xC0	; 192
    4758:	97 4f       	sbci	r25, 0xF7	; 247
    475a:	a2 4c       	sbci	r26, 0xC2	; 194
    475c:	bf 4f       	sbci	r27, 0xFF	; 255
    475e:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <LMIC+0x183>
    4762:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <LMIC+0x184>
    4766:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <LMIC+0x185>
    476a:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <LMIC+0x186>
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
        ev = EV_BEACON_TRACKED;
    476e:	c4 e0       	ldi	r28, 0x04	; 4
    4770:	da c0       	rjmp	.+436    	; 0x4926 <processBeacon+0x21e>
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
            goto rev;
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
    4772:	27 ef       	ldi	r18, 0xF7	; 247
    4774:	d2 1a       	sub	r13, r18
    4776:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <LMIC+0x187>
    477a:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <LMIC+0x188>
    477e:	c8 1a       	sub	r12, r24
    4780:	d9 0a       	sbc	r13, r25
        if( LMIC.missedBcns > 0 ) {
    4782:	60 91 e2 03 	lds	r22, 0x03E2	; 0x8003e2 <LMIC+0x12a>
    4786:	66 23       	and	r22, r22
    4788:	79 f0       	breq	.+30     	; 0x47a8 <processBeacon+0xa0>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
    478a:	20 91 66 03 	lds	r18, 0x0366	; 0x800366 <LMIC+0xae>
    478e:	30 91 67 03 	lds	r19, 0x0367	; 0x800367 <LMIC+0xaf>
    4792:	c6 01       	movw	r24, r12
    4794:	82 1b       	sub	r24, r18
    4796:	93 0b       	sbc	r25, r19
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	6f 5f       	subi	r22, 0xFF	; 255
    479c:	7f 4f       	sbci	r23, 0xFF	; 255
    479e:	0e 94 02 32 	call	0x6404	; 0x6404 <__divmodhi4>
    47a2:	69 01       	movw	r12, r18
    47a4:	c6 0e       	add	r12, r22
    47a6:	d7 1e       	adc	r13, r23
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
    47a8:	20 91 45 04 	lds	r18, 0x0445	; 0x800445 <LMIC+0x18d>
    47ac:	22 fd       	sbrc	r18, 2
    47ae:	1d c0       	rjmp	.+58     	; 0x47ea <processBeacon+0xe2>
            s2_t diff = LMIC.drift - drift;
    47b0:	80 91 66 03 	lds	r24, 0x0366	; 0x800366 <LMIC+0xae>
    47b4:	90 91 67 03 	lds	r25, 0x0367	; 0x800367 <LMIC+0xaf>
    47b8:	8c 19       	sub	r24, r12
    47ba:	9d 09       	sbc	r25, r13
    47bc:	97 ff       	sbrs	r25, 7
    47be:	03 c0       	rjmp	.+6      	; 0x47c6 <processBeacon+0xbe>
    47c0:	91 95       	neg	r25
    47c2:	81 95       	neg	r24
    47c4:	91 09       	sbc	r25, r1
            if( diff < 0 ) diff = -diff;
            LMIC.lastDriftDiff = diff;
    47c6:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <LMIC+0xb1>
    47ca:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <LMIC+0xb0>
            if( LMIC.maxDriftDiff < diff )
    47ce:	40 91 6a 03 	lds	r20, 0x036A	; 0x80036a <LMIC+0xb2>
    47d2:	50 91 6b 03 	lds	r21, 0x036B	; 0x80036b <LMIC+0xb3>
    47d6:	48 17       	cp	r20, r24
    47d8:	59 07       	cpc	r21, r25
    47da:	24 f4       	brge	.+8      	; 0x47e4 <processBeacon+0xdc>
                LMIC.maxDriftDiff = diff;
    47dc:	90 93 6b 03 	sts	0x036B, r25	; 0x80036b <LMIC+0xb3>
    47e0:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <LMIC+0xb2>
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
    47e4:	27 7f       	andi	r18, 0xF7	; 247
    47e6:	20 93 45 04 	sts	0x0445, r18	; 0x800445 <LMIC+0x18d>
        }
        LMIC.drift = drift;
    47ea:	d0 92 67 03 	sts	0x0367, r13	; 0x800367 <LMIC+0xaf>
    47ee:	c0 92 66 03 	sts	0x0366, r12	; 0x800366 <LMIC+0xae>
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
    47f2:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <LMIC+0xad>
    47f6:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <LMIC+0x12a>
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
    47fa:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <LMIC+0x18d>
    47fe:	98 2f       	mov	r25, r24
    4800:	9b 7f       	andi	r25, 0xFB	; 251
    4802:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <LMIC+0x18d>
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
    4806:	83 70       	andi	r24, 0x03	; 3
    4808:	09 f0       	breq	.+2      	; 0x480c <processBeacon+0x104>
    480a:	69 c0       	rjmp	.+210    	; 0x48de <processBeacon+0x1d6>
    480c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    4810:	66 c0       	rjmp	.+204    	; 0x48de <processBeacon+0x1d6>
    } else {
        ev = EV_BEACON_MISSED;
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
    4812:	c0 90 66 03 	lds	r12, 0x0366	; 0x800366 <LMIC+0xae>
    4816:	d0 90 67 03 	lds	r13, 0x0367	; 0x800367 <LMIC+0xaf>
    481a:	0d 2c       	mov	r0, r13
    481c:	00 0c       	add	r0, r0
    481e:	ee 08       	sbc	r14, r14
    4820:	ff 08       	sbc	r15, r15
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	99 e0       	ldi	r25, 0x09	; 9
    4826:	ad e3       	ldi	r26, 0x3D	; 61
    4828:	b0 e0       	ldi	r27, 0x00	; 0
    482a:	ac 01       	movw	r20, r24
    482c:	bd 01       	movw	r22, r26
    482e:	4c 19       	sub	r20, r12
    4830:	5d 09       	sbc	r21, r13
    4832:	6e 09       	sbc	r22, r14
    4834:	7f 09       	sbc	r23, r15
    4836:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <LMIC+0x187>
    483a:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <LMIC+0x188>
    483e:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <LMIC+0x189>
    4842:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <LMIC+0x18a>
    4846:	84 0f       	add	r24, r20
    4848:	95 1f       	adc	r25, r21
    484a:	a6 1f       	adc	r26, r22
    484c:	b7 1f       	adc	r27, r23
    484e:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <LMIC+0x187>
    4852:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <LMIC+0x188>
    4856:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <LMIC+0x189>
    485a:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <LMIC+0x18a>
        LMIC.bcninfo.time   += BCN_INTV_sec;
    485e:	c0 90 46 04 	lds	r12, 0x0446	; 0x800446 <LMIC+0x18e>
    4862:	d0 90 47 04 	lds	r13, 0x0447	; 0x800447 <LMIC+0x18f>
    4866:	e0 90 48 04 	lds	r14, 0x0448	; 0x800448 <LMIC+0x190>
    486a:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <LMIC+0x191>
    486e:	20 e8       	ldi	r18, 0x80	; 128
    4870:	c2 0e       	add	r12, r18
    4872:	d1 1c       	adc	r13, r1
    4874:	e1 1c       	adc	r14, r1
    4876:	f1 1c       	adc	r15, r1
    4878:	c0 92 46 04 	sts	0x0446, r12	; 0x800446 <LMIC+0x18e>
    487c:	d0 92 47 04 	sts	0x0447, r13	; 0x800447 <LMIC+0x18f>
    4880:	e0 92 48 04 	sts	0x0448, r14	; 0x800448 <LMIC+0x190>
    4884:	f0 92 49 04 	sts	0x0449, r15	; 0x800449 <LMIC+0x191>
        LMIC.missedBcns++;
    4888:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <LMIC+0x12a>
    488c:	2f 5f       	subi	r18, 0xFF	; 255
    488e:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <LMIC+0x12a>
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
    4892:	bc 01       	movw	r22, r24
    4894:	cd 01       	movw	r24, r26
    4896:	66 53       	subi	r22, 0x36	; 54
    4898:	7d 4f       	sbci	r23, 0xFD	; 253
    489a:	8e 4f       	sbci	r24, 0xFE	; 254
    489c:	9f 4f       	sbci	r25, 0xFF	; 255
    489e:	44 e0       	ldi	r20, 0x04	; 4
    48a0:	0e 94 b0 12 	call	0x2560	; 0x2560 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
    48a4:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <LMIC+0x12a>
    48a8:	85 31       	cpi	r24, 0x15	; 21
    48aa:	48 f0       	brcs	.+18     	; 0x48be <processBeacon+0x1b6>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
    48ac:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    48b0:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    48b4:	80 62       	ori	r24, 0x20	; 32
    48b6:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    48ba:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
    48be:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <LMIC+0x182>
    48c2:	85 36       	cpi	r24, 0x65	; 101
    48c4:	70 f0       	brcs	.+28     	; 0x48e2 <processBeacon+0x1da>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
    48c6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    48ca:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    48ce:	8d 7d       	andi	r24, 0xDD	; 221
    48d0:	99 7f       	andi	r25, 0xF9	; 249
    48d2:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    48d6:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
            reportEvent(EV_LOST_TSYNC);
    48da:	8b e0       	ldi	r24, 0x0B	; 11
    48dc:	2c c0       	rjmp	.+88     	; 0x4936 <processBeacon+0x22e>
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
    u1_t flags = LMIC.bcninfo.flags;
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
        ev = EV_BEACON_TRACKED;
    48de:	c4 e0       	ldi	r28, 0x04	; 4
    48e0:	01 c0       	rjmp	.+2      	; 0x48e4 <processBeacon+0x1dc>
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
    } else {
        ev = EV_BEACON_MISSED;
    48e2:	c3 e0       	ldi	r28, 0x03	; 3
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
            reportEvent(EV_LOST_TSYNC);
            return;
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
    48e4:	c0 90 3f 04 	lds	r12, 0x043F	; 0x80043f <LMIC+0x187>
    48e8:	d0 90 40 04 	lds	r13, 0x0440	; 0x800440 <LMIC+0x188>
    48ec:	e0 90 41 04 	lds	r14, 0x0441	; 0x800441 <LMIC+0x189>
    48f0:	f0 90 42 04 	lds	r15, 0x0442	; 0x800442 <LMIC+0x18a>
    48f4:	89 e0       	ldi	r24, 0x09	; 9
    48f6:	d8 0e       	add	r13, r24
    48f8:	8d e3       	ldi	r24, 0x3D	; 61
    48fa:	e8 1e       	adc	r14, r24
    48fc:	f1 1c       	adc	r15, r1
    48fe:	63 e0       	ldi	r22, 0x03	; 3
    4900:	80 e0       	ldi	r24, 0x00	; 0
    4902:	0e 94 9b 11 	call	0x2336	; 0x2336 <calcRxWindow>
    4906:	c6 1a       	sub	r12, r22
    4908:	d7 0a       	sbc	r13, r23
    490a:	e8 0a       	sbc	r14, r24
    490c:	f9 0a       	sbc	r15, r25
    490e:	c0 92 3b 04 	sts	0x043B, r12	; 0x80043b <LMIC+0x183>
    4912:	d0 92 3c 04 	sts	0x043C, r13	; 0x80043c <LMIC+0x184>
    4916:	e0 92 3d 04 	sts	0x043D, r14	; 0x80043d <LMIC+0x185>
    491a:	f0 92 3e 04 	sts	0x043E, r15	; 0x80043e <LMIC+0x186>
    LMIC.bcnRxsyms = LMIC.rxsyms;    
    491e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <LMIC+0x10>
    4922:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <LMIC+0x182>
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
    4926:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    492a:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    492e:	91 fd       	sbrc	r25, 1
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
    4930:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <rxschedInit.constprop.10>
    reportEvent(ev);
    4934:	8c 2f       	mov	r24, r28
}
    4936:	cf 91       	pop	r28
    4938:	ff 90       	pop	r15
    493a:	ef 90       	pop	r14
    493c:	df 90       	pop	r13
    493e:	cf 90       	pop	r12
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
    reportEvent(ev);
    4940:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>

00004944 <processJoinAccept>:
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
}


static bit_t processJoinAccept (void) {
    4944:	cf 92       	push	r12
    4946:	df 92       	push	r13
    4948:	ef 92       	push	r14
    494a:	ff 92       	push	r15
    494c:	0f 93       	push	r16
    494e:	1f 93       	push	r17
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
    4954:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <LMIC+0x13e>
    4958:	81 30       	cpi	r24, 0x01	; 1
    495a:	31 f4       	brne	.+12     	; 0x4968 <processJoinAccept+0x24>
    495c:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4960:	81 11       	cpse	r24, r1
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <processJoinAccept+0x24>
    4964:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
    4968:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    496c:	87 ff       	sbrs	r24, 7
    496e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
    4972:	10 91 f8 03 	lds	r17, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4976:	11 11       	cpse	r17, r1
    4978:	8f c0       	rjmp	.+286    	; 0x4a98 <processJoinAccept+0x154>
      nojoinframe:
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
    497a:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    497e:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4982:	82 fd       	sbrc	r24, 2
    4984:	15 c0       	rjmp	.+42     	; 0x49b0 <processJoinAccept+0x6c>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
    4986:	85 ff       	sbrs	r24, 5
    4988:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
            // REJOIN attempt for roaming
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
    498c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4990:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4994:	8f 75       	andi	r24, 0x5F	; 95
    4996:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    499a:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
            if( LMIC.rejoinCnt < 10 )
    499e:	80 91 65 03 	lds	r24, 0x0365	; 0x800365 <LMIC+0xad>
    49a2:	8a 30       	cpi	r24, 0x0A	; 10
    49a4:	18 f4       	brcc	.+6      	; 0x49ac <processJoinAccept+0x68>
                LMIC.rejoinCnt++;
    49a6:	8f 5f       	subi	r24, 0xFF	; 255
    49a8:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <LMIC+0xad>
            reportEvent(EV_REJOIN_FAILED);
    49ac:	89 e0       	ldi	r24, 0x09	; 9
    49ae:	5c c1       	rjmp	.+696    	; 0x4c68 <processJoinAccept+0x324>
static ostime_t nextJoinState (void) {
    u1_t failed = 0;

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
    49b0:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <LMIC+0x9d>
    49b4:	2f 5f       	subi	r18, 0xFF	; 255
    49b6:	26 30       	cpi	r18, 0x06	; 6
    49b8:	19 f0       	breq	.+6      	; 0x49c0 <processJoinAccept+0x7c>
    49ba:	20 93 55 03 	sts	0x0355, r18	; 0x800355 <LMIC+0x9d>
    49be:	02 c0       	rjmp	.+4      	; 0x49c4 <processJoinAccept+0x80>
        LMIC.txChnl = 0;
    49c0:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <LMIC+0x9d>
    if( (++LMIC.txCnt & 1) == 0 ) {
    49c4:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <LMIC+0x13d>
    49c8:	2f 5f       	subi	r18, 0xFF	; 255
    49ca:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <LMIC+0x13d>
    49ce:	20 fd       	sbrc	r18, 0
    49d0:	0e c0       	rjmp	.+28     	; 0x49ee <processJoinAccept+0xaa>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
    49d2:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <LMIC+0xab>
    49d6:	22 23       	and	r18, r18
    49d8:	61 f0       	breq	.+24     	; 0x49f2 <processJoinAccept+0xae>
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    49da:	e2 2f       	mov	r30, r18
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	ed 51       	subi	r30, 0x1D	; 29
    49e0:	fe 4f       	sbci	r31, 0xFE	; 254
    49e2:	30 81       	ld	r19, Z
    49e4:	3f 3f       	cpi	r19, 0xFF	; 255
    49e6:	09 f0       	breq	.+2      	; 0x49ea <processJoinAccept+0xa6>
    49e8:	21 50       	subi	r18, 0x01	; 1
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
    49ea:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <LMIC+0xab>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
}


static ostime_t nextJoinState (void) {
    u1_t failed = 0;
    49ee:	c0 e0       	ldi	r28, 0x00	; 0
    49f0:	01 c0       	rjmp	.+2      	; 0x49f4 <processJoinAccept+0xb0>
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
        LMIC.txChnl = 0;
    if( (++LMIC.txCnt & 1) == 0 ) {
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
    49f2:	c1 e0       	ldi	r28, 0x01	; 1
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
    49f4:	8f 77       	andi	r24, 0x7F	; 127
    49f6:	97 7f       	andi	r25, 0xF7	; 247
    49f8:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    49fc:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
    4a00:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    4a04:	6b 01       	movw	r12, r22
    4a06:	7c 01       	movw	r14, r24
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
    4a08:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <LMIC+0x1f>
    4a0c:	90 91 d8 02 	lds	r25, 0x02D8	; 0x8002d8 <LMIC+0x20>
    4a10:	a0 91 d9 02 	lds	r26, 0x02D9	; 0x8002d9 <LMIC+0x21>
    4a14:	b0 91 da 02 	lds	r27, 0x02DA	; 0x8002da <LMIC+0x22>
    4a18:	b7 01       	movw	r22, r14
    4a1a:	a6 01       	movw	r20, r12
    4a1c:	48 1b       	sub	r20, r24
    4a1e:	59 0b       	sbc	r21, r25
    4a20:	6a 0b       	sbc	r22, r26
    4a22:	7b 0b       	sbc	r23, r27
    4a24:	77 ff       	sbrs	r23, 7
    4a26:	02 c0       	rjmp	.+4      	; 0x4a2c <processJoinAccept+0xe8>
        time = LMIC.bands[BAND_MILLI].avail;
    4a28:	6c 01       	movw	r12, r24
    4a2a:	7d 01       	movw	r14, r26
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
    4a2c:	8f ef       	ldi	r24, 0xFF	; 255
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	00 90 63 03 	lds	r0, 0x0363	; 0x800363 <LMIC+0xab>
    4a34:	02 c0       	rjmp	.+4      	; 0x4a3a <processJoinAccept+0xf6>
    4a36:	95 95       	asr	r25
    4a38:	87 95       	ror	r24
    4a3a:	0a 94       	dec	r0
    4a3c:	e2 f7       	brpl	.-8      	; 0x4a36 <processJoinAccept+0xf2>
    4a3e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <rndDelay>
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
        time = LMIC.bands[BAND_MILLI].avail;
    LMIC.txend = time +
    4a42:	dc 01       	movw	r26, r24
    4a44:	cb 01       	movw	r24, r22
    4a46:	8a 5c       	subi	r24, 0xCA	; 202
    4a48:	91 49       	sbci	r25, 0x91	; 145
    4a4a:	ae 4f       	sbci	r26, 0xFE	; 254
    4a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a4e:	c8 0e       	add	r12, r24
    4a50:	d9 1e       	adc	r13, r25
    4a52:	ea 1e       	adc	r14, r26
    4a54:	fb 1e       	adc	r15, r27
    4a56:	c0 92 b8 02 	sts	0x02B8, r12	; 0x8002b8 <LMIC>
    4a5a:	d0 92 b9 02 	sts	0x02B9, r13	; 0x8002b9 <LMIC+0x1>
    4a5e:	e0 92 ba 02 	sts	0x02BA, r14	; 0x8002ba <LMIC+0x2>
    4a62:	f0 92 bb 02 	sts	0x02BB, r15	; 0x8002bb <LMIC+0x3>
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
    4a66:	cc 2e       	mov	r12, r28
    4a68:	d1 2c       	mov	r13, r1
    4a6a:	e1 2c       	mov	r14, r1
    4a6c:	f1 2c       	mov	r15, r1
                            e_.info   = LMIC.datarate|DR_PAGE,
                            e_.info2  = osticks2ms(delay)));
        // Build next JOIN REQUEST with next engineUpdate call
        // Optionally, report join failed.
        // Both after a random/chosen amount of ticks.
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
    4a6e:	c1 11       	cpse	r28, r1
    4a70:	03 c0       	rjmp	.+6      	; 0x4a78 <processJoinAccept+0x134>
    4a72:	cf e5       	ldi	r28, 0x5F	; 95
    4a74:	d6 e2       	ldi	r29, 0x26	; 38
    4a76:	02 c0       	rjmp	.+4      	; 0x4a7c <processJoinAccept+0x138>
    4a78:	c9 e5       	ldi	r28, 0x59	; 89
    4a7a:	d6 e2       	ldi	r29, 0x26	; 38
    4a7c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    4a80:	ab 01       	movw	r20, r22
    4a82:	bc 01       	movw	r22, r24
    4a84:	4c 0d       	add	r20, r12
    4a86:	5d 1d       	adc	r21, r13
    4a88:	6e 1d       	adc	r22, r14
    4a8a:	7f 1d       	adc	r23, r15
    4a8c:	9e 01       	movw	r18, r28
    4a8e:	8b ec       	ldi	r24, 0xCB	; 203
    4a90:	92 e0       	ldi	r25, 0x02	; 2
    4a92:	0e 94 35 0b 	call	0x166a	; 0x166a <os_setTimedCallback>
    4a96:	ea c0       	rjmp	.+468    	; 0x4c6c <processJoinAccept+0x328>
        return 1;
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
    4a98:	11 31       	cpi	r17, 0x11	; 17
    4a9a:	41 f0       	breq	.+16     	; 0x4aac <processJoinAccept+0x168>
    4a9c:	11 32       	cpi	r17, 0x21	; 33
    4a9e:	31 f0       	breq	.+12     	; 0x4aac <processJoinAccept+0x168>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
    4aa0:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <LMIC+0x13e>
    4aa4:	80 ff       	sbrs	r24, 0
    4aa6:	69 cf       	rjmp	.-302    	; 0x497a <processJoinAccept+0x36>
            return 0;
    4aa8:	80 e0       	ldi	r24, 0x00	; 0
    4aaa:	e1 c0       	rjmp	.+450    	; 0x4c6e <processJoinAccept+0x32a>
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
    4aac:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <LMIC+0x141>
    4ab0:	83 7e       	andi	r24, 0xE3	; 227
    4ab2:	80 32       	cpi	r24, 0x20	; 32
    4ab4:	a9 f7       	brne	.-22     	; 0x4aa0 <processJoinAccept+0x15c>
                            : FUNC_ADDR(runEngineUpdate)); // next step to be delayed
        return 1;
    }
    u1_t hdr  = LMIC.frame[0];
    u1_t dlen = LMIC.dataLen;
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
    4ab6:	c1 2f       	mov	r28, r17
    4ab8:	d0 e0       	ldi	r29, 0x00	; 0
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
}


static void aes_encrypt (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    4aba:	84 e5       	ldi	r24, 0x54	; 84
    4abc:	94 e0       	ldi	r25, 0x04	; 4
    4abe:	0e 94 a4 0a 	call	0x1548	; 0x1548 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
    4ac2:	ae 01       	movw	r20, r28
    4ac4:	41 50       	subi	r20, 0x01	; 1
    4ac6:	51 09       	sbc	r21, r1
    4ac8:	6a ef       	ldi	r22, 0xFA	; 250
    4aca:	73 e0       	ldi	r23, 0x03	; 3
    4acc:	80 e0       	ldi	r24, 0x00	; 0
    4ace:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
}


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
    os_getDevKey(AESkey);
    4ad2:	84 e5       	ldi	r24, 0x54	; 84
    4ad4:	94 e0       	ldi	r25, 0x04	; 4
    4ad6:	0e 94 a4 0a 	call	0x1548	; 0x1548 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
    4ada:	24 97       	sbiw	r28, 0x04	; 4
    4adc:	ae 01       	movw	r20, r28
    4ade:	69 ef       	ldi	r22, 0xF9	; 249
    4ae0:	73 e0       	ldi	r23, 0x03	; 3
    4ae2:	8a e0       	ldi	r24, 0x0A	; 10
    4ae4:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    4ae8:	6b 01       	movw	r12, r22
    4aea:	7c 01       	movw	r14, r24
    4aec:	ce 01       	movw	r24, r28
    4aee:	87 50       	subi	r24, 0x07	; 7
    4af0:	9c 4f       	sbci	r25, 0xFC	; 252
    4af2:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <os_rmsbf4>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
    4af6:	c6 16       	cp	r12, r22
    4af8:	d7 06       	cpc	r13, r23
    4afa:	e8 06       	cpc	r14, r24
    4afc:	f9 06       	cpc	r15, r25
    4afe:	81 f6       	brne	.-96     	; 0x4aa0 <processJoinAccept+0x15c>
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
    4b00:	80 e0       	ldi	r24, 0x00	; 0
    4b02:	94 e0       	ldi	r25, 0x04	; 4
    4b04:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    LMIC.devaddr = addr;
    4b08:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <LMIC+0x10d>
    4b0c:	70 93 c6 03 	sts	0x03C6, r23	; 0x8003c6 <LMIC+0x10e>
    4b10:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <LMIC+0x10f>
    4b14:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <LMIC+0x110>
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
    4b18:	8d ef       	ldi	r24, 0xFD	; 253
    4b1a:	93 e0       	ldi	r25, 0x03	; 3
    4b1c:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <os_rlsbf4>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	bb 27       	eor	r27, r27
    4b26:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <LMIC+0xa3>
    4b2a:	90 93 5c 03 	sts	0x035C, r25	; 0x80035c <LMIC+0xa4>
    4b2e:	a0 93 5d 03 	sts	0x035D, r26	; 0x80035d <LMIC+0xa5>
    4b32:	b0 93 5e 03 	sts	0x035E, r27	; 0x80035e <LMIC+0xa6>

#if defined(CFG_eu868)
    initDefaultChannels(0);
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
    4b3c:	12 31       	cpi	r17, 0x12	; 18
    4b3e:	08 f0       	brcs	.+2      	; 0x4b42 <processJoinAccept+0x1fe>
    4b40:	49 c0       	rjmp	.+146    	; 0x4bd4 <processJoinAccept+0x290>
                LMIC_setupChannel(chidx, freq, 0, -1);
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
    4b42:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <LMIC+0xeb>
    4b46:	90 91 a4 03 	lds	r25, 0x03A4	; 0x8003a4 <LMIC+0xec>
    4b4a:	01 97       	sbiw	r24, 0x01	; 1
    os_aes(AES_CTR, payload, len);
}


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
    os_clearMem(nwkkey, 16);
    4b4c:	20 e1       	ldi	r18, 0x10	; 16
    4b4e:	e5 ea       	ldi	r30, 0xA5	; 165
    4b50:	f3 e0       	ldi	r31, 0x03	; 3
    4b52:	df 01       	movw	r26, r30
    4b54:	32 2f       	mov	r19, r18
    4b56:	1d 92       	st	X+, r1
    4b58:	3a 95       	dec	r19
    4b5a:	e9 f7       	brne	.-6      	; 0x4b56 <processJoinAccept+0x212>
    nwkkey[0] = 0x01;
    4b5c:	31 e0       	ldi	r19, 0x01	; 1
    4b5e:	30 93 a5 03 	sts	0x03A5, r19	; 0x8003a5 <LMIC+0xed>
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
    4b62:	36 e0       	ldi	r19, 0x06	; 6
    4b64:	ea ef       	ldi	r30, 0xFA	; 250
    4b66:	f3 e0       	ldi	r31, 0x03	; 3
    4b68:	a6 ea       	ldi	r26, 0xA6	; 166
    4b6a:	b3 e0       	ldi	r27, 0x03	; 3
    4b6c:	01 90       	ld	r0, Z+
    4b6e:	0d 92       	st	X+, r0
    4b70:	3a 95       	dec	r19
    4b72:	e1 f7       	brne	.-8      	; 0x4b6c <processJoinAccept+0x228>
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
    buf[0] = v;
    4b74:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <LMIC+0xf4>
    buf[1] = v>>8;
    4b78:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <LMIC+0xf5>
static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
    os_clearMem(nwkkey, 16);
    nwkkey[0] = 0x01;
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
    os_copyMem(artkey, nwkkey, 16);
    4b7c:	e5 ea       	ldi	r30, 0xA5	; 165
    4b7e:	f3 e0       	ldi	r31, 0x03	; 3
    4b80:	a5 eb       	ldi	r26, 0xB5	; 181
    4b82:	b3 e0       	ldi	r27, 0x03	; 3
    4b84:	01 90       	ld	r0, Z+
    4b86:	0d 92       	st	X+, r0
    4b88:	2a 95       	dec	r18
    4b8a:	e1 f7       	brne	.-8      	; 0x4b84 <processJoinAccept+0x240>
    artkey[0] = 0x02;
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <LMIC+0xfd>

    os_getDevKey(AESkey);
    4b92:	84 e5       	ldi	r24, 0x54	; 84
    4b94:	94 e0       	ldi	r25, 0x04	; 4
    4b96:	0e 94 a4 0a 	call	0x1548	; 0x1548 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
    4b9a:	40 e1       	ldi	r20, 0x10	; 16
    4b9c:	50 e0       	ldi	r21, 0x00	; 0
    4b9e:	65 ea       	ldi	r22, 0xA5	; 165
    4ba0:	73 e0       	ldi	r23, 0x03	; 3
    4ba2:	80 e0       	ldi	r24, 0x00	; 0
    4ba4:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
    os_getDevKey(AESkey);
    4ba8:	84 e5       	ldi	r24, 0x54	; 84
    4baa:	94 e0       	ldi	r25, 0x04	; 4
    4bac:	0e 94 a4 0a 	call	0x1548	; 0x1548 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
    4bb0:	40 e1       	ldi	r20, 0x10	; 16
    4bb2:	50 e0       	ldi	r21, 0x00	; 0
    4bb4:	65 eb       	ldi	r22, 0xB5	; 181
    4bb6:	73 e0       	ldi	r23, 0x03	; 3
    4bb8:	80 e0       	ldi	r24, 0x00	; 0
    4bba:	0e 94 89 28 	call	0x5112	; 0x5112 <os_aes>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
    4bbe:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4bc2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4bc6:	84 72       	andi	r24, 0x24	; 36
    4bc8:	99 27       	eor	r25, r25
    4bca:	89 2b       	or	r24, r25
    4bcc:	f9 f4       	brne	.+62     	; 0x4c0c <processJoinAccept+0x2c8>
    4bce:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>
    4bd2:	1c c0       	rjmp	.+56     	; 0x4c0c <processJoinAccept+0x2c8>
    4bd4:	86 e0       	ldi	r24, 0x06	; 6
    4bd6:	e8 2e       	mov	r14, r24
    4bd8:	84 e0       	ldi	r24, 0x04	; 4
    4bda:	f8 2e       	mov	r15, r24
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;

#if defined(CFG_eu868)
    initDefaultChannels(0);
#endif
    if( dlen > LEN_JA ) {
    4bdc:	c3 e0       	ldi	r28, 0x03	; 3
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
            u4_t freq = convFreq(&LMIC.frame[dlen]);
    4bde:	c7 01       	movw	r24, r14
    4be0:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <convFreq>
    4be4:	ab 01       	movw	r20, r22
    4be6:	bc 01       	movw	r22, r24
            if( freq )
    4be8:	41 15       	cp	r20, r1
    4bea:	51 05       	cpc	r21, r1
    4bec:	61 05       	cpc	r22, r1
    4bee:	71 05       	cpc	r23, r1
    4bf0:	31 f0       	breq	.+12     	; 0x4bfe <processJoinAccept+0x2ba>
                LMIC_setupChannel(chidx, freq, 0, -1);
    4bf2:	0f ef       	ldi	r16, 0xFF	; 255
    4bf4:	20 e0       	ldi	r18, 0x00	; 0
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	8c 2f       	mov	r24, r28
    4bfa:	0e 94 a7 18 	call	0x314e	; 0x314e <LMIC_setupChannel>
    if( dlen > LEN_JA ) {
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
    4bfe:	cf 5f       	subi	r28, 0xFF	; 255
    4c00:	83 e0       	ldi	r24, 0x03	; 3
    4c02:	e8 0e       	add	r14, r24
    4c04:	f1 1c       	adc	r15, r1
    4c06:	c8 30       	cpi	r28, 0x08	; 8
    4c08:	51 f7       	brne	.-44     	; 0x4bde <processJoinAccept+0x29a>
    4c0a:	9b cf       	rjmp	.-202    	; 0x4b42 <processJoinAccept+0x1fe>
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
    4c0c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4c10:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4c14:	85 ff       	sbrs	r24, 5
    4c16:	11 c0       	rjmp	.+34     	; 0x4c3a <processJoinAccept+0x2f6>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
    4c18:	30 91 65 03 	lds	r19, 0x0365	; 0x800365 <LMIC+0xad>
    4c1c:	20 91 63 03 	lds	r18, 0x0363	; 0x800363 <LMIC+0xab>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    4c20:	31 50       	subi	r19, 0x01	; 1
    4c22:	48 f0       	brcs	.+18     	; 0x4c36 <processJoinAccept+0x2f2>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    4c24:	e2 2f       	mov	r30, r18
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	ed 51       	subi	r30, 0x1D	; 29
    4c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2c:	40 81       	ld	r20, Z
    4c2e:	4f 3f       	cpi	r20, 0xFF	; 255
    4c30:	b9 f3       	breq	.-18     	; 0x4c20 <processJoinAccept+0x2dc>
    4c32:	21 50       	subi	r18, 0x01	; 1
    4c34:	f5 cf       	rjmp	.-22     	; 0x4c20 <processJoinAccept+0x2dc>
    4c36:	20 93 63 03 	sts	0x0363, r18	; 0x800363 <LMIC+0xab>
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
    4c3a:	89 75       	andi	r24, 0x59	; 89
    4c3c:	9d 7f       	andi	r25, 0xFD	; 253
    4c3e:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    4c42:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    LMIC.txCnt = 0;
    4c46:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <LMIC+0x13d>
    stateJustJoined();
    4c4a:	0e 94 28 12 	call	0x2450	; 0x2450 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
    4c4e:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <LMIC+0x14c>
    4c52:	8f 70       	andi	r24, 0x0F	; 15
    4c54:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <LMIC+0x124>
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
    4c58:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <LMIC+0x14d>
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
    4c5c:	81 11       	cpse	r24, r1
    4c5e:	01 c0       	rjmp	.+2      	; 0x4c62 <processJoinAccept+0x31e>
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <LMIC+0x11c>
    reportEvent(EV_JOINED);
    4c66:	86 e0       	ldi	r24, 0x06	; 6
    4c68:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
    return 1;
    4c6c:	81 e0       	ldi	r24, 0x01	; 1
}
    4c6e:	df 91       	pop	r29
    4c70:	cf 91       	pop	r28
    4c72:	1f 91       	pop	r17
    4c74:	0f 91       	pop	r16
    4c76:	ff 90       	pop	r15
    4c78:	ef 90       	pop	r14
    4c7a:	df 90       	pop	r13
    4c7c:	cf 90       	pop	r12
    4c7e:	08 95       	ret

00004c80 <processRx1Jacc>:
    setupRx2();
}


static void processRx1Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processJoinAccept() )
    4c80:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4c84:	81 11       	cpse	r24, r1
    4c86:	08 c0       	rjmp	.+16     	; 0x4c98 <processRx1Jacc+0x18>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
    4c88:	44 e8       	ldi	r20, 0x84	; 132
    4c8a:	53 e1       	ldi	r21, 0x13	; 19
    4c8c:	6c e6       	ldi	r22, 0x6C	; 108
    4c8e:	7c ed       	ldi	r23, 0xDC	; 220
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <schedRx2>
    setupRx2();
}


static void processRx1Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processJoinAccept() )
    4c98:	0e 94 a2 24 	call	0x4944	; 0x4944 <processJoinAccept>
    4c9c:	88 23       	and	r24, r24
    4c9e:	a1 f3       	breq	.-24     	; 0x4c88 <processRx1Jacc+0x8>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
}
    4ca0:	08 95       	ret

00004ca2 <processRx2Jacc>:
    return 1;
}


static void processRx2Jacc (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 )
    4ca2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4ca6:	81 11       	cpse	r24, r1
    4ca8:	02 c0       	rjmp	.+4      	; 0x4cae <processRx2Jacc+0xc>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
    4caa:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <LMIC+0x13e>
    processJoinAccept();
    4cae:	0c 94 a2 24 	jmp	0x4944	; 0x4944 <processJoinAccept>

00004cb2 <onJoinFailed>:


static void onJoinFailed (xref2osjob_t osjob) {
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
    4cb2:	88 e0       	ldi	r24, 0x08	; 8
    4cb4:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>

00004cb8 <startJoining>:
    LMIC.devNonce++;
    DO_DEVDB(LMIC.devNonce,devNonce);
}

static void startJoining (xref2osjob_t osjob) {
    reportEvent(EV_JOINING);
    4cb8:	85 e0       	ldi	r24, 0x05	; 5
    4cba:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>

00004cbe <runEngineUpdate>:
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
    engineUpdate();
    4cbe:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00004cc2 <processPingRx>:
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
    if( LMIC.dataLen != 0 ) {
    4cc2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4cc6:	88 23       	and	r24, r24
    4cc8:	51 f0       	breq	.+20     	; 0x4cde <processPingRx+0x1c>
        LMIC.txrxFlags = TXRX_PING;
    4cca:	84 e0       	ldi	r24, 0x04	; 4
    4ccc:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
        if( decodeFrame() ) {
    4cd0:	0e 94 2f 19 	call	0x325e	; 0x325e <decodeFrame>
    4cd4:	88 23       	and	r24, r24
    4cd6:	19 f0       	breq	.+6      	; 0x4cde <processPingRx+0x1c>
            reportEvent(EV_RXCOMPLETE);
    4cd8:	8d e0       	ldi	r24, 0x0D	; 13
    4cda:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>
            return;
        }
    }
    // Pick next ping slot
    engineUpdate();
    4cde:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00004ce2 <processDnData>:
}


static bit_t processDnData (void) {
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
    4ce2:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4ce6:	87 ff       	sbrs	r24, 7
    4ce8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <hal_failed>

    if( LMIC.dataLen == 0 ) {
    4cec:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4cf0:	81 11       	cpse	r24, r1
    4cf2:	98 c0       	rjmp	.+304    	; 0x4e24 <processDnData+0x142>
      norx:
        if( LMIC.txCnt != 0 ) {
    4cf4:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <LMIC+0x13d>
    4cf8:	ee 23       	and	r30, r30
    4cfa:	91 f1       	breq	.+100    	; 0x4d60 <processDnData+0x7e>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
    4cfc:	e8 30       	cpi	r30, 0x08	; 8
    4cfe:	70 f5       	brcc	.+92     	; 0x4d5c <processDnData+0x7a>
                LMIC.txCnt += 1;
    4d00:	ef 5f       	subi	r30, 0xFF	; 255
    4d02:	e0 93 f5 03 	sts	0x03F5, r30	; 0x8003f5 <LMIC+0x13d>
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
    4d06:	f0 e0       	ldi	r31, 0x00	; 0
    4d08:	ec 54       	subi	r30, 0x4C	; 76
    4d0a:	fe 4f       	sbci	r31, 0xFE	; 254
    4d0c:	90 81       	ld	r25, Z
    4d0e:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <LMIC+0xab>
inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
    4d12:	91 50       	subi	r25, 0x01	; 1
    4d14:	48 f0       	brcs	.+18     	; 0x4d28 <processDnData+0x46>
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
    4d16:	e8 2f       	mov	r30, r24
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	ed 51       	subi	r30, 0x1D	; 29
    4d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    4d1e:	20 81       	ld	r18, Z
    4d20:	2f 3f       	cpi	r18, 0xFF	; 255
    4d22:	b9 f3       	breq	.-18     	; 0x4d12 <processDnData+0x30>
    4d24:	81 50       	subi	r24, 0x01	; 1
    4d26:	f5 cf       	rjmp	.-22     	; 0x4d12 <processDnData+0x30>
    4d28:	60 e8       	ldi	r22, 0x80	; 128
    4d2a:	0e 94 56 14 	call	0x28ac	; 0x28ac <setDrTxpow.isra.1>
                // Schedule another retransmission
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
    4d2e:	60 91 bc 02 	lds	r22, 0x02BC	; 0x8002bc <LMIC+0x4>
    4d32:	70 91 bd 02 	lds	r23, 0x02BD	; 0x8002bd <LMIC+0x5>
    4d36:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <LMIC+0x6>
    4d3a:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <LMIC+0x7>
    4d3e:	43 e0       	ldi	r20, 0x03	; 3
    4d40:	0e 94 b0 12 	call	0x2560	; 0x2560 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
    4d44:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4d48:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4d4c:	8f 77       	andi	r24, 0x7F	; 127
    4d4e:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    4d52:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
                engineUpdate();
    4d56:	0e 94 67 1d 	call	0x3ace	; 0x3ace <engineUpdate>
    4d5a:	62 c0       	rjmp	.+196    	; 0x4e20 <processDnData+0x13e>
                return 1;
            }
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
    4d5c:	80 e6       	ldi	r24, 0x60	; 96
    4d5e:	01 c0       	rjmp	.+2      	; 0x4d62 <processDnData+0x80>
        } else {
            // Nothing received - implies no port
            LMIC.txrxFlags = TXRX_NOPORT;
    4d60:	80 e2       	ldi	r24, 0x20	; 32
    4d62:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <LMIC+0x13e>
        }
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
    4d66:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <LMIC+0x11a>
    4d6a:	80 38       	cpi	r24, 0x80	; 128
    4d6c:	19 f0       	breq	.+6      	; 0x4d74 <processDnData+0x92>
            LMIC.adrAckReq += 1;
    4d6e:	8f 5f       	subi	r24, 0xFF	; 255
    4d70:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <LMIC+0x11a>
        LMIC.dataBeg = LMIC.dataLen = 0;
    4d74:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <LMIC+0x140>
    4d78:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <LMIC+0x13f>
      txcomplete:
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
    4d7c:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4d80:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4d84:	9c 01       	movw	r18, r24
    4d86:	27 77       	andi	r18, 0x77	; 119
    4d88:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <LMIC+0xa8>
    4d8c:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <LMIC+0xa7>
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
    4d90:	20 91 f6 03 	lds	r18, 0x03F6	; 0x8003f6 <LMIC+0x13e>
    4d94:	27 70       	andi	r18, 0x07	; 7
    4d96:	59 f0       	breq	.+22     	; 0x4dae <processDnData+0xcc>
    4d98:	94 ff       	sbrs	r25, 4
    4d9a:	09 c0       	rjmp	.+18     	; 0x4dae <processDnData+0xcc>
            LMIC.opmode &= ~OP_LINKDEAD;
    4d9c:	87 77       	andi	r24, 0x77	; 119
    4d9e:	9f 7e       	andi	r25, 0xEF	; 239
    4da0:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    4da4:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
            reportEvent(EV_LINK_ALIVE);
    4da8:	8f e0       	ldi	r24, 0x0F	; 15
    4daa:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
        }
        reportEvent(EV_TXCOMPLETE);
    4dae:	8a e0       	ldi	r24, 0x0A	; 10
    4db0:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
        // If we haven't heard from NWK in a while although we asked for a sign
        // assume link is dead - notify application and keep going
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
    4db4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <LMIC+0x11a>
    4db8:	89 31       	cpi	r24, 0x19	; 25
    4dba:	ec f0       	brlt	.+58     	; 0x4df6 <processDnData+0x114>
            // We haven't heard from NWK for some time although we
            // asked for a response for some time - assume we're disconnected. Lower DR one notch.
            EV(devCond, ERR, (e_.reason = EV::devCond_t::LINK_DEAD,
                              e_.eui    = MAIN::CDEV->getEui(),
                              e_.info   = LMIC.adrAckReq));
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
    4dbc:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <LMIC+0xab>
    4dc0:	e8 2f       	mov	r30, r24
    4dc2:	f0 e0       	ldi	r31, 0x00	; 0
    4dc4:	ed 51       	subi	r30, 0x1D	; 29
    4dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    4dc8:	90 81       	ld	r25, Z
    4dca:	9f 3f       	cpi	r25, 0xFF	; 255
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <processDnData+0xee>
    4dce:	81 50       	subi	r24, 0x01	; 1
    4dd0:	60 e8       	ldi	r22, 0x80	; 128
    4dd2:	0e 94 56 14 	call	0x28ac	; 0x28ac <setDrTxpow.isra.1>
            LMIC.adrAckReq = LINK_CHECK_CONT;
    4dd6:	8c e0       	ldi	r24, 0x0C	; 12
    4dd8:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <LMIC+0x11a>
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
    4ddc:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4de0:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4de4:	80 62       	ori	r24, 0x20	; 32
    4de6:	90 61       	ori	r25, 0x10	; 16
    4de8:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    4dec:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
            reportEvent(EV_LINK_DEAD);
    4df0:	8e e0       	ldi	r24, 0x0E	; 14
    4df2:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
        }
        // If this falls to zero the NWK did not answer our MCMD_BCNI_REQ commands - try full scan
        if( LMIC.bcninfoTries > 0 ) {
    4df6:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <LMIC+0x12b>
    4dfa:	88 23       	and	r24, r24
    4dfc:	89 f0       	breq	.+34     	; 0x4e20 <processDnData+0x13e>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
    4dfe:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <LMIC+0xa7>
    4e02:	91 ff       	sbrs	r25, 1
    4e04:	06 c0       	rjmp	.+12     	; 0x4e12 <processDnData+0x130>
                reportEvent(EV_BEACON_FOUND);
    4e06:	82 e0       	ldi	r24, 0x02	; 2
    4e08:	0e 94 1f 23 	call	0x463e	; 0x463e <reportEvent>
                LMIC.bcninfoTries = 0;
    4e0c:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <LMIC+0x12b>
    4e10:	07 c0       	rjmp	.+14     	; 0x4e20 <processDnData+0x13e>
            }
            else if( --LMIC.bcninfoTries == 0 ) {
    4e12:	81 50       	subi	r24, 0x01	; 1
    4e14:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <LMIC+0x12b>
    4e18:	81 11       	cpse	r24, r1
    4e1a:	02 c0       	rjmp	.+4      	; 0x4e20 <processDnData+0x13e>
                startScan();   // NWK did not answer - try scan
    4e1c:	0e 94 8c 13 	call	0x2718	; 0x2718 <startScan>
            }
        }
        return 1;
    4e20:	81 e0       	ldi	r24, 0x01	; 1
    4e22:	08 95       	ret
    }
    if( !decodeFrame() ) {
    4e24:	0e 94 2f 19 	call	0x325e	; 0x325e <decodeFrame>
    4e28:	81 11       	cpse	r24, r1
    4e2a:	a8 cf       	rjmp	.-176    	; 0x4d7c <processDnData+0x9a>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
    4e2c:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <LMIC+0x13e>
    4e30:	90 ff       	sbrs	r25, 0
    4e32:	60 cf       	rjmp	.-320    	; 0x4cf4 <processDnData+0x12>
            return 0;
        goto norx;
    }
    goto txcomplete;
}
    4e34:	08 95       	ret

00004e36 <processRx1DnData>:
    setupRx2();
}


static void processRx1DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processDnData() )
    4e36:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4e3a:	81 11       	cpse	r24, r1
    4e3c:	0c c0       	rjmp	.+24     	; 0x4e56 <processRx1DnData+0x20>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
    4e3e:	a0 91 d4 03 	lds	r26, 0x03D4	; 0x8003d4 <LMIC+0x11c>
    4e42:	b0 e0       	ldi	r27, 0x00	; 0
    4e44:	11 96       	adiw	r26, 0x01	; 1
    4e46:	22 e1       	ldi	r18, 0x12	; 18
    4e48:	3a e7       	ldi	r19, 0x7A	; 122
    4e4a:	0e 94 51 32 	call	0x64a2	; 0x64a2 <__usmulhisi3>
    4e4e:	4c e7       	ldi	r20, 0x7C	; 124
    4e50:	53 e1       	ldi	r21, 0x13	; 19
    4e52:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <schedRx2>
    setupRx2();
}


static void processRx1DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 || !processDnData() )
    4e56:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <processDnData>
    4e5a:	88 23       	and	r24, r24
    4e5c:	81 f3       	breq	.-32     	; 0x4e3e <processRx1DnData+0x8>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
}
    4e5e:	08 95       	ret

00004e60 <processRx2DnData>:

static void processRx2DnDataDelay (xref2osjob_t osjob) {
    processDnData();
}

static void processRx2DnData (xref2osjob_t osjob) {
    4e60:	cf 92       	push	r12
    4e62:	df 92       	push	r13
    4e64:	ef 92       	push	r14
    4e66:	ff 92       	push	r15
    if( LMIC.dataLen == 0 ) {
    4e68:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <LMIC+0x140>
    4e6c:	81 11       	cpse	r24, r1
    4e6e:	20 c0       	rjmp	.+64     	; 0x4eb0 <processRx2DnData+0x50>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
    4e70:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <LMIC+0x13e>
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
    4e74:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <os_getTime>
    4e78:	6b 01       	movw	r12, r22
    4e7a:	7c 01       	movw	r14, r24
    4e7c:	82 e0       	ldi	r24, 0x02	; 2
    4e7e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <rndDelay>
static void processRx2DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 ) {
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
    4e82:	26 e3       	ldi	r18, 0x36	; 54
    4e84:	c2 0e       	add	r12, r18
    4e86:	2e e6       	ldi	r18, 0x6E	; 110
    4e88:	d2 1e       	adc	r13, r18
    4e8a:	21 e0       	ldi	r18, 0x01	; 1
    4e8c:	e2 1e       	adc	r14, r18
    4e8e:	f1 1c       	adc	r15, r1
    4e90:	ab 01       	movw	r20, r22
    4e92:	bc 01       	movw	r22, r24
    4e94:	4c 0d       	add	r20, r12
    4e96:	5d 1d       	adc	r21, r13
    4e98:	6e 1d       	adc	r22, r14
    4e9a:	7f 1d       	adc	r23, r15
    4e9c:	2e e5       	ldi	r18, 0x5E	; 94
    4e9e:	37 e2       	ldi	r19, 0x27	; 39
    4ea0:	8b ec       	ldi	r24, 0xCB	; 203
    4ea2:	92 e0       	ldi	r25, 0x02	; 2
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
}
    4ea4:	ff 90       	pop	r15
    4ea6:	ef 90       	pop	r14
    4ea8:	df 90       	pop	r13
    4eaa:	cf 90       	pop	r12
static void processRx2DnData (xref2osjob_t osjob) {
    if( LMIC.dataLen == 0 ) {
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
    4eac:	0c 94 35 0b 	jmp	0x166a	; 0x166a <os_setTimedCallback>
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
}
    4eb0:	ff 90       	pop	r15
    4eb2:	ef 90       	pop	r14
    4eb4:	df 90       	pop	r13
    4eb6:	cf 90       	pop	r12
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
    }
    processDnData();
    4eb8:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <processDnData>

00004ebc <processRx2DnDataDelay>:

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
    processDnData();
    4ebc:	0c 94 71 26 	jmp	0x4ce2	; 0x4ce2 <processDnData>

00004ec0 <LMIC_disableTracking>:
    return 1;  // enabled
}


void LMIC_disableTracking (void) {
    LMIC.opmode &= ~(OP_SCAN|OP_TRACK);
    4ec0:	ef e5       	ldi	r30, 0x5F	; 95
    4ec2:	f3 e0       	ldi	r31, 0x03	; 3
    4ec4:	80 81       	ld	r24, Z
    4ec6:	91 81       	ldd	r25, Z+1	; 0x01
    4ec8:	8c 7f       	andi	r24, 0xFC	; 252
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	80 83       	st	Z, r24
    LMIC.bcninfoTries = 0;
    4ece:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <LMIC+0x12b>
    engineUpdate();
    4ed2:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00004ed6 <LMIC_setAdrMode>:
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
}


void LMIC_setAdrMode (bit_t enabled) {
    LMIC.adrEnabled = enabled ? FCT_ADREN : 0;
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	80 e8       	ldi	r24, 0x80	; 128
    4eda:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <LMIC+0x120>
    4ede:	08 95       	ret

00004ee0 <LMIC_setDrTxpow>:
}


//  Should we have/need an ext. API like this?
void LMIC_setDrTxpow (dr_t dr, s1_t txpow) {
    setDrTxpow(DRCHG_SET, dr, txpow);
    4ee0:	0c 94 56 14 	jmp	0x28ac	; 0x28ac <setDrTxpow.isra.1>

00004ee4 <LMIC_shutdown>:
}


void LMIC_shutdown (void) {
    os_clearCallback(&LMIC.osjob);
    4ee4:	8b ec       	ldi	r24, 0xCB	; 203
    4ee6:	92 e0       	ldi	r25, 0x02	; 2
    4ee8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <os_clearCallback>
    os_radio(RADIO_RST);
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <os_radio>
    LMIC.opmode |= OP_SHUTDOWN;
    4ef2:	ef e5       	ldi	r30, 0x5F	; 95
    4ef4:	f3 e0       	ldi	r31, 0x03	; 3
    4ef6:	80 81       	ld	r24, Z
    4ef8:	91 81       	ldd	r25, Z+1	; 0x01
    4efa:	80 64       	ori	r24, 0x40	; 64
    4efc:	91 83       	std	Z+1, r25	; 0x01
    4efe:	80 83       	st	Z, r24
    4f00:	08 95       	ret

00004f02 <LMIC_reset>:
}


void LMIC_reset (void) {
    4f02:	cf 93       	push	r28
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <os_radio>
    os_clearCallback(&LMIC.osjob);
    4f0a:	8b ec       	ldi	r24, 0xCB	; 203
    4f0c:	92 e0       	ldi	r25, 0x02	; 2
    4f0e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
    4f12:	8c e9       	ldi	r24, 0x9C	; 156
    4f14:	91 e0       	ldi	r25, 0x01	; 1
    4f16:	e8 eb       	ldi	r30, 0xB8	; 184
    4f18:	f2 e0       	ldi	r31, 0x02	; 2
    4f1a:	df 01       	movw	r26, r30
    4f1c:	9c 01       	movw	r18, r24
    4f1e:	1d 92       	st	X+, r1
    4f20:	21 50       	subi	r18, 0x01	; 1
    4f22:	30 40       	sbci	r19, 0x00	; 0
    4f24:	e1 f7       	brne	.-8      	; 0x4f1e <LMIC_reset+0x1c>
    LMIC.devaddr      =  0;
    LMIC.devNonce     =  os_getRndU2();
    4f26:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    4f2a:	c8 2f       	mov	r28, r24
    4f2c:	0e 94 0b 10 	call	0x2016	; 0x2016 <radio_rand1>
    4f30:	2c 2f       	mov	r18, r28
    4f32:	30 e0       	ldi	r19, 0x00	; 0
    4f34:	32 2f       	mov	r19, r18
    4f36:	22 27       	eor	r18, r18
    4f38:	28 2b       	or	r18, r24
    4f3a:	30 93 a4 03 	sts	0x03A4, r19	; 0x8003a4 <LMIC+0xec>
    4f3e:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <LMIC+0xeb>
    LMIC.opmode       =  OP_NONE;
    4f42:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <LMIC+0xa8>
    4f46:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <LMIC+0xa7>
    LMIC.errcr        =  CR_4_5;
    4f4a:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <LMIC+0xac>
    LMIC.adrEnabled   =  FCT_ADREN;
    4f4e:	80 e8       	ldi	r24, 0x80	; 128
    4f50:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <LMIC+0x120>
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
    4f54:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <LMIC+0x124>
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
    4f58:	88 e0       	ldi	r24, 0x08	; 8
    4f5a:	96 ee       	ldi	r25, 0xE6	; 230
    4f5c:	a3 ed       	ldi	r26, 0xD3	; 211
    4f5e:	b3 e3       	ldi	r27, 0x33	; 51
    4f60:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <LMIC+0x125>
    4f64:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <LMIC+0x126>
    4f68:	a0 93 df 03 	sts	0x03DF, r26	; 0x8003df <LMIC+0x127>
    4f6c:	b0 93 e0 03 	sts	0x03E0, r27	; 0x8003e0 <LMIC+0x128>
    LMIC.rxDelay      =  DELAY_DNW1;
    4f70:	21 e0       	ldi	r18, 0x01	; 1
    4f72:	20 93 d4 03 	sts	0x03D4, r18	; 0x8003d4 <LMIC+0x11c>
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
    4f76:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <LMIC+0x139>
    4f7a:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <LMIC+0x13a>
    4f7e:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <LMIC+0x13b>
    4f82:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <LMIC+0x13c>
    LMIC.ping.dr      =  DR_PING;   // ditto
    4f86:	83 e0       	ldi	r24, 0x03	; 3
    4f88:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <LMIC+0x12d>
    LMIC.ping.intvExp =  0xFF;
    4f8c:	8f ef       	ldi	r24, 0xFF	; 255
    4f8e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <LMIC+0x12e>
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
    4f92:	cf 91       	pop	r28
    4f94:	08 95       	ret

00004f96 <runReset>:
}


static void runReset (xref2osjob_t osjob) {
    // Disable session
    LMIC_reset();
    4f96:	0e 94 81 27 	call	0x4f02	; 0x4f02 <LMIC_reset>
    LMIC_startJoining();
    4f9a:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <LMIC_startJoining>
    reportEvent(EV_RESET);
    4f9e:	8c e0       	ldi	r24, 0x0C	; 12
    4fa0:	0c 94 1f 23 	jmp	0x463e	; 0x463e <reportEvent>

00004fa4 <LMIC_init>:
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}


void LMIC_init (void) {
    LMIC.opmode = OP_SHUTDOWN;
    4fa4:	80 e4       	ldi	r24, 0x40	; 64
    4fa6:	90 e0       	ldi	r25, 0x00	; 0
    4fa8:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    4fac:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    4fb0:	08 95       	ret

00004fb2 <LMIC_clrTxData>:
}


void LMIC_clrTxData (void) {
    LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND|OP_POLL);
    4fb2:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4fb6:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4fba:	9c 01       	movw	r18, r24
    4fbc:	27 76       	andi	r18, 0x67	; 103
    4fbe:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <LMIC+0xa8>
    4fc2:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <LMIC+0xa7>
    LMIC.pendTxLen = 0;
    4fc6:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <LMIC+0xb6>
    if( (LMIC.opmode & (OP_JOINING|OP_SCAN)) != 0 ) // do not interfere with JOINING
    4fca:	85 70       	andi	r24, 0x05	; 5
    4fcc:	99 27       	eor	r25, r25
    4fce:	89 2b       	or	r24, r25
    4fd0:	49 f4       	brne	.+18     	; 0x4fe4 <LMIC_clrTxData+0x32>
        return;
    os_clearCallback(&LMIC.osjob);
    4fd2:	8b ec       	ldi	r24, 0xCB	; 203
    4fd4:	92 e0       	ldi	r25, 0x02	; 2
    4fd6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <os_clearCallback>
    os_radio(RADIO_RST);
    4fda:	80 e0       	ldi	r24, 0x00	; 0
    4fdc:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <os_radio>
    engineUpdate();
    4fe0:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>
    4fe4:	08 95       	ret

00004fe6 <LMIC_setTxData>:
}


void LMIC_setTxData (void) {
    LMIC.opmode |= OP_TXDATA;
    4fe6:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    4fea:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    4fee:	9c 01       	movw	r18, r24
    4ff0:	28 60       	ori	r18, 0x08	; 8
    4ff2:	30 93 60 03 	sts	0x0360, r19	; 0x800360 <LMIC+0xa8>
    4ff6:	20 93 5f 03 	sts	0x035F, r18	; 0x80035f <LMIC+0xa7>
    if( (LMIC.opmode & OP_JOINING) == 0 )
    4ffa:	82 ff       	sbrs	r24, 2
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
    4ffc:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <LMIC+0x13d>
    engineUpdate();
    5000:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00005004 <LMIC_setTxData2>:
}


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
    5004:	1f 93       	push	r17
    5006:	cf 93       	push	r28
    5008:	df 93       	push	r29
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
    500a:	45 33       	cpi	r20, 0x35	; 53
    500c:	b0 f4       	brcc	.+44     	; 0x503a <LMIC_setTxData2+0x36>
    500e:	12 2f       	mov	r17, r18
    5010:	c4 2f       	mov	r28, r20
    5012:	d8 2f       	mov	r29, r24
        return -2;
    if( data != (xref2u1_t)0 )
    5014:	61 15       	cp	r22, r1
    5016:	71 05       	cpc	r23, r1
    5018:	29 f0       	breq	.+10     	; 0x5024 <LMIC_setTxData2+0x20>
        os_copyMem(LMIC.pendTxData, data, dlen);
    501a:	50 e0       	ldi	r21, 0x00	; 0
    501c:	8f e6       	ldi	r24, 0x6F	; 111
    501e:	93 e0       	ldi	r25, 0x03	; 3
    5020:	0e 94 1f 34 	call	0x683e	; 0x683e <memcpy>
    LMIC.pendTxConf = confirmed;
    5024:	10 93 6d 03 	sts	0x036D, r17	; 0x80036d <LMIC+0xb5>
    LMIC.pendTxPort = port;
    5028:	d0 93 6c 03 	sts	0x036C, r29	; 0x80036c <LMIC+0xb4>
    LMIC.pendTxLen  = dlen;
    502c:	c0 93 6e 03 	sts	0x036E, r28	; 0x80036e <LMIC+0xb6>
    LMIC_setTxData();
    5030:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <LMIC_setTxData>
    return 0;
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	02 c0       	rjmp	.+4      	; 0x503e <LMIC_setTxData2+0x3a>


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
        return -2;
    503a:	8e ef       	ldi	r24, 0xFE	; 254
    503c:	9f ef       	ldi	r25, 0xFF	; 255
    LMIC.pendTxConf = confirmed;
    LMIC.pendTxPort = port;
    LMIC.pendTxLen  = dlen;
    LMIC_setTxData();
    return 0;
}
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	1f 91       	pop	r17
    5044:	08 95       	ret

00005046 <LMIC_sendAlive>:


// Send a payload-less message to signal device is alive
void LMIC_sendAlive (void) {
    LMIC.opmode |= OP_POLL;
    5046:	ef e5       	ldi	r30, 0x5F	; 95
    5048:	f3 e0       	ldi	r31, 0x03	; 3
    504a:	80 81       	ld	r24, Z
    504c:	91 81       	ldd	r25, Z+1	; 0x01
    504e:	80 61       	ori	r24, 0x10	; 16
    5050:	91 83       	std	Z+1, r25	; 0x01
    5052:	80 83       	st	Z, r24
    engineUpdate();
    5054:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

00005058 <LMIC_tryRejoin>:
}


// Check if other networks are around.
void LMIC_tryRejoin (void) {
    LMIC.opmode |= OP_REJOIN;
    5058:	ef e5       	ldi	r30, 0x5F	; 95
    505a:	f3 e0       	ldi	r31, 0x03	; 3
    505c:	80 81       	ld	r24, Z
    505e:	91 81       	ldd	r25, Z+1	; 0x01
    5060:	80 62       	ori	r24, 0x20	; 32
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	80 83       	st	Z, r24
    engineUpdate();
    5066:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <engineUpdate>

0000506a <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (u4_t netid, devaddr_t devaddr, xref2u1_t nwkKey, xref2u1_t artKey) {
    506a:	ef 92       	push	r14
    506c:	ff 92       	push	r15
    506e:	0f 93       	push	r16
    5070:	1f 93       	push	r17
    LMIC.netid = netid;
    5072:	60 93 5b 03 	sts	0x035B, r22	; 0x80035b <LMIC+0xa3>
    5076:	70 93 5c 03 	sts	0x035C, r23	; 0x80035c <LMIC+0xa4>
    507a:	80 93 5d 03 	sts	0x035D, r24	; 0x80035d <LMIC+0xa5>
    507e:	90 93 5e 03 	sts	0x035E, r25	; 0x80035e <LMIC+0xa6>
    LMIC.devaddr = devaddr;
    5082:	20 93 c5 03 	sts	0x03C5, r18	; 0x8003c5 <LMIC+0x10d>
    5086:	30 93 c6 03 	sts	0x03C6, r19	; 0x8003c6 <LMIC+0x10e>
    508a:	40 93 c7 03 	sts	0x03C7, r20	; 0x8003c7 <LMIC+0x10f>
    508e:	50 93 c8 03 	sts	0x03C8, r21	; 0x8003c8 <LMIC+0x110>
    if( nwkKey != (xref2u1_t)0 )
    5092:	01 15       	cp	r16, r1
    5094:	11 05       	cpc	r17, r1
    5096:	41 f0       	breq	.+16     	; 0x50a8 <LMIC_setSession+0x3e>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
    5098:	80 e1       	ldi	r24, 0x10	; 16
    509a:	f8 01       	movw	r30, r16
    509c:	a5 ea       	ldi	r26, 0xA5	; 165
    509e:	b3 e0       	ldi	r27, 0x03	; 3
    50a0:	01 90       	ld	r0, Z+
    50a2:	0d 92       	st	X+, r0
    50a4:	8a 95       	dec	r24
    50a6:	e1 f7       	brne	.-8      	; 0x50a0 <LMIC_setSession+0x36>
    if( artKey != (xref2u1_t)0 )
    50a8:	e1 14       	cp	r14, r1
    50aa:	f1 04       	cpc	r15, r1
    50ac:	41 f0       	breq	.+16     	; 0x50be <LMIC_setSession+0x54>
        os_copyMem(LMIC.artKey, artKey, 16);
    50ae:	80 e1       	ldi	r24, 0x10	; 16
    50b0:	f7 01       	movw	r30, r14
    50b2:	a5 eb       	ldi	r26, 0xB5	; 181
    50b4:	b3 e0       	ldi	r27, 0x03	; 3
    50b6:	01 90       	ld	r0, Z+
    50b8:	0d 92       	st	X+, r0
    50ba:	8a 95       	dec	r24
    50bc:	e1 f7       	brne	.-8      	; 0x50b6 <LMIC_setSession+0x4c>
    
#if defined(CFG_eu868)
    initDefaultChannels(0);
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <initDefaultChannels>
#endif
 
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    50c4:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <LMIC+0xa7>
    50c8:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <LMIC+0xa8>
    50cc:	89 75       	andi	r24, 0x59	; 89
    50ce:	9d 7f       	andi	r25, 0xFD	; 253
    50d0:	98 60       	ori	r25, 0x08	; 8
    50d2:	90 93 60 03 	sts	0x0360, r25	; 0x800360 <LMIC+0xa8>
    50d6:	80 93 5f 03 	sts	0x035F, r24	; 0x80035f <LMIC+0xa7>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
    50da:	1f 91       	pop	r17
    50dc:	0f 91       	pop	r16
    50de:	ff 90       	pop	r15
    50e0:	ef 90       	pop	r14
    initDefaultChannels(0);
#endif
 
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
    LMIC.opmode |= OP_NEXTCHNL;
    stateJustJoined();
    50e2:	0c 94 28 12 	jmp	0x2450	; 0x2450 <stateJustJoined>

000050e6 <LMIC_setLinkCheckMode>:
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bit_t enabled) {
    LMIC.adrChanged = 0;
    50e6:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <LMIC+0x11b>
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
    50ea:	81 11       	cpse	r24, r1
    50ec:	02 c0       	rjmp	.+4      	; 0x50f2 <LMIC_setLinkCheckMode+0xc>
    50ee:	80 e8       	ldi	r24, 0x80	; 128
    50f0:	01 c0       	rjmp	.+2      	; 0x50f4 <LMIC_setLinkCheckMode+0xe>
    50f2:	84 ef       	ldi	r24, 0xF4	; 244
    50f4:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <LMIC+0x11a>
    50f8:	08 95       	ret

000050fa <table_get_u4>:

    TABLE_GETTER(_u1, u1_t, byte);
    TABLE_GETTER(_s1, s1_t, byte);
    TABLE_GETTER(_u2, u2_t, word);
    TABLE_GETTER(_s2, s2_t, word);
    TABLE_GETTER(_u4, u4_t, dword);
    50fa:	66 0f       	add	r22, r22
    50fc:	77 1f       	adc	r23, r23
    50fe:	66 0f       	add	r22, r22
    5100:	77 1f       	adc	r23, r23
    5102:	86 0f       	add	r24, r22
    5104:	97 1f       	adc	r25, r23
    5106:	fc 01       	movw	r30, r24
    5108:	65 91       	lpm	r22, Z+
    510a:	75 91       	lpm	r23, Z+
    510c:	85 91       	lpm	r24, Z+
    510e:	94 91       	lpm	r25, Z
    5110:	08 95       	ret

00005112 <os_aes>:
        }
        AESKEY[i] = b ^= AESKEY[i-4];
    }
}

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
    5112:	2f 92       	push	r2
    5114:	3f 92       	push	r3
    5116:	4f 92       	push	r4
    5118:	5f 92       	push	r5
    511a:	6f 92       	push	r6
    511c:	7f 92       	push	r7
    511e:	8f 92       	push	r8
    5120:	9f 92       	push	r9
    5122:	af 92       	push	r10
    5124:	bf 92       	push	r11
    5126:	cf 92       	push	r12
    5128:	df 92       	push	r13
    512a:	ef 92       	push	r14
    512c:	ff 92       	push	r15
    512e:	0f 93       	push	r16
    5130:	1f 93       	push	r17
    5132:	cf 93       	push	r28
    5134:	df 93       	push	r29
    5136:	cd b7       	in	r28, 0x3d	; 61
    5138:	de b7       	in	r29, 0x3e	; 62
    513a:	ab 97       	sbiw	r28, 0x2b	; 43
    513c:	0f b6       	in	r0, 0x3f	; 63
    513e:	f8 94       	cli
    5140:	de bf       	out	0x3e, r29	; 62
    5142:	0f be       	out	0x3f, r0	; 63
    5144:	cd bf       	out	0x3d, r28	; 61
    5146:	89 8b       	std	Y+17, r24	; 0x11
    5148:	7b a7       	std	Y+43, r23	; 0x2b
    514a:	6a a7       	std	Y+42, r22	; 0x2a
    514c:	1a 01       	movw	r2, r20
    514e:	04 e5       	ldi	r16, 0x54	; 84
    5150:	14 e0       	ldi	r17, 0x04	; 4
    5152:	1a 87       	std	Y+10, r17	; 0x0a
    5154:	09 87       	std	Y+9, r16	; 0x09
    5156:	24 e6       	ldi	r18, 0x64	; 100
    5158:	34 e0       	ldi	r19, 0x04	; 4
    515a:	f8 01       	movw	r30, r16
    515c:	60 81       	ld	r22, Z
    515e:	71 81       	ldd	r23, Z+1	; 0x01
    5160:	82 81       	ldd	r24, Z+2	; 0x02
    5162:	93 81       	ldd	r25, Z+3	; 0x03
    5164:	0e 94 3b 32 	call	0x6476	; 0x6476 <__bswapsi2>
static void aesroundkeys () {
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
        AESKEY[i] = swapmsbf(AESKEY[i]);
    5168:	61 93       	st	Z+, r22
    516a:	71 93       	st	Z+, r23
    516c:	81 93       	st	Z+, r24
    516e:	91 93       	st	Z+, r25
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
    5170:	2e 17       	cp	r18, r30
    5172:	3f 07       	cpc	r19, r31
    5174:	99 f7       	brne	.-26     	; 0x515c <os_aes+0x4a>
        AESKEY[i] = swapmsbf(AESKEY[i]);
    }

    b = AESKEY[3];
    5176:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <AESKEY+0xc>
    517a:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <AESKEY+0xd>
    517e:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <AESKEY+0xe>
    5182:	b0 91 63 04 	lds	r27, 0x0463	; 0x800463 <AESKEY+0xf>
    5186:	04 e0       	ldi	r16, 0x04	; 4
    5188:	10 e0       	ldi	r17, 0x00	; 0
    for( ; i<44; i++ ) {
        if( i%4==0 ) {
    518a:	98 01       	movw	r18, r16
    518c:	23 70       	andi	r18, 0x03	; 3
    518e:	33 27       	eor	r19, r19
    5190:	23 2b       	or	r18, r19
    5192:	81 f5       	brne	.+96     	; 0x51f4 <os_aes+0xe2>
            if (__builtin_constant_p(table[index])) \
                return table[index]; \
            return pgm_read_ ## pgm_type(&table[index]); \
        }

    TABLE_GETTER(_u1, u1_t, byte);
    5194:	ea 2f       	mov	r30, r26
    5196:	f0 e0       	ldi	r31, 0x00	; 0
    5198:	e6 57       	subi	r30, 0x76	; 118
    519a:	ff 4e       	sbci	r31, 0xEF	; 239
    519c:	24 91       	lpm	r18, Z
    519e:	2a 8b       	std	Y+18, r18	; 0x12
    51a0:	e9 2f       	mov	r30, r25
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	e6 57       	subi	r30, 0x76	; 118
    51a6:	ff 4e       	sbci	r31, 0xEF	; 239
    51a8:	34 91       	lpm	r19, Z
    51aa:	3d 87       	std	Y+13, r19	; 0x0d
    51ac:	e8 2f       	mov	r30, r24
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	e6 57       	subi	r30, 0x76	; 118
    51b2:	ff 4e       	sbci	r31, 0xEF	; 239
    51b4:	44 91       	lpm	r20, Z
    51b6:	4e 8b       	std	Y+22, r20	; 0x16
    51b8:	8b 2f       	mov	r24, r27
    51ba:	99 27       	eor	r25, r25
    51bc:	aa 27       	eor	r26, r26
    51be:	bb 27       	eor	r27, r27
    51c0:	fc 01       	movw	r30, r24
    51c2:	e6 57       	subi	r30, 0x76	; 118
    51c4:	ff 4e       	sbci	r31, 0xEF	; 239
    51c6:	54 91       	lpm	r21, Z
    51c8:	5a 8f       	std	Y+26, r21	; 0x1a
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((u4_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
                ((u4_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
    51ca:	b8 01       	movw	r22, r16
    51cc:	64 50       	subi	r22, 0x04	; 4
    51ce:	71 09       	sbc	r23, r1
    51d0:	75 95       	asr	r23
    51d2:	67 95       	ror	r22
    51d4:	75 95       	asr	r23
    51d6:	67 95       	ror	r22
    51d8:	8a e8       	ldi	r24, 0x8A	; 138
    51da:	91 e1       	ldi	r25, 0x11	; 17
    51dc:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>

    b = AESKEY[3];
    for( ; i<44; i++ ) {
        if( i%4==0 ) {
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((u4_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
    51e0:	dc 01       	movw	r26, r24
    51e2:	cb 01       	movw	r24, r22
    51e4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    51e6:	8e 27       	eor	r24, r30
    51e8:	fa 89       	ldd	r31, Y+18	; 0x12
    51ea:	bf 27       	eor	r27, r31
    51ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    51ee:	a2 27       	eor	r26, r18
    51f0:	3e 89       	ldd	r19, Y+22	; 0x16
    51f2:	93 27       	eor	r25, r19
                ((u4_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
                ((u4_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
                ((u4_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
        }
        AESKEY[i] = b ^= AESKEY[i-4];
    51f4:	e9 85       	ldd	r30, Y+9	; 0x09
    51f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    51f8:	41 91       	ld	r20, Z+
    51fa:	51 91       	ld	r21, Z+
    51fc:	61 91       	ld	r22, Z+
    51fe:	71 91       	ld	r23, Z+
    5200:	fa 87       	std	Y+10, r31	; 0x0a
    5202:	e9 87       	std	Y+9, r30	; 0x09
    5204:	84 27       	eor	r24, r20
    5206:	95 27       	eor	r25, r21
    5208:	a6 27       	eor	r26, r22
    520a:	b7 27       	eor	r27, r23
    520c:	84 87       	std	Z+12, r24	; 0x0c
    520e:	95 87       	std	Z+13, r25	; 0x0d
    5210:	a6 87       	std	Z+14, r26	; 0x0e
    5212:	b7 87       	std	Z+15, r27	; 0x0f
    for( i=0; i<4; i++) {
        AESKEY[i] = swapmsbf(AESKEY[i]);
    }

    b = AESKEY[3];
    for( ; i<44; i++ ) {
    5214:	0f 5f       	subi	r16, 0xFF	; 255
    5216:	1f 4f       	sbci	r17, 0xFF	; 255
    5218:	0c 32       	cpi	r16, 0x2C	; 44
    521a:	11 05       	cpc	r17, r1
    521c:	09 f0       	breq	.+2      	; 0x5220 <os_aes+0x10e>
    521e:	b5 cf       	rjmp	.-150    	; 0x518a <os_aes+0x78>

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {

        aesroundkeys();

        if( mode & AES_MICNOAUX ) {
    5220:	09 89       	ldd	r16, Y+17	; 0x11
    5222:	03 ff       	sbrs	r16, 3
    5224:	21 c0       	rjmp	.+66     	; 0x5268 <os_aes+0x156>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
    5226:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <AESAUX+0xc>
    522a:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <AESAUX+0xd>
    522e:	10 92 12 05 	sts	0x0512, r1	; 0x800512 <AESAUX+0xe>
    5232:	10 92 13 05 	sts	0x0513, r1	; 0x800513 <AESAUX+0xf>
    5236:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <AESAUX+0x8>
    523a:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <AESAUX+0x9>
    523e:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <AESAUX+0xa>
    5242:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <AESAUX+0xb>
    5246:	10 92 08 05 	sts	0x0508, r1	; 0x800508 <AESAUX+0x4>
    524a:	10 92 09 05 	sts	0x0509, r1	; 0x800509 <AESAUX+0x5>
    524e:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <AESAUX+0x6>
    5252:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <AESAUX+0x7>
    5256:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <AESAUX>
    525a:	10 92 05 05 	sts	0x0505, r1	; 0x800505 <AESAUX+0x1>
    525e:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <AESAUX+0x2>
    5262:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <AESAUX+0x3>
    5266:	77 c0       	rjmp	.+238    	; 0x5356 <os_aes+0x244>
    5268:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <AESAUX>
    526c:	70 91 05 05 	lds	r23, 0x0505	; 0x800505 <AESAUX+0x1>
    5270:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <AESAUX+0x2>
    5274:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <AESAUX+0x3>
    5278:	0e 94 3b 32 	call	0x6476	; 0x6476 <__bswapsi2>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
    527c:	60 93 04 05 	sts	0x0504, r22	; 0x800504 <AESAUX>
    5280:	70 93 05 05 	sts	0x0505, r23	; 0x800505 <AESAUX+0x1>
    5284:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <AESAUX+0x2>
    5288:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <AESAUX+0x3>
    528c:	60 91 08 05 	lds	r22, 0x0508	; 0x800508 <AESAUX+0x4>
    5290:	70 91 09 05 	lds	r23, 0x0509	; 0x800509 <AESAUX+0x5>
    5294:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <AESAUX+0x6>
    5298:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <AESAUX+0x7>
    529c:	0e 94 3b 32 	call	0x6476	; 0x6476 <__bswapsi2>
            AESAUX[1] = swapmsbf(AESAUX[1]);
    52a0:	60 93 08 05 	sts	0x0508, r22	; 0x800508 <AESAUX+0x4>
    52a4:	70 93 09 05 	sts	0x0509, r23	; 0x800509 <AESAUX+0x5>
    52a8:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <AESAUX+0x6>
    52ac:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <AESAUX+0x7>
    52b0:	60 91 0c 05 	lds	r22, 0x050C	; 0x80050c <AESAUX+0x8>
    52b4:	70 91 0d 05 	lds	r23, 0x050D	; 0x80050d <AESAUX+0x9>
    52b8:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <AESAUX+0xa>
    52bc:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <AESAUX+0xb>
    52c0:	0e 94 3b 32 	call	0x6476	; 0x6476 <__bswapsi2>
            AESAUX[2] = swapmsbf(AESAUX[2]);
    52c4:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <AESAUX+0x8>
    52c8:	70 93 0d 05 	sts	0x050D, r23	; 0x80050d <AESAUX+0x9>
    52cc:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <AESAUX+0xa>
    52d0:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <AESAUX+0xb>
    52d4:	60 91 10 05 	lds	r22, 0x0510	; 0x800510 <AESAUX+0xc>
    52d8:	70 91 11 05 	lds	r23, 0x0511	; 0x800511 <AESAUX+0xd>
    52dc:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <AESAUX+0xe>
    52e0:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <AESAUX+0xf>
    52e4:	0e 94 3b 32 	call	0x6476	; 0x6476 <__bswapsi2>
            AESAUX[3] = swapmsbf(AESAUX[3]);
    52e8:	60 93 10 05 	sts	0x0510, r22	; 0x800510 <AESAUX+0xc>
    52ec:	70 93 11 05 	sts	0x0511, r23	; 0x800511 <AESAUX+0xd>
    52f0:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <AESAUX+0xe>
    52f4:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <AESAUX+0xf>
    52f8:	2e c0       	rjmp	.+92     	; 0x5356 <os_aes+0x244>
                    AESAUX[3] ^= a3;
                    mode &= ~AES_MICSUB;
                    goto LOADDATA;
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
    52fa:	29 81       	ldd	r18, Y+1	; 0x01
    52fc:	3a 81       	ldd	r19, Y+2	; 0x02
    52fe:	4b 81       	ldd	r20, Y+3	; 0x03
    5300:	5c 81       	ldd	r21, Y+4	; 0x04
    5302:	20 93 04 05 	sts	0x0504, r18	; 0x800504 <AESAUX>
    5306:	30 93 05 05 	sts	0x0505, r19	; 0x800505 <AESAUX+0x1>
    530a:	40 93 06 05 	sts	0x0506, r20	; 0x800506 <AESAUX+0x2>
    530e:	50 93 07 05 	sts	0x0507, r21	; 0x800507 <AESAUX+0x3>
                    AESAUX[1] = a1;
    5312:	c0 92 08 05 	sts	0x0508, r12	; 0x800508 <AESAUX+0x4>
    5316:	d0 92 09 05 	sts	0x0509, r13	; 0x800509 <AESAUX+0x5>
    531a:	e0 92 0a 05 	sts	0x050A, r14	; 0x80050a <AESAUX+0x6>
    531e:	f0 92 0b 05 	sts	0x050B, r15	; 0x80050b <AESAUX+0x7>
                    AESAUX[2] = a2;
    5322:	40 92 0c 05 	sts	0x050C, r4	; 0x80050c <AESAUX+0x8>
    5326:	50 92 0d 05 	sts	0x050D, r5	; 0x80050d <AESAUX+0x9>
    532a:	60 92 0e 05 	sts	0x050E, r6	; 0x80050e <AESAUX+0xa>
    532e:	70 92 0f 05 	sts	0x050F, r7	; 0x80050f <AESAUX+0xb>
                    AESAUX[3] = a3;
    5332:	80 92 10 05 	sts	0x0510, r8	; 0x800510 <AESAUX+0xc>
    5336:	90 92 11 05 	sts	0x0511, r9	; 0x800511 <AESAUX+0xd>
    533a:	a0 92 12 05 	sts	0x0512, r10	; 0x800512 <AESAUX+0xe>
    533e:	b0 92 13 05 	sts	0x0513, r11	; 0x800513 <AESAUX+0xf>
                    msbf4_write(buf+12, a3);
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
    5342:	09 89       	ldd	r16, Y+17	; 0x11
    5344:	1d 82       	std	Y+5, r1	; 0x05
    5346:	1e 82       	std	Y+6, r1	; 0x06
    5348:	1f 82       	std	Y+7, r1	; 0x07
    534a:	18 86       	std	Y+8, r1	; 0x08
    534c:	03 fd       	sbrc	r16, 3
    534e:	d1 c6       	rjmp	.+3490   	; 0x60f2 <os_aes+0xfe0>
                buf += 16;
                len -= 16;
            }
            mode |= AES_MICNOAUX;
    5350:	09 89       	ldd	r16, Y+17	; 0x11
    5352:	08 60       	ori	r16, 0x08	; 8
    5354:	09 8b       	std	Y+17, r16	; 0x11
            AESAUX[1] = swapmsbf(AESAUX[1]);
            AESAUX[2] = swapmsbf(AESAUX[2]);
            AESAUX[3] = swapmsbf(AESAUX[3]);
        }

        while( (signed char)len > 0 ) {
    5356:	12 14       	cp	r1, r2
    5358:	0c f0       	brlt	.+2      	; 0x535c <os_aes+0x24a>
    535a:	d5 c6       	rjmp	.+3498   	; 0x6106 <os_aes+0xff4>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
    535c:	19 89       	ldd	r17, Y+17	; 0x11
    535e:	12 fd       	sbrc	r17, 2
    5360:	04 c0       	rjmp	.+8      	; 0x536a <os_aes+0x258>
    5362:	11 ff       	sbrs	r17, 1
    5364:	19 c6       	rjmp	.+3122   	; 0x5f98 <os_aes+0xe86>
    5366:	13 fd       	sbrc	r17, 3
    5368:	25 c0       	rjmp	.+74     	; 0x53b4 <os_aes+0x2a2>
                a0 = AESAUX[0];
    536a:	20 91 04 05 	lds	r18, 0x0504	; 0x800504 <AESAUX>
    536e:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <AESAUX+0x1>
    5372:	40 91 06 05 	lds	r20, 0x0506	; 0x800506 <AESAUX+0x2>
    5376:	50 91 07 05 	lds	r21, 0x0507	; 0x800507 <AESAUX+0x3>
    537a:	29 83       	std	Y+1, r18	; 0x01
    537c:	3a 83       	std	Y+2, r19	; 0x02
    537e:	4b 83       	std	Y+3, r20	; 0x03
    5380:	5c 83       	std	Y+4, r21	; 0x04
                a1 = AESAUX[1];
    5382:	c0 90 08 05 	lds	r12, 0x0508	; 0x800508 <AESAUX+0x4>
    5386:	d0 90 09 05 	lds	r13, 0x0509	; 0x800509 <AESAUX+0x5>
    538a:	e0 90 0a 05 	lds	r14, 0x050A	; 0x80050a <AESAUX+0x6>
    538e:	f0 90 0b 05 	lds	r15, 0x050B	; 0x80050b <AESAUX+0x7>
                a2 = AESAUX[2];
    5392:	40 90 0c 05 	lds	r4, 0x050C	; 0x80050c <AESAUX+0x8>
    5396:	50 90 0d 05 	lds	r5, 0x050D	; 0x80050d <AESAUX+0x9>
    539a:	60 90 0e 05 	lds	r6, 0x050E	; 0x80050e <AESAUX+0xa>
    539e:	70 90 0f 05 	lds	r7, 0x050F	; 0x80050f <AESAUX+0xb>
                a3 = AESAUX[3];
    53a2:	80 90 10 05 	lds	r8, 0x0510	; 0x800510 <AESAUX+0xc>
    53a6:	90 90 11 05 	lds	r9, 0x0511	; 0x800511 <AESAUX+0xd>
    53aa:	a0 90 12 05 	lds	r10, 0x0512	; 0x800512 <AESAUX+0xe>
    53ae:	b0 90 13 05 	lds	r11, 0x0513	; 0x800513 <AESAUX+0xf>
    53b2:	9d c0       	rjmp	.+314    	; 0x54ee <os_aes+0x3dc>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
    53b4:	31 e1       	ldi	r19, 0x11	; 17
    53b6:	23 16       	cp	r2, r19
    53b8:	31 04       	cpc	r3, r1
    53ba:	08 f0       	brcs	.+2      	; 0x53be <os_aes+0x2ac>
    53bc:	ed c5       	rjmp	.+3034   	; 0x5f98 <os_aes+0xe86>
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
    53be:	40 e1       	ldi	r20, 0x10	; 16
    53c0:	24 16       	cp	r2, r20
    53c2:	31 04       	cpc	r3, r1
    53c4:	11 f4       	brne	.+4      	; 0x53ca <os_aes+0x2b8>
    53c6:	80 e1       	ldi	r24, 0x10	; 16
    53c8:	01 c0       	rjmp	.+2      	; 0x53cc <os_aes+0x2ba>
    53ca:	80 e2       	ldi	r24, 0x20	; 32
    53cc:	09 89       	ldd	r16, Y+17	; 0x11
    53ce:	08 2b       	or	r16, r24
    53d0:	09 8b       	std	Y+17, r16	; 0x11
                a1 = AESAUX[1];
                a2 = AESAUX[2];
                a3 = AESAUX[3];
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
    53d2:	81 2c       	mov	r8, r1
    53d4:	91 2c       	mov	r9, r1
    53d6:	54 01       	movw	r10, r8
    53d8:	41 2c       	mov	r4, r1
    53da:	51 2c       	mov	r5, r1
    53dc:	32 01       	movw	r6, r4
    53de:	c1 2c       	mov	r12, r1
    53e0:	d1 2c       	mov	r13, r1
    53e2:	76 01       	movw	r14, r12
    53e4:	19 82       	std	Y+1, r1	; 0x01
    53e6:	1a 82       	std	Y+2, r1	; 0x02
    53e8:	1b 82       	std	Y+3, r1	; 0x03
    53ea:	1c 82       	std	Y+4, r1	; 0x04
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
    53ec:	80 c0       	rjmp	.+256    	; 0x54ee <os_aes+0x3dc>
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
    53ee:	4d 81       	ldd	r20, Y+5	; 0x05
    53f0:	5e 81       	ldd	r21, Y+6	; 0x06
    53f2:	6f 81       	ldd	r22, Y+7	; 0x07
    53f4:	78 85       	ldd	r23, Y+8	; 0x08
    53f6:	76 2f       	mov	r23, r22
    53f8:	65 2f       	mov	r22, r21
    53fa:	54 2f       	mov	r21, r20
    53fc:	44 27       	eor	r20, r20
    53fe:	4d 83       	std	Y+5, r20	; 0x05
    5400:	5e 83       	std	Y+6, r21	; 0x06
    5402:	6f 83       	std	Y+7, r22	; 0x07
    5404:	78 87       	std	Y+8, r23	; 0x08
    5406:	09 85       	ldd	r16, Y+9	; 0x09
    5408:	1a 85       	ldd	r17, Y+10	; 0x0a
    540a:	2b 85       	ldd	r18, Y+11	; 0x0b
    540c:	3c 85       	ldd	r19, Y+12	; 0x0c
    540e:	80 17       	cp	r24, r16
    5410:	91 07       	cpc	r25, r17
    5412:	a2 07       	cpc	r26, r18
    5414:	b3 07       	cpc	r27, r19
    5416:	08 f0       	brcs	.+2      	; 0x541a <os_aes+0x308>
    5418:	cc c5       	rjmp	.+2968   	; 0x5fb2 <os_aes+0xea0>
    541a:	40 81       	ld	r20, Z
    541c:	50 e0       	ldi	r21, 0x00	; 0
    541e:	60 e0       	ldi	r22, 0x00	; 0
    5420:	70 e0       	ldi	r23, 0x00	; 0
    5422:	0d 81       	ldd	r16, Y+5	; 0x05
    5424:	1e 81       	ldd	r17, Y+6	; 0x06
    5426:	2f 81       	ldd	r18, Y+7	; 0x07
    5428:	38 85       	ldd	r19, Y+8	; 0x08
    542a:	04 2b       	or	r16, r20
    542c:	15 2b       	or	r17, r21
    542e:	26 2b       	or	r18, r22
    5430:	37 2b       	or	r19, r23
    5432:	0d 83       	std	Y+5, r16	; 0x05
    5434:	1e 83       	std	Y+6, r17	; 0x06
    5436:	2f 83       	std	Y+7, r18	; 0x07
    5438:	38 87       	std	Y+8, r19	; 0x08
                    if((t0&3)==3) {
    543a:	ac 01       	movw	r20, r24
    543c:	bd 01       	movw	r22, r26
    543e:	43 70       	andi	r20, 0x03	; 3
    5440:	55 27       	eor	r21, r21
    5442:	66 27       	eor	r22, r22
    5444:	77 27       	eor	r23, r23
    5446:	43 30       	cpi	r20, 0x03	; 3
    5448:	51 05       	cpc	r21, r1
    544a:	61 05       	cpc	r22, r1
    544c:	71 05       	cpc	r23, r1
    544e:	51 f4       	brne	.+20     	; 0x5464 <os_aes+0x352>
    5450:	c9 82       	std	Y+1, r12	; 0x01
    5452:	da 82       	std	Y+2, r13	; 0x02
    5454:	eb 82       	std	Y+3, r14	; 0x03
    5456:	fc 82       	std	Y+4, r15	; 0x04
    5458:	73 01       	movw	r14, r6
    545a:	62 01       	movw	r12, r4
    545c:	24 01       	movw	r4, r8
    545e:	35 01       	movw	r6, r10
                        a0 = a1;
                        a1 = a2;
                        a2 = a3;
                        a3 = t1;
    5460:	48 01       	movw	r8, r16
    5462:	59 01       	movw	r10, r18
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
    5464:	01 96       	adiw	r24, 0x01	; 1
    5466:	a1 1d       	adc	r26, r1
    5468:	b1 1d       	adc	r27, r1
    546a:	31 96       	adiw	r30, 0x01	; 1
    546c:	80 31       	cpi	r24, 0x10	; 16
    546e:	91 05       	cpc	r25, r1
    5470:	a1 05       	cpc	r26, r1
    5472:	b1 05       	cpc	r27, r1
    5474:	09 f0       	breq	.+2      	; 0x5478 <os_aes+0x366>
    5476:	bb cf       	rjmp	.-138    	; 0x53ee <os_aes+0x2dc>
                        a1 = a2;
                        a2 = a3;
                        a3 = t1;
                    }
                }
                if( mode & AES_MIC ) {
    5478:	19 89       	ldd	r17, Y+17	; 0x11
    547a:	11 ff       	sbrs	r17, 1
    547c:	38 c0       	rjmp	.+112    	; 0x54ee <os_aes+0x3dc>
                    a0 ^= AESAUX[0];
    547e:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <AESAUX>
    5482:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <AESAUX+0x1>
    5486:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <AESAUX+0x2>
    548a:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <AESAUX+0x3>
    548e:	29 81       	ldd	r18, Y+1	; 0x01
    5490:	3a 81       	ldd	r19, Y+2	; 0x02
    5492:	4b 81       	ldd	r20, Y+3	; 0x03
    5494:	5c 81       	ldd	r21, Y+4	; 0x04
    5496:	28 27       	eor	r18, r24
    5498:	39 27       	eor	r19, r25
    549a:	4a 27       	eor	r20, r26
    549c:	5b 27       	eor	r21, r27
    549e:	29 83       	std	Y+1, r18	; 0x01
    54a0:	3a 83       	std	Y+2, r19	; 0x02
    54a2:	4b 83       	std	Y+3, r20	; 0x03
    54a4:	5c 83       	std	Y+4, r21	; 0x04
                    a1 ^= AESAUX[1];
    54a6:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <AESAUX+0x4>
    54aa:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <AESAUX+0x5>
    54ae:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <AESAUX+0x6>
    54b2:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <AESAUX+0x7>
    54b6:	c8 26       	eor	r12, r24
    54b8:	d9 26       	eor	r13, r25
    54ba:	ea 26       	eor	r14, r26
    54bc:	fb 26       	eor	r15, r27
                    a2 ^= AESAUX[2];
    54be:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <AESAUX+0x8>
    54c2:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <AESAUX+0x9>
    54c6:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <AESAUX+0xa>
    54ca:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <AESAUX+0xb>
    54ce:	48 26       	eor	r4, r24
    54d0:	59 26       	eor	r5, r25
    54d2:	6a 26       	eor	r6, r26
    54d4:	7b 26       	eor	r7, r27
                    a3 ^= AESAUX[3];
    54d6:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <AESAUX+0xc>
    54da:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <AESAUX+0xd>
    54de:	a0 91 12 05 	lds	r26, 0x0512	; 0x800512 <AESAUX+0xe>
    54e2:	b0 91 13 05 	lds	r27, 0x0513	; 0x800513 <AESAUX+0xf>
    54e6:	88 26       	eor	r8, r24
    54e8:	99 26       	eor	r9, r25
    54ea:	aa 26       	eor	r10, r26
    54ec:	bb 26       	eor	r11, r27
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
            ke = ki + 8*4;
            a0 ^= ki[0];
    54ee:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <AESKEY>
    54f2:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <AESKEY+0x1>
    54f6:	a0 91 56 04 	lds	r26, 0x0456	; 0x800456 <AESKEY+0x2>
    54fa:	b0 91 57 04 	lds	r27, 0x0457	; 0x800457 <AESKEY+0x3>
    54fe:	49 81       	ldd	r20, Y+1	; 0x01
    5500:	5a 81       	ldd	r21, Y+2	; 0x02
    5502:	6b 81       	ldd	r22, Y+3	; 0x03
    5504:	7c 81       	ldd	r23, Y+4	; 0x04
    5506:	48 27       	eor	r20, r24
    5508:	59 27       	eor	r21, r25
    550a:	6a 27       	eor	r22, r26
    550c:	7b 27       	eor	r23, r27
    550e:	49 83       	std	Y+1, r20	; 0x01
    5510:	5a 83       	std	Y+2, r21	; 0x02
    5512:	6b 83       	std	Y+3, r22	; 0x03
    5514:	7c 83       	std	Y+4, r23	; 0x04
            a1 ^= ki[1];
    5516:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <AESKEY+0x4>
    551a:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <AESKEY+0x5>
    551e:	a0 91 5a 04 	lds	r26, 0x045A	; 0x80045a <AESKEY+0x6>
    5522:	b0 91 5b 04 	lds	r27, 0x045B	; 0x80045b <AESKEY+0x7>
    5526:	97 01       	movw	r18, r14
    5528:	86 01       	movw	r16, r12
    552a:	08 27       	eor	r16, r24
    552c:	19 27       	eor	r17, r25
    552e:	2a 27       	eor	r18, r26
    5530:	3b 27       	eor	r19, r27
    5532:	0d 83       	std	Y+5, r16	; 0x05
    5534:	1e 83       	std	Y+6, r17	; 0x06
    5536:	2f 83       	std	Y+7, r18	; 0x07
    5538:	38 87       	std	Y+8, r19	; 0x08
            a2 ^= ki[2];
    553a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <AESKEY+0x8>
    553e:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <AESKEY+0x9>
    5542:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <AESKEY+0xa>
    5546:	b0 91 5f 04 	lds	r27, 0x045F	; 0x80045f <AESKEY+0xb>
    554a:	a3 01       	movw	r20, r6
    554c:	92 01       	movw	r18, r4
    554e:	28 27       	eor	r18, r24
    5550:	39 27       	eor	r19, r25
    5552:	4a 27       	eor	r20, r26
    5554:	5b 27       	eor	r21, r27
    5556:	29 87       	std	Y+9, r18	; 0x09
    5558:	3a 87       	std	Y+10, r19	; 0x0a
    555a:	4b 87       	std	Y+11, r20	; 0x0b
    555c:	5c 87       	std	Y+12, r21	; 0x0c
            a3 ^= ki[3];
    555e:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <AESKEY+0xc>
    5562:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <AESKEY+0xd>
    5566:	a0 91 62 04 	lds	r26, 0x0462	; 0x800462 <AESKEY+0xe>
    556a:	b0 91 63 04 	lds	r27, 0x0463	; 0x800463 <AESKEY+0xf>
    556e:	b5 01       	movw	r22, r10
    5570:	a4 01       	movw	r20, r8
    5572:	48 27       	eor	r20, r24
    5574:	59 27       	eor	r21, r25
    5576:	6a 27       	eor	r22, r26
    5578:	7b 27       	eor	r23, r27
    557a:	4a 8b       	std	Y+18, r20	; 0x12
    557c:	5b 8b       	std	Y+19, r21	; 0x13
    557e:	6c 8b       	std	Y+20, r22	; 0x14
    5580:	7d 8b       	std	Y+21, r23	; 0x15
                    a3 ^= AESAUX[3];
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
    5582:	04 e5       	ldi	r16, 0x54	; 84
    5584:	14 e0       	ldi	r17, 0x04	; 4
            a0 ^= ki[0];
            a1 ^= ki[1];
            a2 ^= ki[2];
            a3 ^= ki[3];
            do {
                AES_key4 (t1,t2,t3,t0,4);
    5586:	d8 01       	movw	r26, r16
    5588:	54 96       	adiw	r26, 0x14	; 20
    558a:	6d 91       	ld	r22, X+
    558c:	7d 91       	ld	r23, X+
    558e:	8d 91       	ld	r24, X+
    5590:	9c 91       	ld	r25, X
    5592:	57 97       	sbiw	r26, 0x17	; 23
    5594:	6d 87       	std	Y+13, r22	; 0x0d
    5596:	7e 87       	std	Y+14, r23	; 0x0e
    5598:	8f 87       	std	Y+15, r24	; 0x0f
    559a:	98 8b       	std	Y+16, r25	; 0x10
    559c:	58 96       	adiw	r26, 0x18	; 24
    559e:	2d 91       	ld	r18, X+
    55a0:	3d 91       	ld	r19, X+
    55a2:	4d 91       	ld	r20, X+
    55a4:	5c 91       	ld	r21, X
    55a6:	5b 97       	sbiw	r26, 0x1b	; 27
    55a8:	2e 8b       	std	Y+22, r18	; 0x16
    55aa:	3f 8b       	std	Y+23, r19	; 0x17
    55ac:	48 8f       	std	Y+24, r20	; 0x18
    55ae:	59 8f       	std	Y+25, r21	; 0x19
    55b0:	5c 96       	adiw	r26, 0x1c	; 28
    55b2:	2d 91       	ld	r18, X+
    55b4:	3d 91       	ld	r19, X+
    55b6:	4d 91       	ld	r20, X+
    55b8:	5c 91       	ld	r21, X
    55ba:	5f 97       	sbiw	r26, 0x1f	; 31
    55bc:	2a 8f       	std	Y+26, r18	; 0x1a
    55be:	3b 8f       	std	Y+27, r19	; 0x1b
    55c0:	4c 8f       	std	Y+28, r20	; 0x1c
    55c2:	5d 8f       	std	Y+29, r21	; 0x1d
    55c4:	50 96       	adiw	r26, 0x10	; 16
    55c6:	2d 91       	ld	r18, X+
    55c8:	3d 91       	ld	r19, X+
    55ca:	4d 91       	ld	r20, X+
    55cc:	5c 91       	ld	r21, X
    55ce:	53 97       	sbiw	r26, 0x13	; 19
    55d0:	2e 8f       	std	Y+30, r18	; 0x1e
    55d2:	3f 8f       	std	Y+31, r19	; 0x1f
    55d4:	48 a3       	std	Y+32, r20	; 0x20
    55d6:	59 a3       	std	Y+33, r21	; 0x21
                AES_expr4(t1,t2,t3,t0,a0);
    55d8:	b9 81       	ldd	r27, Y+1	; 0x01
    55da:	6b 2f       	mov	r22, r27
    55dc:	70 e0       	ldi	r23, 0x00	; 0
    55de:	8a e8       	ldi	r24, 0x8A	; 138
    55e0:	90 e0       	ldi	r25, 0x00	; 0
    55e2:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    55e6:	6a a3       	std	Y+34, r22	; 0x22
    55e8:	7b a3       	std	Y+35, r23	; 0x23
    55ea:	8c a3       	std	Y+36, r24	; 0x24
    55ec:	9d a3       	std	Y+37, r25	; 0x25
    55ee:	ea 81       	ldd	r30, Y+2	; 0x02
    55f0:	6e 2f       	mov	r22, r30
    55f2:	70 e0       	ldi	r23, 0x00	; 0
    55f4:	8a e8       	ldi	r24, 0x8A	; 138
    55f6:	94 e0       	ldi	r25, 0x04	; 4
    55f8:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    55fc:	2b 01       	movw	r4, r22
    55fe:	3c 01       	movw	r6, r24
    5600:	fb 81       	ldd	r31, Y+3	; 0x03
    5602:	6f 2f       	mov	r22, r31
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	8a e8       	ldi	r24, 0x8A	; 138
    5608:	98 e0       	ldi	r25, 0x08	; 8
    560a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    560e:	4b 01       	movw	r8, r22
    5610:	5c 01       	movw	r10, r24
    5612:	29 81       	ldd	r18, Y+1	; 0x01
    5614:	3a 81       	ldd	r19, Y+2	; 0x02
    5616:	4b 81       	ldd	r20, Y+3	; 0x03
    5618:	5c 81       	ldd	r21, Y+4	; 0x04
    561a:	65 2f       	mov	r22, r21
    561c:	77 27       	eor	r23, r23
    561e:	88 27       	eor	r24, r24
    5620:	99 27       	eor	r25, r25
    5622:	8a e8       	ldi	r24, 0x8A	; 138
    5624:	9c e0       	ldi	r25, 0x0C	; 12
    5626:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    562a:	6b 01       	movw	r12, r22
    562c:	7c 01       	movw	r14, r24
                AES_expr4(t2,t3,t0,t1,a1);
    562e:	3d 81       	ldd	r19, Y+5	; 0x05
    5630:	63 2f       	mov	r22, r19
    5632:	70 e0       	ldi	r23, 0x00	; 0
    5634:	8a e8       	ldi	r24, 0x8A	; 138
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    563c:	a3 01       	movw	r20, r6
    563e:	92 01       	movw	r18, r4
    5640:	26 27       	eor	r18, r22
    5642:	37 27       	eor	r19, r23
    5644:	48 27       	eor	r20, r24
    5646:	59 27       	eor	r21, r25
    5648:	2e a3       	std	Y+38, r18	; 0x26
    564a:	3f a3       	std	Y+39, r19	; 0x27
    564c:	48 a7       	std	Y+40, r20	; 0x28
    564e:	59 a7       	std	Y+41, r21	; 0x29
    5650:	3e 81       	ldd	r19, Y+6	; 0x06
    5652:	63 2f       	mov	r22, r19
    5654:	70 e0       	ldi	r23, 0x00	; 0
    5656:	8a e8       	ldi	r24, 0x8A	; 138
    5658:	94 e0       	ldi	r25, 0x04	; 4
    565a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    565e:	86 26       	eor	r8, r22
    5660:	97 26       	eor	r9, r23
    5662:	a8 26       	eor	r10, r24
    5664:	b9 26       	eor	r11, r25
    5666:	4f 81       	ldd	r20, Y+7	; 0x07
    5668:	64 2f       	mov	r22, r20
    566a:	70 e0       	ldi	r23, 0x00	; 0
    566c:	8a e8       	ldi	r24, 0x8A	; 138
    566e:	98 e0       	ldi	r25, 0x08	; 8
    5670:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5674:	c6 26       	eor	r12, r22
    5676:	d7 26       	eor	r13, r23
    5678:	e8 26       	eor	r14, r24
    567a:	f9 26       	eor	r15, r25
    567c:	2d 81       	ldd	r18, Y+5	; 0x05
    567e:	3e 81       	ldd	r19, Y+6	; 0x06
    5680:	4f 81       	ldd	r20, Y+7	; 0x07
    5682:	58 85       	ldd	r21, Y+8	; 0x08
    5684:	65 2f       	mov	r22, r21
    5686:	77 27       	eor	r23, r23
    5688:	88 27       	eor	r24, r24
    568a:	99 27       	eor	r25, r25
    568c:	8a e8       	ldi	r24, 0x8A	; 138
    568e:	9c e0       	ldi	r25, 0x0C	; 12
    5690:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5694:	4a a0       	ldd	r4, Y+34	; 0x22
    5696:	5b a0       	ldd	r5, Y+35	; 0x23
    5698:	6c a0       	ldd	r6, Y+36	; 0x24
    569a:	7d a0       	ldd	r7, Y+37	; 0x25
    569c:	46 26       	eor	r4, r22
    569e:	57 26       	eor	r5, r23
    56a0:	68 26       	eor	r6, r24
    56a2:	79 26       	eor	r7, r25
                AES_expr4(t3,t0,t1,t2,a2);
    56a4:	39 85       	ldd	r19, Y+9	; 0x09
    56a6:	63 2f       	mov	r22, r19
    56a8:	70 e0       	ldi	r23, 0x00	; 0
    56aa:	8a e8       	ldi	r24, 0x8A	; 138
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    56b2:	9b 01       	movw	r18, r22
    56b4:	ac 01       	movw	r20, r24
    56b6:	28 25       	eor	r18, r8
    56b8:	39 25       	eor	r19, r9
    56ba:	4a 25       	eor	r20, r10
    56bc:	5b 25       	eor	r21, r11
    56be:	29 83       	std	Y+1, r18	; 0x01
    56c0:	3a 83       	std	Y+2, r19	; 0x02
    56c2:	4b 83       	std	Y+3, r20	; 0x03
    56c4:	5c 83       	std	Y+4, r21	; 0x04
    56c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    56c8:	63 2f       	mov	r22, r19
    56ca:	70 e0       	ldi	r23, 0x00	; 0
    56cc:	8a e8       	ldi	r24, 0x8A	; 138
    56ce:	94 e0       	ldi	r25, 0x04	; 4
    56d0:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    56d4:	c6 26       	eor	r12, r22
    56d6:	d7 26       	eor	r13, r23
    56d8:	e8 26       	eor	r14, r24
    56da:	f9 26       	eor	r15, r25
    56dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    56de:	64 2f       	mov	r22, r20
    56e0:	70 e0       	ldi	r23, 0x00	; 0
    56e2:	8a e8       	ldi	r24, 0x8A	; 138
    56e4:	98 e0       	ldi	r25, 0x08	; 8
    56e6:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    56ea:	4b 01       	movw	r8, r22
    56ec:	5c 01       	movw	r10, r24
    56ee:	84 24       	eor	r8, r4
    56f0:	95 24       	eor	r9, r5
    56f2:	a6 24       	eor	r10, r6
    56f4:	b7 24       	eor	r11, r7
    56f6:	29 85       	ldd	r18, Y+9	; 0x09
    56f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    56fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    56fc:	5c 85       	ldd	r21, Y+12	; 0x0c
    56fe:	65 2f       	mov	r22, r21
    5700:	77 27       	eor	r23, r23
    5702:	88 27       	eor	r24, r24
    5704:	99 27       	eor	r25, r25
    5706:	8a e8       	ldi	r24, 0x8A	; 138
    5708:	9c e0       	ldi	r25, 0x0C	; 12
    570a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    570e:	4e a0       	ldd	r4, Y+38	; 0x26
    5710:	5f a0       	ldd	r5, Y+39	; 0x27
    5712:	68 a4       	ldd	r6, Y+40	; 0x28
    5714:	79 a4       	ldd	r7, Y+41	; 0x29
    5716:	46 26       	eor	r4, r22
    5718:	57 26       	eor	r5, r23
    571a:	68 26       	eor	r6, r24
    571c:	79 26       	eor	r7, r25
                AES_expr4(t0,t1,t2,t3,a3);
    571e:	3a 89       	ldd	r19, Y+18	; 0x12
    5720:	63 2f       	mov	r22, r19
    5722:	70 e0       	ldi	r23, 0x00	; 0
    5724:	8a e8       	ldi	r24, 0x8A	; 138
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    572c:	c6 26       	eor	r12, r22
    572e:	d7 26       	eor	r13, r23
    5730:	e8 26       	eor	r14, r24
    5732:	f9 26       	eor	r15, r25
    5734:	4e 8d       	ldd	r20, Y+30	; 0x1e
    5736:	5f 8d       	ldd	r21, Y+31	; 0x1f
    5738:	68 a1       	ldd	r22, Y+32	; 0x20
    573a:	79 a1       	ldd	r23, Y+33	; 0x21
    573c:	c4 26       	eor	r12, r20
    573e:	d5 26       	eor	r13, r21
    5740:	e6 26       	eor	r14, r22
    5742:	f7 26       	eor	r15, r23
    5744:	5b 89       	ldd	r21, Y+19	; 0x13
    5746:	65 2f       	mov	r22, r21
    5748:	70 e0       	ldi	r23, 0x00	; 0
    574a:	8a e8       	ldi	r24, 0x8A	; 138
    574c:	94 e0       	ldi	r25, 0x04	; 4
    574e:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5752:	dc 01       	movw	r26, r24
    5754:	cb 01       	movw	r24, r22
    5756:	88 25       	eor	r24, r8
    5758:	99 25       	eor	r25, r9
    575a:	aa 25       	eor	r26, r10
    575c:	bb 25       	eor	r27, r11
    575e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5760:	3e 85       	ldd	r19, Y+14	; 0x0e
    5762:	4f 85       	ldd	r20, Y+15	; 0x0f
    5764:	58 89       	ldd	r21, Y+16	; 0x10
    5766:	28 27       	eor	r18, r24
    5768:	39 27       	eor	r19, r25
    576a:	4a 27       	eor	r20, r26
    576c:	5b 27       	eor	r21, r27
    576e:	2d 87       	std	Y+13, r18	; 0x0d
    5770:	3e 87       	std	Y+14, r19	; 0x0e
    5772:	4f 87       	std	Y+15, r20	; 0x0f
    5774:	58 8b       	std	Y+16, r21	; 0x10
    5776:	3c 89       	ldd	r19, Y+20	; 0x14
    5778:	63 2f       	mov	r22, r19
    577a:	70 e0       	ldi	r23, 0x00	; 0
    577c:	8a e8       	ldi	r24, 0x8A	; 138
    577e:	98 e0       	ldi	r25, 0x08	; 8
    5780:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5784:	46 26       	eor	r4, r22
    5786:	57 26       	eor	r5, r23
    5788:	68 26       	eor	r6, r24
    578a:	79 26       	eor	r7, r25
    578c:	4e 89       	ldd	r20, Y+22	; 0x16
    578e:	5f 89       	ldd	r21, Y+23	; 0x17
    5790:	68 8d       	ldd	r22, Y+24	; 0x18
    5792:	79 8d       	ldd	r23, Y+25	; 0x19
    5794:	44 25       	eor	r20, r4
    5796:	55 25       	eor	r21, r5
    5798:	66 25       	eor	r22, r6
    579a:	77 25       	eor	r23, r7
    579c:	4e 8b       	std	Y+22, r20	; 0x16
    579e:	5f 8b       	std	Y+23, r21	; 0x17
    57a0:	68 8f       	std	Y+24, r22	; 0x18
    57a2:	79 8f       	std	Y+25, r23	; 0x19
    57a4:	2a 89       	ldd	r18, Y+18	; 0x12
    57a6:	3b 89       	ldd	r19, Y+19	; 0x13
    57a8:	4c 89       	ldd	r20, Y+20	; 0x14
    57aa:	5d 89       	ldd	r21, Y+21	; 0x15
    57ac:	65 2f       	mov	r22, r21
    57ae:	77 27       	eor	r23, r23
    57b0:	88 27       	eor	r24, r24
    57b2:	99 27       	eor	r25, r25
    57b4:	8a e8       	ldi	r24, 0x8A	; 138
    57b6:	9c e0       	ldi	r25, 0x0C	; 12
    57b8:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    57bc:	89 80       	ldd	r8, Y+1	; 0x01
    57be:	9a 80       	ldd	r9, Y+2	; 0x02
    57c0:	ab 80       	ldd	r10, Y+3	; 0x03
    57c2:	bc 80       	ldd	r11, Y+4	; 0x04
    57c4:	86 26       	eor	r8, r22
    57c6:	97 26       	eor	r9, r23
    57c8:	a8 26       	eor	r10, r24
    57ca:	b9 26       	eor	r11, r25
    57cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
    57ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
    57d0:	6c 8d       	ldd	r22, Y+28	; 0x1c
    57d2:	7d 8d       	ldd	r23, Y+29	; 0x1d
    57d4:	48 25       	eor	r20, r8
    57d6:	59 25       	eor	r21, r9
    57d8:	6a 25       	eor	r22, r10
    57da:	7b 25       	eor	r23, r11
    57dc:	4a 8f       	std	Y+26, r20	; 0x1a
    57de:	5b 8f       	std	Y+27, r21	; 0x1b
    57e0:	6c 8f       	std	Y+28, r22	; 0x1c
    57e2:	7d 8f       	std	Y+29, r23	; 0x1d

                AES_key4 (a1,a2,a3,a0,8);
    57e4:	d8 01       	movw	r26, r16
    57e6:	94 96       	adiw	r26, 0x24	; 36
    57e8:	6d 91       	ld	r22, X+
    57ea:	7d 91       	ld	r23, X+
    57ec:	8d 91       	ld	r24, X+
    57ee:	9c 91       	ld	r25, X
    57f0:	97 97       	sbiw	r26, 0x27	; 39
    57f2:	6d 83       	std	Y+5, r22	; 0x05
    57f4:	7e 83       	std	Y+6, r23	; 0x06
    57f6:	8f 83       	std	Y+7, r24	; 0x07
    57f8:	98 87       	std	Y+8, r25	; 0x08
    57fa:	98 96       	adiw	r26, 0x28	; 40
    57fc:	2d 91       	ld	r18, X+
    57fe:	3d 91       	ld	r19, X+
    5800:	4d 91       	ld	r20, X+
    5802:	5c 91       	ld	r21, X
    5804:	9b 97       	sbiw	r26, 0x2b	; 43
    5806:	29 87       	std	Y+9, r18	; 0x09
    5808:	3a 87       	std	Y+10, r19	; 0x0a
    580a:	4b 87       	std	Y+11, r20	; 0x0b
    580c:	5c 87       	std	Y+12, r21	; 0x0c
    580e:	9c 96       	adiw	r26, 0x2c	; 44
    5810:	2d 91       	ld	r18, X+
    5812:	3d 91       	ld	r19, X+
    5814:	4d 91       	ld	r20, X+
    5816:	5c 91       	ld	r21, X
    5818:	9f 97       	sbiw	r26, 0x2f	; 47
    581a:	2a 8b       	std	Y+18, r18	; 0x12
    581c:	3b 8b       	std	Y+19, r19	; 0x13
    581e:	4c 8b       	std	Y+20, r20	; 0x14
    5820:	5d 8b       	std	Y+21, r21	; 0x15
    5822:	90 96       	adiw	r26, 0x20	; 32
    5824:	2d 91       	ld	r18, X+
    5826:	3d 91       	ld	r19, X+
    5828:	4d 91       	ld	r20, X+
    582a:	5c 91       	ld	r21, X
    582c:	93 97       	sbiw	r26, 0x23	; 35
    582e:	29 83       	std	Y+1, r18	; 0x01
    5830:	3a 83       	std	Y+2, r19	; 0x02
    5832:	4b 83       	std	Y+3, r20	; 0x03
    5834:	5c 83       	std	Y+4, r21	; 0x04
                AES_expr4(a1,a2,a3,a0,t0);
    5836:	6c 2d       	mov	r22, r12
    5838:	70 e0       	ldi	r23, 0x00	; 0
    583a:	8a e8       	ldi	r24, 0x8A	; 138
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5842:	6e 8f       	std	Y+30, r22	; 0x1e
    5844:	7f 8f       	std	Y+31, r23	; 0x1f
    5846:	88 a3       	std	Y+32, r24	; 0x20
    5848:	99 a3       	std	Y+33, r25	; 0x21
    584a:	6d 2d       	mov	r22, r13
    584c:	70 e0       	ldi	r23, 0x00	; 0
    584e:	8a e8       	ldi	r24, 0x8A	; 138
    5850:	94 e0       	ldi	r25, 0x04	; 4
    5852:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5856:	2b 01       	movw	r4, r22
    5858:	3c 01       	movw	r6, r24
    585a:	6e 2d       	mov	r22, r14
    585c:	70 e0       	ldi	r23, 0x00	; 0
    585e:	8a e8       	ldi	r24, 0x8A	; 138
    5860:	98 e0       	ldi	r25, 0x08	; 8
    5862:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5866:	4b 01       	movw	r8, r22
    5868:	5c 01       	movw	r10, r24
    586a:	6f 2d       	mov	r22, r15
    586c:	77 27       	eor	r23, r23
    586e:	88 27       	eor	r24, r24
    5870:	99 27       	eor	r25, r25
    5872:	8a e8       	ldi	r24, 0x8A	; 138
    5874:	9c e0       	ldi	r25, 0x0C	; 12
    5876:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    587a:	6b 01       	movw	r12, r22
    587c:	7c 01       	movw	r14, r24
                AES_expr4(a2,a3,a0,a1,t1);
    587e:	bd 85       	ldd	r27, Y+13	; 0x0d
    5880:	6b 2f       	mov	r22, r27
    5882:	70 e0       	ldi	r23, 0x00	; 0
    5884:	8a e8       	ldi	r24, 0x8A	; 138
    5886:	90 e0       	ldi	r25, 0x00	; 0
    5888:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    588c:	a3 01       	movw	r20, r6
    588e:	92 01       	movw	r18, r4
    5890:	26 27       	eor	r18, r22
    5892:	37 27       	eor	r19, r23
    5894:	48 27       	eor	r20, r24
    5896:	59 27       	eor	r21, r25
    5898:	2a a3       	std	Y+34, r18	; 0x22
    589a:	3b a3       	std	Y+35, r19	; 0x23
    589c:	4c a3       	std	Y+36, r20	; 0x24
    589e:	5d a3       	std	Y+37, r21	; 0x25
    58a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    58a2:	63 2f       	mov	r22, r19
    58a4:	70 e0       	ldi	r23, 0x00	; 0
    58a6:	8a e8       	ldi	r24, 0x8A	; 138
    58a8:	94 e0       	ldi	r25, 0x04	; 4
    58aa:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    58ae:	24 01       	movw	r4, r8
    58b0:	35 01       	movw	r6, r10
    58b2:	46 26       	eor	r4, r22
    58b4:	57 26       	eor	r5, r23
    58b6:	68 26       	eor	r6, r24
    58b8:	79 26       	eor	r7, r25
    58ba:	4f 85       	ldd	r20, Y+15	; 0x0f
    58bc:	64 2f       	mov	r22, r20
    58be:	70 e0       	ldi	r23, 0x00	; 0
    58c0:	8a e8       	ldi	r24, 0x8A	; 138
    58c2:	98 e0       	ldi	r25, 0x08	; 8
    58c4:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    58c8:	c6 26       	eor	r12, r22
    58ca:	d7 26       	eor	r13, r23
    58cc:	e8 26       	eor	r14, r24
    58ce:	f9 26       	eor	r15, r25
    58d0:	2d 85       	ldd	r18, Y+13	; 0x0d
    58d2:	3e 85       	ldd	r19, Y+14	; 0x0e
    58d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    58d6:	58 89       	ldd	r21, Y+16	; 0x10
    58d8:	65 2f       	mov	r22, r21
    58da:	77 27       	eor	r23, r23
    58dc:	88 27       	eor	r24, r24
    58de:	99 27       	eor	r25, r25
    58e0:	8a e8       	ldi	r24, 0x8A	; 138
    58e2:	9c e0       	ldi	r25, 0x0C	; 12
    58e4:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    58e8:	8e 8c       	ldd	r8, Y+30	; 0x1e
    58ea:	9f 8c       	ldd	r9, Y+31	; 0x1f
    58ec:	a8 a0       	ldd	r10, Y+32	; 0x20
    58ee:	b9 a0       	ldd	r11, Y+33	; 0x21
    58f0:	86 26       	eor	r8, r22
    58f2:	97 26       	eor	r9, r23
    58f4:	a8 26       	eor	r10, r24
    58f6:	b9 26       	eor	r11, r25
                AES_expr4(a3,a0,a1,a2,t2);
    58f8:	3e 89       	ldd	r19, Y+22	; 0x16
    58fa:	63 2f       	mov	r22, r19
    58fc:	70 e0       	ldi	r23, 0x00	; 0
    58fe:	8a e8       	ldi	r24, 0x8A	; 138
    5900:	90 e0       	ldi	r25, 0x00	; 0
    5902:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5906:	9b 01       	movw	r18, r22
    5908:	ac 01       	movw	r20, r24
    590a:	24 25       	eor	r18, r4
    590c:	35 25       	eor	r19, r5
    590e:	46 25       	eor	r20, r6
    5910:	57 25       	eor	r21, r7
    5912:	2d 87       	std	Y+13, r18	; 0x0d
    5914:	3e 87       	std	Y+14, r19	; 0x0e
    5916:	4f 87       	std	Y+15, r20	; 0x0f
    5918:	58 8b       	std	Y+16, r21	; 0x10
    591a:	3f 89       	ldd	r19, Y+23	; 0x17
    591c:	63 2f       	mov	r22, r19
    591e:	70 e0       	ldi	r23, 0x00	; 0
    5920:	8a e8       	ldi	r24, 0x8A	; 138
    5922:	94 e0       	ldi	r25, 0x04	; 4
    5924:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5928:	c6 26       	eor	r12, r22
    592a:	d7 26       	eor	r13, r23
    592c:	e8 26       	eor	r14, r24
    592e:	f9 26       	eor	r15, r25
    5930:	48 8d       	ldd	r20, Y+24	; 0x18
    5932:	64 2f       	mov	r22, r20
    5934:	70 e0       	ldi	r23, 0x00	; 0
    5936:	8a e8       	ldi	r24, 0x8A	; 138
    5938:	98 e0       	ldi	r25, 0x08	; 8
    593a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    593e:	86 26       	eor	r8, r22
    5940:	97 26       	eor	r9, r23
    5942:	a8 26       	eor	r10, r24
    5944:	b9 26       	eor	r11, r25
    5946:	2e 89       	ldd	r18, Y+22	; 0x16
    5948:	3f 89       	ldd	r19, Y+23	; 0x17
    594a:	48 8d       	ldd	r20, Y+24	; 0x18
    594c:	59 8d       	ldd	r21, Y+25	; 0x19
    594e:	65 2f       	mov	r22, r21
    5950:	77 27       	eor	r23, r23
    5952:	88 27       	eor	r24, r24
    5954:	99 27       	eor	r25, r25
    5956:	8a e8       	ldi	r24, 0x8A	; 138
    5958:	9c e0       	ldi	r25, 0x0C	; 12
    595a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    595e:	4a a0       	ldd	r4, Y+34	; 0x22
    5960:	5b a0       	ldd	r5, Y+35	; 0x23
    5962:	6c a0       	ldd	r6, Y+36	; 0x24
    5964:	7d a0       	ldd	r7, Y+37	; 0x25
    5966:	46 26       	eor	r4, r22
    5968:	57 26       	eor	r5, r23
    596a:	68 26       	eor	r6, r24
    596c:	79 26       	eor	r7, r25
                AES_expr4(a0,a1,a2,a3,t3);
    596e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    5970:	63 2f       	mov	r22, r19
    5972:	70 e0       	ldi	r23, 0x00	; 0
    5974:	8a e8       	ldi	r24, 0x8A	; 138
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    597c:	c6 26       	eor	r12, r22
    597e:	d7 26       	eor	r13, r23
    5980:	e8 26       	eor	r14, r24
    5982:	f9 26       	eor	r15, r25
    5984:	49 81       	ldd	r20, Y+1	; 0x01
    5986:	5a 81       	ldd	r21, Y+2	; 0x02
    5988:	6b 81       	ldd	r22, Y+3	; 0x03
    598a:	7c 81       	ldd	r23, Y+4	; 0x04
    598c:	4c 25       	eor	r20, r12
    598e:	5d 25       	eor	r21, r13
    5990:	6e 25       	eor	r22, r14
    5992:	7f 25       	eor	r23, r15
    5994:	49 83       	std	Y+1, r20	; 0x01
    5996:	5a 83       	std	Y+2, r21	; 0x02
    5998:	6b 83       	std	Y+3, r22	; 0x03
    599a:	7c 83       	std	Y+4, r23	; 0x04
    599c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    599e:	65 2f       	mov	r22, r21
    59a0:	70 e0       	ldi	r23, 0x00	; 0
    59a2:	8a e8       	ldi	r24, 0x8A	; 138
    59a4:	94 e0       	ldi	r25, 0x04	; 4
    59a6:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    59aa:	dc 01       	movw	r26, r24
    59ac:	cb 01       	movw	r24, r22
    59ae:	88 25       	eor	r24, r8
    59b0:	99 25       	eor	r25, r9
    59b2:	aa 25       	eor	r26, r10
    59b4:	bb 25       	eor	r27, r11
    59b6:	2d 81       	ldd	r18, Y+5	; 0x05
    59b8:	3e 81       	ldd	r19, Y+6	; 0x06
    59ba:	4f 81       	ldd	r20, Y+7	; 0x07
    59bc:	58 85       	ldd	r21, Y+8	; 0x08
    59be:	28 27       	eor	r18, r24
    59c0:	39 27       	eor	r19, r25
    59c2:	4a 27       	eor	r20, r26
    59c4:	5b 27       	eor	r21, r27
    59c6:	2d 83       	std	Y+5, r18	; 0x05
    59c8:	3e 83       	std	Y+6, r19	; 0x06
    59ca:	4f 83       	std	Y+7, r20	; 0x07
    59cc:	58 87       	std	Y+8, r21	; 0x08
    59ce:	3c 8d       	ldd	r19, Y+28	; 0x1c
    59d0:	63 2f       	mov	r22, r19
    59d2:	70 e0       	ldi	r23, 0x00	; 0
    59d4:	8a e8       	ldi	r24, 0x8A	; 138
    59d6:	98 e0       	ldi	r25, 0x08	; 8
    59d8:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    59dc:	46 26       	eor	r4, r22
    59de:	57 26       	eor	r5, r23
    59e0:	68 26       	eor	r6, r24
    59e2:	79 26       	eor	r7, r25
    59e4:	49 85       	ldd	r20, Y+9	; 0x09
    59e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    59e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    59ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    59ec:	44 25       	eor	r20, r4
    59ee:	55 25       	eor	r21, r5
    59f0:	66 25       	eor	r22, r6
    59f2:	77 25       	eor	r23, r7
    59f4:	49 87       	std	Y+9, r20	; 0x09
    59f6:	5a 87       	std	Y+10, r21	; 0x0a
    59f8:	6b 87       	std	Y+11, r22	; 0x0b
    59fa:	7c 87       	std	Y+12, r23	; 0x0c
    59fc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    59fe:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5a00:	4c 8d       	ldd	r20, Y+28	; 0x1c
    5a02:	5d 8d       	ldd	r21, Y+29	; 0x1d
    5a04:	65 2f       	mov	r22, r21
    5a06:	77 27       	eor	r23, r23
    5a08:	88 27       	eor	r24, r24
    5a0a:	99 27       	eor	r25, r25
    5a0c:	8a e8       	ldi	r24, 0x8A	; 138
    5a0e:	9c e0       	ldi	r25, 0x0C	; 12
    5a10:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5a14:	8d 84       	ldd	r8, Y+13	; 0x0d
    5a16:	9e 84       	ldd	r9, Y+14	; 0x0e
    5a18:	af 84       	ldd	r10, Y+15	; 0x0f
    5a1a:	b8 88       	ldd	r11, Y+16	; 0x10
    5a1c:	86 26       	eor	r8, r22
    5a1e:	97 26       	eor	r9, r23
    5a20:	a8 26       	eor	r10, r24
    5a22:	b9 26       	eor	r11, r25
    5a24:	4a 89       	ldd	r20, Y+18	; 0x12
    5a26:	5b 89       	ldd	r21, Y+19	; 0x13
    5a28:	6c 89       	ldd	r22, Y+20	; 0x14
    5a2a:	7d 89       	ldd	r23, Y+21	; 0x15
    5a2c:	48 25       	eor	r20, r8
    5a2e:	59 25       	eor	r21, r9
    5a30:	6a 25       	eor	r22, r10
    5a32:	7b 25       	eor	r23, r11
    5a34:	4a 8b       	std	Y+18, r20	; 0x12
    5a36:	5b 8b       	std	Y+19, r21	; 0x13
    5a38:	6c 8b       	std	Y+20, r22	; 0x14
    5a3a:	7d 8b       	std	Y+21, r23	; 0x15
            } while( (ki+=8) < ke );
    5a3c:	00 5e       	subi	r16, 0xE0	; 224
    5a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    5a40:	54 e0       	ldi	r21, 0x04	; 4
    5a42:	04 3d       	cpi	r16, 0xD4	; 212
    5a44:	15 07       	cpc	r17, r21
    5a46:	09 f0       	breq	.+2      	; 0x5a4a <os_aes+0x938>
    5a48:	9e cd       	rjmp	.-1220   	; 0x5586 <os_aes+0x474>

            AES_key4 (t1,t2,t3,t0,4);
    5a4a:	60 91 e8 04 	lds	r22, 0x04E8	; 0x8004e8 <AESKEY+0x94>
    5a4e:	70 91 e9 04 	lds	r23, 0x04E9	; 0x8004e9 <AESKEY+0x95>
    5a52:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <AESKEY+0x96>
    5a56:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <AESKEY+0x97>
    5a5a:	6a 8f       	std	Y+26, r22	; 0x1a
    5a5c:	7b 8f       	std	Y+27, r23	; 0x1b
    5a5e:	8c 8f       	std	Y+28, r24	; 0x1c
    5a60:	9d 8f       	std	Y+29, r25	; 0x1d
    5a62:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <AESKEY+0x98>
    5a66:	90 91 ed 04 	lds	r25, 0x04ED	; 0x8004ed <AESKEY+0x99>
    5a6a:	a0 91 ee 04 	lds	r26, 0x04EE	; 0x8004ee <AESKEY+0x9a>
    5a6e:	b0 91 ef 04 	lds	r27, 0x04EF	; 0x8004ef <AESKEY+0x9b>
    5a72:	8e 8b       	std	Y+22, r24	; 0x16
    5a74:	9f 8b       	std	Y+23, r25	; 0x17
    5a76:	a8 8f       	std	Y+24, r26	; 0x18
    5a78:	b9 8f       	std	Y+25, r27	; 0x19
    5a7a:	00 91 f0 04 	lds	r16, 0x04F0	; 0x8004f0 <AESKEY+0x9c>
    5a7e:	10 91 f1 04 	lds	r17, 0x04F1	; 0x8004f1 <AESKEY+0x9d>
    5a82:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <AESKEY+0x9e>
    5a86:	30 91 f3 04 	lds	r19, 0x04F3	; 0x8004f3 <AESKEY+0x9f>
    5a8a:	0d 87       	std	Y+13, r16	; 0x0d
    5a8c:	1e 87       	std	Y+14, r17	; 0x0e
    5a8e:	2f 87       	std	Y+15, r18	; 0x0f
    5a90:	38 8b       	std	Y+16, r19	; 0x10
    5a92:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <AESKEY+0x90>
    5a96:	30 91 e5 04 	lds	r19, 0x04E5	; 0x8004e5 <AESKEY+0x91>
    5a9a:	40 91 e6 04 	lds	r20, 0x04E6	; 0x8004e6 <AESKEY+0x92>
    5a9e:	50 91 e7 04 	lds	r21, 0x04E7	; 0x8004e7 <AESKEY+0x93>
    5aa2:	2e 8f       	std	Y+30, r18	; 0x1e
    5aa4:	3f 8f       	std	Y+31, r19	; 0x1f
    5aa6:	48 a3       	std	Y+32, r20	; 0x20
    5aa8:	59 a3       	std	Y+33, r21	; 0x21
            AES_expr4(t1,t2,t3,t0,a0);
    5aaa:	39 81       	ldd	r19, Y+1	; 0x01
    5aac:	63 2f       	mov	r22, r19
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	8a e8       	ldi	r24, 0x8A	; 138
    5ab2:	90 e0       	ldi	r25, 0x00	; 0
    5ab4:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5ab8:	6a a3       	std	Y+34, r22	; 0x22
    5aba:	7b a3       	std	Y+35, r23	; 0x23
    5abc:	8c a3       	std	Y+36, r24	; 0x24
    5abe:	9d a3       	std	Y+37, r25	; 0x25
    5ac0:	4a 81       	ldd	r20, Y+2	; 0x02
    5ac2:	64 2f       	mov	r22, r20
    5ac4:	70 e0       	ldi	r23, 0x00	; 0
    5ac6:	8a e8       	ldi	r24, 0x8A	; 138
    5ac8:	94 e0       	ldi	r25, 0x04	; 4
    5aca:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5ace:	2b 01       	movw	r4, r22
    5ad0:	3c 01       	movw	r6, r24
    5ad2:	5b 81       	ldd	r21, Y+3	; 0x03
    5ad4:	65 2f       	mov	r22, r21
    5ad6:	70 e0       	ldi	r23, 0x00	; 0
    5ad8:	8a e8       	ldi	r24, 0x8A	; 138
    5ada:	98 e0       	ldi	r25, 0x08	; 8
    5adc:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5ae0:	4b 01       	movw	r8, r22
    5ae2:	5c 01       	movw	r10, r24
    5ae4:	09 81       	ldd	r16, Y+1	; 0x01
    5ae6:	1a 81       	ldd	r17, Y+2	; 0x02
    5ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    5aea:	3c 81       	ldd	r19, Y+4	; 0x04
    5aec:	63 2f       	mov	r22, r19
    5aee:	77 27       	eor	r23, r23
    5af0:	88 27       	eor	r24, r24
    5af2:	99 27       	eor	r25, r25
    5af4:	8a e8       	ldi	r24, 0x8A	; 138
    5af6:	9c e0       	ldi	r25, 0x0C	; 12
    5af8:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5afc:	6b 01       	movw	r12, r22
    5afe:	7c 01       	movw	r14, r24
            AES_expr4(t2,t3,t0,t1,a1);
    5b00:	1d 81       	ldd	r17, Y+5	; 0x05
    5b02:	61 2f       	mov	r22, r17
    5b04:	70 e0       	ldi	r23, 0x00	; 0
    5b06:	8a e8       	ldi	r24, 0x8A	; 138
    5b08:	90 e0       	ldi	r25, 0x00	; 0
    5b0a:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5b0e:	46 26       	eor	r4, r22
    5b10:	57 26       	eor	r5, r23
    5b12:	68 26       	eor	r6, r24
    5b14:	79 26       	eor	r7, r25
    5b16:	2e 89       	ldd	r18, Y+22	; 0x16
    5b18:	3f 89       	ldd	r19, Y+23	; 0x17
    5b1a:	48 8d       	ldd	r20, Y+24	; 0x18
    5b1c:	59 8d       	ldd	r21, Y+25	; 0x19
    5b1e:	24 25       	eor	r18, r4
    5b20:	35 25       	eor	r19, r5
    5b22:	46 25       	eor	r20, r6
    5b24:	57 25       	eor	r21, r7
    5b26:	2e 8b       	std	Y+22, r18	; 0x16
    5b28:	3f 8b       	std	Y+23, r19	; 0x17
    5b2a:	48 8f       	std	Y+24, r20	; 0x18
    5b2c:	59 8f       	std	Y+25, r21	; 0x19
    5b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    5b30:	63 2f       	mov	r22, r19
    5b32:	70 e0       	ldi	r23, 0x00	; 0
    5b34:	8a e8       	ldi	r24, 0x8A	; 138
    5b36:	94 e0       	ldi	r25, 0x04	; 4
    5b38:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5b3c:	86 26       	eor	r8, r22
    5b3e:	97 26       	eor	r9, r23
    5b40:	a8 26       	eor	r10, r24
    5b42:	b9 26       	eor	r11, r25
    5b44:	4d 85       	ldd	r20, Y+13	; 0x0d
    5b46:	5e 85       	ldd	r21, Y+14	; 0x0e
    5b48:	6f 85       	ldd	r22, Y+15	; 0x0f
    5b4a:	78 89       	ldd	r23, Y+16	; 0x10
    5b4c:	48 25       	eor	r20, r8
    5b4e:	59 25       	eor	r21, r9
    5b50:	6a 25       	eor	r22, r10
    5b52:	7b 25       	eor	r23, r11
    5b54:	4d 87       	std	Y+13, r20	; 0x0d
    5b56:	5e 87       	std	Y+14, r21	; 0x0e
    5b58:	6f 87       	std	Y+15, r22	; 0x0f
    5b5a:	78 8b       	std	Y+16, r23	; 0x10
    5b5c:	5f 81       	ldd	r21, Y+7	; 0x07
    5b5e:	65 2f       	mov	r22, r21
    5b60:	70 e0       	ldi	r23, 0x00	; 0
    5b62:	8a e8       	ldi	r24, 0x8A	; 138
    5b64:	98 e0       	ldi	r25, 0x08	; 8
    5b66:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5b6a:	c6 26       	eor	r12, r22
    5b6c:	d7 26       	eor	r13, r23
    5b6e:	e8 26       	eor	r14, r24
    5b70:	f9 26       	eor	r15, r25
    5b72:	6e 8d       	ldd	r22, Y+30	; 0x1e
    5b74:	7f 8d       	ldd	r23, Y+31	; 0x1f
    5b76:	88 a1       	ldd	r24, Y+32	; 0x20
    5b78:	99 a1       	ldd	r25, Y+33	; 0x21
    5b7a:	c6 26       	eor	r12, r22
    5b7c:	d7 26       	eor	r13, r23
    5b7e:	e8 26       	eor	r14, r24
    5b80:	f9 26       	eor	r15, r25
    5b82:	0d 81       	ldd	r16, Y+5	; 0x05
    5b84:	1e 81       	ldd	r17, Y+6	; 0x06
    5b86:	2f 81       	ldd	r18, Y+7	; 0x07
    5b88:	38 85       	ldd	r19, Y+8	; 0x08
    5b8a:	63 2f       	mov	r22, r19
    5b8c:	77 27       	eor	r23, r23
    5b8e:	88 27       	eor	r24, r24
    5b90:	99 27       	eor	r25, r25
    5b92:	8a e8       	ldi	r24, 0x8A	; 138
    5b94:	9c e0       	ldi	r25, 0x0C	; 12
    5b96:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5b9a:	8a a0       	ldd	r8, Y+34	; 0x22
    5b9c:	9b a0       	ldd	r9, Y+35	; 0x23
    5b9e:	ac a0       	ldd	r10, Y+36	; 0x24
    5ba0:	bd a0       	ldd	r11, Y+37	; 0x25
    5ba2:	86 26       	eor	r8, r22
    5ba4:	97 26       	eor	r9, r23
    5ba6:	a8 26       	eor	r10, r24
    5ba8:	b9 26       	eor	r11, r25
    5baa:	4a 8c       	ldd	r4, Y+26	; 0x1a
    5bac:	5b 8c       	ldd	r5, Y+27	; 0x1b
    5bae:	6c 8c       	ldd	r6, Y+28	; 0x1c
    5bb0:	7d 8c       	ldd	r7, Y+29	; 0x1d
    5bb2:	48 24       	eor	r4, r8
    5bb4:	59 24       	eor	r5, r9
    5bb6:	6a 24       	eor	r6, r10
    5bb8:	7b 24       	eor	r7, r11
            AES_expr4(t3,t0,t1,t2,a2);
    5bba:	19 85       	ldd	r17, Y+9	; 0x09
    5bbc:	61 2f       	mov	r22, r17
    5bbe:	70 e0       	ldi	r23, 0x00	; 0
    5bc0:	8a e8       	ldi	r24, 0x8A	; 138
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5bc8:	2d 85       	ldd	r18, Y+13	; 0x0d
    5bca:	3e 85       	ldd	r19, Y+14	; 0x0e
    5bcc:	4f 85       	ldd	r20, Y+15	; 0x0f
    5bce:	58 89       	ldd	r21, Y+16	; 0x10
    5bd0:	26 27       	eor	r18, r22
    5bd2:	37 27       	eor	r19, r23
    5bd4:	48 27       	eor	r20, r24
    5bd6:	59 27       	eor	r21, r25
    5bd8:	2d 87       	std	Y+13, r18	; 0x0d
    5bda:	3e 87       	std	Y+14, r19	; 0x0e
    5bdc:	4f 87       	std	Y+15, r20	; 0x0f
    5bde:	58 8b       	std	Y+16, r21	; 0x10
    5be0:	3a 85       	ldd	r19, Y+10	; 0x0a
    5be2:	63 2f       	mov	r22, r19
    5be4:	70 e0       	ldi	r23, 0x00	; 0
    5be6:	8a e8       	ldi	r24, 0x8A	; 138
    5be8:	94 e0       	ldi	r25, 0x04	; 4
    5bea:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5bee:	c6 26       	eor	r12, r22
    5bf0:	d7 26       	eor	r13, r23
    5bf2:	e8 26       	eor	r14, r24
    5bf4:	f9 26       	eor	r15, r25
    5bf6:	4b 85       	ldd	r20, Y+11	; 0x0b
    5bf8:	64 2f       	mov	r22, r20
    5bfa:	70 e0       	ldi	r23, 0x00	; 0
    5bfc:	8a e8       	ldi	r24, 0x8A	; 138
    5bfe:	98 e0       	ldi	r25, 0x08	; 8
    5c00:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5c04:	53 01       	movw	r10, r6
    5c06:	42 01       	movw	r8, r4
    5c08:	86 26       	eor	r8, r22
    5c0a:	97 26       	eor	r9, r23
    5c0c:	a8 26       	eor	r10, r24
    5c0e:	b9 26       	eor	r11, r25
    5c10:	09 85       	ldd	r16, Y+9	; 0x09
    5c12:	1a 85       	ldd	r17, Y+10	; 0x0a
    5c14:	2b 85       	ldd	r18, Y+11	; 0x0b
    5c16:	3c 85       	ldd	r19, Y+12	; 0x0c
    5c18:	63 2f       	mov	r22, r19
    5c1a:	77 27       	eor	r23, r23
    5c1c:	88 27       	eor	r24, r24
    5c1e:	99 27       	eor	r25, r25
    5c20:	8a e8       	ldi	r24, 0x8A	; 138
    5c22:	9c e0       	ldi	r25, 0x0C	; 12
    5c24:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5c28:	4e 88       	ldd	r4, Y+22	; 0x16
    5c2a:	5f 88       	ldd	r5, Y+23	; 0x17
    5c2c:	68 8c       	ldd	r6, Y+24	; 0x18
    5c2e:	79 8c       	ldd	r7, Y+25	; 0x19
    5c30:	46 26       	eor	r4, r22
    5c32:	57 26       	eor	r5, r23
    5c34:	68 26       	eor	r6, r24
    5c36:	79 26       	eor	r7, r25
            AES_expr4(t0,t1,t2,t3,a3);
    5c38:	1a 89       	ldd	r17, Y+18	; 0x12
    5c3a:	61 2f       	mov	r22, r17
    5c3c:	70 e0       	ldi	r23, 0x00	; 0
    5c3e:	8a e8       	ldi	r24, 0x8A	; 138
    5c40:	90 e0       	ldi	r25, 0x00	; 0
    5c42:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5c46:	a7 01       	movw	r20, r14
    5c48:	96 01       	movw	r18, r12
    5c4a:	26 27       	eor	r18, r22
    5c4c:	37 27       	eor	r19, r23
    5c4e:	48 27       	eor	r20, r24
    5c50:	59 27       	eor	r21, r25
    5c52:	29 87       	std	Y+9, r18	; 0x09
    5c54:	3a 87       	std	Y+10, r19	; 0x0a
    5c56:	4b 87       	std	Y+11, r20	; 0x0b
    5c58:	5c 87       	std	Y+12, r21	; 0x0c
    5c5a:	3b 89       	ldd	r19, Y+19	; 0x13
    5c5c:	63 2f       	mov	r22, r19
    5c5e:	70 e0       	ldi	r23, 0x00	; 0
    5c60:	8a e8       	ldi	r24, 0x8A	; 138
    5c62:	94 e0       	ldi	r25, 0x04	; 4
    5c64:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5c68:	95 01       	movw	r18, r10
    5c6a:	84 01       	movw	r16, r8
    5c6c:	06 27       	eor	r16, r22
    5c6e:	17 27       	eor	r17, r23
    5c70:	28 27       	eor	r18, r24
    5c72:	39 27       	eor	r19, r25
    5c74:	0d 83       	std	Y+5, r16	; 0x05
    5c76:	1e 83       	std	Y+6, r17	; 0x06
    5c78:	2f 83       	std	Y+7, r18	; 0x07
    5c7a:	38 87       	std	Y+8, r19	; 0x08
    5c7c:	1c 89       	ldd	r17, Y+20	; 0x14
    5c7e:	61 2f       	mov	r22, r17
    5c80:	70 e0       	ldi	r23, 0x00	; 0
    5c82:	8a e8       	ldi	r24, 0x8A	; 138
    5c84:	98 e0       	ldi	r25, 0x08	; 8
    5c86:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5c8a:	53 01       	movw	r10, r6
    5c8c:	42 01       	movw	r8, r4
    5c8e:	86 26       	eor	r8, r22
    5c90:	97 26       	eor	r9, r23
    5c92:	a8 26       	eor	r10, r24
    5c94:	b9 26       	eor	r11, r25
    5c96:	2a 89       	ldd	r18, Y+18	; 0x12
    5c98:	3b 89       	ldd	r19, Y+19	; 0x13
    5c9a:	4c 89       	ldd	r20, Y+20	; 0x14
    5c9c:	5d 89       	ldd	r21, Y+21	; 0x15
    5c9e:	65 2f       	mov	r22, r21
    5ca0:	77 27       	eor	r23, r23
    5ca2:	88 27       	eor	r24, r24
    5ca4:	99 27       	eor	r25, r25
    5ca6:	8a e8       	ldi	r24, 0x8A	; 138
    5ca8:	9c e0       	ldi	r25, 0x0C	; 12
    5caa:	0e 94 7d 28 	call	0x50fa	; 0x50fa <table_get_u4>
    5cae:	0d 85       	ldd	r16, Y+13	; 0x0d
    5cb0:	1e 85       	ldd	r17, Y+14	; 0x0e
    5cb2:	2f 85       	ldd	r18, Y+15	; 0x0f
    5cb4:	38 89       	ldd	r19, Y+16	; 0x10
    5cb6:	06 27       	eor	r16, r22
    5cb8:	17 27       	eor	r17, r23
    5cba:	28 27       	eor	r18, r24
    5cbc:	39 27       	eor	r19, r25
    5cbe:	d9 01       	movw	r26, r18
    5cc0:	c8 01       	movw	r24, r16
    5cc2:	49 85       	ldd	r20, Y+9	; 0x09
    5cc4:	5a 85       	ldd	r21, Y+10	; 0x0a
    5cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cca:	07 2f       	mov	r16, r23
    5ccc:	11 27       	eor	r17, r17
    5cce:	22 27       	eor	r18, r18
    5cd0:	33 27       	eor	r19, r19
    5cd2:	f8 01       	movw	r30, r16
    5cd4:	e6 57       	subi	r30, 0x76	; 118
    5cd6:	ff 4e       	sbci	r31, 0xEF	; 239
    5cd8:	44 91       	lpm	r20, Z
    5cda:	5f 81       	ldd	r21, Y+7	; 0x07
    5cdc:	e5 2f       	mov	r30, r21
    5cde:	f0 e0       	ldi	r31, 0x00	; 0
    5ce0:	e6 57       	subi	r30, 0x76	; 118
    5ce2:	ff 4e       	sbci	r31, 0xEF	; 239
    5ce4:	34 91       	lpm	r19, Z
    5ce6:	e9 2d       	mov	r30, r9
    5ce8:	f0 e0       	ldi	r31, 0x00	; 0
    5cea:	e6 57       	subi	r30, 0x76	; 118
    5cec:	ff 4e       	sbci	r31, 0xEF	; 239
    5cee:	24 91       	lpm	r18, Z
    5cf0:	e8 2f       	mov	r30, r24
    5cf2:	f0 e0       	ldi	r31, 0x00	; 0
    5cf4:	e6 57       	subi	r30, 0x76	; 118
    5cf6:	ff 4e       	sbci	r31, 0xEF	; 239
    5cf8:	e4 91       	lpm	r30, Z
    5cfa:	c0 90 f4 04 	lds	r12, 0x04F4	; 0x8004f4 <AESKEY+0xa0>
    5cfe:	d0 90 f5 04 	lds	r13, 0x04F5	; 0x8004f5 <AESKEY+0xa1>
    5d02:	e0 90 f6 04 	lds	r14, 0x04F6	; 0x8004f6 <AESKEY+0xa2>
    5d06:	f0 90 f7 04 	lds	r15, 0x04F7	; 0x8004f7 <AESKEY+0xa3>
    5d0a:	ce 26       	eor	r12, r30
    5d0c:	f4 26       	eor	r15, r20
    5d0e:	e3 26       	eor	r14, r19

            AES_expr(a0,t0,t1,t2,t3,8);
    5d10:	b7 01       	movw	r22, r14
    5d12:	a6 01       	movw	r20, r12
    5d14:	52 27       	eor	r21, r18
    5d16:	49 83       	std	Y+1, r20	; 0x01
    5d18:	5a 83       	std	Y+2, r21	; 0x02
    5d1a:	6b 83       	std	Y+3, r22	; 0x03
    5d1c:	7c 83       	std	Y+4, r23	; 0x04
    5d1e:	4d 81       	ldd	r20, Y+5	; 0x05
    5d20:	5e 81       	ldd	r21, Y+6	; 0x06
    5d22:	6f 81       	ldd	r22, Y+7	; 0x07
    5d24:	78 85       	ldd	r23, Y+8	; 0x08
    5d26:	07 2f       	mov	r16, r23
    5d28:	11 27       	eor	r17, r17
    5d2a:	22 27       	eor	r18, r18
    5d2c:	33 27       	eor	r19, r19
    5d2e:	f8 01       	movw	r30, r16
    5d30:	e6 57       	subi	r30, 0x76	; 118
    5d32:	ff 4e       	sbci	r31, 0xEF	; 239
    5d34:	44 91       	lpm	r20, Z
    5d36:	ea 2d       	mov	r30, r10
    5d38:	f0 e0       	ldi	r31, 0x00	; 0
    5d3a:	e6 57       	subi	r30, 0x76	; 118
    5d3c:	ff 4e       	sbci	r31, 0xEF	; 239
    5d3e:	34 91       	lpm	r19, Z
    5d40:	e9 2f       	mov	r30, r25
    5d42:	f0 e0       	ldi	r31, 0x00	; 0
    5d44:	e6 57       	subi	r30, 0x76	; 118
    5d46:	ff 4e       	sbci	r31, 0xEF	; 239
    5d48:	24 91       	lpm	r18, Z
    5d4a:	59 85       	ldd	r21, Y+9	; 0x09
    5d4c:	e5 2f       	mov	r30, r21
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	e6 57       	subi	r30, 0x76	; 118
    5d52:	ff 4e       	sbci	r31, 0xEF	; 239
    5d54:	e4 91       	lpm	r30, Z
    5d56:	c0 90 f8 04 	lds	r12, 0x04F8	; 0x8004f8 <AESKEY+0xa4>
    5d5a:	d0 90 f9 04 	lds	r13, 0x04F9	; 0x8004f9 <AESKEY+0xa5>
    5d5e:	e0 90 fa 04 	lds	r14, 0x04FA	; 0x8004fa <AESKEY+0xa6>
    5d62:	f0 90 fb 04 	lds	r15, 0x04FB	; 0x8004fb <AESKEY+0xa7>
    5d66:	ce 26       	eor	r12, r30
    5d68:	f4 26       	eor	r15, r20
    5d6a:	e3 26       	eor	r14, r19
            AES_expr(a1,t1,t2,t3,t0,9);
    5d6c:	d2 26       	eor	r13, r18
    5d6e:	0b 2d       	mov	r16, r11
    5d70:	11 27       	eor	r17, r17
    5d72:	22 27       	eor	r18, r18
    5d74:	33 27       	eor	r19, r19
    5d76:	f8 01       	movw	r30, r16
    5d78:	e6 57       	subi	r30, 0x76	; 118
    5d7a:	ff 4e       	sbci	r31, 0xEF	; 239
    5d7c:	44 91       	lpm	r20, Z
    5d7e:	ea 2f       	mov	r30, r26
    5d80:	f0 e0       	ldi	r31, 0x00	; 0
    5d82:	e6 57       	subi	r30, 0x76	; 118
    5d84:	ff 4e       	sbci	r31, 0xEF	; 239
    5d86:	34 91       	lpm	r19, Z
    5d88:	6a 85       	ldd	r22, Y+10	; 0x0a
    5d8a:	e6 2f       	mov	r30, r22
    5d8c:	f0 e0       	ldi	r31, 0x00	; 0
    5d8e:	e6 57       	subi	r30, 0x76	; 118
    5d90:	ff 4e       	sbci	r31, 0xEF	; 239
    5d92:	24 91       	lpm	r18, Z
    5d94:	7d 81       	ldd	r23, Y+5	; 0x05
    5d96:	e7 2f       	mov	r30, r23
    5d98:	f0 e0       	ldi	r31, 0x00	; 0
    5d9a:	e6 57       	subi	r30, 0x76	; 118
    5d9c:	ff 4e       	sbci	r31, 0xEF	; 239
    5d9e:	e4 91       	lpm	r30, Z
    5da0:	40 90 fc 04 	lds	r4, 0x04FC	; 0x8004fc <AESKEY+0xa8>
    5da4:	50 90 fd 04 	lds	r5, 0x04FD	; 0x8004fd <AESKEY+0xa9>
    5da8:	60 90 fe 04 	lds	r6, 0x04FE	; 0x8004fe <AESKEY+0xaa>
    5dac:	70 90 ff 04 	lds	r7, 0x04FF	; 0x8004ff <AESKEY+0xab>
    5db0:	4e 26       	eor	r4, r30
    5db2:	74 26       	eor	r7, r20
    5db4:	63 26       	eor	r6, r19
            AES_expr(a2,t2,t3,t0,t1,10);
    5db6:	52 26       	eor	r5, r18
    5db8:	8b 2f       	mov	r24, r27
    5dba:	99 27       	eor	r25, r25
    5dbc:	aa 27       	eor	r26, r26
    5dbe:	bb 27       	eor	r27, r27
    5dc0:	fc 01       	movw	r30, r24
    5dc2:	e6 57       	subi	r30, 0x76	; 118
    5dc4:	ff 4e       	sbci	r31, 0xEF	; 239
    5dc6:	84 91       	lpm	r24, Z
    5dc8:	9b 85       	ldd	r25, Y+11	; 0x0b
    5dca:	e9 2f       	mov	r30, r25
    5dcc:	f0 e0       	ldi	r31, 0x00	; 0
    5dce:	e6 57       	subi	r30, 0x76	; 118
    5dd0:	ff 4e       	sbci	r31, 0xEF	; 239
    5dd2:	24 91       	lpm	r18, Z
    5dd4:	ae 81       	ldd	r26, Y+6	; 0x06
    5dd6:	ea 2f       	mov	r30, r26
    5dd8:	f0 e0       	ldi	r31, 0x00	; 0
    5dda:	e6 57       	subi	r30, 0x76	; 118
    5ddc:	ff 4e       	sbci	r31, 0xEF	; 239
    5dde:	94 91       	lpm	r25, Z
    5de0:	e8 2d       	mov	r30, r8
    5de2:	f0 e0       	ldi	r31, 0x00	; 0
    5de4:	e6 57       	subi	r30, 0x76	; 118
    5de6:	ff 4e       	sbci	r31, 0xEF	; 239
    5de8:	e4 91       	lpm	r30, Z
    5dea:	80 90 00 05 	lds	r8, 0x0500	; 0x800500 <AESKEY+0xac>
    5dee:	90 90 01 05 	lds	r9, 0x0501	; 0x800501 <AESKEY+0xad>
    5df2:	a0 90 02 05 	lds	r10, 0x0502	; 0x800502 <AESKEY+0xae>
    5df6:	b0 90 03 05 	lds	r11, 0x0503	; 0x800503 <AESKEY+0xaf>
    5dfa:	8e 26       	eor	r8, r30
    5dfc:	b8 26       	eor	r11, r24
    5dfe:	a2 26       	eor	r10, r18
            AES_expr(a3,t3,t0,t1,t2,11);
    5e00:	99 26       	eor	r9, r25
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
    5e02:	09 89       	ldd	r16, Y+17	; 0x11
    5e04:	01 ff       	sbrs	r16, 1
    5e06:	e7 c0       	rjmp	.+462    	; 0x5fd6 <os_aes+0xec4>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
    5e08:	40 2f       	mov	r20, r16
    5e0a:	40 73       	andi	r20, 0x30	; 48
    5e0c:	50 e0       	ldi	r21, 0x00	; 0
    5e0e:	64 e0       	ldi	r22, 0x04	; 4
    5e10:	55 95       	asr	r21
    5e12:	47 95       	ror	r20
    5e14:	6a 95       	dec	r22
    5e16:	e1 f7       	brne	.-8      	; 0x5e10 <os_aes+0xcfe>
    5e18:	41 15       	cp	r20, r1
    5e1a:	51 05       	cpc	r21, r1
    5e1c:	09 f4       	brne	.+2      	; 0x5e20 <os_aes+0xd0e>
    5e1e:	6d ca       	rjmp	.-2854   	; 0x52fa <os_aes+0x1e8>
    5e20:	ba 01       	movw	r22, r20
    5e22:	55 0f       	add	r21, r21
    5e24:	88 0b       	sbc	r24, r24
    5e26:	99 0b       	sbc	r25, r25
    5e28:	6d 83       	std	Y+5, r22	; 0x05
    5e2a:	7e 83       	std	Y+6, r23	; 0x06
    5e2c:	8f 83       	std	Y+7, r24	; 0x07
    5e2e:	98 87       	std	Y+8, r25	; 0x08
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
    5e30:	89 81       	ldd	r24, Y+1	; 0x01
    5e32:	9a 81       	ldd	r25, Y+2	; 0x02
    5e34:	ab 81       	ldd	r26, Y+3	; 0x03
    5e36:	bc 81       	ldd	r27, Y+4	; 0x04
    5e38:	88 27       	eor	r24, r24
    5e3a:	b7 fd       	sbrc	r27, 7
    5e3c:	83 95       	inc	r24
    5e3e:	99 27       	eor	r25, r25
    5e40:	aa 27       	eor	r26, r26
    5e42:	bb 27       	eor	r27, r27
                        a0 = (a0 << 1) | (a1 >> 31);
    5e44:	49 81       	ldd	r20, Y+1	; 0x01
    5e46:	5a 81       	ldd	r21, Y+2	; 0x02
    5e48:	6b 81       	ldd	r22, Y+3	; 0x03
    5e4a:	7c 81       	ldd	r23, Y+4	; 0x04
    5e4c:	44 0f       	add	r20, r20
    5e4e:	55 1f       	adc	r21, r21
    5e50:	66 1f       	adc	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	97 01       	movw	r18, r14
    5e56:	86 01       	movw	r16, r12
    5e58:	00 27       	eor	r16, r16
    5e5a:	37 fd       	sbrc	r19, 7
    5e5c:	03 95       	inc	r16
    5e5e:	11 27       	eor	r17, r17
    5e60:	22 27       	eor	r18, r18
    5e62:	33 27       	eor	r19, r19
    5e64:	04 2b       	or	r16, r20
    5e66:	15 2b       	or	r17, r21
    5e68:	26 2b       	or	r18, r22
    5e6a:	37 2b       	or	r19, r23
    5e6c:	09 83       	std	Y+1, r16	; 0x01
    5e6e:	1a 83       	std	Y+2, r17	; 0x02
    5e70:	2b 83       	std	Y+3, r18	; 0x03
    5e72:	3c 83       	std	Y+4, r19	; 0x04
                        a1 = (a1 << 1) | (a2 >> 31);
    5e74:	cc 0c       	add	r12, r12
    5e76:	dd 1c       	adc	r13, r13
    5e78:	ee 1c       	adc	r14, r14
    5e7a:	ff 1c       	adc	r15, r15
    5e7c:	b3 01       	movw	r22, r6
    5e7e:	a2 01       	movw	r20, r4
    5e80:	44 27       	eor	r20, r20
    5e82:	77 fd       	sbrc	r23, 7
    5e84:	43 95       	inc	r20
    5e86:	55 27       	eor	r21, r21
    5e88:	66 27       	eor	r22, r22
    5e8a:	77 27       	eor	r23, r23
    5e8c:	c4 2a       	or	r12, r20
    5e8e:	d5 2a       	or	r13, r21
    5e90:	e6 2a       	or	r14, r22
    5e92:	f7 2a       	or	r15, r23
                        a2 = (a2 << 1) | (a3 >> 31);
    5e94:	44 0c       	add	r4, r4
    5e96:	55 1c       	adc	r5, r5
    5e98:	66 1c       	adc	r6, r6
    5e9a:	77 1c       	adc	r7, r7
    5e9c:	b5 01       	movw	r22, r10
    5e9e:	a4 01       	movw	r20, r8
    5ea0:	44 27       	eor	r20, r20
    5ea2:	77 fd       	sbrc	r23, 7
    5ea4:	43 95       	inc	r20
    5ea6:	55 27       	eor	r21, r21
    5ea8:	66 27       	eor	r22, r22
    5eaa:	77 27       	eor	r23, r23
    5eac:	44 2a       	or	r4, r20
    5eae:	55 2a       	or	r5, r21
    5eb0:	66 2a       	or	r6, r22
    5eb2:	77 2a       	or	r7, r23
                        a3 = (a3 << 1);
    5eb4:	88 0c       	add	r8, r8
    5eb6:	99 1c       	adc	r9, r9
    5eb8:	aa 1c       	adc	r10, r10
    5eba:	bb 1c       	adc	r11, r11
                        if( t0 ) a3 ^= 0x87;
    5ebc:	89 2b       	or	r24, r25
    5ebe:	8a 2b       	or	r24, r26
    5ec0:	8b 2b       	or	r24, r27
    5ec2:	11 f0       	breq	.+4      	; 0x5ec8 <os_aes+0xdb6>
    5ec4:	17 e8       	ldi	r17, 0x87	; 135
    5ec6:	81 26       	eor	r8, r17
                    } while( --t1 );
    5ec8:	2d 81       	ldd	r18, Y+5	; 0x05
    5eca:	3e 81       	ldd	r19, Y+6	; 0x06
    5ecc:	4f 81       	ldd	r20, Y+7	; 0x07
    5ece:	58 85       	ldd	r21, Y+8	; 0x08
    5ed0:	21 50       	subi	r18, 0x01	; 1
    5ed2:	31 09       	sbc	r19, r1
    5ed4:	41 09       	sbc	r20, r1
    5ed6:	51 09       	sbc	r21, r1
    5ed8:	2d 83       	std	Y+5, r18	; 0x05
    5eda:	3e 83       	std	Y+6, r19	; 0x06
    5edc:	4f 83       	std	Y+7, r20	; 0x07
    5ede:	58 87       	std	Y+8, r21	; 0x08
    5ee0:	23 2b       	or	r18, r19
    5ee2:	24 2b       	or	r18, r20
    5ee4:	25 2b       	or	r18, r21
    5ee6:	09 f0       	breq	.+2      	; 0x5eea <os_aes+0xdd8>
    5ee8:	a3 cf       	rjmp	.-186    	; 0x5e30 <os_aes+0xd1e>

                    AESAUX[0] ^= a0;
    5eea:	80 91 04 05 	lds	r24, 0x0504	; 0x800504 <AESAUX>
    5eee:	90 91 05 05 	lds	r25, 0x0505	; 0x800505 <AESAUX+0x1>
    5ef2:	a0 91 06 05 	lds	r26, 0x0506	; 0x800506 <AESAUX+0x2>
    5ef6:	b0 91 07 05 	lds	r27, 0x0507	; 0x800507 <AESAUX+0x3>
    5efa:	49 81       	ldd	r20, Y+1	; 0x01
    5efc:	5a 81       	ldd	r21, Y+2	; 0x02
    5efe:	6b 81       	ldd	r22, Y+3	; 0x03
    5f00:	7c 81       	ldd	r23, Y+4	; 0x04
    5f02:	84 27       	eor	r24, r20
    5f04:	95 27       	eor	r25, r21
    5f06:	a6 27       	eor	r26, r22
    5f08:	b7 27       	eor	r27, r23
    5f0a:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <AESAUX>
    5f0e:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <AESAUX+0x1>
    5f12:	a0 93 06 05 	sts	0x0506, r26	; 0x800506 <AESAUX+0x2>
    5f16:	b0 93 07 05 	sts	0x0507, r27	; 0x800507 <AESAUX+0x3>
                    AESAUX[1] ^= a1;
    5f1a:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <AESAUX+0x4>
    5f1e:	90 91 09 05 	lds	r25, 0x0509	; 0x800509 <AESAUX+0x5>
    5f22:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <AESAUX+0x6>
    5f26:	b0 91 0b 05 	lds	r27, 0x050B	; 0x80050b <AESAUX+0x7>
    5f2a:	8c 25       	eor	r24, r12
    5f2c:	9d 25       	eor	r25, r13
    5f2e:	ae 25       	eor	r26, r14
    5f30:	bf 25       	eor	r27, r15
    5f32:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <AESAUX+0x4>
    5f36:	90 93 09 05 	sts	0x0509, r25	; 0x800509 <AESAUX+0x5>
    5f3a:	a0 93 0a 05 	sts	0x050A, r26	; 0x80050a <AESAUX+0x6>
    5f3e:	b0 93 0b 05 	sts	0x050B, r27	; 0x80050b <AESAUX+0x7>
                    AESAUX[2] ^= a2;
    5f42:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <AESAUX+0x8>
    5f46:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <AESAUX+0x9>
    5f4a:	a0 91 0e 05 	lds	r26, 0x050E	; 0x80050e <AESAUX+0xa>
    5f4e:	b0 91 0f 05 	lds	r27, 0x050F	; 0x80050f <AESAUX+0xb>
    5f52:	84 25       	eor	r24, r4
    5f54:	95 25       	eor	r25, r5
    5f56:	a6 25       	eor	r26, r6
    5f58:	b7 25       	eor	r27, r7
    5f5a:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <AESAUX+0x8>
    5f5e:	90 93 0d 05 	sts	0x050D, r25	; 0x80050d <AESAUX+0x9>
    5f62:	a0 93 0e 05 	sts	0x050E, r26	; 0x80050e <AESAUX+0xa>
    5f66:	b0 93 0f 05 	sts	0x050F, r27	; 0x80050f <AESAUX+0xb>
                    AESAUX[3] ^= a3;
    5f6a:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <AESAUX+0xc>
    5f6e:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <AESAUX+0xd>
    5f72:	a0 91 12 05 	lds	r26, 0x0512	; 0x800512 <AESAUX+0xe>
    5f76:	b0 91 13 05 	lds	r27, 0x0513	; 0x800513 <AESAUX+0xf>
    5f7a:	88 25       	eor	r24, r8
    5f7c:	99 25       	eor	r25, r9
    5f7e:	aa 25       	eor	r26, r10
    5f80:	bb 25       	eor	r27, r11
    5f82:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <AESAUX+0xc>
    5f86:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <AESAUX+0xd>
    5f8a:	a0 93 12 05 	sts	0x0512, r26	; 0x800512 <AESAUX+0xe>
    5f8e:	b0 93 13 05 	sts	0x0513, r27	; 0x800513 <AESAUX+0xf>
                    mode &= ~AES_MICSUB;
    5f92:	09 89       	ldd	r16, Y+17	; 0x11
    5f94:	0f 7c       	andi	r16, 0xCF	; 207
    5f96:	09 8b       	std	Y+17, r16	; 0x11
    5f98:	ea a5       	ldd	r30, Y+42	; 0x2a
    5f9a:	fb a5       	ldd	r31, Y+43	; 0x2b
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
                a0 = a1 = a2 = a3 = 0; // load null block
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
            } else
        LOADDATA: { // load data block (partially)
                for(t0=0; t0<16; t0++) {
    5f9c:	80 e0       	ldi	r24, 0x00	; 0
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	dc 01       	movw	r26, r24
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
    5fa2:	91 01       	movw	r18, r2
    5fa4:	40 e0       	ldi	r20, 0x00	; 0
    5fa6:	50 e0       	ldi	r21, 0x00	; 0
    5fa8:	29 87       	std	Y+9, r18	; 0x09
    5faa:	3a 87       	std	Y+10, r19	; 0x0a
    5fac:	4b 87       	std	Y+11, r20	; 0x0b
    5fae:	5c 87       	std	Y+12, r21	; 0x0c
    5fb0:	1e ca       	rjmp	.-3012   	; 0x53ee <os_aes+0x2dc>
    5fb2:	29 85       	ldd	r18, Y+9	; 0x09
    5fb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    5fb6:	4b 85       	ldd	r20, Y+11	; 0x0b
    5fb8:	5c 85       	ldd	r21, Y+12	; 0x0c
    5fba:	28 17       	cp	r18, r24
    5fbc:	39 07       	cpc	r19, r25
    5fbe:	4a 07       	cpc	r20, r26
    5fc0:	5b 07       	cpc	r21, r27
    5fc2:	29 f4       	brne	.+10     	; 0x5fce <os_aes+0xebc>
    5fc4:	40 e8       	ldi	r20, 0x80	; 128
    5fc6:	50 e0       	ldi	r21, 0x00	; 0
    5fc8:	60 e0       	ldi	r22, 0x00	; 0
    5fca:	70 e0       	ldi	r23, 0x00	; 0
    5fcc:	2a ca       	rjmp	.-2988   	; 0x5422 <os_aes+0x310>
    5fce:	40 e0       	ldi	r20, 0x00	; 0
    5fd0:	50 e0       	ldi	r21, 0x00	; 0
    5fd2:	ba 01       	movw	r22, r20
    5fd4:	26 ca       	rjmp	.-2996   	; 0x5422 <os_aes+0x310>
                    AESAUX[1] = a1;
                    AESAUX[2] = a2;
                    AESAUX[3] = a3;
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
    5fd6:	19 89       	ldd	r17, Y+17	; 0x11
    5fd8:	12 ff       	sbrs	r17, 2
    5fda:	58 c0       	rjmp	.+176    	; 0x608c <os_aes+0xf7a>
                    t0 = (len > 16) ? 16: len;
    5fdc:	a1 01       	movw	r20, r2
    5fde:	21 e1       	ldi	r18, 0x11	; 17
    5fe0:	22 16       	cp	r2, r18
    5fe2:	31 04       	cpc	r3, r1
    5fe4:	10 f0       	brcs	.+4      	; 0x5fea <os_aes+0xed8>
    5fe6:	40 e1       	ldi	r20, 0x10	; 16
    5fe8:	50 e0       	ldi	r21, 0x00	; 0
    5fea:	ba 01       	movw	r22, r20
    5fec:	80 e0       	ldi	r24, 0x00	; 0
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	6d 83       	std	Y+5, r22	; 0x05
    5ff2:	7e 83       	std	Y+6, r23	; 0x06
    5ff4:	8f 83       	std	Y+7, r24	; 0x07
    5ff6:	98 87       	std	Y+8, r25	; 0x08
    5ff8:	ea a5       	ldd	r30, Y+42	; 0x2a
    5ffa:	fb a5       	ldd	r31, Y+43	; 0x2b
                    for(t1=0; t1<t0; t1++) {
    5ffc:	80 e0       	ldi	r24, 0x00	; 0
    5ffe:	90 e0       	ldi	r25, 0x00	; 0
    6000:	dc 01       	movw	r26, r24
    6002:	2d 81       	ldd	r18, Y+5	; 0x05
    6004:	3e 81       	ldd	r19, Y+6	; 0x06
    6006:	4f 81       	ldd	r20, Y+7	; 0x07
    6008:	58 85       	ldd	r21, Y+8	; 0x08
    600a:	82 17       	cp	r24, r18
    600c:	93 07       	cpc	r25, r19
    600e:	a4 07       	cpc	r26, r20
    6010:	b5 07       	cpc	r27, r21
    6012:	40 f5       	brcc	.+80     	; 0x6064 <os_aes+0xf52>
                        buf[t1] ^= (a0>>24);
    6014:	20 81       	ld	r18, Z
    6016:	7c 81       	ldd	r23, Y+4	; 0x04
    6018:	27 27       	eor	r18, r23
    601a:	21 93       	st	Z+, r18
                        a0 <<= 8;
                        if((t1&3)==3) {
    601c:	ac 01       	movw	r20, r24
    601e:	bd 01       	movw	r22, r26
    6020:	43 70       	andi	r20, 0x03	; 3
    6022:	55 27       	eor	r21, r21
    6024:	66 27       	eor	r22, r22
    6026:	77 27       	eor	r23, r23
    6028:	43 30       	cpi	r20, 0x03	; 3
    602a:	51 05       	cpc	r21, r1
    602c:	61 05       	cpc	r22, r1
    602e:	71 05       	cpc	r23, r1
    6030:	69 f0       	breq	.+26     	; 0x604c <os_aes+0xf3a>
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
                    t0 = (len > 16) ? 16: len;
                    for(t1=0; t1<t0; t1++) {
                        buf[t1] ^= (a0>>24);
                        a0 <<= 8;
    6032:	09 81       	ldd	r16, Y+1	; 0x01
    6034:	1a 81       	ldd	r17, Y+2	; 0x02
    6036:	2b 81       	ldd	r18, Y+3	; 0x03
    6038:	3c 81       	ldd	r19, Y+4	; 0x04
    603a:	32 2f       	mov	r19, r18
    603c:	21 2f       	mov	r18, r17
    603e:	10 2f       	mov	r17, r16
    6040:	00 27       	eor	r16, r16
    6042:	09 83       	std	Y+1, r16	; 0x01
    6044:	1a 83       	std	Y+2, r17	; 0x02
    6046:	2b 83       	std	Y+3, r18	; 0x03
    6048:	3c 83       	std	Y+4, r19	; 0x04
    604a:	08 c0       	rjmp	.+16     	; 0x605c <os_aes+0xf4a>
    604c:	c9 82       	std	Y+1, r12	; 0x01
    604e:	da 82       	std	Y+2, r13	; 0x02
    6050:	eb 82       	std	Y+3, r14	; 0x03
    6052:	fc 82       	std	Y+4, r15	; 0x04
    6054:	73 01       	movw	r14, r6
    6056:	62 01       	movw	r12, r4
                        if((t1&3)==3) {
                            a0 = a1;
                            a1 = a2;
                            a2 = a3;
    6058:	24 01       	movw	r4, r8
    605a:	35 01       	movw	r6, r10
                    AESAUX[3] = a3;
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
                    t0 = (len > 16) ? 16: len;
                    for(t1=0; t1<t0; t1++) {
    605c:	01 96       	adiw	r24, 0x01	; 1
    605e:	a1 1d       	adc	r26, r1
    6060:	b1 1d       	adc	r27, r1
    6062:	cf cf       	rjmp	.-98     	; 0x6002 <os_aes+0xef0>
                            a1 = a2;
                            a2 = a3;
                        }
                    }
                    // update counter
                    AESAUX[3]++;
    6064:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <AESAUX+0xc>
    6068:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <AESAUX+0xd>
    606c:	a0 91 12 05 	lds	r26, 0x0512	; 0x800512 <AESAUX+0xe>
    6070:	b0 91 13 05 	lds	r27, 0x0513	; 0x800513 <AESAUX+0xf>
    6074:	01 96       	adiw	r24, 0x01	; 1
    6076:	a1 1d       	adc	r26, r1
    6078:	b1 1d       	adc	r27, r1
    607a:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <AESAUX+0xc>
    607e:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <AESAUX+0xd>
    6082:	a0 93 12 05 	sts	0x0512, r26	; 0x800512 <AESAUX+0xe>
    6086:	b0 93 13 05 	sts	0x0513, r27	; 0x800513 <AESAUX+0xf>
    608a:	33 c0       	rjmp	.+102    	; 0x60f2 <os_aes+0xfe0>
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
    608c:	ec 81       	ldd	r30, Y+4	; 0x04
    608e:	aa a5       	ldd	r26, Y+42	; 0x2a
    6090:	bb a5       	ldd	r27, Y+43	; 0x2b
    6092:	ec 93       	st	X, r30
    6094:	fb 81       	ldd	r31, Y+3	; 0x03
    6096:	11 96       	adiw	r26, 0x01	; 1
    6098:	fc 93       	st	X, r31
    609a:	11 97       	sbiw	r26, 0x01	; 1
    609c:	0a 81       	ldd	r16, Y+2	; 0x02
    609e:	12 96       	adiw	r26, 0x02	; 2
    60a0:	0c 93       	st	X, r16
    60a2:	12 97       	sbiw	r26, 0x02	; 2
    60a4:	19 81       	ldd	r17, Y+1	; 0x01
    60a6:	13 96       	adiw	r26, 0x03	; 3
    60a8:	1c 93       	st	X, r17
    60aa:	13 97       	sbiw	r26, 0x03	; 3
                    msbf4_write(buf+4,  a1);
    60ac:	14 96       	adiw	r26, 0x04	; 4
    60ae:	fc 92       	st	X, r15
    60b0:	14 97       	sbiw	r26, 0x04	; 4
    60b2:	15 96       	adiw	r26, 0x05	; 5
    60b4:	ec 92       	st	X, r14
    60b6:	15 97       	sbiw	r26, 0x05	; 5
    60b8:	16 96       	adiw	r26, 0x06	; 6
    60ba:	dc 92       	st	X, r13
    60bc:	16 97       	sbiw	r26, 0x06	; 6
    60be:	17 96       	adiw	r26, 0x07	; 7
    60c0:	cc 92       	st	X, r12
    60c2:	17 97       	sbiw	r26, 0x07	; 7
                    msbf4_write(buf+8,  a2);
    60c4:	18 96       	adiw	r26, 0x08	; 8
    60c6:	7c 92       	st	X, r7
    60c8:	18 97       	sbiw	r26, 0x08	; 8
    60ca:	19 96       	adiw	r26, 0x09	; 9
    60cc:	6c 92       	st	X, r6
    60ce:	19 97       	sbiw	r26, 0x09	; 9
    60d0:	1a 96       	adiw	r26, 0x0a	; 10
    60d2:	5c 92       	st	X, r5
    60d4:	1a 97       	sbiw	r26, 0x0a	; 10
    60d6:	1b 96       	adiw	r26, 0x0b	; 11
    60d8:	4c 92       	st	X, r4
    60da:	1b 97       	sbiw	r26, 0x0b	; 11
                    msbf4_write(buf+12, a3);
    60dc:	1c 96       	adiw	r26, 0x0c	; 12
    60de:	bc 92       	st	X, r11
    60e0:	1c 97       	sbiw	r26, 0x0c	; 12
    60e2:	1d 96       	adiw	r26, 0x0d	; 13
    60e4:	ac 92       	st	X, r10
    60e6:	1d 97       	sbiw	r26, 0x0d	; 13
    60e8:	1e 96       	adiw	r26, 0x0e	; 14
    60ea:	9c 92       	st	X, r9
    60ec:	1e 97       	sbiw	r26, 0x0e	; 14
    60ee:	1f 96       	adiw	r26, 0x0f	; 15
    60f0:	8c 92       	st	X, r8
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
                buf += 16;
    60f2:	0a a5       	ldd	r16, Y+42	; 0x2a
    60f4:	1b a5       	ldd	r17, Y+43	; 0x2b
    60f6:	00 5f       	subi	r16, 0xF0	; 240
    60f8:	1f 4f       	sbci	r17, 0xFF	; 255
    60fa:	1b a7       	std	Y+43, r17	; 0x2b
    60fc:	0a a7       	std	Y+42, r16	; 0x2a
                len -= 16;
    60fe:	10 e1       	ldi	r17, 0x10	; 16
    6100:	21 1a       	sub	r2, r17
    6102:	31 08       	sbc	r3, r1
    6104:	25 c9       	rjmp	.-3510   	; 0x5350 <os_aes+0x23e>
            }
            mode |= AES_MICNOAUX;
        }
        return AESAUX[0];
    6106:	60 91 04 05 	lds	r22, 0x0504	; 0x800504 <AESAUX>
    610a:	70 91 05 05 	lds	r23, 0x0505	; 0x800505 <AESAUX+0x1>
    610e:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <AESAUX+0x2>
    6112:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <AESAUX+0x3>
}
    6116:	ab 96       	adiw	r28, 0x2b	; 43
    6118:	0f b6       	in	r0, 0x3f	; 63
    611a:	f8 94       	cli
    611c:	de bf       	out	0x3e, r29	; 62
    611e:	0f be       	out	0x3f, r0	; 63
    6120:	cd bf       	out	0x3d, r28	; 61
    6122:	df 91       	pop	r29
    6124:	cf 91       	pop	r28
    6126:	1f 91       	pop	r17
    6128:	0f 91       	pop	r16
    612a:	ff 90       	pop	r15
    612c:	ef 90       	pop	r14
    612e:	df 90       	pop	r13
    6130:	cf 90       	pop	r12
    6132:	bf 90       	pop	r11
    6134:	af 90       	pop	r10
    6136:	9f 90       	pop	r9
    6138:	8f 90       	pop	r8
    613a:	7f 90       	pop	r7
    613c:	6f 90       	pop	r6
    613e:	5f 90       	pop	r5
    6140:	4f 90       	pop	r4
    6142:	3f 90       	pop	r3
    6144:	2f 90       	pop	r2
    6146:	08 95       	ret

00006148 <search_sep>:
*
* @return index of buffer
*/
/* ----------------------------------------------------------------------------*/
uint8_t search_sep(uint8_t sep, uint8_t* buf, uint8_t size_buf, uint8_t start_pos)
{
    6148:	98 2f       	mov	r25, r24
	uint8_t s_pos = start_pos;
	while(buf[s_pos] != sep && s_pos < size_buf) s_pos++;
    614a:	fb 01       	movw	r30, r22
    614c:	e2 0f       	add	r30, r18
    614e:	f1 1d       	adc	r31, r1
    6150:	30 81       	ld	r19, Z
    6152:	81 e0       	ldi	r24, 0x01	; 1
    6154:	82 0f       	add	r24, r18
    6156:	39 17       	cp	r19, r25
    6158:	21 f0       	breq	.+8      	; 0x6162 <search_sep+0x1a>
    615a:	24 17       	cp	r18, r20
    615c:	10 f4       	brcc	.+4      	; 0x6162 <search_sep+0x1a>
    615e:	28 2f       	mov	r18, r24
    6160:	f4 cf       	rjmp	.-24     	; 0x614a <search_sep+0x2>
	s_pos++;
	return s_pos;
}
    6162:	08 95       	ret

00006164 <copy_buf>:
*
* @return  index after separator
*/
/* ----------------------------------------------------------------------------*/
uint8_t copy_buf(uint8_t* in_buf, uint8_t in_idx, uint8_t sep, uint8_t* out_buf, uint8_t size_outBuf)
{
    6164:	0f 93       	push	r16
    6166:	cf 93       	push	r28
    6168:	df 93       	push	r29
    616a:	dc 01       	movw	r26, r24
    616c:	e9 01       	movw	r28, r18
    616e:	6f 5f       	subi	r22, 0xFF	; 255
	uint8_t idx = in_idx;
	uint8_t i;
	for (i = 0; i < size_outBuf && in_buf[idx] != sep; i++) {
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	8f ef       	ldi	r24, 0xFF	; 255
    6174:	86 0f       	add	r24, r22
    6176:	90 17       	cp	r25, r16
    6178:	90 f4       	brcc	.+36     	; 0x619e <copy_buf+0x3a>
    617a:	fd 01       	movw	r30, r26
    617c:	e8 0f       	add	r30, r24
    617e:	f1 1d       	adc	r31, r1
    6180:	30 81       	ld	r19, Z
    6182:	34 17       	cp	r19, r20
    6184:	61 f0       	breq	.+24     	; 0x619e <copy_buf+0x3a>
		if(in_buf[idx] == '.') {idx++; i--; continue;}
    6186:	3e 32       	cpi	r19, 0x2E	; 46
    6188:	11 f4       	brne	.+4      	; 0x618e <copy_buf+0x2a>
    618a:	91 50       	subi	r25, 0x01	; 1
    618c:	05 c0       	rjmp	.+10     	; 0x6198 <copy_buf+0x34>
		out_buf[i] = in_buf[idx] & 0x0F;
    618e:	fe 01       	movw	r30, r28
    6190:	e9 0f       	add	r30, r25
    6192:	f1 1d       	adc	r31, r1
    6194:	3f 70       	andi	r19, 0x0F	; 15
    6196:	30 83       	st	Z, r19
/* ----------------------------------------------------------------------------*/
uint8_t copy_buf(uint8_t* in_buf, uint8_t in_idx, uint8_t sep, uint8_t* out_buf, uint8_t size_outBuf)
{
	uint8_t idx = in_idx;
	uint8_t i;
	for (i = 0; i < size_outBuf && in_buf[idx] != sep; i++) {
    6198:	9f 5f       	subi	r25, 0xFF	; 255
    619a:	6f 5f       	subi	r22, 0xFF	; 255
    619c:	ea cf       	rjmp	.-44     	; 0x6172 <copy_buf+0xe>
		if(in_buf[idx] == '.') {idx++; i--; continue;}
		out_buf[i] = in_buf[idx] & 0x0F;
		idx++;
	}
	return idx;
}
    619e:	df 91       	pop	r29
    61a0:	cf 91       	pop	r28
    61a2:	0f 91       	pop	r16
    61a4:	08 95       	ret

000061a6 <saveDataBuf>:

static void saveDataBuf(osjob_t* j)
{
    61a6:	0f 93       	push	r16
	uint8_t i = 0;
	uint8_t sep = ',';
	memset(data_gps.num_satelites, 0, SATELITE_BUF);
    61a8:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <data_gps+0x17>
    61ac:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <data_gps+0x16>
	memset(data_gps.longitude, 0, LONGITUDE_BUF);
    61b0:	87 e0       	ldi	r24, 0x07	; 7
    61b2:	e4 ea       	ldi	r30, 0xA4	; 164
    61b4:	f2 e0       	ldi	r31, 0x02	; 2
    61b6:	df 01       	movw	r26, r30
    61b8:	1d 92       	st	X+, r1
    61ba:	8a 95       	dec	r24
    61bc:	e9 f7       	brne	.-6      	; 0x61b8 <saveDataBuf+0x12>
	memset(data_gps.latitude, 0, LATITUDE_BUF);
    61be:	86 e0       	ldi	r24, 0x06	; 6
    61c0:	ee e9       	ldi	r30, 0x9E	; 158
    61c2:	f2 e0       	ldi	r31, 0x02	; 2
    61c4:	df 01       	movw	r26, r30
    61c6:	1d 92       	st	X+, r1
    61c8:	8a 95       	dec	r24
    61ca:	e9 f7       	brne	.-6      	; 0x61c6 <saveDataBuf+0x20>
	data_gps.dir_latit = 0;
    61cc:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <data_gps+0x13>
	data_gps.dir_longit = 0;
    61d0:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <data_gps+0x14>
	data_gps.quality = 0;
    61d4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <data_gps+0x15>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    61d8:	20 e0       	ldi	r18, 0x00	; 0
    61da:	44 e6       	ldi	r20, 0x64	; 100
    61dc:	6c e2       	ldi	r22, 0x2C	; 44
    61de:	72 e0       	ldi	r23, 0x02	; 2
    61e0:	8c e2       	ldi	r24, 0x2C	; 44
    61e2:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	i = copy_buf(buf_rx, i, sep, (uint8_t*)&data_gps.time, TIME_BUF);
    61e6:	06 e0       	ldi	r16, 0x06	; 6
    61e8:	28 e9       	ldi	r18, 0x98	; 152
    61ea:	32 e0       	ldi	r19, 0x02	; 2
    61ec:	4c e2       	ldi	r20, 0x2C	; 44
    61ee:	68 2f       	mov	r22, r24
    61f0:	8c e2       	ldi	r24, 0x2C	; 44
    61f2:	92 e0       	ldi	r25, 0x02	; 2
    61f4:	0e 94 b2 30 	call	0x6164	; 0x6164 <copy_buf>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    61f8:	28 2f       	mov	r18, r24
    61fa:	44 e6       	ldi	r20, 0x64	; 100
    61fc:	6c e2       	ldi	r22, 0x2C	; 44
    61fe:	72 e0       	ldi	r23, 0x02	; 2
    6200:	8c e2       	ldi	r24, 0x2C	; 44
    6202:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	i = copy_buf(buf_rx, i, sep, (uint8_t*)&data_gps.latitude, LATITUDE_BUF);
    6206:	2e e9       	ldi	r18, 0x9E	; 158
    6208:	32 e0       	ldi	r19, 0x02	; 2
    620a:	4c e2       	ldi	r20, 0x2C	; 44
    620c:	68 2f       	mov	r22, r24
    620e:	8c e2       	ldi	r24, 0x2C	; 44
    6210:	92 e0       	ldi	r25, 0x02	; 2
    6212:	0e 94 b2 30 	call	0x6164	; 0x6164 <copy_buf>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    6216:	28 2f       	mov	r18, r24
    6218:	44 e6       	ldi	r20, 0x64	; 100
    621a:	6c e2       	ldi	r22, 0x2C	; 44
    621c:	72 e0       	ldi	r23, 0x02	; 2
    621e:	8c e2       	ldi	r24, 0x2C	; 44
    6220:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	if(buf_rx[i] != sep) data_gps.dir_latit = buf_rx[i];
    6224:	e8 2f       	mov	r30, r24
    6226:	f0 e0       	ldi	r31, 0x00	; 0
    6228:	e4 5d       	subi	r30, 0xD4	; 212
    622a:	fd 4f       	sbci	r31, 0xFD	; 253
    622c:	90 81       	ld	r25, Z
    622e:	9c 32       	cpi	r25, 0x2C	; 44
    6230:	11 f0       	breq	.+4      	; 0x6236 <saveDataBuf+0x90>
    6232:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <data_gps+0x13>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    6236:	28 2f       	mov	r18, r24
    6238:	44 e6       	ldi	r20, 0x64	; 100
    623a:	6c e2       	ldi	r22, 0x2C	; 44
    623c:	72 e0       	ldi	r23, 0x02	; 2
    623e:	8c e2       	ldi	r24, 0x2C	; 44
    6240:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	i = copy_buf(buf_rx, i, sep, (uint8_t*)&data_gps.longitude, LONGITUDE_BUF);
    6244:	07 e0       	ldi	r16, 0x07	; 7
    6246:	24 ea       	ldi	r18, 0xA4	; 164
    6248:	32 e0       	ldi	r19, 0x02	; 2
    624a:	4c e2       	ldi	r20, 0x2C	; 44
    624c:	68 2f       	mov	r22, r24
    624e:	8c e2       	ldi	r24, 0x2C	; 44
    6250:	92 e0       	ldi	r25, 0x02	; 2
    6252:	0e 94 b2 30 	call	0x6164	; 0x6164 <copy_buf>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    6256:	28 2f       	mov	r18, r24
    6258:	44 e6       	ldi	r20, 0x64	; 100
    625a:	6c e2       	ldi	r22, 0x2C	; 44
    625c:	72 e0       	ldi	r23, 0x02	; 2
    625e:	8c e2       	ldi	r24, 0x2C	; 44
    6260:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	if(buf_rx[i] != sep) data_gps.dir_longit = buf_rx[i];
    6264:	e8 2f       	mov	r30, r24
    6266:	f0 e0       	ldi	r31, 0x00	; 0
    6268:	e4 5d       	subi	r30, 0xD4	; 212
    626a:	fd 4f       	sbci	r31, 0xFD	; 253
    626c:	90 81       	ld	r25, Z
    626e:	9c 32       	cpi	r25, 0x2C	; 44
    6270:	11 f0       	breq	.+4      	; 0x6276 <saveDataBuf+0xd0>
    6272:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <data_gps+0x14>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    6276:	28 2f       	mov	r18, r24
    6278:	44 e6       	ldi	r20, 0x64	; 100
    627a:	6c e2       	ldi	r22, 0x2C	; 44
    627c:	72 e0       	ldi	r23, 0x02	; 2
    627e:	8c e2       	ldi	r24, 0x2C	; 44
    6280:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	if(buf_rx[i] != sep) data_gps.quality = buf_rx[i] & 0x0F;
    6284:	e8 2f       	mov	r30, r24
    6286:	f0 e0       	ldi	r31, 0x00	; 0
    6288:	e4 5d       	subi	r30, 0xD4	; 212
    628a:	fd 4f       	sbci	r31, 0xFD	; 253
    628c:	90 81       	ld	r25, Z
    628e:	9c 32       	cpi	r25, 0x2C	; 44
    6290:	19 f0       	breq	.+6      	; 0x6298 <saveDataBuf+0xf2>
    6292:	9f 70       	andi	r25, 0x0F	; 15
    6294:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <data_gps+0x15>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    6298:	28 2f       	mov	r18, r24
    629a:	44 e6       	ldi	r20, 0x64	; 100
    629c:	6c e2       	ldi	r22, 0x2C	; 44
    629e:	72 e0       	ldi	r23, 0x02	; 2
    62a0:	8c e2       	ldi	r24, 0x2C	; 44
    62a2:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	i = copy_buf(buf_rx, i, sep, (uint8_t*)&data_gps.num_satelites, SATELITE_BUF);
    62a6:	02 e0       	ldi	r16, 0x02	; 2
    62a8:	2e ea       	ldi	r18, 0xAE	; 174
    62aa:	32 e0       	ldi	r19, 0x02	; 2
    62ac:	4c e2       	ldi	r20, 0x2C	; 44
    62ae:	68 2f       	mov	r22, r24
    62b0:	8c e2       	ldi	r24, 0x2C	; 44
    62b2:	92 e0       	ldi	r25, 0x02	; 2
    62b4:	0e 94 b2 30 	call	0x6164	; 0x6164 <copy_buf>
	i = search_sep(sep, buf_rx, RX_BUF, i);
    62b8:	28 2f       	mov	r18, r24
    62ba:	44 e6       	ldi	r20, 0x64	; 100
    62bc:	6c e2       	ldi	r22, 0x2C	; 44
    62be:	72 e0       	ldi	r23, 0x02	; 2
    62c0:	8c e2       	ldi	r24, 0x2C	; 44
    62c2:	0e 94 a4 30 	call	0x6148	; 0x6148 <search_sep>
	i = copy_buf(buf_rx, i, sep, (uint8_t*)&data_gps.height, HEIGHT_BUF);
    62c6:	04 e0       	ldi	r16, 0x04	; 4
    62c8:	20 eb       	ldi	r18, 0xB0	; 176
    62ca:	32 e0       	ldi	r19, 0x02	; 2
    62cc:	4c e2       	ldi	r20, 0x2C	; 44
    62ce:	68 2f       	mov	r22, r24
    62d0:	8c e2       	ldi	r24, 0x2C	; 44
    62d2:	92 e0       	ldi	r25, 0x02	; 2
    62d4:	0e 94 b2 30 	call	0x6164	; 0x6164 <copy_buf>
	UCSR0B |= (1 << RXCIE0);
    62d8:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    62dc:	80 68       	ori	r24, 0x80	; 128
    62de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
}
    62e2:	0f 91       	pop	r16
    62e4:	08 95       	ret

000062e6 <__vector_18>:

ISR(USART_RX_vect)
{
    62e6:	1f 92       	push	r1
    62e8:	0f 92       	push	r0
    62ea:	0f b6       	in	r0, 0x3f	; 63
    62ec:	0f 92       	push	r0
    62ee:	11 24       	eor	r1, r1
    62f0:	2f 93       	push	r18
    62f2:	3f 93       	push	r19
    62f4:	4f 93       	push	r20
    62f6:	5f 93       	push	r21
    62f8:	6f 93       	push	r22
    62fa:	7f 93       	push	r23
    62fc:	8f 93       	push	r24
    62fe:	9f 93       	push	r25
    6300:	af 93       	push	r26
    6302:	bf 93       	push	r27
    6304:	ef 93       	push	r30
    6306:	ff 93       	push	r31
	uint8_t ch = UDR0;
    6308:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	buf_rx[ind] = ch;
    630c:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <ind>
    6310:	f0 e0       	ldi	r31, 0x00	; 0
    6312:	e4 5d       	subi	r30, 0xD4	; 212
    6314:	fd 4f       	sbci	r31, 0xFD	; 253
    6316:	80 83       	st	Z, r24
	if (ind < 6) 
    6318:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ind>
    631c:	86 30       	cpi	r24, 0x06	; 6
    631e:	a8 f4       	brcc	.+42     	; 0x634a <__vector_18+0x64>
	{
		if (buf_rx[ind] != "$GPGGA"[ind]) 
    6320:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <ind>
    6324:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <ind>
    6328:	b0 e0       	ldi	r27, 0x00	; 0
    632a:	a4 5d       	subi	r26, 0xD4	; 212
    632c:	bd 4f       	sbci	r27, 0xFD	; 253
    632e:	2c 91       	ld	r18, X
    6330:	30 e0       	ldi	r19, 0x00	; 0
    6332:	f0 e0       	ldi	r31, 0x00	; 0
    6334:	ef 50       	subi	r30, 0x0F	; 15
    6336:	fe 4f       	sbci	r31, 0xFE	; 254
    6338:	80 81       	ld	r24, Z
    633a:	08 2e       	mov	r0, r24
    633c:	00 0c       	add	r0, r0
    633e:	99 0b       	sbc	r25, r25
    6340:	28 17       	cp	r18, r24
    6342:	39 07       	cpc	r19, r25
    6344:	11 f0       	breq	.+4      	; 0x634a <__vector_18+0x64>
			ind = 0;
    6346:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ind>
	}
	if (ind >= 50 || buf_rx[ind] == '\r' || buf_rx[ind] == '\n') 
    634a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ind>
    634e:	82 33       	cpi	r24, 0x32	; 50
    6350:	80 f4       	brcc	.+32     	; 0x6372 <__vector_18+0x8c>
    6352:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <ind>
    6356:	f0 e0       	ldi	r31, 0x00	; 0
    6358:	e4 5d       	subi	r30, 0xD4	; 212
    635a:	fd 4f       	sbci	r31, 0xFD	; 253
    635c:	80 81       	ld	r24, Z
    635e:	8d 30       	cpi	r24, 0x0D	; 13
    6360:	41 f0       	breq	.+16     	; 0x6372 <__vector_18+0x8c>
    6362:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <ind>
    6366:	f0 e0       	ldi	r31, 0x00	; 0
    6368:	e4 5d       	subi	r30, 0xD4	; 212
    636a:	fd 4f       	sbci	r31, 0xFD	; 253
    636c:	80 81       	ld	r24, Z
    636e:	8a 30       	cpi	r24, 0x0A	; 10
    6370:	69 f4       	brne	.+26     	; 0x638c <__vector_18+0xa6>
	{
		ind = 0;
    6372:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ind>
		UCSR0B &= ~(1 << RXCIE0);
    6376:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    637a:	8f 77       	andi	r24, 0x7F	; 127
    637c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		os_setCallback(&savedata, saveDataBuf);
    6380:	63 ed       	ldi	r22, 0xD3	; 211
    6382:	70 e3       	ldi	r23, 0x30	; 48
    6384:	84 e1       	ldi	r24, 0x14	; 20
    6386:	95 e0       	ldi	r25, 0x05	; 5
    6388:	0e 94 0f 0b 	call	0x161e	; 0x161e <os_setCallback>
	}
	ind++;
    638c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ind>
    6390:	8f 5f       	subi	r24, 0xFF	; 255
    6392:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ind>
	if(ind >= 99) ind = 0;
    6396:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ind>
    639a:	83 36       	cpi	r24, 0x63	; 99
    639c:	10 f0       	brcs	.+4      	; 0x63a2 <__vector_18+0xbc>
    639e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <ind>
}
    63a2:	ff 91       	pop	r31
    63a4:	ef 91       	pop	r30
    63a6:	bf 91       	pop	r27
    63a8:	af 91       	pop	r26
    63aa:	9f 91       	pop	r25
    63ac:	8f 91       	pop	r24
    63ae:	7f 91       	pop	r23
    63b0:	6f 91       	pop	r22
    63b2:	5f 91       	pop	r21
    63b4:	4f 91       	pop	r20
    63b6:	3f 91       	pop	r19
    63b8:	2f 91       	pop	r18
    63ba:	0f 90       	pop	r0
    63bc:	0f be       	out	0x3f, r0	; 63
    63be:	0f 90       	pop	r0
    63c0:	1f 90       	pop	r1
    63c2:	18 95       	reti

000063c4 <__udivmodqi4>:
    63c4:	99 1b       	sub	r25, r25
    63c6:	79 e0       	ldi	r23, 0x09	; 9
    63c8:	04 c0       	rjmp	.+8      	; 0x63d2 <__udivmodqi4_ep>

000063ca <__udivmodqi4_loop>:
    63ca:	99 1f       	adc	r25, r25
    63cc:	96 17       	cp	r25, r22
    63ce:	08 f0       	brcs	.+2      	; 0x63d2 <__udivmodqi4_ep>
    63d0:	96 1b       	sub	r25, r22

000063d2 <__udivmodqi4_ep>:
    63d2:	88 1f       	adc	r24, r24
    63d4:	7a 95       	dec	r23
    63d6:	c9 f7       	brne	.-14     	; 0x63ca <__udivmodqi4_loop>
    63d8:	80 95       	com	r24
    63da:	08 95       	ret

000063dc <__udivmodhi4>:
    63dc:	aa 1b       	sub	r26, r26
    63de:	bb 1b       	sub	r27, r27
    63e0:	51 e1       	ldi	r21, 0x11	; 17
    63e2:	07 c0       	rjmp	.+14     	; 0x63f2 <__udivmodhi4_ep>

000063e4 <__udivmodhi4_loop>:
    63e4:	aa 1f       	adc	r26, r26
    63e6:	bb 1f       	adc	r27, r27
    63e8:	a6 17       	cp	r26, r22
    63ea:	b7 07       	cpc	r27, r23
    63ec:	10 f0       	brcs	.+4      	; 0x63f2 <__udivmodhi4_ep>
    63ee:	a6 1b       	sub	r26, r22
    63f0:	b7 0b       	sbc	r27, r23

000063f2 <__udivmodhi4_ep>:
    63f2:	88 1f       	adc	r24, r24
    63f4:	99 1f       	adc	r25, r25
    63f6:	5a 95       	dec	r21
    63f8:	a9 f7       	brne	.-22     	; 0x63e4 <__udivmodhi4_loop>
    63fa:	80 95       	com	r24
    63fc:	90 95       	com	r25
    63fe:	bc 01       	movw	r22, r24
    6400:	cd 01       	movw	r24, r26
    6402:	08 95       	ret

00006404 <__divmodhi4>:
    6404:	97 fb       	bst	r25, 7
    6406:	07 2e       	mov	r0, r23
    6408:	16 f4       	brtc	.+4      	; 0x640e <__divmodhi4+0xa>
    640a:	00 94       	com	r0
    640c:	07 d0       	rcall	.+14     	; 0x641c <__divmodhi4_neg1>
    640e:	77 fd       	sbrc	r23, 7
    6410:	09 d0       	rcall	.+18     	; 0x6424 <__divmodhi4_neg2>
    6412:	0e 94 ee 31 	call	0x63dc	; 0x63dc <__udivmodhi4>
    6416:	07 fc       	sbrc	r0, 7
    6418:	05 d0       	rcall	.+10     	; 0x6424 <__divmodhi4_neg2>
    641a:	3e f4       	brtc	.+14     	; 0x642a <__divmodhi4_exit>

0000641c <__divmodhi4_neg1>:
    641c:	90 95       	com	r25
    641e:	81 95       	neg	r24
    6420:	9f 4f       	sbci	r25, 0xFF	; 255
    6422:	08 95       	ret

00006424 <__divmodhi4_neg2>:
    6424:	70 95       	com	r23
    6426:	61 95       	neg	r22
    6428:	7f 4f       	sbci	r23, 0xFF	; 255

0000642a <__divmodhi4_exit>:
    642a:	08 95       	ret

0000642c <__divmodsi4>:
    642c:	05 2e       	mov	r0, r21
    642e:	97 fb       	bst	r25, 7
    6430:	1e f4       	brtc	.+6      	; 0x6438 <__divmodsi4+0xc>
    6432:	00 94       	com	r0
    6434:	0e 94 2d 32 	call	0x645a	; 0x645a <__negsi2>
    6438:	57 fd       	sbrc	r21, 7
    643a:	07 d0       	rcall	.+14     	; 0x644a <__divmodsi4_neg2>
    643c:	0e 94 fd 33 	call	0x67fa	; 0x67fa <__udivmodsi4>
    6440:	07 fc       	sbrc	r0, 7
    6442:	03 d0       	rcall	.+6      	; 0x644a <__divmodsi4_neg2>
    6444:	4e f4       	brtc	.+18     	; 0x6458 <__divmodsi4_exit>
    6446:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__negsi2>

0000644a <__divmodsi4_neg2>:
    644a:	50 95       	com	r21
    644c:	40 95       	com	r20
    644e:	30 95       	com	r19
    6450:	21 95       	neg	r18
    6452:	3f 4f       	sbci	r19, 0xFF	; 255
    6454:	4f 4f       	sbci	r20, 0xFF	; 255
    6456:	5f 4f       	sbci	r21, 0xFF	; 255

00006458 <__divmodsi4_exit>:
    6458:	08 95       	ret

0000645a <__negsi2>:
    645a:	90 95       	com	r25
    645c:	80 95       	com	r24
    645e:	70 95       	com	r23
    6460:	61 95       	neg	r22
    6462:	7f 4f       	sbci	r23, 0xFF	; 255
    6464:	8f 4f       	sbci	r24, 0xFF	; 255
    6466:	9f 4f       	sbci	r25, 0xFF	; 255
    6468:	08 95       	ret

0000646a <__tablejump2__>:
    646a:	ee 0f       	add	r30, r30
    646c:	ff 1f       	adc	r31, r31
    646e:	05 90       	lpm	r0, Z+
    6470:	f4 91       	lpm	r31, Z
    6472:	e0 2d       	mov	r30, r0
    6474:	09 94       	ijmp

00006476 <__bswapsi2>:
    6476:	69 27       	eor	r22, r25
    6478:	96 27       	eor	r25, r22
    647a:	69 27       	eor	r22, r25
    647c:	78 27       	eor	r23, r24
    647e:	87 27       	eor	r24, r23
    6480:	78 27       	eor	r23, r24
    6482:	08 95       	ret

00006484 <__umulhisi3>:
    6484:	a2 9f       	mul	r26, r18
    6486:	b0 01       	movw	r22, r0
    6488:	b3 9f       	mul	r27, r19
    648a:	c0 01       	movw	r24, r0
    648c:	a3 9f       	mul	r26, r19
    648e:	70 0d       	add	r23, r0
    6490:	81 1d       	adc	r24, r1
    6492:	11 24       	eor	r1, r1
    6494:	91 1d       	adc	r25, r1
    6496:	b2 9f       	mul	r27, r18
    6498:	70 0d       	add	r23, r0
    649a:	81 1d       	adc	r24, r1
    649c:	11 24       	eor	r1, r1
    649e:	91 1d       	adc	r25, r1
    64a0:	08 95       	ret

000064a2 <__usmulhisi3>:
    64a2:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>

000064a6 <__usmulhisi3_tail>:
    64a6:	b7 ff       	sbrs	r27, 7
    64a8:	08 95       	ret
    64aa:	82 1b       	sub	r24, r18
    64ac:	93 0b       	sbc	r25, r19
    64ae:	08 95       	ret

000064b0 <__muluhisi3>:
    64b0:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    64b4:	a5 9f       	mul	r26, r21
    64b6:	90 0d       	add	r25, r0
    64b8:	b4 9f       	mul	r27, r20
    64ba:	90 0d       	add	r25, r0
    64bc:	a4 9f       	mul	r26, r20
    64be:	80 0d       	add	r24, r0
    64c0:	91 1d       	adc	r25, r1
    64c2:	11 24       	eor	r1, r1
    64c4:	08 95       	ret

000064c6 <__mulshisi3>:
    64c6:	b7 ff       	sbrs	r27, 7
    64c8:	0c 94 58 32 	jmp	0x64b0	; 0x64b0 <__muluhisi3>

000064cc <__mulohisi3>:
    64cc:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__muluhisi3>
    64d0:	82 1b       	sub	r24, r18
    64d2:	93 0b       	sbc	r25, r19
    64d4:	08 95       	ret

000064d6 <__muldi3>:
    64d6:	df 93       	push	r29
    64d8:	cf 93       	push	r28
    64da:	1f 93       	push	r17
    64dc:	0f 93       	push	r16
    64de:	9a 9d       	mul	r25, r10
    64e0:	f0 2d       	mov	r31, r0
    64e2:	21 9f       	mul	r18, r17
    64e4:	f0 0d       	add	r31, r0
    64e6:	8b 9d       	mul	r24, r11
    64e8:	f0 0d       	add	r31, r0
    64ea:	8a 9d       	mul	r24, r10
    64ec:	e0 2d       	mov	r30, r0
    64ee:	f1 0d       	add	r31, r1
    64f0:	03 9f       	mul	r16, r19
    64f2:	f0 0d       	add	r31, r0
    64f4:	02 9f       	mul	r16, r18
    64f6:	e0 0d       	add	r30, r0
    64f8:	f1 1d       	adc	r31, r1
    64fa:	4e 9d       	mul	r20, r14
    64fc:	e0 0d       	add	r30, r0
    64fe:	f1 1d       	adc	r31, r1
    6500:	5e 9d       	mul	r21, r14
    6502:	f0 0d       	add	r31, r0
    6504:	4f 9d       	mul	r20, r15
    6506:	f0 0d       	add	r31, r0
    6508:	7f 93       	push	r23
    650a:	6f 93       	push	r22
    650c:	bf 92       	push	r11
    650e:	af 92       	push	r10
    6510:	5f 93       	push	r21
    6512:	4f 93       	push	r20
    6514:	d5 01       	movw	r26, r10
    6516:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    651a:	8b 01       	movw	r16, r22
    651c:	ac 01       	movw	r20, r24
    651e:	d7 01       	movw	r26, r14
    6520:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    6524:	eb 01       	movw	r28, r22
    6526:	e8 0f       	add	r30, r24
    6528:	f9 1f       	adc	r31, r25
    652a:	d6 01       	movw	r26, r12
    652c:	0e 94 bb 32 	call	0x6576	; 0x6576 <__muldi3_6>
    6530:	2f 91       	pop	r18
    6532:	3f 91       	pop	r19
    6534:	d6 01       	movw	r26, r12
    6536:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    653a:	c6 0f       	add	r28, r22
    653c:	d7 1f       	adc	r29, r23
    653e:	e8 1f       	adc	r30, r24
    6540:	f9 1f       	adc	r31, r25
    6542:	af 91       	pop	r26
    6544:	bf 91       	pop	r27
    6546:	0e 94 bb 32 	call	0x6576	; 0x6576 <__muldi3_6>
    654a:	2f 91       	pop	r18
    654c:	3f 91       	pop	r19
    654e:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    6552:	c6 0f       	add	r28, r22
    6554:	d7 1f       	adc	r29, r23
    6556:	e8 1f       	adc	r30, r24
    6558:	f9 1f       	adc	r31, r25
    655a:	d6 01       	movw	r26, r12
    655c:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    6560:	e6 0f       	add	r30, r22
    6562:	f7 1f       	adc	r31, r23
    6564:	98 01       	movw	r18, r16
    6566:	be 01       	movw	r22, r28
    6568:	cf 01       	movw	r24, r30
    656a:	11 24       	eor	r1, r1
    656c:	0f 91       	pop	r16
    656e:	1f 91       	pop	r17
    6570:	cf 91       	pop	r28
    6572:	df 91       	pop	r29
    6574:	08 95       	ret

00006576 <__muldi3_6>:
    6576:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    657a:	46 0f       	add	r20, r22
    657c:	57 1f       	adc	r21, r23
    657e:	c8 1f       	adc	r28, r24
    6580:	d9 1f       	adc	r29, r25
    6582:	08 f4       	brcc	.+2      	; 0x6586 <__muldi3_6+0x10>
    6584:	31 96       	adiw	r30, 0x01	; 1
    6586:	08 95       	ret

00006588 <__umulsidi3>:
    6588:	e8 94       	clt

0000658a <__umulsidi3_helper>:
    658a:	df 93       	push	r29
    658c:	cf 93       	push	r28
    658e:	fc 01       	movw	r30, r24
    6590:	db 01       	movw	r26, r22
    6592:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    6596:	7f 93       	push	r23
    6598:	6f 93       	push	r22
    659a:	e9 01       	movw	r28, r18
    659c:	9a 01       	movw	r18, r20
    659e:	ac 01       	movw	r20, r24
    65a0:	bf 93       	push	r27
    65a2:	af 93       	push	r26
    65a4:	3f 93       	push	r19
    65a6:	2f 93       	push	r18
    65a8:	df 01       	movw	r26, r30
    65aa:	0e 94 42 32 	call	0x6484	; 0x6484 <__umulhisi3>
    65ae:	26 f4       	brtc	.+8      	; 0x65b8 <__umulsidi3_helper+0x2e>
    65b0:	6c 1b       	sub	r22, r28
    65b2:	7d 0b       	sbc	r23, r29
    65b4:	82 0b       	sbc	r24, r18
    65b6:	93 0b       	sbc	r25, r19
    65b8:	9e 01       	movw	r18, r28
    65ba:	eb 01       	movw	r28, r22
    65bc:	fc 01       	movw	r30, r24
    65be:	0e 94 bb 32 	call	0x6576	; 0x6576 <__muldi3_6>
    65c2:	af 91       	pop	r26
    65c4:	bf 91       	pop	r27
    65c6:	2f 91       	pop	r18
    65c8:	3f 91       	pop	r19
    65ca:	0e 94 bb 32 	call	0x6576	; 0x6576 <__muldi3_6>
    65ce:	be 01       	movw	r22, r28
    65d0:	cf 01       	movw	r24, r30
    65d2:	f9 01       	movw	r30, r18
    65d4:	2f 91       	pop	r18
    65d6:	3f 91       	pop	r19
    65d8:	cf 91       	pop	r28
    65da:	df 91       	pop	r29
    65dc:	08 95       	ret

000065de <__moddi3>:
    65de:	68 94       	set
    65e0:	01 c0       	rjmp	.+2      	; 0x65e4 <__divdi3_moddi3>

000065e2 <__divdi3>:
    65e2:	e8 94       	clt

000065e4 <__divdi3_moddi3>:
    65e4:	f9 2f       	mov	r31, r25
    65e6:	f1 2b       	or	r31, r17
    65e8:	12 f0       	brmi	.+4      	; 0x65ee <__divdi3_moddi3+0xa>
    65ea:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__udivdi3_umoddi3>
    65ee:	a0 e0       	ldi	r26, 0x00	; 0
    65f0:	b0 e0       	ldi	r27, 0x00	; 0
    65f2:	ed ef       	ldi	r30, 0xFD	; 253
    65f4:	f2 e3       	ldi	r31, 0x32	; 50
    65f6:	0c 94 95 33 	jmp	0x672a	; 0x672a <__prologue_saves__+0xc>
    65fa:	09 2e       	mov	r0, r25
    65fc:	05 94       	asr	r0
    65fe:	22 f4       	brpl	.+8      	; 0x6608 <__divdi3_moddi3+0x24>
    6600:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__negdi2>
    6604:	11 23       	and	r17, r17
    6606:	92 f4       	brpl	.+36     	; 0x662c <__divdi3_moddi3+0x48>
    6608:	f0 e8       	ldi	r31, 0x80	; 128
    660a:	0f 26       	eor	r0, r31
    660c:	ff ef       	ldi	r31, 0xFF	; 255
    660e:	e0 94       	com	r14
    6610:	f0 94       	com	r15
    6612:	00 95       	com	r16
    6614:	10 95       	com	r17
    6616:	b0 94       	com	r11
    6618:	c0 94       	com	r12
    661a:	d0 94       	com	r13
    661c:	a1 94       	neg	r10
    661e:	bf 0a       	sbc	r11, r31
    6620:	cf 0a       	sbc	r12, r31
    6622:	df 0a       	sbc	r13, r31
    6624:	ef 0a       	sbc	r14, r31
    6626:	ff 0a       	sbc	r15, r31
    6628:	0f 0b       	sbc	r16, r31
    662a:	1f 0b       	sbc	r17, r31
    662c:	0e 94 2e 33 	call	0x665c	; 0x665c <__udivmod64>
    6630:	07 fc       	sbrc	r0, 7
    6632:	0e 94 7f 33 	call	0x66fe	; 0x66fe <__negdi2>
    6636:	cd b7       	in	r28, 0x3d	; 61
    6638:	de b7       	in	r29, 0x3e	; 62
    663a:	ec e0       	ldi	r30, 0x0C	; 12
    663c:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <__epilogue_restores__+0xc>

00006640 <__umoddi3>:
    6640:	68 94       	set
    6642:	01 c0       	rjmp	.+2      	; 0x6646 <__udivdi3_umoddi3>

00006644 <__udivdi3>:
    6644:	e8 94       	clt

00006646 <__udivdi3_umoddi3>:
    6646:	8f 92       	push	r8
    6648:	9f 92       	push	r9
    664a:	cf 93       	push	r28
    664c:	df 93       	push	r29
    664e:	0e 94 2e 33 	call	0x665c	; 0x665c <__udivmod64>
    6652:	df 91       	pop	r29
    6654:	cf 91       	pop	r28
    6656:	9f 90       	pop	r9
    6658:	8f 90       	pop	r8
    665a:	08 95       	ret

0000665c <__udivmod64>:
    665c:	88 24       	eor	r8, r8
    665e:	99 24       	eor	r9, r9
    6660:	f4 01       	movw	r30, r8
    6662:	e4 01       	movw	r28, r8
    6664:	b0 e4       	ldi	r27, 0x40	; 64
    6666:	9f 93       	push	r25
    6668:	aa 27       	eor	r26, r26
    666a:	9a 15       	cp	r25, r10
    666c:	8b 04       	cpc	r8, r11
    666e:	9c 04       	cpc	r9, r12
    6670:	ed 05       	cpc	r30, r13
    6672:	fe 05       	cpc	r31, r14
    6674:	cf 05       	cpc	r28, r15
    6676:	d0 07       	cpc	r29, r16
    6678:	a1 07       	cpc	r26, r17
    667a:	98 f4       	brcc	.+38     	; 0x66a2 <__udivmod64+0x46>
    667c:	ad 2f       	mov	r26, r29
    667e:	dc 2f       	mov	r29, r28
    6680:	cf 2f       	mov	r28, r31
    6682:	fe 2f       	mov	r31, r30
    6684:	e9 2d       	mov	r30, r9
    6686:	98 2c       	mov	r9, r8
    6688:	89 2e       	mov	r8, r25
    668a:	98 2f       	mov	r25, r24
    668c:	87 2f       	mov	r24, r23
    668e:	76 2f       	mov	r23, r22
    6690:	65 2f       	mov	r22, r21
    6692:	54 2f       	mov	r21, r20
    6694:	43 2f       	mov	r20, r19
    6696:	32 2f       	mov	r19, r18
    6698:	22 27       	eor	r18, r18
    669a:	b8 50       	subi	r27, 0x08	; 8
    669c:	31 f7       	brne	.-52     	; 0x666a <__udivmod64+0xe>
    669e:	bf 91       	pop	r27
    66a0:	27 c0       	rjmp	.+78     	; 0x66f0 <__udivmod64+0x94>
    66a2:	1b 2e       	mov	r1, r27
    66a4:	bf 91       	pop	r27
    66a6:	bb 27       	eor	r27, r27
    66a8:	22 0f       	add	r18, r18
    66aa:	33 1f       	adc	r19, r19
    66ac:	44 1f       	adc	r20, r20
    66ae:	55 1f       	adc	r21, r21
    66b0:	66 1f       	adc	r22, r22
    66b2:	77 1f       	adc	r23, r23
    66b4:	88 1f       	adc	r24, r24
    66b6:	99 1f       	adc	r25, r25
    66b8:	88 1c       	adc	r8, r8
    66ba:	99 1c       	adc	r9, r9
    66bc:	ee 1f       	adc	r30, r30
    66be:	ff 1f       	adc	r31, r31
    66c0:	cc 1f       	adc	r28, r28
    66c2:	dd 1f       	adc	r29, r29
    66c4:	aa 1f       	adc	r26, r26
    66c6:	bb 1f       	adc	r27, r27
    66c8:	8a 14       	cp	r8, r10
    66ca:	9b 04       	cpc	r9, r11
    66cc:	ec 05       	cpc	r30, r12
    66ce:	fd 05       	cpc	r31, r13
    66d0:	ce 05       	cpc	r28, r14
    66d2:	df 05       	cpc	r29, r15
    66d4:	a0 07       	cpc	r26, r16
    66d6:	b1 07       	cpc	r27, r17
    66d8:	48 f0       	brcs	.+18     	; 0x66ec <__udivmod64+0x90>
    66da:	8a 18       	sub	r8, r10
    66dc:	9b 08       	sbc	r9, r11
    66de:	ec 09       	sbc	r30, r12
    66e0:	fd 09       	sbc	r31, r13
    66e2:	ce 09       	sbc	r28, r14
    66e4:	df 09       	sbc	r29, r15
    66e6:	a0 0b       	sbc	r26, r16
    66e8:	b1 0b       	sbc	r27, r17
    66ea:	21 60       	ori	r18, 0x01	; 1
    66ec:	1a 94       	dec	r1
    66ee:	e1 f6       	brne	.-72     	; 0x66a8 <__udivmod64+0x4c>
    66f0:	2e f4       	brtc	.+10     	; 0x66fc <__udivmod64+0xa0>
    66f2:	94 01       	movw	r18, r8
    66f4:	af 01       	movw	r20, r30
    66f6:	be 01       	movw	r22, r28
    66f8:	cd 01       	movw	r24, r26
    66fa:	00 0c       	add	r0, r0
    66fc:	08 95       	ret

000066fe <__negdi2>:
    66fe:	60 95       	com	r22
    6700:	70 95       	com	r23
    6702:	80 95       	com	r24
    6704:	90 95       	com	r25
    6706:	30 95       	com	r19
    6708:	40 95       	com	r20
    670a:	50 95       	com	r21
    670c:	21 95       	neg	r18
    670e:	3f 4f       	sbci	r19, 0xFF	; 255
    6710:	4f 4f       	sbci	r20, 0xFF	; 255
    6712:	5f 4f       	sbci	r21, 0xFF	; 255
    6714:	6f 4f       	sbci	r22, 0xFF	; 255
    6716:	7f 4f       	sbci	r23, 0xFF	; 255
    6718:	8f 4f       	sbci	r24, 0xFF	; 255
    671a:	9f 4f       	sbci	r25, 0xFF	; 255
    671c:	08 95       	ret

0000671e <__prologue_saves__>:
    671e:	2f 92       	push	r2
    6720:	3f 92       	push	r3
    6722:	4f 92       	push	r4
    6724:	5f 92       	push	r5
    6726:	6f 92       	push	r6
    6728:	7f 92       	push	r7
    672a:	8f 92       	push	r8
    672c:	9f 92       	push	r9
    672e:	af 92       	push	r10
    6730:	bf 92       	push	r11
    6732:	cf 92       	push	r12
    6734:	df 92       	push	r13
    6736:	ef 92       	push	r14
    6738:	ff 92       	push	r15
    673a:	0f 93       	push	r16
    673c:	1f 93       	push	r17
    673e:	cf 93       	push	r28
    6740:	df 93       	push	r29
    6742:	cd b7       	in	r28, 0x3d	; 61
    6744:	de b7       	in	r29, 0x3e	; 62
    6746:	ca 1b       	sub	r28, r26
    6748:	db 0b       	sbc	r29, r27
    674a:	0f b6       	in	r0, 0x3f	; 63
    674c:	f8 94       	cli
    674e:	de bf       	out	0x3e, r29	; 62
    6750:	0f be       	out	0x3f, r0	; 63
    6752:	cd bf       	out	0x3d, r28	; 61
    6754:	09 94       	ijmp

00006756 <__epilogue_restores__>:
    6756:	2a 88       	ldd	r2, Y+18	; 0x12
    6758:	39 88       	ldd	r3, Y+17	; 0x11
    675a:	48 88       	ldd	r4, Y+16	; 0x10
    675c:	5f 84       	ldd	r5, Y+15	; 0x0f
    675e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6760:	7d 84       	ldd	r7, Y+13	; 0x0d
    6762:	8c 84       	ldd	r8, Y+12	; 0x0c
    6764:	9b 84       	ldd	r9, Y+11	; 0x0b
    6766:	aa 84       	ldd	r10, Y+10	; 0x0a
    6768:	b9 84       	ldd	r11, Y+9	; 0x09
    676a:	c8 84       	ldd	r12, Y+8	; 0x08
    676c:	df 80       	ldd	r13, Y+7	; 0x07
    676e:	ee 80       	ldd	r14, Y+6	; 0x06
    6770:	fd 80       	ldd	r15, Y+5	; 0x05
    6772:	0c 81       	ldd	r16, Y+4	; 0x04
    6774:	1b 81       	ldd	r17, Y+3	; 0x03
    6776:	aa 81       	ldd	r26, Y+2	; 0x02
    6778:	b9 81       	ldd	r27, Y+1	; 0x01
    677a:	ce 0f       	add	r28, r30
    677c:	d1 1d       	adc	r29, r1
    677e:	0f b6       	in	r0, 0x3f	; 63
    6780:	f8 94       	cli
    6782:	de bf       	out	0x3e, r29	; 62
    6784:	0f be       	out	0x3f, r0	; 63
    6786:	cd bf       	out	0x3d, r28	; 61
    6788:	ed 01       	movw	r28, r26
    678a:	08 95       	ret

0000678c <__ashldi3>:
    678c:	0f 93       	push	r16
    678e:	08 30       	cpi	r16, 0x08	; 8
    6790:	90 f0       	brcs	.+36     	; 0x67b6 <__ashldi3+0x2a>
    6792:	98 2f       	mov	r25, r24
    6794:	87 2f       	mov	r24, r23
    6796:	76 2f       	mov	r23, r22
    6798:	65 2f       	mov	r22, r21
    679a:	54 2f       	mov	r21, r20
    679c:	43 2f       	mov	r20, r19
    679e:	32 2f       	mov	r19, r18
    67a0:	22 27       	eor	r18, r18
    67a2:	08 50       	subi	r16, 0x08	; 8
    67a4:	f4 cf       	rjmp	.-24     	; 0x678e <__ashldi3+0x2>
    67a6:	22 0f       	add	r18, r18
    67a8:	33 1f       	adc	r19, r19
    67aa:	44 1f       	adc	r20, r20
    67ac:	55 1f       	adc	r21, r21
    67ae:	66 1f       	adc	r22, r22
    67b0:	77 1f       	adc	r23, r23
    67b2:	88 1f       	adc	r24, r24
    67b4:	99 1f       	adc	r25, r25
    67b6:	0a 95       	dec	r16
    67b8:	b2 f7       	brpl	.-20     	; 0x67a6 <__ashldi3+0x1a>
    67ba:	0f 91       	pop	r16
    67bc:	08 95       	ret

000067be <__ashrdi3>:
    67be:	97 fb       	bst	r25, 7
    67c0:	10 f8       	bld	r1, 0

000067c2 <__lshrdi3>:
    67c2:	16 94       	lsr	r1
    67c4:	00 08       	sbc	r0, r0
    67c6:	0f 93       	push	r16
    67c8:	08 30       	cpi	r16, 0x08	; 8
    67ca:	98 f0       	brcs	.+38     	; 0x67f2 <__lshrdi3+0x30>
    67cc:	08 50       	subi	r16, 0x08	; 8
    67ce:	23 2f       	mov	r18, r19
    67d0:	34 2f       	mov	r19, r20
    67d2:	45 2f       	mov	r20, r21
    67d4:	56 2f       	mov	r21, r22
    67d6:	67 2f       	mov	r22, r23
    67d8:	78 2f       	mov	r23, r24
    67da:	89 2f       	mov	r24, r25
    67dc:	90 2d       	mov	r25, r0
    67de:	f4 cf       	rjmp	.-24     	; 0x67c8 <__lshrdi3+0x6>
    67e0:	05 94       	asr	r0
    67e2:	97 95       	ror	r25
    67e4:	87 95       	ror	r24
    67e6:	77 95       	ror	r23
    67e8:	67 95       	ror	r22
    67ea:	57 95       	ror	r21
    67ec:	47 95       	ror	r20
    67ee:	37 95       	ror	r19
    67f0:	27 95       	ror	r18
    67f2:	0a 95       	dec	r16
    67f4:	aa f7       	brpl	.-22     	; 0x67e0 <__lshrdi3+0x1e>
    67f6:	0f 91       	pop	r16
    67f8:	08 95       	ret

000067fa <__udivmodsi4>:
    67fa:	a1 e2       	ldi	r26, 0x21	; 33
    67fc:	1a 2e       	mov	r1, r26
    67fe:	aa 1b       	sub	r26, r26
    6800:	bb 1b       	sub	r27, r27
    6802:	fd 01       	movw	r30, r26
    6804:	0d c0       	rjmp	.+26     	; 0x6820 <__udivmodsi4_ep>

00006806 <__udivmodsi4_loop>:
    6806:	aa 1f       	adc	r26, r26
    6808:	bb 1f       	adc	r27, r27
    680a:	ee 1f       	adc	r30, r30
    680c:	ff 1f       	adc	r31, r31
    680e:	a2 17       	cp	r26, r18
    6810:	b3 07       	cpc	r27, r19
    6812:	e4 07       	cpc	r30, r20
    6814:	f5 07       	cpc	r31, r21
    6816:	20 f0       	brcs	.+8      	; 0x6820 <__udivmodsi4_ep>
    6818:	a2 1b       	sub	r26, r18
    681a:	b3 0b       	sbc	r27, r19
    681c:	e4 0b       	sbc	r30, r20
    681e:	f5 0b       	sbc	r31, r21

00006820 <__udivmodsi4_ep>:
    6820:	66 1f       	adc	r22, r22
    6822:	77 1f       	adc	r23, r23
    6824:	88 1f       	adc	r24, r24
    6826:	99 1f       	adc	r25, r25
    6828:	1a 94       	dec	r1
    682a:	69 f7       	brne	.-38     	; 0x6806 <__udivmodsi4_loop>
    682c:	60 95       	com	r22
    682e:	70 95       	com	r23
    6830:	80 95       	com	r24
    6832:	90 95       	com	r25
    6834:	9b 01       	movw	r18, r22
    6836:	ac 01       	movw	r20, r24
    6838:	bd 01       	movw	r22, r26
    683a:	cf 01       	movw	r24, r30
    683c:	08 95       	ret

0000683e <memcpy>:
    683e:	fb 01       	movw	r30, r22
    6840:	dc 01       	movw	r26, r24
    6842:	02 c0       	rjmp	.+4      	; 0x6848 <memcpy+0xa>
    6844:	01 90       	ld	r0, Z+
    6846:	0d 92       	st	X+, r0
    6848:	41 50       	subi	r20, 0x01	; 1
    684a:	50 40       	sbci	r21, 0x00	; 0
    684c:	d8 f7       	brcc	.-10     	; 0x6844 <memcpy+0x6>
    684e:	08 95       	ret

00006850 <_exit>:
    6850:	f8 94       	cli

00006852 <__stop_program>:
    6852:	ff cf       	rjmp	.-2      	; 0x6852 <__stop_program>
